
FreeRTOS_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1d8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800e2e8  0800e2e8  0001e2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea40  0800ea40  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea40  0800ea40  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea40  0800ea40  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea40  0800ea40  0001ea40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea44  0800ea44  0001ea44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800ea48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003128  20000208  0800ec50  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003330  0800ec50  00023330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d37b  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f6c  00000000  00000000  0003d5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00041518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001748  00000000  00000000  00042dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005616  00000000  00000000  00044518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7bc  00000000  00000000  00049b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098c2a  00000000  00000000  000662ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fef14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f28  00000000  00000000  000fef64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e2d0 	.word	0x0800e2d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800e2d0 	.word	0x0800e2d0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__gesf2>:
 8000d98:	f04f 3cff 	mov.w	ip, #4294967295
 8000d9c:	e006      	b.n	8000dac <__cmpsf2+0x4>
 8000d9e:	bf00      	nop

08000da0 <__lesf2>:
 8000da0:	f04f 0c01 	mov.w	ip, #1
 8000da4:	e002      	b.n	8000dac <__cmpsf2+0x4>
 8000da6:	bf00      	nop

08000da8 <__cmpsf2>:
 8000da8:	f04f 0c01 	mov.w	ip, #1
 8000dac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000db0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000db4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dbc:	bf18      	it	ne
 8000dbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc2:	d011      	beq.n	8000de8 <__cmpsf2+0x40>
 8000dc4:	b001      	add	sp, #4
 8000dc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dca:	bf18      	it	ne
 8000dcc:	ea90 0f01 	teqne	r0, r1
 8000dd0:	bf58      	it	pl
 8000dd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dd6:	bf88      	it	hi
 8000dd8:	17c8      	asrhi	r0, r1, #31
 8000dda:	bf38      	it	cc
 8000ddc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000de0:	bf18      	it	ne
 8000de2:	f040 0001 	orrne.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	d102      	bne.n	8000df4 <__cmpsf2+0x4c>
 8000dee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000df2:	d105      	bne.n	8000e00 <__cmpsf2+0x58>
 8000df4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000df8:	d1e4      	bne.n	8000dc4 <__cmpsf2+0x1c>
 8000dfa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dfe:	d0e1      	beq.n	8000dc4 <__cmpsf2+0x1c>
 8000e00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <__aeabi_cfrcmple>:
 8000e08:	4684      	mov	ip, r0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	4661      	mov	r1, ip
 8000e0e:	e7ff      	b.n	8000e10 <__aeabi_cfcmpeq>

08000e10 <__aeabi_cfcmpeq>:
 8000e10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e12:	f7ff ffc9 	bl	8000da8 <__cmpsf2>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	bf48      	it	mi
 8000e1a:	f110 0f00 	cmnmi.w	r0, #0
 8000e1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e20 <__aeabi_fcmpeq>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff fff4 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e28:	bf0c      	ite	eq
 8000e2a:	2001      	moveq	r0, #1
 8000e2c:	2000      	movne	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmplt>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffea 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e3c:	bf34      	ite	cc
 8000e3e:	2001      	movcc	r0, #1
 8000e40:	2000      	movcs	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmple>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffe0 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpge>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffd2 	bl	8000e08 <__aeabi_cfrcmple>
 8000e64:	bf94      	ite	ls
 8000e66:	2001      	movls	r0, #1
 8000e68:	2000      	movhi	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_fcmpgt>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff ffc8 	bl	8000e08 <__aeabi_cfrcmple>
 8000e78:	bf34      	ite	cc
 8000e7a:	2001      	movcc	r0, #1
 8000e7c:	2000      	movcs	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_d2lz>:
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	4605      	mov	r5, r0
 8000e88:	460c      	mov	r4, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	4628      	mov	r0, r5
 8000e90:	4621      	mov	r1, r4
 8000e92:	f7ff fd9d 	bl	80009d0 <__aeabi_dcmplt>
 8000e96:	b928      	cbnz	r0, 8000ea4 <__aeabi_d2lz+0x20>
 8000e98:	4628      	mov	r0, r5
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ea0:	f000 b80a 	b.w	8000eb8 <__aeabi_d2ulz>
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000eaa:	f000 f805 	bl	8000eb8 <__aeabi_d2ulz>
 8000eae:	4240      	negs	r0, r0
 8000eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eb4:	bd38      	pop	{r3, r4, r5, pc}
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_d2ulz>:
 8000eb8:	b5d0      	push	{r4, r6, r7, lr}
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <__aeabi_d2ulz+0x34>)
 8000ebe:	4606      	mov	r6, r0
 8000ec0:	460f      	mov	r7, r1
 8000ec2:	f7ff fb13 	bl	80004ec <__aeabi_dmul>
 8000ec6:	f7ff fde9 	bl	8000a9c <__aeabi_d2uiz>
 8000eca:	4604      	mov	r4, r0
 8000ecc:	f7ff fa94 	bl	80003f8 <__aeabi_ui2d>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <__aeabi_d2ulz+0x38>)
 8000ed4:	f7ff fb0a 	bl	80004ec <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4630      	mov	r0, r6
 8000ede:	4639      	mov	r1, r7
 8000ee0:	f7ff f94c 	bl	800017c <__aeabi_dsub>
 8000ee4:	f7ff fdda 	bl	8000a9c <__aeabi_d2uiz>
 8000ee8:	4621      	mov	r1, r4
 8000eea:	bdd0      	pop	{r4, r6, r7, pc}
 8000eec:	3df00000 	.word	0x3df00000
 8000ef0:	41f00000 	.word	0x41f00000

08000ef4 <HAL_UART_RxCpltCallback>:

//uint8_t str[] = "hello FreeRTOS\n";
//float temp = 16;
uint8_t Rx_char;
uint8_t Rx_index = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <HAL_UART_RxCpltCallback+0x60>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d122      	bne.n	8000f4c <HAL_UART_RxCpltCallback+0x58>
		if (Rx_char == '\n') {
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_UART_RxCpltCallback+0x64>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b0a      	cmp	r3, #10
 8000f0c:	d10e      	bne.n	8000f2c <HAL_UART_RxCpltCallback+0x38>
			Rx_data[Rx_index] = '\0';
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f16:	2100      	movs	r1, #0
 8000f18:	5499      	strb	r1, [r3, r2]
			Rx_index = 0;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]

			osSemaphoreRelease(binRxRequestHandle);
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_UART_RxCpltCallback+0x70>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 fcab 	bl	8005880 <osSemaphoreRelease>
 8000f2a:	e00a      	b.n	8000f42 <HAL_UART_RxCpltCallback+0x4e>
		} else {
			Rx_data[Rx_index++] = Rx_char;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	b2d1      	uxtb	r1, r2
 8000f34:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f36:	7011      	strb	r1, [r2, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_UART_RxCpltCallback+0x64>)
 8000f3c:	7819      	ldrb	r1, [r3, #0]
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f40:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_char, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	4904      	ldr	r1, [pc, #16]	; (8000f58 <HAL_UART_RxCpltCallback+0x64>)
 8000f46:	4808      	ldr	r0, [pc, #32]	; (8000f68 <HAL_UART_RxCpltCallback+0x74>)
 8000f48:	f003 fda5 	bl	8004a96 <HAL_UART_Receive_IT>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40004400 	.word	0x40004400
 8000f58:	200003f6 	.word	0x200003f6
 8000f5c:	200003f7 	.word	0x200003f7
 8000f60:	200003c4 	.word	0x200003c4
 8000f64:	20000368 	.word	0x20000368
 8000f68:	20000308 	.word	0x20000308

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	Temp_levels[0] = DHT11_MIN_TEMPERATURE;
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <main+0x110>)
 8000f74:	22ec      	movs	r2, #236	; 0xec
 8000f76:	701a      	strb	r2, [r3, #0]
	Temp_levels[NUMBER_LEVELS] = DHT11_MAX_TEMPERATURE;
 8000f78:	4b40      	ldr	r3, [pc, #256]	; (800107c <main+0x110>)
 8000f7a:	223c      	movs	r2, #60	; 0x3c
 8000f7c:	711a      	strb	r2, [r3, #4]
	RHumi_levels[0] = DHT11_MIN_RELATIVE_HUMIDITY;
 8000f7e:	4b40      	ldr	r3, [pc, #256]	; (8001080 <main+0x114>)
 8000f80:	2205      	movs	r2, #5
 8000f82:	701a      	strb	r2, [r3, #0]
	RHumi_levels[NUMBER_LEVELS] = DHT11_MAX_RELATIVE_HUMIDITY;
 8000f84:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <main+0x114>)
 8000f86:	225f      	movs	r2, #95	; 0x5f
 8000f88:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f001 f8a9 	bl	80020e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 f8b7 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 fa17 	bl	80013c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f96:	f000 f9eb 	bl	8001370 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f9a:	f000 f8f7 	bl	800118c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000f9e:	f000 f923 	bl	80011e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa2:	f000 f96d 	bl	8001280 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4836      	ldr	r0, [pc, #216]	; (8001084 <main+0x118>)
 8000faa:	f002 fe31 	bl	8003c10 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &Rx_char, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4935      	ldr	r1, [pc, #212]	; (8001088 <main+0x11c>)
 8000fb2:	4836      	ldr	r0, [pc, #216]	; (800108c <main+0x120>)
 8000fb4:	f003 fd6f 	bl	8004a96 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_DMA(&huart2, (uint8_t *)Rx_data, RX_DATA_SIZE);

  DHT_Init(&DHT11, &htim2, DHT11_GPIO_Port, DHT11_Pin);
 8000fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fbc:	4a34      	ldr	r2, [pc, #208]	; (8001090 <main+0x124>)
 8000fbe:	4935      	ldr	r1, [pc, #212]	; (8001094 <main+0x128>)
 8000fc0:	4835      	ldr	r0, [pc, #212]	; (8001098 <main+0x12c>)
 8000fc2:	f008 f985 	bl	80092d0 <DHT_Init>
  lcd_init(&LCD, &hi2c1, LCD_ADDR_DEFAULT);
 8000fc6:	2227      	movs	r2, #39	; 0x27
 8000fc8:	4934      	ldr	r1, [pc, #208]	; (800109c <main+0x130>)
 8000fca:	4835      	ldr	r0, [pc, #212]	; (80010a0 <main+0x134>)
 8000fcc:	f007 ff8b 	bl	8008ee6 <lcd_init>
  DC_Motor_Init(&MOTOR, &htim3,TIM_CHANNEL_1, MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin);
 8000fd0:	2320      	movs	r3, #32
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <main+0x138>)
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	2310      	movs	r3, #16
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <main+0x138>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4928      	ldr	r1, [pc, #160]	; (8001084 <main+0x118>)
 8000fe2:	4831      	ldr	r0, [pc, #196]	; (80010a8 <main+0x13c>)
 8000fe4:	f007 ffc3 	bl	8008f6e <DC_Motor_Init>
  HAL_Delay(2000);
 8000fe8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fec:	f001 f8aa 	bl	8002144 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ff0:	f004 f9aa 	bl	8005348 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binReadDHTCplt */
  binReadDHTCpltHandle = osSemaphoreNew(1, 1, &binReadDHTCplt_attributes);
 8000ff4:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <main+0x140>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f004 fb3f 	bl	800567c <osSemaphoreNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a2b      	ldr	r2, [pc, #172]	; (80010b0 <main+0x144>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of binRxRequest */
  binRxRequestHandle = osSemaphoreNew(1, 1, &binRxRequest_attributes);
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <main+0x148>)
 8001006:	2101      	movs	r1, #1
 8001008:	2001      	movs	r0, #1
 800100a:	f004 fb37 	bl	800567c <osSemaphoreNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <main+0x14c>)
 8001012:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of motorQueue */
  motorQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &motorQueue_attributes);
 8001014:	4a29      	ldr	r2, [pc, #164]	; (80010bc <main+0x150>)
 8001016:	2102      	movs	r1, #2
 8001018:	2010      	movs	r0, #16
 800101a:	f004 fc89 	bl	8005930 <osMessageQueueNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <main+0x154>)
 8001022:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <main+0x158>)
 8001026:	2100      	movs	r1, #0
 8001028:	4827      	ldr	r0, [pc, #156]	; (80010c8 <main+0x15c>)
 800102a:	f004 fa1b 	bl	8005464 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a26      	ldr	r2, [pc, #152]	; (80010cc <main+0x160>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of mytTaskReadDHT */
  mytTaskReadDHTHandle = osThreadNew(StartTaskReadDHT, NULL, &mytTaskReadDHT_attributes);
 8001034:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <main+0x164>)
 8001036:	2100      	movs	r1, #0
 8001038:	4826      	ldr	r0, [pc, #152]	; (80010d4 <main+0x168>)
 800103a:	f004 fa13 	bl	8005464 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a25      	ldr	r2, [pc, #148]	; (80010d8 <main+0x16c>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of myTaskTxUart */
  myTaskTxUartHandle = osThreadNew(StartTaskTxUart, NULL, &myTaskTxUart_attributes);
 8001044:	4a25      	ldr	r2, [pc, #148]	; (80010dc <main+0x170>)
 8001046:	2100      	movs	r1, #0
 8001048:	4825      	ldr	r0, [pc, #148]	; (80010e0 <main+0x174>)
 800104a:	f004 fa0b 	bl	8005464 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <main+0x178>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of myTaskHandleUart */
  myTaskHandleUartHandle = osThreadNew(StartTaskHandleUart, NULL, &myTaskHandleUart_attributes);
 8001054:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <main+0x17c>)
 8001056:	2100      	movs	r1, #0
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <main+0x180>)
 800105a:	f004 fa03 	bl	8005464 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <main+0x184>)
 8001062:	6013      	str	r3, [r2, #0]

  /* creation of myTaskMotorControl */
  myTaskMotorControlHandle = osThreadNew(StartTaskMotorControl, NULL, &myTaskMotorControl_attributes);
 8001064:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <main+0x188>)
 8001066:	2100      	movs	r1, #0
 8001068:	4823      	ldr	r0, [pc, #140]	; (80010f8 <main+0x18c>)
 800106a:	f004 f9fb 	bl	8005464 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <main+0x190>)
 8001072:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001074:	f004 f99a 	bl	80053ac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001078:	e7fe      	b.n	8001078 <main+0x10c>
 800107a:	bf00      	nop
 800107c:	200003ac 	.word	0x200003ac
 8001080:	200003b4 	.word	0x200003b4
 8001084:	200002c0 	.word	0x200002c0
 8001088:	200003f6 	.word	0x200003f6
 800108c:	20000308 	.word	0x20000308
 8001090:	40011000 	.word	0x40011000
 8001094:	20000278 	.word	0x20000278
 8001098:	2000036c 	.word	0x2000036c
 800109c:	20000224 	.word	0x20000224
 80010a0:	20000384 	.word	0x20000384
 80010a4:	40010800 	.word	0x40010800
 80010a8:	20000390 	.word	0x20000390
 80010ac:	0800e508 	.word	0x0800e508
 80010b0:	20000364 	.word	0x20000364
 80010b4:	0800e518 	.word	0x0800e518
 80010b8:	20000368 	.word	0x20000368
 80010bc:	0800e4f0 	.word	0x0800e4f0
 80010c0:	20000360 	.word	0x20000360
 80010c4:	0800e43c 	.word	0x0800e43c
 80010c8:	080018d5 	.word	0x080018d5
 80010cc:	2000034c 	.word	0x2000034c
 80010d0:	0800e460 	.word	0x0800e460
 80010d4:	080018f9 	.word	0x080018f9
 80010d8:	20000350 	.word	0x20000350
 80010dc:	0800e484 	.word	0x0800e484
 80010e0:	08001945 	.word	0x08001945
 80010e4:	20000354 	.word	0x20000354
 80010e8:	0800e4a8 	.word	0x0800e4a8
 80010ec:	08001a3d 	.word	0x08001a3d
 80010f0:	20000358 	.word	0x20000358
 80010f4:	0800e4cc 	.word	0x0800e4cc
 80010f8:	08001aa9 	.word	0x08001aa9
 80010fc:	2000035c 	.word	0x2000035c

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b090      	sub	sp, #64	; 0x40
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	2228      	movs	r2, #40	; 0x28
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f008 fcb3 	bl	8009a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001122:	2301      	movs	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800113e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f001 ffad 	bl	80030a8 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001154:	f000 fcee 	bl	8001b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fa1a 	bl	80035ac <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800117e:	f000 fcd9 	bl	8001b34 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3740      	adds	r7, #64	; 0x40
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_I2C1_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <MX_I2C1_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_I2C1_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_I2C1_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_I2C1_Init+0x50>)
 80011ca:	f001 fb23 	bl	8002814 <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 fcae 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000224 	.word	0x20000224
 80011e0:	40005400 	.word	0x40005400
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_TIM2_Init+0x94>)
 8001206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_TIM2_Init+0x94>)
 800120e:	2247      	movs	r2, #71	; 0x47
 8001210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_TIM2_Init+0x94>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_TIM2_Init+0x94>)
 800121a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_TIM2_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_TIM2_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800122c:	4813      	ldr	r0, [pc, #76]	; (800127c <MX_TIM2_Init+0x94>)
 800122e:	f002 fb85 	bl	800393c <HAL_TIM_Base_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001238:	f000 fc7c 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	4619      	mov	r1, r3
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <MX_TIM2_Init+0x94>)
 800124a:	f002 ff49 	bl	80040e0 <HAL_TIM_ConfigClockSource>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001254:	f000 fc6e 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_TIM2_Init+0x94>)
 8001266:	f003 fac7 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001270:	f000 fc60 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000278 	.word	0x20000278

08001280 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <MX_TIM3_Init+0xe8>)
 80012b2:	4a2e      	ldr	r2, [pc, #184]	; (800136c <MX_TIM3_Init+0xec>)
 80012b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <MX_TIM3_Init+0xe8>)
 80012b8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80012bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <MX_TIM3_Init+0xe8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <MX_TIM3_Init+0xe8>)
 80012c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b26      	ldr	r3, [pc, #152]	; (8001368 <MX_TIM3_Init+0xe8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b25      	ldr	r3, [pc, #148]	; (8001368 <MX_TIM3_Init+0xe8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012d8:	4823      	ldr	r0, [pc, #140]	; (8001368 <MX_TIM3_Init+0xe8>)
 80012da:	f002 fb2f 	bl	800393c <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012e4:	f000 fc26 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f2:	4619      	mov	r1, r3
 80012f4:	481c      	ldr	r0, [pc, #112]	; (8001368 <MX_TIM3_Init+0xe8>)
 80012f6:	f002 fef3 	bl	80040e0 <HAL_TIM_ConfigClockSource>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001300:	f000 fc18 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001304:	4818      	ldr	r0, [pc, #96]	; (8001368 <MX_TIM3_Init+0xe8>)
 8001306:	f002 fc2b 	bl	8003b60 <HAL_TIM_PWM_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001310:	f000 fc10 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800131c:	f107 0320 	add.w	r3, r7, #32
 8001320:	4619      	mov	r1, r3
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <MX_TIM3_Init+0xe8>)
 8001324:	f003 fa68 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800132e:	f000 fc01 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001332:	2360      	movs	r3, #96	; 0x60
 8001334:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <MX_TIM3_Init+0xe8>)
 800134a:	f002 fe0b 	bl	8003f64 <HAL_TIM_PWM_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001354:	f000 fbee 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <MX_TIM3_Init+0xe8>)
 800135a:	f000 fca9 	bl	8001cb0 <HAL_TIM_MspPostInit>

}
 800135e:	bf00      	nop
 8001360:	3738      	adds	r7, #56	; 0x38
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200002c0 	.word	0x200002c0
 800136c:	40000400 	.word	0x40000400

08001370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_USART2_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a8:	f003 fa96 	bl	80048d8 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f000 fbbf 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000308 	.word	0x20000308
 80013c0:	40004400 	.word	0x40004400

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <MX_GPIO_Init+0xcc>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a2c      	ldr	r2, [pc, #176]	; (8001490 <MX_GPIO_Init+0xcc>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <MX_GPIO_Init+0xcc>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <MX_GPIO_Init+0xcc>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a26      	ldr	r2, [pc, #152]	; (8001490 <MX_GPIO_Init+0xcc>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <MX_GPIO_Init+0xcc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <MX_GPIO_Init+0xcc>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <MX_GPIO_Init+0xcc>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_GPIO_Init+0xcc>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_GPIO_Init+0xcc>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <MX_GPIO_Init+0xcc>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_GPIO_Init+0xcc>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143e:	4815      	ldr	r0, [pc, #84]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001440:	f001 f9cf 	bl	80027e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2130      	movs	r1, #48	; 0x30
 8001448:	4813      	ldr	r0, [pc, #76]	; (8001498 <MX_GPIO_Init+0xd4>)
 800144a:	f001 f9ca 	bl	80027e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800144e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2302      	movs	r3, #2
 800145e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4619      	mov	r1, r3
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001468:	f001 f820 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN1_Pin MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 800146c:	2330      	movs	r3, #48	; 0x30
 800146e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2302      	movs	r3, #2
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_GPIO_Init+0xd4>)
 8001484:	f001 f812 	bl	80024ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	40011000 	.word	0x40011000
 8001498:	40010800 	.word	0x40010800

0800149c <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
	ret = HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0x10);
 80014a8:	1d39      	adds	r1, r7, #4
 80014aa:	2310      	movs	r3, #16
 80014ac:	2201      	movs	r2, #1
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <__io_putchar+0x34>)
 80014b0:	f003 fa5f 	bl	8004972 <HAL_UART_Transmit>
 80014b4:	4603      	mov	r3, r0
 80014b6:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <__io_putchar+0x28>
		return -1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e000      	b.n	80014c6 <__io_putchar+0x2a>
	}
	return ch;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000308 	.word	0x20000308

080014d4 <TX_uart>:

/*
 * @note Max length of data string is TX_ARRAY_SIZE
 */
void TX_uart(UART_HandleTypeDef *huart,const char* str, ...)
{
 80014d4:	b40e      	push	{r1, r2, r3}
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b091      	sub	sp, #68	; 0x44
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  char stringArray[TX_ARRAY_SIZE];

  va_list args;
  va_start(args, str);
 80014de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014e2:	60bb      	str	r3, [r7, #8]
  vsprintf(stringArray, str, args);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00a f9c3 	bl	800b878 <vsiprintf>
  va_end(args);

  HAL_UART_Transmit(huart, (uint8_t *)stringArray, strlen(stringArray), 100);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe fe34 	bl	8000164 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f107 010c 	add.w	r1, r7, #12
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f003 fa33 	bl	8004972 <HAL_UART_Transmit>
}
 800150c:	bf00      	nop
 800150e:	3744      	adds	r7, #68	; 0x44
 8001510:	46bd      	mov	sp, r7
 8001512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001516:	b003      	add	sp, #12
 8001518:	4770      	bx	lr
	...

0800151c <speed_control>:


void speed_control() {
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
	switch (controll_mode) {
 8001522:	4b98      	ldr	r3, [pc, #608]	; (8001784 <speed_control+0x268>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3b01      	subs	r3, #1
 8001528:	2b03      	cmp	r3, #3
 800152a:	f200 81b9 	bhi.w	80018a0 <speed_control+0x384>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <speed_control+0x18>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	08001545 	.word	0x08001545
 8001538:	0800166d 	.word	0x0800166d
 800153c:	080017b7 	.word	0x080017b7
 8001540:	0800187f 	.word	0x0800187f
			case TEMPERATURE_MODE:
				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
 8001544:	4b90      	ldr	r3, [pc, #576]	; (8001788 <speed_control+0x26c>)
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	4a8f      	ldr	r2, [pc, #572]	; (8001788 <speed_control+0x26c>)
 800154a:	8991      	ldrh	r1, [r2, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f001 f947 	bl	80027e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_SET);
 8001554:	4b8c      	ldr	r3, [pc, #560]	; (8001788 <speed_control+0x26c>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a8b      	ldr	r2, [pc, #556]	; (8001788 <speed_control+0x26c>)
 800155a:	8a91      	ldrh	r1, [r2, #20]
 800155c:	2201      	movs	r2, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f001 f93f 	bl	80027e2 <HAL_GPIO_WritePin>
				for (uint8_t i = 0; i < NUMBER_LEVELS; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	e07b      	b.n	8001662 <speed_control+0x146>
	//				mul = DHT11.Temp;
					if (DHT11.Temp >= Temp_levels[i] && DHT11.Temp <= Temp_levels[i+1]){
 800156a:	4b88      	ldr	r3, [pc, #544]	; (800178c <speed_control+0x270>)
 800156c:	691c      	ldr	r4, [r3, #16]
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4a87      	ldr	r2, [pc, #540]	; (8001790 <speed_control+0x274>)
 8001572:	56d3      	ldrsb	r3, [r2, r3]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fbbb 	bl	8000cf0 <__aeabi_i2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4619      	mov	r1, r3
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff fc6c 	bl	8000e5c <__aeabi_fcmpge>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d068      	beq.n	800165c <speed_control+0x140>
 800158a:	4b80      	ldr	r3, [pc, #512]	; (800178c <speed_control+0x270>)
 800158c:	691c      	ldr	r4, [r3, #16]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	3301      	adds	r3, #1
 8001592:	4a7f      	ldr	r2, [pc, #508]	; (8001790 <speed_control+0x274>)
 8001594:	56d3      	ldrsb	r3, [r2, r3]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fbaa 	bl	8000cf0 <__aeabi_i2f>
 800159c:	4603      	mov	r3, r0
 800159e:	4619      	mov	r1, r3
 80015a0:	4620      	mov	r0, r4
 80015a2:	f7ff fc51 	bl	8000e48 <__aeabi_fcmple>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d057      	beq.n	800165c <speed_control+0x140>
	//					__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, 900);
	//					__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_Temp_mode[i]* MOTOR.Timer->Instance->ARR/100);

						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_Temp_mode[i]* MOTOR.Timer->Instance->ARR/100);
 80015ac:	4b76      	ldr	r3, [pc, #472]	; (8001788 <speed_control+0x26c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d112      	bne.n	80015da <speed_control+0xbe>
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4a77      	ldr	r2, [pc, #476]	; (8001794 <speed_control+0x278>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b72      	ldr	r3, [pc, #456]	; (8001788 <speed_control+0x26c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	fb03 f202 	mul.w	r2, r3, r2
 80015c8:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <speed_control+0x26c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4972      	ldr	r1, [pc, #456]	; (8001798 <speed_control+0x27c>)
 80015d0:	fba1 1202 	umull	r1, r2, r1, r2
 80015d4:	0952      	lsrs	r2, r2, #5
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
						break;
 80015d8:	e047      	b.n	800166a <speed_control+0x14e>
						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_Temp_mode[i]* MOTOR.Timer->Instance->ARR/100);
 80015da:	4b6b      	ldr	r3, [pc, #428]	; (8001788 <speed_control+0x26c>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d112      	bne.n	8001608 <speed_control+0xec>
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4a6b      	ldr	r2, [pc, #428]	; (8001794 <speed_control+0x278>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <speed_control+0x26c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
 80015f6:	4a64      	ldr	r2, [pc, #400]	; (8001788 <speed_control+0x26c>)
 80015f8:	6852      	ldr	r2, [r2, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	4966      	ldr	r1, [pc, #408]	; (8001798 <speed_control+0x27c>)
 80015fe:	fba1 1303 	umull	r1, r3, r1, r3
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	6393      	str	r3, [r2, #56]	; 0x38
						break;
 8001606:	e030      	b.n	800166a <speed_control+0x14e>
						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_Temp_mode[i]* MOTOR.Timer->Instance->ARR/100);
 8001608:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <speed_control+0x26c>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b08      	cmp	r3, #8
 800160e:	d112      	bne.n	8001636 <speed_control+0x11a>
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4a60      	ldr	r2, [pc, #384]	; (8001794 <speed_control+0x278>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	461a      	mov	r2, r3
 8001618:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <speed_control+0x26c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	4a58      	ldr	r2, [pc, #352]	; (8001788 <speed_control+0x26c>)
 8001626:	6852      	ldr	r2, [r2, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	495b      	ldr	r1, [pc, #364]	; (8001798 <speed_control+0x27c>)
 800162c:	fba1 1303 	umull	r1, r3, r1, r3
 8001630:	095b      	lsrs	r3, r3, #5
 8001632:	63d3      	str	r3, [r2, #60]	; 0x3c
						break;
 8001634:	e019      	b.n	800166a <speed_control+0x14e>
						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_Temp_mode[i]* MOTOR.Timer->Instance->ARR/100);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4a56      	ldr	r2, [pc, #344]	; (8001794 <speed_control+0x278>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	461a      	mov	r2, r3
 800163e:	4b52      	ldr	r3, [pc, #328]	; (8001788 <speed_control+0x26c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	4a4f      	ldr	r2, [pc, #316]	; (8001788 <speed_control+0x26c>)
 800164c:	6852      	ldr	r2, [r2, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	4951      	ldr	r1, [pc, #324]	; (8001798 <speed_control+0x27c>)
 8001652:	fba1 1303 	umull	r1, r3, r1, r3
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
						break;
 800165a:	e006      	b.n	800166a <speed_control+0x14e>
				for (uint8_t i = 0; i < NUMBER_LEVELS; i++) {
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	3301      	adds	r3, #1
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d980      	bls.n	800156a <speed_control+0x4e>
					}

				}
				break;
 8001668:	e12b      	b.n	80018c2 <speed_control+0x3a6>
 800166a:	e12a      	b.n	80018c2 <speed_control+0x3a6>
			case HUMIDITY_MODE:
				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
 800166c:	4b46      	ldr	r3, [pc, #280]	; (8001788 <speed_control+0x26c>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	4a45      	ldr	r2, [pc, #276]	; (8001788 <speed_control+0x26c>)
 8001672:	8991      	ldrh	r1, [r2, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f001 f8b3 	bl	80027e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_SET);
 800167c:	4b42      	ldr	r3, [pc, #264]	; (8001788 <speed_control+0x26c>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a41      	ldr	r2, [pc, #260]	; (8001788 <speed_control+0x26c>)
 8001682:	8a91      	ldrh	r1, [r2, #20]
 8001684:	2201      	movs	r2, #1
 8001686:	4618      	mov	r0, r3
 8001688:	f001 f8ab 	bl	80027e2 <HAL_GPIO_WritePin>
				for (uint8_t i = 0; i < NUMBER_LEVELS; ++i) {
 800168c:	2300      	movs	r3, #0
 800168e:	71bb      	strb	r3, [r7, #6]
 8001690:	e08b      	b.n	80017aa <speed_control+0x28e>
					if (DHT11.Humi >= RHumi_levels[i] && DHT11.Humi <= RHumi_levels[i+1]){
 8001692:	4b3e      	ldr	r3, [pc, #248]	; (800178c <speed_control+0x270>)
 8001694:	695c      	ldr	r4, [r3, #20]
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	4a40      	ldr	r2, [pc, #256]	; (800179c <speed_control+0x280>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb27 	bl	8000cf0 <__aeabi_i2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fbd8 	bl	8000e5c <__aeabi_fcmpge>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d078      	beq.n	80017a4 <speed_control+0x288>
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <speed_control+0x270>)
 80016b4:	695c      	ldr	r4, [r3, #20]
 80016b6:	79bb      	ldrb	r3, [r7, #6]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a38      	ldr	r2, [pc, #224]	; (800179c <speed_control+0x280>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fb16 	bl	8000cf0 <__aeabi_i2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4619      	mov	r1, r3
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff fbbd 	bl	8000e48 <__aeabi_fcmple>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d067      	beq.n	80017a4 <speed_control+0x288>
						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_RHumi_mode[i]* MOTOR.Timer->Instance->ARR/100);
 80016d4:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <speed_control+0x26c>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d112      	bne.n	8001702 <speed_control+0x1e6>
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <speed_control+0x284>)
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b28      	ldr	r3, [pc, #160]	; (8001788 <speed_control+0x26c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	fb03 f202 	mul.w	r2, r3, r2
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <speed_control+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4928      	ldr	r1, [pc, #160]	; (8001798 <speed_control+0x27c>)
 80016f8:	fba1 1202 	umull	r1, r2, r1, r2
 80016fc:	0952      	lsrs	r2, r2, #5
 80016fe:	635a      	str	r2, [r3, #52]	; 0x34
						break;
 8001700:	e058      	b.n	80017b4 <speed_control+0x298>
						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_RHumi_mode[i]* MOTOR.Timer->Instance->ARR/100);
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <speed_control+0x26c>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b04      	cmp	r3, #4
 8001708:	d112      	bne.n	8001730 <speed_control+0x214>
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <speed_control+0x284>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	461a      	mov	r2, r3
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <speed_control+0x26c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <speed_control+0x26c>)
 8001720:	6852      	ldr	r2, [r2, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	491c      	ldr	r1, [pc, #112]	; (8001798 <speed_control+0x27c>)
 8001726:	fba1 1303 	umull	r1, r3, r1, r3
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	6393      	str	r3, [r2, #56]	; 0x38
						break;
 800172e:	e041      	b.n	80017b4 <speed_control+0x298>
						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_RHumi_mode[i]* MOTOR.Timer->Instance->ARR/100);
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <speed_control+0x26c>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d112      	bne.n	800175e <speed_control+0x242>
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <speed_control+0x284>)
 800173c:	5cd3      	ldrb	r3, [r2, r3]
 800173e:	461a      	mov	r2, r3
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <speed_control+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <speed_control+0x26c>)
 800174e:	6852      	ldr	r2, [r2, #4]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	4911      	ldr	r1, [pc, #68]	; (8001798 <speed_control+0x27c>)
 8001754:	fba1 1303 	umull	r1, r3, r1, r3
 8001758:	095b      	lsrs	r3, r3, #5
 800175a:	63d3      	str	r3, [r2, #60]	; 0x3c
						break;
 800175c:	e02a      	b.n	80017b4 <speed_control+0x298>
						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_RHumi_mode[i]* MOTOR.Timer->Instance->ARR/100);
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <speed_control+0x284>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	461a      	mov	r2, r3
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <speed_control+0x26c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <speed_control+0x26c>)
 8001774:	6852      	ldr	r2, [r2, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <speed_control+0x27c>)
 800177a:	fba1 1303 	umull	r1, r3, r1, r3
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
						break;
 8001782:	e017      	b.n	80017b4 <speed_control+0x298>
 8001784:	20000000 	.word	0x20000000
 8001788:	20000390 	.word	0x20000390
 800178c:	2000036c 	.word	0x2000036c
 8001790:	200003ac 	.word	0x200003ac
 8001794:	200003bc 	.word	0x200003bc
 8001798:	51eb851f 	.word	0x51eb851f
 800179c:	200003b4 	.word	0x200003b4
 80017a0:	200003c0 	.word	0x200003c0
				for (uint8_t i = 0; i < NUMBER_LEVELS; ++i) {
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	3301      	adds	r3, #1
 80017a8:	71bb      	strb	r3, [r7, #6]
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	f67f af70 	bls.w	8001692 <speed_control+0x176>
					}
				}
				break;
 80017b2:	e086      	b.n	80018c2 <speed_control+0x3a6>
 80017b4:	e085      	b.n	80018c2 <speed_control+0x3a6>
			case MANUAL_MODE:
	//			__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, (int)MOTOR.setSpeed*MOTOR.Timer->Instance->ARR/100);
	//			__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, 900);

				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
 80017b6:	4b45      	ldr	r3, [pc, #276]	; (80018cc <speed_control+0x3b0>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	4a44      	ldr	r2, [pc, #272]	; (80018cc <speed_control+0x3b0>)
 80017bc:	8991      	ldrh	r1, [r2, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 f80e 	bl	80027e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_SET);
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <speed_control+0x3b0>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	4a40      	ldr	r2, [pc, #256]	; (80018cc <speed_control+0x3b0>)
 80017cc:	8a91      	ldrh	r1, [r2, #20]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 f806 	bl	80027e2 <HAL_GPIO_WritePin>

				__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, (int)MOTOR.setSpeed*MOTOR.Timer->Instance->ARR/100);
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <speed_control+0x3b0>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d111      	bne.n	8001802 <speed_control+0x2e6>
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <speed_control+0x3b0>)
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <speed_control+0x3b0>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	fb03 f202 	mul.w	r2, r3, r2
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <speed_control+0x3b0>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4936      	ldr	r1, [pc, #216]	; (80018d0 <speed_control+0x3b4>)
 80017f8:	fba1 1202 	umull	r1, r2, r1, r2
 80017fc:	0952      	lsrs	r2, r2, #5
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8001800:	e05f      	b.n	80018c2 <speed_control+0x3a6>
				__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, (int)MOTOR.setSpeed*MOTOR.Timer->Instance->ARR/100);
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <speed_control+0x3b0>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b04      	cmp	r3, #4
 8001808:	d111      	bne.n	800182e <speed_control+0x312>
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <speed_control+0x3b0>)
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	461a      	mov	r2, r3
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <speed_control+0x3b0>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	fb02 f303 	mul.w	r3, r2, r3
 800181c:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <speed_control+0x3b0>)
 800181e:	6852      	ldr	r2, [r2, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	492b      	ldr	r1, [pc, #172]	; (80018d0 <speed_control+0x3b4>)
 8001824:	fba1 1303 	umull	r1, r3, r1, r3
 8001828:	095b      	lsrs	r3, r3, #5
 800182a:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 800182c:	e049      	b.n	80018c2 <speed_control+0x3a6>
				__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, (int)MOTOR.setSpeed*MOTOR.Timer->Instance->ARR/100);
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <speed_control+0x3b0>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b08      	cmp	r3, #8
 8001834:	d111      	bne.n	800185a <speed_control+0x33e>
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <speed_control+0x3b0>)
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	461a      	mov	r2, r3
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <speed_control+0x3b0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	fb02 f303 	mul.w	r3, r2, r3
 8001848:	4a20      	ldr	r2, [pc, #128]	; (80018cc <speed_control+0x3b0>)
 800184a:	6852      	ldr	r2, [r2, #4]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	4920      	ldr	r1, [pc, #128]	; (80018d0 <speed_control+0x3b4>)
 8001850:	fba1 1303 	umull	r1, r3, r1, r3
 8001854:	095b      	lsrs	r3, r3, #5
 8001856:	63d3      	str	r3, [r2, #60]	; 0x3c
				break;
 8001858:	e033      	b.n	80018c2 <speed_control+0x3a6>
				__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, (int)MOTOR.setSpeed*MOTOR.Timer->Instance->ARR/100);
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <speed_control+0x3b0>)
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	461a      	mov	r2, r3
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <speed_control+0x3b0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <speed_control+0x3b0>)
 800186e:	6852      	ldr	r2, [r2, #4]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	4917      	ldr	r1, [pc, #92]	; (80018d0 <speed_control+0x3b4>)
 8001874:	fba1 1303 	umull	r1, r3, r1, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 800187c:	e021      	b.n	80018c2 <speed_control+0x3a6>
			case MOTOR_STOP_MODE:
				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <speed_control+0x3b0>)
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <speed_control+0x3b0>)
 8001884:	8991      	ldrh	r1, [r2, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f000 ffaa 	bl	80027e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_RESET);
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <speed_control+0x3b0>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <speed_control+0x3b0>)
 8001894:	8a91      	ldrh	r1, [r2, #20]
 8001896:	2200      	movs	r2, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f000 ffa2 	bl	80027e2 <HAL_GPIO_WritePin>
				break;
 800189e:	e010      	b.n	80018c2 <speed_control+0x3a6>
			default:
				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <speed_control+0x3b0>)
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	4a09      	ldr	r2, [pc, #36]	; (80018cc <speed_control+0x3b0>)
 80018a6:	8991      	ldrh	r1, [r2, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 ff99 	bl	80027e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_RESET);
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <speed_control+0x3b0>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a05      	ldr	r2, [pc, #20]	; (80018cc <speed_control+0x3b0>)
 80018b6:	8a91      	ldrh	r1, [r2, #20]
 80018b8:	2200      	movs	r2, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 ff91 	bl	80027e2 <HAL_GPIO_WritePin>
				break;
 80018c0:	bf00      	nop
		}
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000390 	.word	0x20000390
 80018d0:	51eb851f 	.word	0x51eb851f

080018d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	__IO uint32_t ticks = osKernelGetTickCount();
 80018dc:	f003 fd9a 	bl	8005414 <osKernelGetTickCount>
 80018e0:	4603      	mov	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  ticks += 1000;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80018ea:	60fb      	str	r3, [r7, #12]
//	  printf("%s", str);
	  osDelayUntil(ticks);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 fe90 	bl	8005614 <osDelayUntil>
	  ticks += 1000;
 80018f4:	e7f6      	b.n	80018e4 <StartDefaultTask+0x10>
	...

080018f8 <StartTaskReadDHT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadDHT */
void StartTaskReadDHT(void *argument)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskReadDHT */
	dht_err_t ret = DHT_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	81fb      	strh	r3, [r7, #14]
	const uint16_t msg = SET_DHT_Q;
 8001904:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001908:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	ret = DHT_ReadTempHum(&DHT11);
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <StartTaskReadDHT+0x40>)
 800190c:	f007 fcfc 	bl	8009308 <DHT_ReadTempHum>
 8001910:	4603      	mov	r3, r0
 8001912:	81fb      	strh	r3, [r7, #14]
//	if (!ret) {
		osSemaphoreRelease(binReadDHTCpltHandle);
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <StartTaskReadDHT+0x44>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f003 ffb1 	bl	8005880 <osSemaphoreRelease>
		osMessageQueuePut(motorQueueHandle, &msg, NULL, 0);
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <StartTaskReadDHT+0x48>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f107 010c 	add.w	r1, r7, #12
 8001926:	2300      	movs	r3, #0
 8001928:	2200      	movs	r2, #0
 800192a:	f004 f887 	bl	8005a3c <osMessageQueuePut>
//	}
    osDelay(pdMS_TO_TICKS(2000));
 800192e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001932:	f003 fe41 	bl	80055b8 <osDelay>
	ret = DHT_ReadTempHum(&DHT11);
 8001936:	e7e8      	b.n	800190a <StartTaskReadDHT+0x12>
 8001938:	2000036c 	.word	0x2000036c
 800193c:	20000364 	.word	0x20000364
 8001940:	20000360 	.word	0x20000360

08001944 <StartTaskTxUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTxUart */
void StartTaskTxUart(void *argument)
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b087      	sub	sp, #28
 8001948:	af04      	add	r7, sp, #16
 800194a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTxUart */
  /* Infinite loop */

  for(;;)
  {
	osSemaphoreAcquire(binReadDHTCpltHandle, osWaitForever);
 800194c:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <StartTaskTxUart+0xd0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	4618      	mov	r0, r3
 8001956:	f003 ff2d 	bl	80057b4 <osSemaphoreAcquire>
	if (DHT11.Error) { // erorr
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <StartTaskTxUart+0xd4>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01a      	beq.n	8001998 <StartTaskTxUart+0x54>
		TX_uart(&huart2, "DHT_STT %d\n", DHT11.Error);
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <StartTaskTxUart+0xd4>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	492c      	ldr	r1, [pc, #176]	; (8001a1c <StartTaskTxUart+0xd8>)
 800196a:	482d      	ldr	r0, [pc, #180]	; (8001a20 <StartTaskTxUart+0xdc>)
 800196c:	f7ff fdb2 	bl	80014d4 <TX_uart>

		lcd_set_cursor(&LCD, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	482b      	ldr	r0, [pc, #172]	; (8001a24 <StartTaskTxUart+0xe0>)
 8001976:	f007 fa45 	bl	8008e04 <lcd_set_cursor>
		lcd_printf(&LCD, "RH: __.__%%");
 800197a:	492b      	ldr	r1, [pc, #172]	; (8001a28 <StartTaskTxUart+0xe4>)
 800197c:	4829      	ldr	r0, [pc, #164]	; (8001a24 <StartTaskTxUart+0xe0>)
 800197e:	f007 fa7b 	bl	8008e78 <lcd_printf>
		lcd_set_cursor(&LCD, 1, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2101      	movs	r1, #1
 8001986:	4827      	ldr	r0, [pc, #156]	; (8001a24 <StartTaskTxUart+0xe0>)
 8001988:	f007 fa3c 	bl	8008e04 <lcd_set_cursor>
		lcd_printf(&LCD, "Temp: __.__%cC", (char)223);
 800198c:	22df      	movs	r2, #223	; 0xdf
 800198e:	4927      	ldr	r1, [pc, #156]	; (8001a2c <StartTaskTxUart+0xe8>)
 8001990:	4824      	ldr	r0, [pc, #144]	; (8001a24 <StartTaskTxUart+0xe0>)
 8001992:	f007 fa71 	bl	8008e78 <lcd_printf>
 8001996:	e7d9      	b.n	800194c <StartTaskTxUart+0x8>

	} else {
		TX_uart(&huart2, "DHT_STT %d\nRH %f\nTEMP %f\n", DHT11.Error, DHT11.Humi, DHT11.Temp);
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <StartTaskTxUart+0xd4>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	461e      	mov	r6, r3
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <StartTaskTxUart+0xd4>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fd4a 	bl	800043c <__aeabi_f2d>
 80019a8:	4604      	mov	r4, r0
 80019aa:	460d      	mov	r5, r1
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <StartTaskTxUart+0xd4>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fd43 	bl	800043c <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019be:	e9cd 4500 	strd	r4, r5, [sp]
 80019c2:	4632      	mov	r2, r6
 80019c4:	491a      	ldr	r1, [pc, #104]	; (8001a30 <StartTaskTxUart+0xec>)
 80019c6:	4816      	ldr	r0, [pc, #88]	; (8001a20 <StartTaskTxUart+0xdc>)
 80019c8:	f7ff fd84 	bl	80014d4 <TX_uart>

		lcd_set_cursor(&LCD, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	4814      	ldr	r0, [pc, #80]	; (8001a24 <StartTaskTxUart+0xe0>)
 80019d2:	f007 fa17 	bl	8008e04 <lcd_set_cursor>
		lcd_printf(&LCD, "RH: %.2f%%", DHT11.Humi);
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <StartTaskTxUart+0xd4>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fd2e 	bl	800043c <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4913      	ldr	r1, [pc, #76]	; (8001a34 <StartTaskTxUart+0xf0>)
 80019e6:	480f      	ldr	r0, [pc, #60]	; (8001a24 <StartTaskTxUart+0xe0>)
 80019e8:	f007 fa46 	bl	8008e78 <lcd_printf>
		lcd_set_cursor(&LCD, 1, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2101      	movs	r1, #1
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <StartTaskTxUart+0xe0>)
 80019f2:	f007 fa07 	bl	8008e04 <lcd_set_cursor>
		lcd_printf(&LCD, "Temp: %.2f%cC", DHT11.Temp, (char)223);
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <StartTaskTxUart+0xd4>)
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fd1e 	bl	800043c <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	21df      	movs	r1, #223	; 0xdf
 8001a06:	9100      	str	r1, [sp, #0]
 8001a08:	490b      	ldr	r1, [pc, #44]	; (8001a38 <StartTaskTxUart+0xf4>)
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <StartTaskTxUart+0xe0>)
 8001a0c:	f007 fa34 	bl	8008e78 <lcd_printf>
	osSemaphoreAcquire(binReadDHTCpltHandle, osWaitForever);
 8001a10:	e79c      	b.n	800194c <StartTaskTxUart+0x8>
 8001a12:	bf00      	nop
 8001a14:	20000364 	.word	0x20000364
 8001a18:	2000036c 	.word	0x2000036c
 8001a1c:	0800e368 	.word	0x0800e368
 8001a20:	20000308 	.word	0x20000308
 8001a24:	20000384 	.word	0x20000384
 8001a28:	0800e374 	.word	0x0800e374
 8001a2c:	0800e380 	.word	0x0800e380
 8001a30:	0800e390 	.word	0x0800e390
 8001a34:	0800e3ac 	.word	0x0800e3ac
 8001a38:	0800e3b8 	.word	0x0800e3b8

08001a3c <StartTaskHandleUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskHandleUart */
void StartTaskHandleUart(void *argument)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskHandleUart */
	handle_err_t ret;
	uint16_t msg = SET_UART_Q;
 8001a44:	f240 1301 	movw	r3, #257	; 0x101
 8001a48:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(binRxRequestHandle, osWaitForever);
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <StartTaskHandleUart+0x58>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 feae 	bl	80057b4 <osSemaphoreAcquire>
#ifdef DEBUG
	  TX_uart(&huart2, Rx_data);
 8001a58:	490f      	ldr	r1, [pc, #60]	; (8001a98 <StartTaskHandleUart+0x5c>)
 8001a5a:	4810      	ldr	r0, [pc, #64]	; (8001a9c <StartTaskHandleUart+0x60>)
 8001a5c:	f7ff fd3a 	bl	80014d4 <TX_uart>
#endif

	  ret = Get_Arg((char*)Rx_data);
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <StartTaskHandleUart+0x5c>)
 8001a62:	f007 fd3d 	bl	80094e0 <Get_Arg>
 8001a66:	4603      	mov	r3, r0
 8001a68:	81fb      	strh	r3, [r7, #14]

	  if(!ret) {
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10b      	bne.n	8001a88 <StartTaskHandleUart+0x4c>
	  	ret = Handle_Request();
 8001a70:	f007 fd6e 	bl	8009550 <Handle_Request>
 8001a74:	4603      	mov	r3, r0
 8001a76:	81fb      	strh	r3, [r7, #14]
	  	osMessageQueuePut(motorQueueHandle, &msg, NULL, 0);
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <StartTaskHandleUart+0x64>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	f107 010c 	add.w	r1, r7, #12
 8001a80:	2300      	movs	r3, #0
 8001a82:	2200      	movs	r2, #0
 8001a84:	f003 ffda 	bl	8005a3c <osMessageQueuePut>
	  }
#ifdef DEBUG
	  TX_uart(&huart2, "End H\n");
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <StartTaskHandleUart+0x68>)
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <StartTaskHandleUart+0x60>)
 8001a8c:	f7ff fd22 	bl	80014d4 <TX_uart>
	  osSemaphoreAcquire(binRxRequestHandle, osWaitForever);
 8001a90:	e7db      	b.n	8001a4a <StartTaskHandleUart+0xe>
 8001a92:	bf00      	nop
 8001a94:	20000368 	.word	0x20000368
 8001a98:	200003c4 	.word	0x200003c4
 8001a9c:	20000308 	.word	0x20000308
 8001aa0:	20000360 	.word	0x20000360
 8001aa4:	0800e3c8 	.word	0x0800e3c8

08001aa8 <StartTaskMotorControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorControl */
void StartTaskMotorControl(void *argument)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorControl */
	uint16_t msg;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(motorQueueHandle, &msg, 0, osWaitForever);
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <StartTaskMotorControl+0x54>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	f107 010e 	add.w	r1, r7, #14
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	2200      	movs	r2, #0
 8001abe:	f004 f831 	bl	8005b24 <osMessageQueueGet>
//			TX_uart(&huart2, "Set mod %d", msg);

	  switch (msg) {
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
 8001ac4:	f240 1201 	movw	r2, #257	; 0x101
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d003      	beq.n	8001ad4 <StartTaskMotorControl+0x2c>
 8001acc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001ad0:	d00b      	beq.n	8001aea <StartTaskMotorControl+0x42>
			TX_uart(&huart2, "Set DHT\n");
			speed_control();
////			TX_uart(&huart2, "Set mod %d", msg);
			break;
		default:
			break;
 8001ad2:	e011      	b.n	8001af8 <StartTaskMotorControl+0x50>
			TX_uart(&huart2, "Set mod UART\n");
 8001ad4:	490a      	ldr	r1, [pc, #40]	; (8001b00 <StartTaskMotorControl+0x58>)
 8001ad6:	480b      	ldr	r0, [pc, #44]	; (8001b04 <StartTaskMotorControl+0x5c>)
 8001ad8:	f7ff fcfc 	bl	80014d4 <TX_uart>
			speed_control();
 8001adc:	f7ff fd1e 	bl	800151c <speed_control>
			TX_uart(&huart2, "Set mod UART END\n");
 8001ae0:	4909      	ldr	r1, [pc, #36]	; (8001b08 <StartTaskMotorControl+0x60>)
 8001ae2:	4808      	ldr	r0, [pc, #32]	; (8001b04 <StartTaskMotorControl+0x5c>)
 8001ae4:	f7ff fcf6 	bl	80014d4 <TX_uart>
			break;
 8001ae8:	e006      	b.n	8001af8 <StartTaskMotorControl+0x50>
			TX_uart(&huart2, "Set DHT\n");
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <StartTaskMotorControl+0x64>)
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <StartTaskMotorControl+0x5c>)
 8001aee:	f7ff fcf1 	bl	80014d4 <TX_uart>
			speed_control();
 8001af2:	f7ff fd13 	bl	800151c <speed_control>
			break;
 8001af6:	bf00      	nop
	  osMessageQueueGet(motorQueueHandle, &msg, 0, osWaitForever);
 8001af8:	e7da      	b.n	8001ab0 <StartTaskMotorControl+0x8>
 8001afa:	bf00      	nop
 8001afc:	20000360 	.word	0x20000360
 8001b00:	0800e3d0 	.word	0x0800e3d0
 8001b04:	20000308 	.word	0x20000308
 8001b08:	0800e3e0 	.word	0x0800e3e0
 8001b0c:	0800e3f4 	.word	0x0800e3f4

08001b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b22:	f000 faf3 	bl	800210c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40000800 	.word	0x40000800

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>
	...

08001b40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_MspInit+0x68>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_MspInit+0x68>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6193      	str	r3, [r2, #24]
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_MspInit+0x68>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_MspInit+0x68>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_MspInit+0x68>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	61d3      	str	r3, [r2, #28]
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_MspInit+0x68>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	210f      	movs	r1, #15
 8001b7a:	f06f 0001 	mvn.w	r0, #1
 8001b7e:	f000 fbba 	bl	80022f6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_MspInit+0x6c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_MspInit+0x6c>)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000

08001bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_I2C_MspInit+0x90>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d132      	bne.n	8001c36 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001be8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bee:	2312      	movs	r3, #18
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4812      	ldr	r0, [pc, #72]	; (8001c48 <HAL_I2C_MspInit+0x98>)
 8001bfe:	f000 fc55 	bl	80024ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_I2C_MspInit+0x9c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <HAL_I2C_MspInit+0x9c>)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001c24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40005400 	.word	0x40005400
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	40010000 	.word	0x40010000

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d10c      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_TIM_Base_MspInit+0x58>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_TIM_Base_MspInit+0x58>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_TIM_Base_MspInit+0x58>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c7a:	e010      	b.n	8001c9e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_TIM_Base_MspInit+0x5c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10b      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_TIM_Base_MspInit+0x58>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_TIM_Base_MspInit+0x58>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	61d3      	str	r3, [r2, #28]
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_TIM_Base_MspInit+0x58>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40000400 	.word	0x40000400

08001cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_TIM_MspPostInit+0x58>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d117      	bne.n	8001d00 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_TIM_MspPostInit+0x5c>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_TIM_MspPostInit+0x5c>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_TIM_MspPostInit+0x5c>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ce8:	2340      	movs	r3, #64	; 0x40
 8001cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_TIM_MspPostInit+0x60>)
 8001cfc:	f000 fbd6 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010800 	.word	0x40010800

08001d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <HAL_UART_MspInit+0x98>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d137      	bne.n	8001da4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_UART_MspInit+0x9c>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_UART_MspInit+0x9c>)
 8001d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3e:	61d3      	str	r3, [r2, #28]
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_UART_MspInit+0x9c>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_UART_MspInit+0x9c>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_UART_MspInit+0x9c>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6193      	str	r3, [r2, #24]
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_UART_MspInit+0x9c>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d64:	2304      	movs	r3, #4
 8001d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	480f      	ldr	r0, [pc, #60]	; (8001db4 <HAL_UART_MspInit+0xa0>)
 8001d78:	f000 fb98 	bl	80024ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4809      	ldr	r0, [pc, #36]	; (8001db4 <HAL_UART_MspInit+0xa0>)
 8001d90:	f000 fb8c 	bl	80024ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2105      	movs	r1, #5
 8001d98:	2026      	movs	r0, #38	; 0x26
 8001d9a:	f000 faac 	bl	80022f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d9e:	2026      	movs	r0, #38	; 0x26
 8001da0:	f000 fac5 	bl	800232e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40004400 	.word	0x40004400
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010800 	.word	0x40010800

08001db8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	; 0x38
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001dce:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <HAL_InitTick+0xe8>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a33      	ldr	r2, [pc, #204]	; (8001ea0 <HAL_InitTick+0xe8>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_InitTick+0xe8>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de6:	f107 0210 	add.w	r2, r7, #16
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 fd55 	bl	80038a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e00:	f001 fd26 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8001e04:	6378      	str	r0, [r7, #52]	; 0x34
 8001e06:	e004      	b.n	8001e12 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e08:	f001 fd22 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <HAL_InitTick+0xec>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_InitTick+0xf0>)
 8001e22:	4a22      	ldr	r2, [pc, #136]	; (8001eac <HAL_InitTick+0xf4>)
 8001e24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_InitTick+0xf0>)
 8001e28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e2c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <HAL_InitTick+0xf0>)
 8001e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e32:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <HAL_InitTick+0xf0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_InitTick+0xf0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_InitTick+0xf0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001e46:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <HAL_InitTick+0xf0>)
 8001e48:	f001 fd78 	bl	800393c <HAL_TIM_Base_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11b      	bne.n	8001e92 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001e5a:	4813      	ldr	r0, [pc, #76]	; (8001ea8 <HAL_InitTick+0xf0>)
 8001e5c:	f001 fe2e 	bl	8003abc <HAL_TIM_Base_Start_IT>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d111      	bne.n	8001e92 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e6e:	201e      	movs	r0, #30
 8001e70:	f000 fa5d 	bl	800232e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	d808      	bhi.n	8001e8c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	201e      	movs	r0, #30
 8001e80:	f000 fa39 	bl	80022f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_InitTick+0xf8>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e002      	b.n	8001e92 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3738      	adds	r7, #56	; 0x38
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	431bde83 	.word	0x431bde83
 8001ea8:	200003f8 	.word	0x200003f8
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	20000008 	.word	0x20000008

08001eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <NMI_Handler+0x4>

08001eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <HardFault_Handler+0x4>

08001ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <MemManage_Handler+0x4>

08001ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <TIM4_IRQHandler+0x10>)
 8001ee6:	f001 ff35 	bl	8003d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200003f8 	.word	0x200003f8

08001ef4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <USART2_IRQHandler+0x10>)
 8001efa:	f002 fdfd 	bl	8004af8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000308 	.word	0x20000308

08001f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return 1;
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <_kill>:

int _kill(int pid, int sig)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f20:	f007 fc7a 	bl	8009818 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2216      	movs	r2, #22
 8001f28:	601a      	str	r2, [r3, #0]
  return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_exit>:

void _exit (int status)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffe7 	bl	8001f16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f48:	e7fe      	b.n	8001f48 <_exit+0x12>

08001f4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e00a      	b.n	8001f72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f5c:	f3af 8000 	nop.w
 8001f60:	4601      	mov	r1, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	60ba      	str	r2, [r7, #8]
 8001f68:	b2ca      	uxtb	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dbf0      	blt.n	8001f5c <_read+0x12>
  }

  return len;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e009      	b.n	8001faa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fa7c 	bl	800149c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	dbf1      	blt.n	8001f96 <_write+0x12>
  }
  return len;
 8001fb2:	687b      	ldr	r3, [r7, #4]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_close>:

int _close(int file)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <_isatty>:

int _isatty(int file)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <_sbrk+0x5c>)
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <_sbrk+0x60>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <_sbrk+0x64>)
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <_sbrk+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d207      	bcs.n	800205c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800204c:	f007 fbe4 	bl	8009818 <__errno>
 8002050:	4603      	mov	r3, r0
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e009      	b.n	8002070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <_sbrk+0x64>)
 800206c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20005000 	.word	0x20005000
 800207c:	00000400 	.word	0x00000400
 8002080:	20000440 	.word	0x20000440
 8002084:	20003330 	.word	0x20003330

08002088 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002096:	490d      	ldr	r1, [pc, #52]	; (80020cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800209c:	e002      	b.n	80020a4 <LoopCopyDataInit>

0800209e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a2:	3304      	adds	r3, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a8:	d3f9      	bcc.n	800209e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020ac:	4c0a      	ldr	r4, [pc, #40]	; (80020d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b0:	e001      	b.n	80020b6 <LoopFillZerobss>

080020b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b4:	3204      	adds	r2, #4

080020b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b8:	d3fb      	bcc.n	80020b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ba:	f7ff ffe5 	bl	8002088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020be:	f007 fca7 	bl	8009a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020c2:	f7fe ff53 	bl	8000f6c <main>
  bx lr
 80020c6:	4770      	bx	lr
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80020d0:	0800ea48 	.word	0x0800ea48
  ldr r2, =_sbss
 80020d4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80020d8:	20003330 	.word	0x20003330

080020dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC1_2_IRQHandler>
	...

080020e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_Init+0x28>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_Init+0x28>)
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 f8f5 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	200f      	movs	r0, #15
 80020f8:	f7ff fe5e 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7ff fd20 	bl	8001b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000

0800210c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_IncTick+0x1c>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_IncTick+0x20>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a03      	ldr	r2, [pc, #12]	; (800212c <HAL_IncTick+0x20>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	2000000c 	.word	0x2000000c
 800212c:	20000444 	.word	0x20000444

08002130 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b02      	ldr	r3, [pc, #8]	; (8002140 <HAL_GetTick+0x10>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000444 	.word	0x20000444

08002144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff fff0 	bl	8002130 <HAL_GetTick>
 8002150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d005      	beq.n	800216a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_Delay+0x44>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800216a:	bf00      	nop
 800216c:	f7ff ffe0 	bl	8002130 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d8f7      	bhi.n	800216c <HAL_Delay+0x28>
  {
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000000c 	.word	0x2000000c

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4906      	ldr	r1, [pc, #24]	; (8002224 <__NVIC_EnableIRQ+0x34>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	; (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff4f 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff64 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ffb2 	bl	800227c <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff81 	bl	8002228 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff57 	bl	80021f0 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800235c:	2b02      	cmp	r3, #2
 800235e:	d008      	beq.n	8002372 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2204      	movs	r2, #4
 8002364:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e020      	b.n	80023b4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 020e 	bic.w	r2, r2, #14
 8002380:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d005      	beq.n	80023e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2204      	movs	r2, #4
 80023da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	e051      	b.n	8002486 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 020e 	bic.w	r2, r2, #14
 80023f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0201 	bic.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_DMA_Abort_IT+0xd0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d029      	beq.n	8002460 <HAL_DMA_Abort_IT+0xa0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a20      	ldr	r2, [pc, #128]	; (8002494 <HAL_DMA_Abort_IT+0xd4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d022      	beq.n	800245c <HAL_DMA_Abort_IT+0x9c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <HAL_DMA_Abort_IT+0xd8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d01a      	beq.n	8002456 <HAL_DMA_Abort_IT+0x96>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_DMA_Abort_IT+0xdc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d012      	beq.n	8002450 <HAL_DMA_Abort_IT+0x90>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_DMA_Abort_IT+0xe0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00a      	beq.n	800244a <HAL_DMA_Abort_IT+0x8a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_DMA_Abort_IT+0xe4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d102      	bne.n	8002444 <HAL_DMA_Abort_IT+0x84>
 800243e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002442:	e00e      	b.n	8002462 <HAL_DMA_Abort_IT+0xa2>
 8002444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002448:	e00b      	b.n	8002462 <HAL_DMA_Abort_IT+0xa2>
 800244a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244e:	e008      	b.n	8002462 <HAL_DMA_Abort_IT+0xa2>
 8002450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002454:	e005      	b.n	8002462 <HAL_DMA_Abort_IT+0xa2>
 8002456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245a:	e002      	b.n	8002462 <HAL_DMA_Abort_IT+0xa2>
 800245c:	2310      	movs	r3, #16
 800245e:	e000      	b.n	8002462 <HAL_DMA_Abort_IT+0xa2>
 8002460:	2301      	movs	r3, #1
 8002462:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_DMA_Abort_IT+0xe8>)
 8002464:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
    } 
  }
  return status;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40020008 	.word	0x40020008
 8002494:	4002001c 	.word	0x4002001c
 8002498:	40020030 	.word	0x40020030
 800249c:	40020044 	.word	0x40020044
 80024a0:	40020058 	.word	0x40020058
 80024a4:	4002006c 	.word	0x4002006c
 80024a8:	40020000 	.word	0x40020000

080024ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b08b      	sub	sp, #44	; 0x2c
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024ba:	2300      	movs	r3, #0
 80024bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024be:	e169      	b.n	8002794 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024c0:	2201      	movs	r2, #1
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 8158 	bne.w	800278e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a9a      	ldr	r2, [pc, #616]	; (800274c <HAL_GPIO_Init+0x2a0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d05e      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 80024e8:	4a98      	ldr	r2, [pc, #608]	; (800274c <HAL_GPIO_Init+0x2a0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d875      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 80024ee:	4a98      	ldr	r2, [pc, #608]	; (8002750 <HAL_GPIO_Init+0x2a4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d058      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 80024f4:	4a96      	ldr	r2, [pc, #600]	; (8002750 <HAL_GPIO_Init+0x2a4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d86f      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 80024fa:	4a96      	ldr	r2, [pc, #600]	; (8002754 <HAL_GPIO_Init+0x2a8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d052      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 8002500:	4a94      	ldr	r2, [pc, #592]	; (8002754 <HAL_GPIO_Init+0x2a8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d869      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 8002506:	4a94      	ldr	r2, [pc, #592]	; (8002758 <HAL_GPIO_Init+0x2ac>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d04c      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 800250c:	4a92      	ldr	r2, [pc, #584]	; (8002758 <HAL_GPIO_Init+0x2ac>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d863      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 8002512:	4a92      	ldr	r2, [pc, #584]	; (800275c <HAL_GPIO_Init+0x2b0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d046      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 8002518:	4a90      	ldr	r2, [pc, #576]	; (800275c <HAL_GPIO_Init+0x2b0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d85d      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 800251e:	2b12      	cmp	r3, #18
 8002520:	d82a      	bhi.n	8002578 <HAL_GPIO_Init+0xcc>
 8002522:	2b12      	cmp	r3, #18
 8002524:	d859      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <HAL_GPIO_Init+0x80>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	080025a7 	.word	0x080025a7
 8002530:	08002581 	.word	0x08002581
 8002534:	08002593 	.word	0x08002593
 8002538:	080025d5 	.word	0x080025d5
 800253c:	080025db 	.word	0x080025db
 8002540:	080025db 	.word	0x080025db
 8002544:	080025db 	.word	0x080025db
 8002548:	080025db 	.word	0x080025db
 800254c:	080025db 	.word	0x080025db
 8002550:	080025db 	.word	0x080025db
 8002554:	080025db 	.word	0x080025db
 8002558:	080025db 	.word	0x080025db
 800255c:	080025db 	.word	0x080025db
 8002560:	080025db 	.word	0x080025db
 8002564:	080025db 	.word	0x080025db
 8002568:	080025db 	.word	0x080025db
 800256c:	080025db 	.word	0x080025db
 8002570:	08002589 	.word	0x08002589
 8002574:	0800259d 	.word	0x0800259d
 8002578:	4a79      	ldr	r2, [pc, #484]	; (8002760 <HAL_GPIO_Init+0x2b4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800257e:	e02c      	b.n	80025da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	623b      	str	r3, [r7, #32]
          break;
 8002586:	e029      	b.n	80025dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	3304      	adds	r3, #4
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	e024      	b.n	80025dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	3308      	adds	r3, #8
 8002598:	623b      	str	r3, [r7, #32]
          break;
 800259a:	e01f      	b.n	80025dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	330c      	adds	r3, #12
 80025a2:	623b      	str	r3, [r7, #32]
          break;
 80025a4:	e01a      	b.n	80025dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ae:	2304      	movs	r3, #4
 80025b0:	623b      	str	r3, [r7, #32]
          break;
 80025b2:	e013      	b.n	80025dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025bc:	2308      	movs	r3, #8
 80025be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	611a      	str	r2, [r3, #16]
          break;
 80025c6:	e009      	b.n	80025dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c8:	2308      	movs	r3, #8
 80025ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	615a      	str	r2, [r3, #20]
          break;
 80025d2:	e003      	b.n	80025dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
          break;
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x130>
          break;
 80025da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2bff      	cmp	r3, #255	; 0xff
 80025e0:	d801      	bhi.n	80025e6 <HAL_GPIO_Init+0x13a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_Init+0x13e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2bff      	cmp	r3, #255	; 0xff
 80025f0:	d802      	bhi.n	80025f8 <HAL_GPIO_Init+0x14c>
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	e002      	b.n	80025fe <HAL_GPIO_Init+0x152>
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	3b08      	subs	r3, #8
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	210f      	movs	r1, #15
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	401a      	ands	r2, r3
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	431a      	orrs	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80b1 	beq.w	800278e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800262c:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <HAL_GPIO_Init+0x2b8>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a4c      	ldr	r2, [pc, #304]	; (8002764 <HAL_GPIO_Init+0x2b8>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_GPIO_Init+0x2b8>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002644:	4a48      	ldr	r2, [pc, #288]	; (8002768 <HAL_GPIO_Init+0x2bc>)
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4013      	ands	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a40      	ldr	r2, [pc, #256]	; (800276c <HAL_GPIO_Init+0x2c0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_GPIO_Init+0x1ec>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3f      	ldr	r2, [pc, #252]	; (8002770 <HAL_GPIO_Init+0x2c4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00d      	beq.n	8002694 <HAL_GPIO_Init+0x1e8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3e      	ldr	r2, [pc, #248]	; (8002774 <HAL_GPIO_Init+0x2c8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <HAL_GPIO_Init+0x1e4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3d      	ldr	r2, [pc, #244]	; (8002778 <HAL_GPIO_Init+0x2cc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_GPIO_Init+0x1e0>
 8002688:	2303      	movs	r3, #3
 800268a:	e006      	b.n	800269a <HAL_GPIO_Init+0x1ee>
 800268c:	2304      	movs	r3, #4
 800268e:	e004      	b.n	800269a <HAL_GPIO_Init+0x1ee>
 8002690:	2302      	movs	r3, #2
 8002692:	e002      	b.n	800269a <HAL_GPIO_Init+0x1ee>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_GPIO_Init+0x1ee>
 8002698:	2300      	movs	r3, #0
 800269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269c:	f002 0203 	and.w	r2, r2, #3
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	4093      	lsls	r3, r2
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026aa:	492f      	ldr	r1, [pc, #188]	; (8002768 <HAL_GPIO_Init+0x2bc>)
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026c4:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_GPIO_Init+0x2d0>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	492c      	ldr	r1, [pc, #176]	; (800277c <HAL_GPIO_Init+0x2d0>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_GPIO_Init+0x2d0>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	43db      	mvns	r3, r3
 80026da:	4928      	ldr	r1, [pc, #160]	; (800277c <HAL_GPIO_Init+0x2d0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026ec:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_GPIO_Init+0x2d0>)
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4922      	ldr	r1, [pc, #136]	; (800277c <HAL_GPIO_Init+0x2d0>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	e006      	b.n	8002708 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_GPIO_Init+0x2d0>)
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	43db      	mvns	r3, r3
 8002702:	491e      	ldr	r1, [pc, #120]	; (800277c <HAL_GPIO_Init+0x2d0>)
 8002704:	4013      	ands	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_GPIO_Init+0x2d0>)
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4918      	ldr	r1, [pc, #96]	; (800277c <HAL_GPIO_Init+0x2d0>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_GPIO_Init+0x2d0>)
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	43db      	mvns	r3, r3
 800272a:	4914      	ldr	r1, [pc, #80]	; (800277c <HAL_GPIO_Init+0x2d0>)
 800272c:	4013      	ands	r3, r2
 800272e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d021      	beq.n	8002780 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <HAL_GPIO_Init+0x2d0>)
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	490e      	ldr	r1, [pc, #56]	; (800277c <HAL_GPIO_Init+0x2d0>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	60cb      	str	r3, [r1, #12]
 8002748:	e021      	b.n	800278e <HAL_GPIO_Init+0x2e2>
 800274a:	bf00      	nop
 800274c:	10320000 	.word	0x10320000
 8002750:	10310000 	.word	0x10310000
 8002754:	10220000 	.word	0x10220000
 8002758:	10210000 	.word	0x10210000
 800275c:	10120000 	.word	0x10120000
 8002760:	10110000 	.word	0x10110000
 8002764:	40021000 	.word	0x40021000
 8002768:	40010000 	.word	0x40010000
 800276c:	40010800 	.word	0x40010800
 8002770:	40010c00 	.word	0x40010c00
 8002774:	40011000 	.word	0x40011000
 8002778:	40011400 	.word	0x40011400
 800277c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_GPIO_Init+0x304>)
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	43db      	mvns	r3, r3
 8002788:	4909      	ldr	r1, [pc, #36]	; (80027b0 <HAL_GPIO_Init+0x304>)
 800278a:	4013      	ands	r3, r2
 800278c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	3301      	adds	r3, #1
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f47f ae8e 	bne.w	80024c0 <HAL_GPIO_Init+0x14>
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	372c      	adds	r7, #44	; 0x2c
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40010400 	.word	0x40010400

080027b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e001      	b.n	80027d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	807b      	strh	r3, [r7, #2]
 80027ee:	4613      	mov	r3, r2
 80027f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f2:	787b      	ldrb	r3, [r7, #1]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027fe:	e003      	b.n	8002808 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	041a      	lsls	r2, r3, #16
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	611a      	str	r2, [r3, #16]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
	...

08002814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e12b      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff f9b8 	bl	8001bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002878:	f000 ffea 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 800287c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a81      	ldr	r2, [pc, #516]	; (8002a88 <HAL_I2C_Init+0x274>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d807      	bhi.n	8002898 <HAL_I2C_Init+0x84>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a80      	ldr	r2, [pc, #512]	; (8002a8c <HAL_I2C_Init+0x278>)
 800288c:	4293      	cmp	r3, r2
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e006      	b.n	80028a6 <HAL_I2C_Init+0x92>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a7d      	ldr	r2, [pc, #500]	; (8002a90 <HAL_I2C_Init+0x27c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0e7      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a78      	ldr	r2, [pc, #480]	; (8002a94 <HAL_I2C_Init+0x280>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
 80028b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a6a      	ldr	r2, [pc, #424]	; (8002a88 <HAL_I2C_Init+0x274>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d802      	bhi.n	80028e8 <HAL_I2C_Init+0xd4>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3301      	adds	r3, #1
 80028e6:	e009      	b.n	80028fc <HAL_I2C_Init+0xe8>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	4a69      	ldr	r2, [pc, #420]	; (8002a98 <HAL_I2C_Init+0x284>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	3301      	adds	r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	430b      	orrs	r3, r1
 8002902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800290e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	495c      	ldr	r1, [pc, #368]	; (8002a88 <HAL_I2C_Init+0x274>)
 8002918:	428b      	cmp	r3, r1
 800291a:	d819      	bhi.n	8002950 <HAL_I2C_Init+0x13c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e59      	subs	r1, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fbb1 f3f3 	udiv	r3, r1, r3
 800292a:	1c59      	adds	r1, r3, #1
 800292c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002930:	400b      	ands	r3, r1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_I2C_Init+0x138>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1e59      	subs	r1, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fbb1 f3f3 	udiv	r3, r1, r3
 8002944:	3301      	adds	r3, #1
 8002946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294a:	e051      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 800294c:	2304      	movs	r3, #4
 800294e:	e04f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <HAL_I2C_Init+0x168>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	440b      	add	r3, r1
 8002966:	fbb0 f3f3 	udiv	r3, r0, r3
 800296a:	3301      	adds	r3, #1
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e012      	b.n	80029a2 <HAL_I2C_Init+0x18e>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	0099      	lsls	r1, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Init+0x196>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e022      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10e      	bne.n	80029d0 <HAL_I2C_Init+0x1bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e58      	subs	r0, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	440b      	add	r3, r1
 80029c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ce:	e00f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	0099      	lsls	r1, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	6809      	ldr	r1, [r1, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6911      	ldr	r1, [r2, #16]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68d2      	ldr	r2, [r2, #12]
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	000186a0 	.word	0x000186a0
 8002a8c:	001e847f 	.word	0x001e847f
 8002a90:	003d08ff 	.word	0x003d08ff
 8002a94:	431bde83 	.word	0x431bde83
 8002a98:	10624dd3 	.word	0x10624dd3

08002a9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	817b      	strh	r3, [r7, #10]
 8002aac:	4613      	mov	r3, r2
 8002aae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff fb3e 	bl	8002130 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	f040 80e0 	bne.w	8002c84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2319      	movs	r3, #25
 8002aca:	2201      	movs	r2, #1
 8002acc:	4970      	ldr	r1, [pc, #448]	; (8002c90 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f964 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0d3      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_I2C_Master_Transmit+0x50>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e0cc      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d007      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2221      	movs	r2, #33	; 0x21
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	893a      	ldrh	r2, [r7, #8]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a50      	ldr	r2, [pc, #320]	; (8002c94 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b54:	8979      	ldrh	r1, [r7, #10]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f89c 	bl	8002c98 <I2C_MasterRequestWrite>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e08d      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b80:	e066      	b.n	8002c50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f9de 	bl	8002f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06b      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d11b      	bne.n	8002c24 <HAL_I2C_Master_Transmit+0x188>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d017      	beq.n	8002c24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	6a39      	ldr	r1, [r7, #32]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f9ce 	bl	8002fca <I2C_WaitOnBTFFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d107      	bne.n	8002c4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e01a      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d194      	bne.n	8002b82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	00100002 	.word	0x00100002
 8002c94:	ffff0000 	.word	0xffff0000

08002c98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d006      	beq.n	8002cc2 <I2C_MasterRequestWrite+0x2a>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d003      	beq.n	8002cc2 <I2C_MasterRequestWrite+0x2a>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc0:	d108      	bne.n	8002cd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e00b      	b.n	8002cec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	2b12      	cmp	r3, #18
 8002cda:	d107      	bne.n	8002cec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f84f 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d12:	d103      	bne.n	8002d1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e035      	b.n	8002d8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d28:	d108      	bne.n	8002d3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d38:	611a      	str	r2, [r3, #16]
 8002d3a:	e01b      	b.n	8002d74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d3c:	897b      	ldrh	r3, [r7, #10]
 8002d3e:	11db      	asrs	r3, r3, #7
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0306 	and.w	r3, r3, #6
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f063 030f 	orn	r3, r3, #15
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	490e      	ldr	r1, [pc, #56]	; (8002d94 <I2C_MasterRequestWrite+0xfc>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f875 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e010      	b.n	8002d8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4907      	ldr	r1, [pc, #28]	; (8002d98 <I2C_MasterRequestWrite+0x100>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f865 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	00010008 	.word	0x00010008
 8002d98:	00010002 	.word	0x00010002

08002d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dac:	e025      	b.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d021      	beq.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db6:	f7ff f9bb 	bl	8002130 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d116      	bne.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 0220 	orr.w	r2, r3, #32
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e023      	b.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10d      	bne.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	e00c      	b.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d0b6      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e58:	e051      	b.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e68:	d123      	bne.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0204 	orr.w	r2, r3, #4
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e046      	b.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d021      	beq.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7ff f939 	bl	8002130 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d116      	bne.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e020      	b.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10c      	bne.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e00b      	b.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d18d      	bne.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f54:	e02d      	b.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f878 	bl	800304c <I2C_IsAcknowledgeFailed>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e02d      	b.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d021      	beq.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7ff f8df 	bl	8002130 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d116      	bne.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d1ca      	bne.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd6:	e02d      	b.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f837 	bl	800304c <I2C_IsAcknowledgeFailed>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e02d      	b.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d021      	beq.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	f7ff f89e 	bl	8002130 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d1ca      	bne.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003062:	d11b      	bne.n	800309c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800306c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e272      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8087 	beq.w	80031d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c8:	4b92      	ldr	r3, [pc, #584]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d00c      	beq.n	80030ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030d4:	4b8f      	ldr	r3, [pc, #572]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d112      	bne.n	8003106 <HAL_RCC_OscConfig+0x5e>
 80030e0:	4b8c      	ldr	r3, [pc, #560]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d10b      	bne.n	8003106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ee:	4b89      	ldr	r3, [pc, #548]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d06c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x12c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d168      	bne.n	80031d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e24c      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x76>
 8003110:	4b80      	ldr	r3, [pc, #512]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a7f      	ldr	r2, [pc, #508]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	e02e      	b.n	800317c <HAL_RCC_OscConfig+0xd4>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x98>
 8003126:	4b7b      	ldr	r3, [pc, #492]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a7a      	ldr	r2, [pc, #488]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800312c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b78      	ldr	r3, [pc, #480]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a77      	ldr	r2, [pc, #476]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xd4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0xbc>
 800314a:	4b72      	ldr	r3, [pc, #456]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a71      	ldr	r2, [pc, #452]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b6f      	ldr	r3, [pc, #444]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6e      	ldr	r2, [pc, #440]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xd4>
 8003164:	4b6b      	ldr	r3, [pc, #428]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a6a      	ldr	r2, [pc, #424]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b68      	ldr	r3, [pc, #416]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a67      	ldr	r2, [pc, #412]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe ffd4 	bl	8002130 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe ffd0 	bl	8002130 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e200      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xe4>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe ffc0 	bl	8002130 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe ffbc 	bl	8002130 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1ec      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x10c>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d063      	beq.n	80032aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e2:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ee:	4b49      	ldr	r3, [pc, #292]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d11c      	bne.n	8003234 <HAL_RCC_OscConfig+0x18c>
 80031fa:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d116      	bne.n	8003234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x176>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1c0      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4939      	ldr	r1, [pc, #228]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	e03a      	b.n	80032aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800323c:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fe ff75 	bl	8002130 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7fe ff71 	bl	8002130 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e1a1      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4927      	ldr	r1, [pc, #156]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
 800327c:	e015      	b.n	80032aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe ff54 	bl	8002130 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328c:	f7fe ff50 	bl	8002130 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e180      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d03a      	beq.n	800332c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d019      	beq.n	80032f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c4:	f7fe ff34 	bl	8002130 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7fe ff30 	bl	8002130 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e160      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032ea:	2001      	movs	r0, #1
 80032ec:	f000 fb08 	bl	8003900 <RCC_Delay>
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7fe ff1a 	bl	8002130 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fe:	e00f      	b.n	8003320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7fe ff16 	bl	8002130 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d908      	bls.n	8003320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e146      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	42420000 	.word	0x42420000
 800331c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b92      	ldr	r3, [pc, #584]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e9      	bne.n	8003300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a6 	beq.w	8003486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b8b      	ldr	r3, [pc, #556]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10d      	bne.n	8003366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	4a87      	ldr	r2, [pc, #540]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	61d3      	str	r3, [r2, #28]
 8003356:	4b85      	ldr	r3, [pc, #532]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003366:	4b82      	ldr	r3, [pc, #520]	; (8003570 <HAL_RCC_OscConfig+0x4c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d118      	bne.n	80033a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003372:	4b7f      	ldr	r3, [pc, #508]	; (8003570 <HAL_RCC_OscConfig+0x4c8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7e      	ldr	r2, [pc, #504]	; (8003570 <HAL_RCC_OscConfig+0x4c8>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337e:	f7fe fed7 	bl	8002130 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003386:	f7fe fed3 	bl	8002130 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b64      	cmp	r3, #100	; 0x64
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e103      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003398:	4b75      	ldr	r3, [pc, #468]	; (8003570 <HAL_RCC_OscConfig+0x4c8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x312>
 80033ac:	4b6f      	ldr	r3, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4a6e      	ldr	r2, [pc, #440]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6213      	str	r3, [r2, #32]
 80033b8:	e02d      	b.n	8003416 <HAL_RCC_OscConfig+0x36e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x334>
 80033c2:	4b6a      	ldr	r3, [pc, #424]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4a69      	ldr	r2, [pc, #420]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6213      	str	r3, [r2, #32]
 80033ce:	4b67      	ldr	r3, [pc, #412]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4a66      	ldr	r2, [pc, #408]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	f023 0304 	bic.w	r3, r3, #4
 80033d8:	6213      	str	r3, [r2, #32]
 80033da:	e01c      	b.n	8003416 <HAL_RCC_OscConfig+0x36e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d10c      	bne.n	80033fe <HAL_RCC_OscConfig+0x356>
 80033e4:	4b61      	ldr	r3, [pc, #388]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4a60      	ldr	r2, [pc, #384]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	4b5e      	ldr	r3, [pc, #376]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a5d      	ldr	r2, [pc, #372]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6213      	str	r3, [r2, #32]
 80033fc:	e00b      	b.n	8003416 <HAL_RCC_OscConfig+0x36e>
 80033fe:	4b5b      	ldr	r3, [pc, #364]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a5a      	ldr	r2, [pc, #360]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	4b58      	ldr	r3, [pc, #352]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d015      	beq.n	800344a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341e:	f7fe fe87 	bl	8002130 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe fe83 	bl	8002130 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	; 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e0b1      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	4b4b      	ldr	r3, [pc, #300]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ee      	beq.n	8003426 <HAL_RCC_OscConfig+0x37e>
 8003448:	e014      	b.n	8003474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344a:	f7fe fe71 	bl	8002130 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	e00a      	b.n	8003468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fe fe6d 	bl	8002130 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e09b      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	4b40      	ldr	r3, [pc, #256]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ee      	bne.n	8003452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d105      	bne.n	8003486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347a:	4b3c      	ldr	r3, [pc, #240]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4a3b      	ldr	r2, [pc, #236]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8087 	beq.w	800359e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	d061      	beq.n	8003560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d146      	bne.n	8003532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a4:	4b33      	ldr	r3, [pc, #204]	; (8003574 <HAL_RCC_OscConfig+0x4cc>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fe fe41 	bl	8002130 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe fe3d 	bl	8002130 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e06d      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c4:	4b29      	ldr	r3, [pc, #164]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d8:	d108      	bne.n	80034ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4921      	ldr	r1, [pc, #132]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ec:	4b1f      	ldr	r3, [pc, #124]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a19      	ldr	r1, [r3, #32]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	430b      	orrs	r3, r1
 80034fe:	491b      	ldr	r1, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_RCC_OscConfig+0x4cc>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fe fe11 	bl	8002130 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe fe0d 	bl	8002130 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e03d      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x46a>
 8003530:	e035      	b.n	800359e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_RCC_OscConfig+0x4cc>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fe fdfa 	bl	8002130 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe fdf6 	bl	8002130 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e026      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x4c4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x498>
 800355e:	e01e      	b.n	800359e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e019      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
 8003574:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x500>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	429a      	cmp	r2, r3
 800358a:	d106      	bne.n	800359a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000

080035ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0d0      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c0:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d910      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b67      	ldr	r3, [pc, #412]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 0207 	bic.w	r2, r3, #7
 80035d6:	4965      	ldr	r1, [pc, #404]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b63      	ldr	r3, [pc, #396]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b59      	ldr	r3, [pc, #356]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4a58      	ldr	r2, [pc, #352]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800362a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	494d      	ldr	r1, [pc, #308]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d040      	beq.n	80036cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d115      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e073      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367a:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06b      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b39      	ldr	r3, [pc, #228]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4936      	ldr	r1, [pc, #216]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800369c:	f7fe fd48 	bl	8002130 <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fe fd44 	bl	8002130 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e053      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036cc:	4b27      	ldr	r3, [pc, #156]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d210      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 0207 	bic.w	r2, r3, #7
 80036e2:	4922      	ldr	r1, [pc, #136]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e032      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4916      	ldr	r1, [pc, #88]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490e      	ldr	r1, [pc, #56]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f821 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490a      	ldr	r1, [pc, #40]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x1cc>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1d0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fb2c 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40022000 	.word	0x40022000
 8003770:	40021000 	.word	0x40021000
 8003774:	0800e528 	.word	0x0800e528
 8003778:	20000004 	.word	0x20000004
 800377c:	20000008 	.word	0x20000008

08003780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	b490      	push	{r4, r7}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003786:	4b29      	ldr	r3, [pc, #164]	; (800382c <HAL_RCC_GetSysClockFreq+0xac>)
 8003788:	1d3c      	adds	r4, r7, #4
 800378a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800378c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003790:	f240 2301 	movw	r3, #513	; 0x201
 8003794:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	2300      	movs	r3, #0
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037aa:	4b21      	ldr	r3, [pc, #132]	; (8003830 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x40>
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x46>
 80037be:	e02b      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037c2:	623b      	str	r3, [r7, #32]
      break;
 80037c4:	e02b      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	0c9b      	lsrs	r3, r3, #18
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3328      	adds	r3, #40	; 0x28
 80037d0:	443b      	add	r3, r7
 80037d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d012      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	0c5b      	lsrs	r3, r3, #17
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	3328      	adds	r3, #40	; 0x28
 80037ee:	443b      	add	r3, r7
 80037f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037fa:	fb03 f202 	mul.w	r2, r3, r2
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	e004      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4a0b      	ldr	r2, [pc, #44]	; (8003838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	623b      	str	r3, [r7, #32]
      break;
 8003816:	e002      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_GetSysClockFreq+0xb4>)
 800381a:	623b      	str	r3, [r7, #32]
      break;
 800381c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381e:	6a3b      	ldr	r3, [r7, #32]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	; 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc90      	pop	{r4, r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	0800e400 	.word	0x0800e400
 8003830:	40021000 	.word	0x40021000
 8003834:	007a1200 	.word	0x007a1200
 8003838:	003d0900 	.word	0x003d0900

0800383c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003840:	4b02      	ldr	r3, [pc, #8]	; (800384c <HAL_RCC_GetHCLKFreq+0x10>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	20000004 	.word	0x20000004

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003854:	f7ff fff2 	bl	800383c <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	0800e538 	.word	0x0800e538

08003878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800387c:	f7ff ffde 	bl	800383c <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	0adb      	lsrs	r3, r3, #11
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4903      	ldr	r1, [pc, #12]	; (800389c <HAL_RCC_GetPCLK2Freq+0x24>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	0800e538 	.word	0x0800e538

080038a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	220f      	movs	r2, #15
 80038ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RCC_GetClockConfig+0x58>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_RCC_GetClockConfig+0x58>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_GetClockConfig+0x58>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <HAL_RCC_GetClockConfig+0x58>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_RCC_GetClockConfig+0x5c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0207 	and.w	r2, r3, #7
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40022000 	.word	0x40022000

08003900 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <RCC_Delay+0x34>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <RCC_Delay+0x38>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	0a5b      	lsrs	r3, r3, #9
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800391c:	bf00      	nop
  }
  while (Delay --);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1e5a      	subs	r2, r3, #1
 8003922:	60fa      	str	r2, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f9      	bne.n	800391c <RCC_Delay+0x1c>
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	20000004 	.word	0x20000004
 8003938:	10624dd3 	.word	0x10624dd3

0800393c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e041      	b.n	80039d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe f974 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 fc98 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d001      	beq.n	80039f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e032      	b.n	8003a5a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_TIM_Base_Start+0x88>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00e      	beq.n	8003a24 <HAL_TIM_Base_Start+0x48>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0e:	d009      	beq.n	8003a24 <HAL_TIM_Base_Start+0x48>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <HAL_TIM_Base_Start+0x8c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_TIM_Base_Start+0x48>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <HAL_TIM_Base_Start+0x90>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d111      	bne.n	8003a48 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d010      	beq.n	8003a58 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	e007      	b.n	8003a58 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800

08003a70 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6a1a      	ldr	r2, [r3, #32]
 8003a7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10f      	bne.n	8003aa8 <HAL_TIM_Base_Stop+0x38>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6a1a      	ldr	r2, [r3, #32]
 8003a8e:	f240 4344 	movw	r3, #1092	; 0x444
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_Base_Stop+0x38>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e03a      	b.n	8003b4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_TIM_Base_Start_IT+0x98>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x58>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d009      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x58>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x58>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <HAL_TIM_Base_Start_IT+0xa0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d111      	bne.n	8003b38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d010      	beq.n	8003b48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b36:	e007      	b.n	8003b48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800

08003b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e041      	b.n	8003bf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f839 	bl	8003bfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f000 fb86 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <HAL_TIM_PWM_Start+0x24>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e022      	b.n	8003c7a <HAL_TIM_PWM_Start+0x6a>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d109      	bne.n	8003c4e <HAL_TIM_PWM_Start+0x3e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e015      	b.n	8003c7a <HAL_TIM_PWM_Start+0x6a>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d109      	bne.n	8003c68 <HAL_TIM_PWM_Start+0x58>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e008      	b.n	8003c7a <HAL_TIM_PWM_Start+0x6a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e05e      	b.n	8003d40 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start+0x82>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c90:	e013      	b.n	8003cba <HAL_TIM_PWM_Start+0xaa>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0x92>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca0:	e00b      	b.n	8003cba <HAL_TIM_PWM_Start+0xaa>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xa2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb0:	e003      	b.n	8003cba <HAL_TIM_PWM_Start+0xaa>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fd74 	bl	80047b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <HAL_TIM_PWM_Start+0x138>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d107      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a18      	ldr	r2, [pc, #96]	; (8003d48 <HAL_TIM_PWM_Start+0x138>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_TIM_PWM_Start+0xfa>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf4:	d009      	beq.n	8003d0a <HAL_TIM_PWM_Start+0xfa>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <HAL_TIM_PWM_Start+0x13c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_TIM_PWM_Start+0xfa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <HAL_TIM_PWM_Start+0x140>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d111      	bne.n	8003d2e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b06      	cmp	r3, #6
 8003d1a:	d010      	beq.n	8003d3e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2c:	e007      	b.n	8003d3e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800

08003d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0202 	mvn.w	r2, #2
 8003d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fa6f 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa62 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fa71 	bl	800428c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0204 	mvn.w	r2, #4
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa45 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa38 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa47 	bl	800428c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0208 	mvn.w	r2, #8
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa1b 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa0e 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fa1d 	bl	800428c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0210 	mvn.w	r2, #16
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2208      	movs	r2, #8
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9f1 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f9e4 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f9f3 	bl	800428c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0201 	mvn.w	r2, #1
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd fe1c 	bl	8001b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d10e      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d107      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fce1 	bl	80048c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d10e      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d107      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f9b7 	bl	800429e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d10e      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d107      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0220 	mvn.w	r2, #32
 8003f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fcac 	bl	80048b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0ac      	b.n	80040d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	f200 809f 	bhi.w	80040cc <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fc9 	.word	0x08003fc9
 8003f98:	080040cd 	.word	0x080040cd
 8003f9c:	080040cd 	.word	0x080040cd
 8003fa0:	080040cd 	.word	0x080040cd
 8003fa4:	08004009 	.word	0x08004009
 8003fa8:	080040cd 	.word	0x080040cd
 8003fac:	080040cd 	.word	0x080040cd
 8003fb0:	080040cd 	.word	0x080040cd
 8003fb4:	0800404b 	.word	0x0800404b
 8003fb8:	080040cd 	.word	0x080040cd
 8003fbc:	080040cd 	.word	0x080040cd
 8003fc0:	080040cd 	.word	0x080040cd
 8003fc4:	0800408b 	.word	0x0800408b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f9d0 	bl	8004374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0208 	orr.w	r2, r2, #8
 8003fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6999      	ldr	r1, [r3, #24]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	619a      	str	r2, [r3, #24]
      break;
 8004006:	e062      	b.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fa16 	bl	8004440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6999      	ldr	r1, [r3, #24]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	021a      	lsls	r2, r3, #8
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	619a      	str	r2, [r3, #24]
      break;
 8004048:	e041      	b.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fa5f 	bl	8004514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0208 	orr.w	r2, r2, #8
 8004064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0204 	bic.w	r2, r2, #4
 8004074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	61da      	str	r2, [r3, #28]
      break;
 8004088:	e021      	b.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 faa9 	bl	80045e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69d9      	ldr	r1, [r3, #28]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	021a      	lsls	r2, r3, #8
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	61da      	str	r2, [r3, #28]
      break;
 80040ca:	e000      	b.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_TIM_ConfigClockSource+0x18>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e0b3      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x180>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004116:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800411e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004130:	d03e      	beq.n	80041b0 <HAL_TIM_ConfigClockSource+0xd0>
 8004132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004136:	f200 8087 	bhi.w	8004248 <HAL_TIM_ConfigClockSource+0x168>
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	f000 8085 	beq.w	800424c <HAL_TIM_ConfigClockSource+0x16c>
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004146:	d87f      	bhi.n	8004248 <HAL_TIM_ConfigClockSource+0x168>
 8004148:	2b70      	cmp	r3, #112	; 0x70
 800414a:	d01a      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0xa2>
 800414c:	2b70      	cmp	r3, #112	; 0x70
 800414e:	d87b      	bhi.n	8004248 <HAL_TIM_ConfigClockSource+0x168>
 8004150:	2b60      	cmp	r3, #96	; 0x60
 8004152:	d050      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x116>
 8004154:	2b60      	cmp	r3, #96	; 0x60
 8004156:	d877      	bhi.n	8004248 <HAL_TIM_ConfigClockSource+0x168>
 8004158:	2b50      	cmp	r3, #80	; 0x50
 800415a:	d03c      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0xf6>
 800415c:	2b50      	cmp	r3, #80	; 0x50
 800415e:	d873      	bhi.n	8004248 <HAL_TIM_ConfigClockSource+0x168>
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d058      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x136>
 8004164:	2b40      	cmp	r3, #64	; 0x40
 8004166:	d86f      	bhi.n	8004248 <HAL_TIM_ConfigClockSource+0x168>
 8004168:	2b30      	cmp	r3, #48	; 0x30
 800416a:	d064      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0x156>
 800416c:	2b30      	cmp	r3, #48	; 0x30
 800416e:	d86b      	bhi.n	8004248 <HAL_TIM_ConfigClockSource+0x168>
 8004170:	2b20      	cmp	r3, #32
 8004172:	d060      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0x156>
 8004174:	2b20      	cmp	r3, #32
 8004176:	d867      	bhi.n	8004248 <HAL_TIM_ConfigClockSource+0x168>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d05c      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0x156>
 800417c:	2b10      	cmp	r3, #16
 800417e:	d05a      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004180:	e062      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6899      	ldr	r1, [r3, #8]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f000 faee 	bl	8004772 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	609a      	str	r2, [r3, #8]
      break;
 80041ae:	e04e      	b.n	800424e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6899      	ldr	r1, [r3, #8]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f000 fad7 	bl	8004772 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d2:	609a      	str	r2, [r3, #8]
      break;
 80041d4:	e03b      	b.n	800424e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f000 fa4e 	bl	8004684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2150      	movs	r1, #80	; 0x50
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 faa5 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 80041f4:	e02b      	b.n	800424e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6859      	ldr	r1, [r3, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	461a      	mov	r2, r3
 8004204:	f000 fa6c 	bl	80046e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2160      	movs	r1, #96	; 0x60
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fa95 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004214:	e01b      	b.n	800424e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	461a      	mov	r2, r3
 8004224:	f000 fa2e 	bl	8004684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fa85 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004234:	e00b      	b.n	800424e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f000 fa7c 	bl	800473e <TIM_ITRx_SetConfig>
        break;
 8004246:	e002      	b.n	800424e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004248:	bf00      	nop
 800424a:	e000      	b.n	800424e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800424c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a29      	ldr	r2, [pc, #164]	; (8004368 <TIM_Base_SetConfig+0xb8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <TIM_Base_SetConfig+0x30>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d007      	beq.n	80042e0 <TIM_Base_SetConfig+0x30>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a26      	ldr	r2, [pc, #152]	; (800436c <TIM_Base_SetConfig+0xbc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0x30>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a25      	ldr	r2, [pc, #148]	; (8004370 <TIM_Base_SetConfig+0xc0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d108      	bne.n	80042f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <TIM_Base_SetConfig+0xb8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_Base_SetConfig+0x62>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d007      	beq.n	8004312 <TIM_Base_SetConfig+0x62>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a19      	ldr	r2, [pc, #100]	; (800436c <TIM_Base_SetConfig+0xbc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_Base_SetConfig+0x62>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <TIM_Base_SetConfig+0xc0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d108      	bne.n	8004324 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a07      	ldr	r2, [pc, #28]	; (8004368 <TIM_Base_SetConfig+0xb8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d103      	bne.n	8004358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	615a      	str	r2, [r3, #20]
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800

08004374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f023 0302 	bic.w	r3, r3, #2
 80043bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <TIM_OC1_SetConfig+0xc8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10c      	bne.n	80043ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0308 	bic.w	r3, r3, #8
 80043d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a13      	ldr	r2, [pc, #76]	; (800443c <TIM_OC1_SetConfig+0xc8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d111      	bne.n	8004416 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40012c00 	.word	0x40012c00

08004440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0210 	bic.w	r2, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0320 	bic.w	r3, r3, #32
 800448a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <TIM_OC2_SetConfig+0xd0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10d      	bne.n	80044bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a14      	ldr	r2, [pc, #80]	; (8004510 <TIM_OC2_SetConfig+0xd0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d113      	bne.n	80044ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00

08004514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800455c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <TIM_OC3_SetConfig+0xd0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10d      	bne.n	800458e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800458c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <TIM_OC3_SetConfig+0xd0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d113      	bne.n	80045be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800459c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	621a      	str	r2, [r3, #32]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00

080045e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	031b      	lsls	r3, r3, #12
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a0f      	ldr	r2, [pc, #60]	; (8004680 <TIM_OC4_SetConfig+0x98>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d109      	bne.n	800465c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800464e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00

08004684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 030a 	bic.w	r3, r3, #10
 80046c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f023 0210 	bic.w	r2, r3, #16
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800470a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	031b      	lsls	r3, r3, #12
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800471c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	621a      	str	r2, [r3, #32]
}
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	f043 0307 	orr.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004772:	b480      	push	{r7}
 8004774:	b087      	sub	sp, #28
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	021a      	lsls	r2, r3, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	431a      	orrs	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4313      	orrs	r3, r2
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	609a      	str	r2, [r3, #8]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2201      	movs	r2, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	401a      	ands	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800480c:	2302      	movs	r3, #2
 800480e:	e046      	b.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485c:	d009      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10c      	bne.n	800488c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4313      	orrs	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800

080048b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e03f      	b.n	800496a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd fa08 	bl	8001d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	; 0x24
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800491a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fc85 	bl	800522c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b08a      	sub	sp, #40	; 0x28
 8004976:	af02      	add	r7, sp, #8
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b20      	cmp	r3, #32
 8004990:	d17c      	bne.n	8004a8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <HAL_UART_Transmit+0x2c>
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e075      	b.n	8004a8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Transmit+0x3e>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e06e      	b.n	8004a8e <HAL_UART_Transmit+0x11c>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2221      	movs	r2, #33	; 0x21
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c6:	f7fd fbb3 	bl	8002130 <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e0:	d108      	bne.n	80049f4 <HAL_UART_Transmit+0x82>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	e003      	b.n	80049fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a04:	e02a      	b.n	8004a5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2180      	movs	r1, #128	; 0x80
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fa38 	bl	8004e86 <UART_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e036      	b.n	8004a8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	3302      	adds	r3, #2
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e007      	b.n	8004a4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1cf      	bne.n	8004a06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2140      	movs	r1, #64	; 0x40
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fa08 	bl	8004e86 <UART_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e006      	b.n	8004a8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e000      	b.n	8004a8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a8c:	2302      	movs	r3, #2
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d11d      	bne.n	8004aec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_UART_Receive_IT+0x26>
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e016      	b.n	8004aee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Receive_IT+0x38>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e00f      	b.n	8004aee <HAL_UART_Receive_IT+0x58>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fa19 	bl	8004f1a <UART_Start_Receive_IT>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	e000      	b.n	8004aee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10d      	bne.n	8004b4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_UART_IRQHandler+0x52>
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fac9 	bl	80050da <UART_Receive_IT>
      return;
 8004b48:	e17b      	b.n	8004e42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80b1 	beq.w	8004cb4 <HAL_UART_IRQHandler+0x1bc>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d105      	bne.n	8004b68 <HAL_UART_IRQHandler+0x70>
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 80a6 	beq.w	8004cb4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_UART_IRQHandler+0x90>
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_UART_IRQHandler+0xb0>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	f043 0202 	orr.w	r2, r3, #2
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xd0>
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	f043 0204 	orr.w	r2, r3, #4
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00f      	beq.n	8004bf2 <HAL_UART_IRQHandler+0xfa>
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <HAL_UART_IRQHandler+0xee>
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f043 0208 	orr.w	r2, r3, #8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 811e 	beq.w	8004e38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_UART_IRQHandler+0x11e>
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fa62 	bl	80050da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf14      	ite	ne
 8004c24:	2301      	movne	r3, #1
 8004c26:	2300      	moveq	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <HAL_UART_IRQHandler+0x146>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d031      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9a4 	bl	8004f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d023      	beq.n	8004c9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d013      	beq.n	8004c92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	4a76      	ldr	r2, [pc, #472]	; (8004e48 <HAL_UART_IRQHandler+0x350>)
 8004c70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fd fba2 	bl	80023c0 <HAL_DMA_Abort_IT>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c90:	e00e      	b.n	8004cb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8e3 	bl	8004e5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c98:	e00a      	b.n	8004cb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8df 	bl	8004e5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	e006      	b.n	8004cb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8db 	bl	8004e5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cae:	e0c3      	b.n	8004e38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	bf00      	nop
    return;
 8004cb2:	e0c1      	b.n	8004e38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f040 80a1 	bne.w	8004e00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 809b 	beq.w	8004e00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8095 	beq.w	8004e00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d04e      	beq.n	8004d98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d04:	8a3b      	ldrh	r3, [r7, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8098 	beq.w	8004e3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d10:	8a3a      	ldrh	r2, [r7, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	f080 8092 	bcs.w	8004e3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8a3a      	ldrh	r2, [r7, #16]
 8004d1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d02b      	beq.n	8004d80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0210 	bic.w	r2, r2, #16
 8004d74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd fae5 	bl	800234a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f86d 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d96:	e051      	b.n	8004e3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d047      	beq.n	8004e40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004db0:	8a7b      	ldrh	r3, [r7, #18]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d044      	beq.n	8004e40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dc4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0210 	bic.w	r2, r2, #16
 8004df2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004df4:	8a7b      	ldrh	r3, [r7, #18]
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f839 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dfe:	e01f      	b.n	8004e40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_UART_IRQHandler+0x324>
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f8f9 	bl	800500c <UART_Transmit_IT>
    return;
 8004e1a:	e012      	b.n	8004e42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <HAL_UART_IRQHandler+0x34a>
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f93a 	bl	80050aa <UART_EndTransmit_IT>
    return;
 8004e36:	e004      	b.n	8004e42 <HAL_UART_IRQHandler+0x34a>
    return;
 8004e38:	bf00      	nop
 8004e3a:	e002      	b.n	8004e42 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e40:	bf00      	nop
  }
}
 8004e42:	3728      	adds	r7, #40	; 0x28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	08004fe5 	.word	0x08004fe5

08004e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr

08004e5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4613      	mov	r3, r2
 8004e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e96:	e02c      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d028      	beq.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea6:	f7fd f943 	bl	8002130 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d21d      	bcs.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ec4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e00f      	b.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4013      	ands	r3, r2
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	bf0c      	ite	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	2300      	movne	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d0c3      	beq.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	4613      	mov	r3, r2
 8004f26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	88fa      	ldrh	r2, [r7, #6]
 8004f32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2222      	movs	r2, #34	; 0x22
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f5e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0220 	orr.w	r2, r2, #32
 8004f7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fa2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d107      	bne.n	8004fcc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0210 	bic.w	r2, r2, #16
 8004fca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7ff ff2d 	bl	8004e5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b21      	cmp	r3, #33	; 0x21
 800501e:	d13e      	bne.n	800509e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005028:	d114      	bne.n	8005054 <UART_Transmit_IT+0x48>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d110      	bne.n	8005054 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005046:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	1c9a      	adds	r2, r3, #2
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	621a      	str	r2, [r3, #32]
 8005052:	e008      	b.n	8005066 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6211      	str	r1, [r2, #32]
 800505e:	781a      	ldrb	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4619      	mov	r1, r3
 8005074:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005088:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005098:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr

080050aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff febe 	bl	8004e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b22      	cmp	r3, #34	; 0x22
 80050ec:	f040 8099 	bne.w	8005222 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f8:	d117      	bne.n	800512a <UART_Receive_IT+0x50>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d113      	bne.n	800512a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	b29b      	uxth	r3, r3
 8005114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005118:	b29a      	uxth	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	1c9a      	adds	r2, r3, #2
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
 8005128:	e026      	b.n	8005178 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	d007      	beq.n	800514e <UART_Receive_IT+0x74>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <UART_Receive_IT+0x82>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	e008      	b.n	800516e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005168:	b2da      	uxtb	r2, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29b      	uxth	r3, r3
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4619      	mov	r1, r3
 8005186:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005188:	2b00      	cmp	r3, #0
 800518a:	d148      	bne.n	800521e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0220 	bic.w	r2, r2, #32
 800519a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d123      	bne.n	8005214 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0210 	bic.w	r2, r2, #16
 80051e0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d10a      	bne.n	8005206 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fe2f 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
 8005212:	e002      	b.n	800521a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fb fe6d 	bl	8000ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e002      	b.n	8005224 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005266:	f023 030c 	bic.w	r3, r3, #12
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6812      	ldr	r2, [r2, #0]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	430b      	orrs	r3, r1
 8005272:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2c      	ldr	r2, [pc, #176]	; (8005340 <UART_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d103      	bne.n	800529c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7fe faf0 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	e002      	b.n	80052a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800529c:	f7fe fad8 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 80052a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009a      	lsls	r2, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b8:	4a22      	ldr	r2, [pc, #136]	; (8005344 <UART_SetConfig+0x118>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	0119      	lsls	r1, r3, #4
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009a      	lsls	r2, r3, #2
 80052cc:	441a      	add	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052d8:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <UART_SetConfig+0x118>)
 80052da:	fba3 0302 	umull	r0, r3, r3, r2
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	2064      	movs	r0, #100	; 0x64
 80052e2:	fb00 f303 	mul.w	r3, r0, r3
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	3332      	adds	r3, #50	; 0x32
 80052ec:	4a15      	ldr	r2, [pc, #84]	; (8005344 <UART_SetConfig+0x118>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052f8:	4419      	add	r1, r3
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009a      	lsls	r2, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <UART_SetConfig+0x118>)
 8005312:	fba3 0302 	umull	r0, r3, r3, r2
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	2064      	movs	r0, #100	; 0x64
 800531a:	fb00 f303 	mul.w	r3, r0, r3
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	3332      	adds	r3, #50	; 0x32
 8005324:	4a07      	ldr	r2, [pc, #28]	; (8005344 <UART_SetConfig+0x118>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	f003 020f 	and.w	r2, r3, #15
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	440a      	add	r2, r1
 8005336:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40013800 	.word	0x40013800
 8005344:	51eb851f 	.word	0x51eb851f

08005348 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800534e:	f3ef 8305 	mrs	r3, IPSR
 8005352:	60bb      	str	r3, [r7, #8]
  return(result);
 8005354:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10f      	bne.n	800537a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800535a:	f3ef 8310 	mrs	r3, PRIMASK
 800535e:	607b      	str	r3, [r7, #4]
  return(result);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <osKernelInitialize+0x32>
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <osKernelInitialize+0x60>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d109      	bne.n	8005382 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800536e:	f3ef 8311 	mrs	r3, BASEPRI
 8005372:	603b      	str	r3, [r7, #0]
  return(result);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800537a:	f06f 0305 	mvn.w	r3, #5
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e00c      	b.n	800539c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <osKernelInitialize+0x60>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d105      	bne.n	8005396 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <osKernelInitialize+0x60>)
 800538c:	2201      	movs	r2, #1
 800538e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e002      	b.n	800539c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800539c:	68fb      	ldr	r3, [r7, #12]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	20000448 	.word	0x20000448

080053ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b2:	f3ef 8305 	mrs	r3, IPSR
 80053b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80053b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10f      	bne.n	80053de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053be:	f3ef 8310 	mrs	r3, PRIMASK
 80053c2:	607b      	str	r3, [r7, #4]
  return(result);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <osKernelStart+0x32>
 80053ca:	4b11      	ldr	r3, [pc, #68]	; (8005410 <osKernelStart+0x64>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d109      	bne.n	80053e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053d2:	f3ef 8311 	mrs	r3, BASEPRI
 80053d6:	603b      	str	r3, [r7, #0]
  return(result);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80053de:	f06f 0305 	mvn.w	r3, #5
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e00e      	b.n	8005404 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <osKernelStart+0x64>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d107      	bne.n	80053fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <osKernelStart+0x64>)
 80053f0:	2202      	movs	r2, #2
 80053f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80053f4:	f001 ff56 	bl	80072a4 <vTaskStartScheduler>
      stat = osOK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e002      	b.n	8005404 <osKernelStart+0x58>
    } else {
      stat = osError;
 80053fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005402:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005404:	68fb      	ldr	r3, [r7, #12]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000448 	.word	0x20000448

08005414 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800541a:	f3ef 8305 	mrs	r3, IPSR
 800541e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005420:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10f      	bne.n	8005446 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005426:	f3ef 8310 	mrs	r3, PRIMASK
 800542a:	607b      	str	r3, [r7, #4]
  return(result);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <osKernelGetTickCount+0x32>
 8005432:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <osKernelGetTickCount+0x4c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d109      	bne.n	800544e <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800543a:	f3ef 8311 	mrs	r3, BASEPRI
 800543e:	603b      	str	r3, [r7, #0]
  return(result);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8005446:	f002 f857 	bl	80074f8 <xTaskGetTickCountFromISR>
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	e002      	b.n	8005454 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800544e:	f002 f845 	bl	80074dc <xTaskGetTickCount>
 8005452:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8005454:	68fb      	ldr	r3, [r7, #12]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000448 	.word	0x20000448

08005464 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b092      	sub	sp, #72	; 0x48
 8005468:	af04      	add	r7, sp, #16
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005474:	f3ef 8305 	mrs	r3, IPSR
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800547c:	2b00      	cmp	r3, #0
 800547e:	f040 8094 	bne.w	80055aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005482:	f3ef 8310 	mrs	r3, PRIMASK
 8005486:	623b      	str	r3, [r7, #32]
  return(result);
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 808d 	bne.w	80055aa <osThreadNew+0x146>
 8005490:	4b48      	ldr	r3, [pc, #288]	; (80055b4 <osThreadNew+0x150>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d106      	bne.n	80054a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005498:	f3ef 8311 	mrs	r3, BASEPRI
 800549c:	61fb      	str	r3, [r7, #28]
  return(result);
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f040 8082 	bne.w	80055aa <osThreadNew+0x146>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d07e      	beq.n	80055aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80054b0:	2318      	movs	r3, #24
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80054b4:	2300      	movs	r3, #0
 80054b6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80054b8:	f107 031b 	add.w	r3, r7, #27
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80054be:	f04f 33ff 	mov.w	r3, #4294967295
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d045      	beq.n	8005556 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <osThreadNew+0x74>
        name = attr->name;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <osThreadNew+0x9a>
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	2b38      	cmp	r3, #56	; 0x38
 80054f0:	d805      	bhi.n	80054fe <osThreadNew+0x9a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <osThreadNew+0x9e>
        return (NULL);
 80054fe:	2300      	movs	r3, #0
 8005500:	e054      	b.n	80055ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00e      	beq.n	8005538 <osThreadNew+0xd4>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	2bbf      	cmp	r3, #191	; 0xbf
 8005520:	d90a      	bls.n	8005538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <osThreadNew+0xd4>
        mem = 1;
 8005532:	2301      	movs	r3, #1
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
 8005536:	e010      	b.n	800555a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10c      	bne.n	800555a <osThreadNew+0xf6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d108      	bne.n	800555a <osThreadNew+0xf6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <osThreadNew+0xf6>
          mem = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
 8005554:	e001      	b.n	800555a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	2b01      	cmp	r3, #1
 800555e:	d110      	bne.n	8005582 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005568:	9202      	str	r2, [sp, #8]
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f001 fc32 	bl	8006de0 <xTaskCreateStatic>
 800557c:	4603      	mov	r3, r0
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e013      	b.n	80055aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	2b00      	cmp	r3, #0
 8005586:	d110      	bne.n	80055aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	b29a      	uxth	r2, r3
 800558c:	f107 0314 	add.w	r3, r7, #20
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f001 fc7c 	bl	8006e98 <xTaskCreate>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d001      	beq.n	80055aa <osThreadNew+0x146>
          hTask = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055aa:	697b      	ldr	r3, [r7, #20]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3738      	adds	r7, #56	; 0x38
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000448 	.word	0x20000448

080055b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c0:	f3ef 8305 	mrs	r3, IPSR
 80055c4:	613b      	str	r3, [r7, #16]
  return(result);
 80055c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10f      	bne.n	80055ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055cc:	f3ef 8310 	mrs	r3, PRIMASK
 80055d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <osDelay+0x34>
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <osDelay+0x58>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d109      	bne.n	80055f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055e0:	f3ef 8311 	mrs	r3, BASEPRI
 80055e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <osDelay+0x3c>
    stat = osErrorISR;
 80055ec:	f06f 0305 	mvn.w	r3, #5
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e007      	b.n	8005604 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <osDelay+0x4c>
      vTaskDelay(ticks);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f001 fe1c 	bl	800723c <vTaskDelay>
    }
  }

  return (stat);
 8005604:	697b      	ldr	r3, [r7, #20]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000448 	.word	0x20000448

08005614 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800561c:	f3ef 8305 	mrs	r3, IPSR
 8005620:	61bb      	str	r3, [r7, #24]
  return(result);
 8005622:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10f      	bne.n	8005648 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005628:	f3ef 8310 	mrs	r3, PRIMASK
 800562c:	617b      	str	r3, [r7, #20]
  return(result);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d109      	bne.n	8005648 <osDelayUntil+0x34>
 8005634:	4b10      	ldr	r3, [pc, #64]	; (8005678 <osDelayUntil+0x64>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d109      	bne.n	8005650 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800563c:	f3ef 8311 	mrs	r3, BASEPRI
 8005640:	613b      	str	r3, [r7, #16]
  return(result);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8005648:	f06f 0305 	mvn.w	r3, #5
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e00e      	b.n	800566e <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8005650:	2300      	movs	r3, #0
 8005652:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8005654:	f001 ff42 	bl	80074dc <xTaskGetTickCount>
 8005658:	4603      	mov	r3, r0
 800565a:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	1ad2      	subs	r2, r2, r3
 8005662:	f107 030c 	add.w	r3, r7, #12
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f001 fd69 	bl	8007140 <vTaskDelayUntil>
  }

  return (stat);
 800566e:	69fb      	ldr	r3, [r7, #28]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000448 	.word	0x20000448

0800567c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b08c      	sub	sp, #48	; 0x30
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800568c:	f3ef 8305 	mrs	r3, IPSR
 8005690:	61bb      	str	r3, [r7, #24]
  return(result);
 8005692:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005694:	2b00      	cmp	r3, #0
 8005696:	f040 8086 	bne.w	80057a6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569a:	f3ef 8310 	mrs	r3, PRIMASK
 800569e:	617b      	str	r3, [r7, #20]
  return(result);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d17f      	bne.n	80057a6 <osSemaphoreNew+0x12a>
 80056a6:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <osSemaphoreNew+0x134>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d105      	bne.n	80056ba <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056ae:	f3ef 8311 	mrs	r3, BASEPRI
 80056b2:	613b      	str	r3, [r7, #16]
  return(result);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d175      	bne.n	80057a6 <osSemaphoreNew+0x12a>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d072      	beq.n	80057a6 <osSemaphoreNew+0x12a>
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d86e      	bhi.n	80057a6 <osSemaphoreNew+0x12a>
    mem = -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d015      	beq.n	8005700 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <osSemaphoreNew+0x6e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b4f      	cmp	r3, #79	; 0x4f
 80056e2:	d902      	bls.n	80056ea <osSemaphoreNew+0x6e>
        mem = 1;
 80056e4:	2301      	movs	r3, #1
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	e00c      	b.n	8005704 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d108      	bne.n	8005704 <osSemaphoreNew+0x88>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <osSemaphoreNew+0x88>
          mem = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	e001      	b.n	8005704 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d04c      	beq.n	80057a6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d128      	bne.n	8005764 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d10a      	bne.n	800572e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2203      	movs	r2, #3
 800571e:	9200      	str	r2, [sp, #0]
 8005720:	2200      	movs	r2, #0
 8005722:	2100      	movs	r1, #0
 8005724:	2001      	movs	r0, #1
 8005726:	f000 fbb9 	bl	8005e9c <xQueueGenericCreateStatic>
 800572a:	6278      	str	r0, [r7, #36]	; 0x24
 800572c:	e005      	b.n	800573a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800572e:	2203      	movs	r2, #3
 8005730:	2100      	movs	r1, #0
 8005732:	2001      	movs	r0, #1
 8005734:	f000 fc29 	bl	8005f8a <xQueueGenericCreate>
 8005738:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d022      	beq.n	8005786 <osSemaphoreNew+0x10a>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01f      	beq.n	8005786 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005746:	2300      	movs	r3, #0
 8005748:	2200      	movs	r2, #0
 800574a:	2100      	movs	r1, #0
 800574c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800574e:	f000 fce7 	bl	8006120 <xQueueGenericSend>
 8005752:	4603      	mov	r3, r0
 8005754:	2b01      	cmp	r3, #1
 8005756:	d016      	beq.n	8005786 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800575a:	f001 f971 	bl	8006a40 <vQueueDelete>
            hSemaphore = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
 8005762:	e010      	b.n	8005786 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d108      	bne.n	800577c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	461a      	mov	r2, r3
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fc6a 	bl	800604c <xQueueCreateCountingSemaphoreStatic>
 8005778:	6278      	str	r0, [r7, #36]	; 0x24
 800577a:	e004      	b.n	8005786 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 fc9b 	bl	80060ba <xQueueCreateCountingSemaphore>
 8005784:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <osSemaphoreNew+0x11e>
          name = attr->name;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	e001      	b.n	800579e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800579e:	69f9      	ldr	r1, [r7, #28]
 80057a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057a2:	f001 fa97 	bl	8006cd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3728      	adds	r7, #40	; 0x28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000448 	.word	0x20000448

080057b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d103      	bne.n	80057d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80057cc:	f06f 0303 	mvn.w	r3, #3
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	e04b      	b.n	800586c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d4:	f3ef 8305 	mrs	r3, IPSR
 80057d8:	617b      	str	r3, [r7, #20]
  return(result);
 80057da:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10f      	bne.n	8005800 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e0:	f3ef 8310 	mrs	r3, PRIMASK
 80057e4:	613b      	str	r3, [r7, #16]
  return(result);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <osSemaphoreAcquire+0x4c>
 80057ec:	4b22      	ldr	r3, [pc, #136]	; (8005878 <osSemaphoreAcquire+0xc4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d128      	bne.n	8005846 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057f4:	f3ef 8311 	mrs	r3, BASEPRI
 80057f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d022      	beq.n	8005846 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005806:	f06f 0303 	mvn.w	r3, #3
 800580a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800580c:	e02d      	b.n	800586a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005812:	f107 0308 	add.w	r3, r7, #8
 8005816:	461a      	mov	r2, r3
 8005818:	2100      	movs	r1, #0
 800581a:	69b8      	ldr	r0, [r7, #24]
 800581c:	f001 f890 	bl	8006940 <xQueueReceiveFromISR>
 8005820:	4603      	mov	r3, r0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d003      	beq.n	800582e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005826:	f06f 0302 	mvn.w	r3, #2
 800582a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800582c:	e01d      	b.n	800586a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01a      	beq.n	800586a <osSemaphoreAcquire+0xb6>
 8005834:	4b11      	ldr	r3, [pc, #68]	; (800587c <osSemaphoreAcquire+0xc8>)
 8005836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005844:	e011      	b.n	800586a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	69b8      	ldr	r0, [r7, #24]
 800584a:	f000 ff6d 	bl	8006728 <xQueueSemaphoreTake>
 800584e:	4603      	mov	r3, r0
 8005850:	2b01      	cmp	r3, #1
 8005852:	d00b      	beq.n	800586c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800585a:	f06f 0301 	mvn.w	r3, #1
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	e004      	b.n	800586c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005862:	f06f 0302 	mvn.w	r3, #2
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	e000      	b.n	800586c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800586a:	bf00      	nop
      }
    }
  }

  return (stat);
 800586c:	69fb      	ldr	r3, [r7, #28]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000448 	.word	0x20000448
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005896:	f06f 0303 	mvn.w	r3, #3
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	e03e      	b.n	800591c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800589e:	f3ef 8305 	mrs	r3, IPSR
 80058a2:	617b      	str	r3, [r7, #20]
  return(result);
 80058a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058aa:	f3ef 8310 	mrs	r3, PRIMASK
 80058ae:	613b      	str	r3, [r7, #16]
  return(result);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <osSemaphoreRelease+0x4a>
 80058b6:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <osSemaphoreRelease+0xa8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d120      	bne.n	8005900 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058be:	f3ef 8311 	mrs	r3, BASEPRI
 80058c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01a      	beq.n	8005900 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4619      	mov	r1, r3
 80058d4:	69b8      	ldr	r0, [r7, #24]
 80058d6:	f000 fdb9 	bl	800644c <xQueueGiveFromISR>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d003      	beq.n	80058e8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80058e0:	f06f 0302 	mvn.w	r3, #2
 80058e4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80058e6:	e018      	b.n	800591a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d015      	beq.n	800591a <osSemaphoreRelease+0x9a>
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <osSemaphoreRelease+0xac>)
 80058f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80058fe:	e00c      	b.n	800591a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005900:	2300      	movs	r3, #0
 8005902:	2200      	movs	r2, #0
 8005904:	2100      	movs	r1, #0
 8005906:	69b8      	ldr	r0, [r7, #24]
 8005908:	f000 fc0a 	bl	8006120 <xQueueGenericSend>
 800590c:	4603      	mov	r3, r0
 800590e:	2b01      	cmp	r3, #1
 8005910:	d004      	beq.n	800591c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005912:	f06f 0302 	mvn.w	r3, #2
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e000      	b.n	800591c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800591a:	bf00      	nop
    }
  }

  return (stat);
 800591c:	69fb      	ldr	r3, [r7, #28]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000448 	.word	0x20000448
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	; 0x30
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800593c:	2300      	movs	r3, #0
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005940:	f3ef 8305 	mrs	r3, IPSR
 8005944:	61bb      	str	r3, [r7, #24]
  return(result);
 8005946:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005948:	2b00      	cmp	r3, #0
 800594a:	d16f      	bne.n	8005a2c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594c:	f3ef 8310 	mrs	r3, PRIMASK
 8005950:	617b      	str	r3, [r7, #20]
  return(result);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d169      	bne.n	8005a2c <osMessageQueueNew+0xfc>
 8005958:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <osMessageQueueNew+0x108>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d105      	bne.n	800596c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005960:	f3ef 8311 	mrs	r3, BASEPRI
 8005964:	613b      	str	r3, [r7, #16]
  return(result);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d15f      	bne.n	8005a2c <osMessageQueueNew+0xfc>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d05c      	beq.n	8005a2c <osMessageQueueNew+0xfc>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d059      	beq.n	8005a2c <osMessageQueueNew+0xfc>
    mem = -1;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
 800597c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d029      	beq.n	80059d8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d012      	beq.n	80059b2 <osMessageQueueNew+0x82>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	2b4f      	cmp	r3, #79	; 0x4f
 8005992:	d90e      	bls.n	80059b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d302      	bcc.n	80059b2 <osMessageQueueNew+0x82>
        mem = 1;
 80059ac:	2301      	movs	r3, #1
 80059ae:	623b      	str	r3, [r7, #32]
 80059b0:	e014      	b.n	80059dc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d110      	bne.n	80059dc <osMessageQueueNew+0xac>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10c      	bne.n	80059dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d108      	bne.n	80059dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <osMessageQueueNew+0xac>
          mem = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	623b      	str	r3, [r7, #32]
 80059d6:	e001      	b.n	80059dc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d10b      	bne.n	80059fa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2100      	movs	r1, #0
 80059ec:	9100      	str	r1, [sp, #0]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fa53 	bl	8005e9c <xQueueGenericCreateStatic>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24
 80059f8:	e008      	b.n	8005a0c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005a00:	2200      	movs	r2, #0
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fac0 	bl	8005f8a <xQueueGenericCreate>
 8005a0a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00c      	beq.n	8005a2c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	e001      	b.n	8005a24 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a24:	69f9      	ldr	r1, [r7, #28]
 8005a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a28:	f001 f954 	bl	8006cd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3728      	adds	r7, #40	; 0x28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000448 	.word	0x20000448

08005a3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	; 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a54:	f3ef 8305 	mrs	r3, IPSR
 8005a58:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a5a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10f      	bne.n	8005a80 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a60:	f3ef 8310 	mrs	r3, PRIMASK
 8005a64:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d109      	bne.n	8005a80 <osMessageQueuePut+0x44>
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <osMessageQueuePut+0xe0>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d12e      	bne.n	8005ad2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a74:	f3ef 8311 	mrs	r3, BASEPRI
 8005a78:	617b      	str	r3, [r7, #20]
  return(result);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d028      	beq.n	8005ad2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <osMessageQueuePut+0x56>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <osMessageQueuePut+0x56>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005a92:	f06f 0303 	mvn.w	r3, #3
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a98:	e039      	b.n	8005b0e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005a9e:	f107 0210 	add.w	r2, r7, #16
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	6a38      	ldr	r0, [r7, #32]
 8005aa8:	f000 fc38 	bl	800631c <xQueueGenericSendFromISR>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d003      	beq.n	8005aba <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005ab2:	f06f 0302 	mvn.w	r3, #2
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ab8:	e029      	b.n	8005b0e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d026      	beq.n	8005b0e <osMessageQueuePut+0xd2>
 8005ac0:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <osMessageQueuePut+0xe4>)
 8005ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ad0:	e01d      	b.n	8005b0e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <osMessageQueuePut+0xa2>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005ade:	f06f 0303 	mvn.w	r3, #3
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	e014      	b.n	8005b10 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	6a38      	ldr	r0, [r7, #32]
 8005aee:	f000 fb17 	bl	8006120 <xQueueGenericSend>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d00b      	beq.n	8005b10 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005afe:	f06f 0301 	mvn.w	r3, #1
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
 8005b04:	e004      	b.n	8005b10 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005b06:	f06f 0302 	mvn.w	r3, #2
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0c:	e000      	b.n	8005b10 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b0e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000448 	.word	0x20000448
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b3a:	f3ef 8305 	mrs	r3, IPSR
 8005b3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b40:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10f      	bne.n	8005b66 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b46:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <osMessageQueueGet+0x42>
 8005b52:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <osMessageQueueGet+0xdc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d12e      	bne.n	8005bb8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b5e:	617b      	str	r3, [r7, #20]
  return(result);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d028      	beq.n	8005bb8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <osMessageQueueGet+0x54>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <osMessageQueueGet+0x54>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005b78:	f06f 0303 	mvn.w	r3, #3
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b7e:	e038      	b.n	8005bf2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005b84:	f107 0310 	add.w	r3, r7, #16
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	6a38      	ldr	r0, [r7, #32]
 8005b8e:	f000 fed7 	bl	8006940 <xQueueReceiveFromISR>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d003      	beq.n	8005ba0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005b98:	f06f 0302 	mvn.w	r3, #2
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b9e:	e028      	b.n	8005bf2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d025      	beq.n	8005bf2 <osMessageQueueGet+0xce>
 8005ba6:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <osMessageQueueGet+0xe0>)
 8005ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bb6:	e01c      	b.n	8005bf2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <osMessageQueueGet+0xa0>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d103      	bne.n	8005bcc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005bc4:	f06f 0303 	mvn.w	r3, #3
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bca:	e013      	b.n	8005bf4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	6a38      	ldr	r0, [r7, #32]
 8005bd2:	f000 fcc9 	bl	8006568 <xQueueReceive>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d00b      	beq.n	8005bf4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005be2:	f06f 0301 	mvn.w	r3, #1
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
 8005be8:	e004      	b.n	8005bf4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005bea:	f06f 0302 	mvn.w	r3, #2
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf0:	e000      	b.n	8005bf4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bf2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3728      	adds	r7, #40	; 0x28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000448 	.word	0x20000448
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a06      	ldr	r2, [pc, #24]	; (8005c30 <vApplicationGetIdleTaskMemory+0x28>)
 8005c18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4a05      	ldr	r2, [pc, #20]	; (8005c34 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2280      	movs	r2, #128	; 0x80
 8005c24:	601a      	str	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr
 8005c30:	2000044c 	.word	0x2000044c
 8005c34:	2000050c 	.word	0x2000050c

08005c38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a07      	ldr	r2, [pc, #28]	; (8005c64 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4a06      	ldr	r2, [pc, #24]	; (8005c68 <vApplicationGetTimerTaskMemory+0x30>)
 8005c4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c56:	601a      	str	r2, [r3, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	2000070c 	.word	0x2000070c
 8005c68:	200007cc 	.word	0x200007cc

08005c6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f103 0208 	add.w	r2, r3, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f04f 32ff 	mov.w	r2, #4294967295
 8005c84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f103 0208 	add.w	r2, r3, #8
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f103 0208 	add.w	r2, r3, #8
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr

08005caa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr

08005cc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	601a      	str	r2, [r3, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d103      	bne.n	8005d28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e00c      	b.n	8005d42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e002      	b.n	8005d36 <vListInsert+0x2e>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d2f6      	bcs.n	8005d30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
}
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr

08005d78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6892      	ldr	r2, [r2, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6852      	ldr	r2, [r2, #4]
 8005d98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d103      	bne.n	8005dac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr
	...

08005dcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005df6:	f002 fcb1 	bl	800875c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	68f9      	ldr	r1, [r7, #12]
 8005e04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	441a      	add	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	3b01      	subs	r3, #1
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	22ff      	movs	r2, #255	; 0xff
 8005e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	22ff      	movs	r2, #255	; 0xff
 8005e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d114      	bne.n	8005e76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01a      	beq.n	8005e8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3310      	adds	r3, #16
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 fcd1 	bl	8007800 <xTaskRemoveFromEventList>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d012      	beq.n	8005e8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <xQueueGenericReset+0xcc>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	e009      	b.n	8005e8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3310      	adds	r3, #16
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fef6 	bl	8005c6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3324      	adds	r3, #36	; 0x24
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fef1 	bl	8005c6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e8a:	f002 fc97 	bl	80087bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e8e:	2301      	movs	r3, #1
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08e      	sub	sp, #56	; 0x38
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <xQueueGenericCreateStatic+0x52>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <xQueueGenericCreateStatic+0x56>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <xQueueGenericCreateStatic+0x58>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	623b      	str	r3, [r7, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <xQueueGenericCreateStatic+0x7e>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <xQueueGenericCreateStatic+0x82>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <xQueueGenericCreateStatic+0x84>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10a      	bne.n	8005f3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	61fb      	str	r3, [r7, #28]
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f3a:	2350      	movs	r3, #80	; 0x50
 8005f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b50      	cmp	r3, #80	; 0x50
 8005f42:	d00a      	beq.n	8005f5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	61bb      	str	r3, [r7, #24]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00d      	beq.n	8005f80 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f843 	bl	8006006 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3730      	adds	r7, #48	; 0x30
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b08a      	sub	sp, #40	; 0x28
 8005f8e:	af02      	add	r7, sp, #8
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	4613      	mov	r3, r2
 8005f96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	613b      	str	r3, [r7, #16]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	e004      	b.n	8005fca <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	fb02 f303 	mul.w	r3, r2, r3
 8005fc8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3350      	adds	r3, #80	; 0x50
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f002 fcc4 	bl	800895c <pvPortMalloc>
 8005fd4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	3350      	adds	r3, #80	; 0x50
 8005fe0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fea:	79fa      	ldrb	r2, [r7, #7]
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f805 	bl	8006006 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005ffc:	69bb      	ldr	r3, [r7, #24]
	}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e002      	b.n	8006028 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006034:	2101      	movs	r1, #1
 8006036:	69b8      	ldr	r0, [r7, #24]
 8006038:	f7ff fec8 	bl	8005dcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	; 0x28
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	61bb      	str	r3, [r7, #24]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d90a      	bls.n	8006092 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	617b      	str	r3, [r7, #20]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006092:	2302      	movs	r3, #2
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	2100      	movs	r1, #0
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff fefd 	bl	8005e9c <xQueueGenericCreateStatic>
 80060a2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80060b0:	69fb      	ldr	r3, [r7, #28]
	}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	613b      	str	r3, [r7, #16]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d90a      	bls.n	80060fe <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60fb      	str	r3, [r7, #12]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80060fe:	2202      	movs	r2, #2
 8006100:	2100      	movs	r1, #0
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff ff41 	bl	8005f8a <xQueueGenericCreate>
 8006108:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006116:	697b      	ldr	r3, [r7, #20]
	}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08e      	sub	sp, #56	; 0x38
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800612e:	2300      	movs	r3, #0
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xQueueGenericSend+0x32>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <xQueueGenericSend+0x40>
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <xQueueGenericSend+0x44>
 8006160:	2301      	movs	r3, #1
 8006162:	e000      	b.n	8006166 <xQueueGenericSend+0x46>
 8006164:	2300      	movs	r3, #0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <xQueueGenericSend+0x60>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800617c:	bf00      	nop
 800617e:	e7fe      	b.n	800617e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d103      	bne.n	800618e <xQueueGenericSend+0x6e>
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <xQueueGenericSend+0x72>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <xQueueGenericSend+0x74>
 8006192:	2300      	movs	r3, #0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <xQueueGenericSend+0x8e>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	623b      	str	r3, [r7, #32]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ae:	f001 fced 	bl	8007b8c <xTaskGetSchedulerState>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <xQueueGenericSend+0x9e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <xQueueGenericSend+0xa2>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueGenericSend+0xa4>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueGenericSend+0xbe>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	61fb      	str	r3, [r7, #28]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061de:	f002 fabd 	bl	800875c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d302      	bcc.n	80061f4 <xQueueGenericSend+0xd4>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d129      	bne.n	8006248 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061fa:	f000 fc5b 	bl	8006ab4 <prvCopyDataToQueue>
 80061fe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d010      	beq.n	800622a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	3324      	adds	r3, #36	; 0x24
 800620c:	4618      	mov	r0, r3
 800620e:	f001 faf7 	bl	8007800 <xTaskRemoveFromEventList>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d013      	beq.n	8006240 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006218:	4b3f      	ldr	r3, [pc, #252]	; (8006318 <xQueueGenericSend+0x1f8>)
 800621a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	e00a      	b.n	8006240 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006230:	4b39      	ldr	r3, [pc, #228]	; (8006318 <xQueueGenericSend+0x1f8>)
 8006232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006240:	f002 fabc 	bl	80087bc <vPortExitCritical>
				return pdPASS;
 8006244:	2301      	movs	r3, #1
 8006246:	e063      	b.n	8006310 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800624e:	f002 fab5 	bl	80087bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006252:	2300      	movs	r3, #0
 8006254:	e05c      	b.n	8006310 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006258:	2b00      	cmp	r3, #0
 800625a:	d106      	bne.n	800626a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800625c:	f107 0314 	add.w	r3, r7, #20
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fb31 	bl	80078c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006266:	2301      	movs	r3, #1
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800626a:	f002 faa7 	bl	80087bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800626e:	f001 f889 	bl	8007384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006272:	f002 fa73 	bl	800875c <vPortEnterCritical>
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800627c:	b25b      	sxtb	r3, r3
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d103      	bne.n	800628c <xQueueGenericSend+0x16c>
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006292:	b25b      	sxtb	r3, r3
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d103      	bne.n	80062a2 <xQueueGenericSend+0x182>
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062a2:	f002 fa8b 	bl	80087bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062a6:	1d3a      	adds	r2, r7, #4
 80062a8:	f107 0314 	add.w	r3, r7, #20
 80062ac:	4611      	mov	r1, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 fb20 	bl	80078f4 <xTaskCheckForTimeOut>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d124      	bne.n	8006304 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062bc:	f000 fcf2 	bl	8006ca4 <prvIsQueueFull>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d018      	beq.n	80062f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	3310      	adds	r3, #16
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 fa46 	bl	8007760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062d6:	f000 fc7d 	bl	8006bd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062da:	f001 f861 	bl	80073a0 <xTaskResumeAll>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f47f af7c 	bne.w	80061de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <xQueueGenericSend+0x1f8>)
 80062e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	e772      	b.n	80061de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062fa:	f000 fc6b 	bl	8006bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062fe:	f001 f84f 	bl	80073a0 <xTaskResumeAll>
 8006302:	e76c      	b.n	80061de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006306:	f000 fc65 	bl	8006bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800630a:	f001 f849 	bl	80073a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800630e:	2300      	movs	r3, #0
		}
	}
}
 8006310:	4618      	mov	r0, r3
 8006312:	3738      	adds	r7, #56	; 0x38
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08e      	sub	sp, #56	; 0x38
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <xQueueGenericSendFromISR+0x3c>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <xQueueGenericSendFromISR+0x40>
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <xQueueGenericSendFromISR+0x42>
 800635c:	2300      	movs	r3, #0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	623b      	str	r3, [r7, #32]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d103      	bne.n	8006386 <xQueueGenericSendFromISR+0x6a>
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <xQueueGenericSendFromISR+0x6e>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <xQueueGenericSendFromISR+0x70>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	61fb      	str	r3, [r7, #28]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063a6:	f002 fa9b 	bl	80088e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063aa:	f3ef 8211 	mrs	r2, BASEPRI
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	61ba      	str	r2, [r7, #24]
 80063c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d302      	bcc.n	80063d8 <xQueueGenericSendFromISR+0xbc>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d12c      	bne.n	8006432 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063e8:	f000 fb64 	bl	8006ab4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d112      	bne.n	800641c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	3324      	adds	r3, #36	; 0x24
 8006402:	4618      	mov	r0, r3
 8006404:	f001 f9fc 	bl	8007800 <xTaskRemoveFromEventList>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00e      	beq.n	800642c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e007      	b.n	800642c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800641c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006420:	3301      	adds	r3, #1
 8006422:	b2db      	uxtb	r3, r3
 8006424:	b25a      	sxtb	r2, r3
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800642c:	2301      	movs	r3, #1
 800642e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006430:	e001      	b.n	8006436 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006432:	2300      	movs	r3, #0
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006440:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006444:	4618      	mov	r0, r3
 8006446:	3738      	adds	r7, #56	; 0x38
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08e      	sub	sp, #56	; 0x38
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	623b      	str	r3, [r7, #32]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <xQueueGiveFromISR+0x48>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	61fb      	str	r3, [r7, #28]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d103      	bne.n	80064a4 <xQueueGiveFromISR+0x58>
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <xQueueGiveFromISR+0x5c>
 80064a4:	2301      	movs	r3, #1
 80064a6:	e000      	b.n	80064aa <xQueueGiveFromISR+0x5e>
 80064a8:	2300      	movs	r3, #0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	61bb      	str	r3, [r7, #24]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064c4:	f002 fa0c 	bl	80088e0 <vPortValidateInterruptPriority>
	__asm volatile
 80064c8:	f3ef 8211 	mrs	r2, BASEPRI
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	617a      	str	r2, [r7, #20]
 80064de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80064e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d22b      	bcs.n	800654c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006506:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650e:	d112      	bne.n	8006536 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	d016      	beq.n	8006546 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	3324      	adds	r3, #36	; 0x24
 800651c:	4618      	mov	r0, r3
 800651e:	f001 f96f 	bl	8007800 <xTaskRemoveFromEventList>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00e      	beq.n	8006546 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	e007      	b.n	8006546 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800653a:	3301      	adds	r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	b25a      	sxtb	r2, r3
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006546:	2301      	movs	r3, #1
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
 800654a:	e001      	b.n	8006550 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800654c:	2300      	movs	r3, #0
 800654e:	637b      	str	r3, [r7, #52]	; 0x34
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f383 8811 	msr	BASEPRI, r3
}
 800655a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800655c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800655e:	4618      	mov	r0, r3
 8006560:	3738      	adds	r7, #56	; 0x38
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08c      	sub	sp, #48	; 0x30
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006574:	2300      	movs	r3, #0
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <xQueueReceive+0x30>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	623b      	str	r3, [r7, #32]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <xQueueReceive+0x3e>
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <xQueueReceive+0x42>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <xQueueReceive+0x44>
 80065aa:	2300      	movs	r3, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xQueueReceive+0x5e>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	61fb      	str	r3, [r7, #28]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c6:	f001 fae1 	bl	8007b8c <xTaskGetSchedulerState>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <xQueueReceive+0x6e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <xQueueReceive+0x72>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <xQueueReceive+0x74>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <xQueueReceive+0x8e>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	61bb      	str	r3, [r7, #24]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80065f6:	f002 f8b1 	bl	800875c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01f      	beq.n	8006646 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800660a:	f000 fabd 	bl	8006b88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	1e5a      	subs	r2, r3, #1
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00f      	beq.n	800663e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	3310      	adds	r3, #16
 8006622:	4618      	mov	r0, r3
 8006624:	f001 f8ec 	bl	8007800 <xTaskRemoveFromEventList>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800662e:	4b3d      	ldr	r3, [pc, #244]	; (8006724 <xQueueReceive+0x1bc>)
 8006630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800663e:	f002 f8bd 	bl	80087bc <vPortExitCritical>
				return pdPASS;
 8006642:	2301      	movs	r3, #1
 8006644:	e069      	b.n	800671a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d103      	bne.n	8006654 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800664c:	f002 f8b6 	bl	80087bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006650:	2300      	movs	r3, #0
 8006652:	e062      	b.n	800671a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800665a:	f107 0310 	add.w	r3, r7, #16
 800665e:	4618      	mov	r0, r3
 8006660:	f001 f932 	bl	80078c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006664:	2301      	movs	r3, #1
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006668:	f002 f8a8 	bl	80087bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800666c:	f000 fe8a 	bl	8007384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006670:	f002 f874 	bl	800875c <vPortEnterCritical>
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800667a:	b25b      	sxtb	r3, r3
 800667c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006680:	d103      	bne.n	800668a <xQueueReceive+0x122>
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006690:	b25b      	sxtb	r3, r3
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d103      	bne.n	80066a0 <xQueueReceive+0x138>
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a0:	f002 f88c 	bl	80087bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066a4:	1d3a      	adds	r2, r7, #4
 80066a6:	f107 0310 	add.w	r3, r7, #16
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 f921 	bl	80078f4 <xTaskCheckForTimeOut>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d123      	bne.n	8006700 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ba:	f000 fadd 	bl	8006c78 <prvIsQueueEmpty>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d017      	beq.n	80066f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	3324      	adds	r3, #36	; 0x24
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 f847 	bl	8007760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d4:	f000 fa7e 	bl	8006bd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066d8:	f000 fe62 	bl	80073a0 <xTaskResumeAll>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d189      	bne.n	80065f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80066e2:	4b10      	ldr	r3, [pc, #64]	; (8006724 <xQueueReceive+0x1bc>)
 80066e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	e780      	b.n	80065f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f6:	f000 fa6d 	bl	8006bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066fa:	f000 fe51 	bl	80073a0 <xTaskResumeAll>
 80066fe:	e77a      	b.n	80065f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006702:	f000 fa67 	bl	8006bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006706:	f000 fe4b 	bl	80073a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800670a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800670c:	f000 fab4 	bl	8006c78 <prvIsQueueEmpty>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	f43f af6f 	beq.w	80065f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006718:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800671a:	4618      	mov	r0, r3
 800671c:	3730      	adds	r7, #48	; 0x30
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	e000ed04 	.word	0xe000ed04

08006728 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08e      	sub	sp, #56	; 0x38
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006732:	2300      	movs	r3, #0
 8006734:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800673a:	2300      	movs	r3, #0
 800673c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	623b      	str	r3, [r7, #32]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	61fb      	str	r3, [r7, #28]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006778:	f001 fa08 	bl	8007b8c <xTaskGetSchedulerState>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d102      	bne.n	8006788 <xQueueSemaphoreTake+0x60>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <xQueueSemaphoreTake+0x64>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <xQueueSemaphoreTake+0x66>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	61bb      	str	r3, [r7, #24]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067a8:	f001 ffd8 	bl	800875c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d024      	beq.n	8006802 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	1e5a      	subs	r2, r3, #1
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80067c8:	f001 fb60 	bl	8007e8c <pvTaskIncrementMutexHeldCount>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00f      	beq.n	80067fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	3310      	adds	r3, #16
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 f80e 	bl	8007800 <xTaskRemoveFromEventList>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067ea:	4b54      	ldr	r3, [pc, #336]	; (800693c <xQueueSemaphoreTake+0x214>)
 80067ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067fa:	f001 ffdf 	bl	80087bc <vPortExitCritical>
				return pdPASS;
 80067fe:	2301      	movs	r3, #1
 8006800:	e097      	b.n	8006932 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d111      	bne.n	800682c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617b      	str	r3, [r7, #20]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006824:	f001 ffca 	bl	80087bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006828:	2300      	movs	r3, #0
 800682a:	e082      	b.n	8006932 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006832:	f107 030c 	add.w	r3, r7, #12
 8006836:	4618      	mov	r0, r3
 8006838:	f001 f846 	bl	80078c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006840:	f001 ffbc 	bl	80087bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006844:	f000 fd9e 	bl	8007384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006848:	f001 ff88 	bl	800875c <vPortEnterCritical>
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006852:	b25b      	sxtb	r3, r3
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d103      	bne.n	8006862 <xQueueSemaphoreTake+0x13a>
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006868:	b25b      	sxtb	r3, r3
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d103      	bne.n	8006878 <xQueueSemaphoreTake+0x150>
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006878:	f001 ffa0 	bl	80087bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800687c:	463a      	mov	r2, r7
 800687e:	f107 030c 	add.w	r3, r7, #12
 8006882:	4611      	mov	r1, r2
 8006884:	4618      	mov	r0, r3
 8006886:	f001 f835 	bl	80078f4 <xTaskCheckForTimeOut>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d132      	bne.n	80068f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006892:	f000 f9f1 	bl	8006c78 <prvIsQueueEmpty>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d026      	beq.n	80068ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80068a4:	f001 ff5a 	bl	800875c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 f98b 	bl	8007bc8 <xTaskPriorityInherit>
 80068b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80068b4:	f001 ff82 	bl	80087bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	3324      	adds	r3, #36	; 0x24
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	4611      	mov	r1, r2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 ff4d 	bl	8007760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068c8:	f000 f984 	bl	8006bd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068cc:	f000 fd68 	bl	80073a0 <xTaskResumeAll>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f47f af68 	bne.w	80067a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80068d8:	4b18      	ldr	r3, [pc, #96]	; (800693c <xQueueSemaphoreTake+0x214>)
 80068da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	e75e      	b.n	80067a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80068ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068ec:	f000 f972 	bl	8006bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068f0:	f000 fd56 	bl	80073a0 <xTaskResumeAll>
 80068f4:	e758      	b.n	80067a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80068f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068f8:	f000 f96c 	bl	8006bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068fc:	f000 fd50 	bl	80073a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006902:	f000 f9b9 	bl	8006c78 <prvIsQueueEmpty>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	f43f af4d 	beq.w	80067a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00d      	beq.n	8006930 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006914:	f001 ff22 	bl	800875c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800691a:	f000 f8b4 	bl	8006a86 <prvGetDisinheritPriorityAfterTimeout>
 800691e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006926:	4618      	mov	r0, r3
 8006928:	f001 fa2a 	bl	8007d80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800692c:	f001 ff46 	bl	80087bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006930:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006932:	4618      	mov	r0, r3
 8006934:	3738      	adds	r7, #56	; 0x38
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	e000ed04 	.word	0xe000ed04

08006940 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08e      	sub	sp, #56	; 0x38
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	623b      	str	r3, [r7, #32]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <xQueueReceiveFromISR+0x3a>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <xQueueReceiveFromISR+0x3e>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <xQueueReceiveFromISR+0x40>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	61fb      	str	r3, [r7, #28]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800699a:	f001 ffa1 	bl	80088e0 <vPortValidateInterruptPriority>
	__asm volatile
 800699e:	f3ef 8211 	mrs	r2, BASEPRI
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	61ba      	str	r2, [r7, #24]
 80069b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d02f      	beq.n	8006a26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069d4:	f000 f8d8 	bl	8006b88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	1e5a      	subs	r2, r3, #1
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80069e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d112      	bne.n	8006a10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d016      	beq.n	8006a20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	3310      	adds	r3, #16
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 ff02 	bl	8007800 <xTaskRemoveFromEventList>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e007      	b.n	8006a20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a14:	3301      	adds	r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	b25a      	sxtb	r2, r3
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006a20:	2301      	movs	r3, #1
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
 8006a24:	e001      	b.n	8006a2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3738      	adds	r7, #56	; 0x38
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <vQueueDelete+0x28>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	60bb      	str	r3, [r7, #8]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f95b 	bl	8006d24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d102      	bne.n	8006a7e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f002 f833 	bl	8008ae4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d006      	beq.n	8006aa4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	e001      	b.n	8006aa8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
	}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10d      	bne.n	8006aee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d14d      	bne.n	8006b76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f8e0 	bl	8007ca4 <xTaskPriorityDisinherit>
 8006ae4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	605a      	str	r2, [r3, #4]
 8006aec:	e043      	b.n	8006b76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d119      	bne.n	8006b28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6898      	ldr	r0, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	461a      	mov	r2, r3
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	f002 ffad 	bl	8009a5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	441a      	add	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d32b      	bcc.n	8006b76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	609a      	str	r2, [r3, #8]
 8006b26:	e026      	b.n	8006b76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68d8      	ldr	r0, [r3, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	461a      	mov	r2, r3
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	f002 ff93 	bl	8009a5e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	425b      	negs	r3, r3
 8006b42:	441a      	add	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d207      	bcs.n	8006b64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	425b      	negs	r3, r3
 8006b5e:	441a      	add	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d105      	bne.n	8006b76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b7e:	697b      	ldr	r3, [r7, #20]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d018      	beq.n	8006bcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	441a      	add	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d303      	bcc.n	8006bbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68d9      	ldr	r1, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6838      	ldr	r0, [r7, #0]
 8006bc8:	f002 ff49 	bl	8009a5e <memcpy>
	}
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bdc:	f001 fdbe 	bl	800875c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006be8:	e011      	b.n	8006c0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d012      	beq.n	8006c18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3324      	adds	r3, #36	; 0x24
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fe02 	bl	8007800 <xTaskRemoveFromEventList>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c02:	f000 fed9 	bl	80079b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	dce9      	bgt.n	8006bea <prvUnlockQueue+0x16>
 8006c16:	e000      	b.n	8006c1a <prvUnlockQueue+0x46>
					break;
 8006c18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	22ff      	movs	r2, #255	; 0xff
 8006c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c22:	f001 fdcb 	bl	80087bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c26:	f001 fd99 	bl	800875c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c32:	e011      	b.n	8006c58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d012      	beq.n	8006c62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3310      	adds	r3, #16
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fddd 	bl	8007800 <xTaskRemoveFromEventList>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c4c:	f000 feb4 	bl	80079b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	dce9      	bgt.n	8006c34 <prvUnlockQueue+0x60>
 8006c60:	e000      	b.n	8006c64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	22ff      	movs	r2, #255	; 0xff
 8006c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c6c:	f001 fda6 	bl	80087bc <vPortExitCritical>
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c80:	f001 fd6c 	bl	800875c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	e001      	b.n	8006c96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c96:	f001 fd91 	bl	80087bc <vPortExitCritical>

	return xReturn;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cac:	f001 fd56 	bl	800875c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d102      	bne.n	8006cc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e001      	b.n	8006cc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cc6:	f001 fd79 	bl	80087bc <vPortExitCritical>

	return xReturn;
 8006cca:	68fb      	ldr	r3, [r7, #12]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	e014      	b.n	8006d0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ce4:	4a0e      	ldr	r2, [pc, #56]	; (8006d20 <vQueueAddToRegistry+0x4c>)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10b      	bne.n	8006d08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006cf0:	490b      	ldr	r1, [pc, #44]	; (8006d20 <vQueueAddToRegistry+0x4c>)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006cfa:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <vQueueAddToRegistry+0x4c>)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4413      	add	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d06:	e006      	b.n	8006d16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b07      	cmp	r3, #7
 8006d12:	d9e7      	bls.n	8006ce4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr
 8006d20:	20000bcc 	.word	0x20000bcc

08006d24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e016      	b.n	8006d60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006d32:	4a10      	ldr	r2, [pc, #64]	; (8006d74 <vQueueUnregisterQueue+0x50>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	4413      	add	r3, r2
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d10b      	bne.n	8006d5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006d42:	4a0c      	ldr	r2, [pc, #48]	; (8006d74 <vQueueUnregisterQueue+0x50>)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2100      	movs	r1, #0
 8006d48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006d4c:	4a09      	ldr	r2, [pc, #36]	; (8006d74 <vQueueUnregisterQueue+0x50>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	4413      	add	r3, r2
 8006d54:	2200      	movs	r2, #0
 8006d56:	605a      	str	r2, [r3, #4]
				break;
 8006d58:	e006      	b.n	8006d68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b07      	cmp	r3, #7
 8006d64:	d9e5      	bls.n	8006d32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006d66:	bf00      	nop
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000bcc 	.word	0x20000bcc

08006d78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d88:	f001 fce8 	bl	800875c <vPortEnterCritical>
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d92:	b25b      	sxtb	r3, r3
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d98:	d103      	bne.n	8006da2 <vQueueWaitForMessageRestricted+0x2a>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d103      	bne.n	8006db8 <vQueueWaitForMessageRestricted+0x40>
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006db8:	f001 fd00 	bl	80087bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d106      	bne.n	8006dd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	3324      	adds	r3, #36	; 0x24
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fceb 	bl	80077a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006dd2:	6978      	ldr	r0, [r7, #20]
 8006dd4:	f7ff fefe 	bl	8006bd4 <prvUnlockQueue>
	}
 8006dd8:	bf00      	nop
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08e      	sub	sp, #56	; 0x38
 8006de4:	af04      	add	r7, sp, #16
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	623b      	str	r3, [r7, #32]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <xTaskCreateStatic+0x46>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	61fb      	str	r3, [r7, #28]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e26:	23c0      	movs	r3, #192	; 0xc0
 8006e28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2bc0      	cmp	r3, #192	; 0xc0
 8006e2e:	d00a      	beq.n	8006e46 <xTaskCreateStatic+0x66>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	61bb      	str	r3, [r7, #24]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01e      	beq.n	8006e8a <xTaskCreateStatic+0xaa>
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01b      	beq.n	8006e8a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e64:	2300      	movs	r3, #0
 8006e66:	9303      	str	r3, [sp, #12]
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	9302      	str	r3, [sp, #8]
 8006e6c:	f107 0314 	add.w	r3, r7, #20
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f851 	bl	8006f24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e84:	f000 f8ec 	bl	8007060 <prvAddNewTaskToReadyList>
 8006e88:	e001      	b.n	8006e8e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e8e:	697b      	ldr	r3, [r7, #20]
	}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3728      	adds	r7, #40	; 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08c      	sub	sp, #48	; 0x30
 8006e9c:	af04      	add	r7, sp, #16
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 fd55 	bl	800895c <pvPortMalloc>
 8006eb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00e      	beq.n	8006ed8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006eba:	20c0      	movs	r0, #192	; 0xc0
 8006ebc:	f001 fd4e 	bl	800895c <pvPortMalloc>
 8006ec0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8006ece:	e005      	b.n	8006edc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ed0:	6978      	ldr	r0, [r7, #20]
 8006ed2:	f001 fe07 	bl	8008ae4 <vPortFree>
 8006ed6:	e001      	b.n	8006edc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d017      	beq.n	8006f12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	2300      	movs	r3, #0
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	9302      	str	r3, [sp, #8]
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 f80f 	bl	8006f24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f06:	69f8      	ldr	r0, [r7, #28]
 8006f08:	f000 f8aa 	bl	8007060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	e002      	b.n	8006f18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f12:	f04f 33ff 	mov.w	r3, #4294967295
 8006f16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f18:	69bb      	ldr	r3, [r7, #24]
	}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	21a5      	movs	r1, #165	; 0xa5
 8006f3e:	f002 fd9c 	bl	8009a7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	f023 0307 	bic.w	r3, r3, #7
 8006f5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	617b      	str	r3, [r7, #20]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	e012      	b.n	8006fa8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	7819      	ldrb	r1, [r3, #0]
 8006f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	4413      	add	r3, r2
 8006f90:	3334      	adds	r3, #52	; 0x34
 8006f92:	460a      	mov	r2, r1
 8006f94:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d006      	beq.n	8006fb0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b13      	cmp	r3, #19
 8006fac:	d9e9      	bls.n	8006f82 <prvInitialiseNewTask+0x5e>
 8006fae:	e000      	b.n	8006fb2 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006fb0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	2b37      	cmp	r3, #55	; 0x37
 8006fbe:	d901      	bls.n	8006fc4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fc0:	2337      	movs	r3, #55	; 0x37
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fce:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fe65 	bl	8005caa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	3318      	adds	r3, #24
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fe fe60 	bl	8005caa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	2200      	movs	r2, #0
 8007004:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	2200      	movs	r2, #0
 800700c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	3358      	adds	r3, #88	; 0x58
 8007014:	2260      	movs	r2, #96	; 0x60
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f002 fd2e 	bl	8009a7a <memset>
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	4a0c      	ldr	r2, [pc, #48]	; (8007054 <prvInitialiseNewTask+0x130>)
 8007022:	65da      	str	r2, [r3, #92]	; 0x5c
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	4a0c      	ldr	r2, [pc, #48]	; (8007058 <prvInitialiseNewTask+0x134>)
 8007028:	661a      	str	r2, [r3, #96]	; 0x60
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	4a0b      	ldr	r2, [pc, #44]	; (800705c <prvInitialiseNewTask+0x138>)
 800702e:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	68f9      	ldr	r1, [r7, #12]
 8007034:	69b8      	ldr	r0, [r7, #24]
 8007036:	f001 faa3 	bl	8008580 <pxPortInitialiseStack>
 800703a:	4602      	mov	r2, r0
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800704c:	bf00      	nop
 800704e:	3720      	adds	r7, #32
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	0800e560 	.word	0x0800e560
 8007058:	0800e580 	.word	0x0800e580
 800705c:	0800e540 	.word	0x0800e540

08007060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007068:	f001 fb78 	bl	800875c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800706c:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <prvAddNewTaskToReadyList+0xc4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	4a2c      	ldr	r2, [pc, #176]	; (8007124 <prvAddNewTaskToReadyList+0xc4>)
 8007074:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007076:	4b2c      	ldr	r3, [pc, #176]	; (8007128 <prvAddNewTaskToReadyList+0xc8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800707e:	4a2a      	ldr	r2, [pc, #168]	; (8007128 <prvAddNewTaskToReadyList+0xc8>)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007084:	4b27      	ldr	r3, [pc, #156]	; (8007124 <prvAddNewTaskToReadyList+0xc4>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d110      	bne.n	80070ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800708c:	f000 fcb8 	bl	8007a00 <prvInitialiseTaskLists>
 8007090:	e00d      	b.n	80070ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007092:	4b26      	ldr	r3, [pc, #152]	; (800712c <prvAddNewTaskToReadyList+0xcc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800709a:	4b23      	ldr	r3, [pc, #140]	; (8007128 <prvAddNewTaskToReadyList+0xc8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d802      	bhi.n	80070ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070a8:	4a1f      	ldr	r2, [pc, #124]	; (8007128 <prvAddNewTaskToReadyList+0xc8>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070ae:	4b20      	ldr	r3, [pc, #128]	; (8007130 <prvAddNewTaskToReadyList+0xd0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3301      	adds	r3, #1
 80070b4:	4a1e      	ldr	r2, [pc, #120]	; (8007130 <prvAddNewTaskToReadyList+0xd0>)
 80070b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070b8:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <prvAddNewTaskToReadyList+0xd0>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c4:	4b1b      	ldr	r3, [pc, #108]	; (8007134 <prvAddNewTaskToReadyList+0xd4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d903      	bls.n	80070d4 <prvAddNewTaskToReadyList+0x74>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	4a18      	ldr	r2, [pc, #96]	; (8007134 <prvAddNewTaskToReadyList+0xd4>)
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4a15      	ldr	r2, [pc, #84]	; (8007138 <prvAddNewTaskToReadyList+0xd8>)
 80070e2:	441a      	add	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3304      	adds	r3, #4
 80070e8:	4619      	mov	r1, r3
 80070ea:	4610      	mov	r0, r2
 80070ec:	f7fe fde9 	bl	8005cc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070f0:	f001 fb64 	bl	80087bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <prvAddNewTaskToReadyList+0xcc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00e      	beq.n	800711a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <prvAddNewTaskToReadyList+0xc8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	429a      	cmp	r2, r3
 8007108:	d207      	bcs.n	800711a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800710a:	4b0c      	ldr	r3, [pc, #48]	; (800713c <prvAddNewTaskToReadyList+0xdc>)
 800710c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200010e0 	.word	0x200010e0
 8007128:	20000c0c 	.word	0x20000c0c
 800712c:	200010ec 	.word	0x200010ec
 8007130:	200010fc 	.word	0x200010fc
 8007134:	200010e8 	.word	0x200010e8
 8007138:	20000c10 	.word	0x20000c10
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	; 0x28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800714a:	2300      	movs	r3, #0
 800714c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <vTaskDelayUntil+0x2a>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	617b      	str	r3, [r7, #20]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <vTaskDelayUntil+0x46>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	613b      	str	r3, [r7, #16]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007186:	4b2a      	ldr	r3, [pc, #168]	; (8007230 <vTaskDelayUntil+0xf0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <vTaskDelayUntil+0x64>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	60fb      	str	r3, [r7, #12]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80071a4:	f000 f8ee 	bl	8007384 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80071a8:	4b22      	ldr	r3, [pc, #136]	; (8007234 <vTaskDelayUntil+0xf4>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	4413      	add	r3, r2
 80071b6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6a3a      	ldr	r2, [r7, #32]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d20b      	bcs.n	80071da <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d211      	bcs.n	80071f0 <vTaskDelayUntil+0xb0>
 80071cc:	69fa      	ldr	r2, [r7, #28]
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d90d      	bls.n	80071f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80071d4:	2301      	movs	r3, #1
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
 80071d8:	e00a      	b.n	80071f0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d303      	bcc.n	80071ec <vTaskDelayUntil+0xac>
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d901      	bls.n	80071f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80071ec:	2301      	movs	r3, #1
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d006      	beq.n	800720a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2100      	movs	r1, #0
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fe55 	bl	8007eb4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800720a:	f000 f8c9 	bl	80073a0 <xTaskResumeAll>
 800720e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d107      	bne.n	8007226 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007216:	4b08      	ldr	r3, [pc, #32]	; (8007238 <vTaskDelayUntil+0xf8>)
 8007218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007226:	bf00      	nop
 8007228:	3728      	adds	r7, #40	; 0x28
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20001108 	.word	0x20001108
 8007234:	200010e4 	.word	0x200010e4
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d017      	beq.n	800727e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <vTaskDelay+0x60>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <vTaskDelay+0x30>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800726c:	f000 f88a 	bl	8007384 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007270:	2100      	movs	r1, #0
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fe1e 	bl	8007eb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007278:	f000 f892 	bl	80073a0 <xTaskResumeAll>
 800727c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d107      	bne.n	8007294 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <vTaskDelay+0x64>)
 8007286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007294:	bf00      	nop
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20001108 	.word	0x20001108
 80072a0:	e000ed04 	.word	0xe000ed04

080072a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072b2:	463a      	mov	r2, r7
 80072b4:	1d39      	adds	r1, r7, #4
 80072b6:	f107 0308 	add.w	r3, r7, #8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fca4 	bl	8005c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	9202      	str	r2, [sp, #8]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	2300      	movs	r3, #0
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	460a      	mov	r2, r1
 80072d2:	4924      	ldr	r1, [pc, #144]	; (8007364 <vTaskStartScheduler+0xc0>)
 80072d4:	4824      	ldr	r0, [pc, #144]	; (8007368 <vTaskStartScheduler+0xc4>)
 80072d6:	f7ff fd83 	bl	8006de0 <xTaskCreateStatic>
 80072da:	4603      	mov	r3, r0
 80072dc:	4a23      	ldr	r2, [pc, #140]	; (800736c <vTaskStartScheduler+0xc8>)
 80072de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072e0:	4b22      	ldr	r3, [pc, #136]	; (800736c <vTaskStartScheduler+0xc8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072e8:	2301      	movs	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e001      	b.n	80072f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d102      	bne.n	80072fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072f8:	f000 fe30 	bl	8007f5c <xTimerCreateTimerTask>
 80072fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d11b      	bne.n	800733c <vTaskStartScheduler+0x98>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	613b      	str	r3, [r7, #16]
}
 8007316:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007318:	4b15      	ldr	r3, [pc, #84]	; (8007370 <vTaskStartScheduler+0xcc>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3358      	adds	r3, #88	; 0x58
 800731e:	4a15      	ldr	r2, [pc, #84]	; (8007374 <vTaskStartScheduler+0xd0>)
 8007320:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007322:	4b15      	ldr	r3, [pc, #84]	; (8007378 <vTaskStartScheduler+0xd4>)
 8007324:	f04f 32ff 	mov.w	r2, #4294967295
 8007328:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800732a:	4b14      	ldr	r3, [pc, #80]	; (800737c <vTaskStartScheduler+0xd8>)
 800732c:	2201      	movs	r2, #1
 800732e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007330:	4b13      	ldr	r3, [pc, #76]	; (8007380 <vTaskStartScheduler+0xdc>)
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007336:	f001 f99f 	bl	8008678 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800733a:	e00e      	b.n	800735a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007342:	d10a      	bne.n	800735a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60fb      	str	r3, [r7, #12]
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <vTaskStartScheduler+0xb4>
}
 800735a:	bf00      	nop
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	0800e410 	.word	0x0800e410
 8007368:	080079d1 	.word	0x080079d1
 800736c:	20001104 	.word	0x20001104
 8007370:	20000c0c 	.word	0x20000c0c
 8007374:	20000034 	.word	0x20000034
 8007378:	20001100 	.word	0x20001100
 800737c:	200010ec 	.word	0x200010ec
 8007380:	200010e4 	.word	0x200010e4

08007384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <vTaskSuspendAll+0x18>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3301      	adds	r3, #1
 800738e:	4a03      	ldr	r2, [pc, #12]	; (800739c <vTaskSuspendAll+0x18>)
 8007390:	6013      	str	r3, [r2, #0]
}
 8007392:	bf00      	nop
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	20001108 	.word	0x20001108

080073a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073ae:	4b42      	ldr	r3, [pc, #264]	; (80074b8 <xTaskResumeAll+0x118>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <xTaskResumeAll+0x2c>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	603b      	str	r3, [r7, #0]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073cc:	f001 f9c6 	bl	800875c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073d0:	4b39      	ldr	r3, [pc, #228]	; (80074b8 <xTaskResumeAll+0x118>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	4a38      	ldr	r2, [pc, #224]	; (80074b8 <xTaskResumeAll+0x118>)
 80073d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073da:	4b37      	ldr	r3, [pc, #220]	; (80074b8 <xTaskResumeAll+0x118>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d162      	bne.n	80074a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073e2:	4b36      	ldr	r3, [pc, #216]	; (80074bc <xTaskResumeAll+0x11c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d05e      	beq.n	80074a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073ea:	e02f      	b.n	800744c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80073ec:	4b34      	ldr	r3, [pc, #208]	; (80074c0 <xTaskResumeAll+0x120>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3318      	adds	r3, #24
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe fcbd 	bl	8005d78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3304      	adds	r3, #4
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fcb8 	bl	8005d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	4b2d      	ldr	r3, [pc, #180]	; (80074c4 <xTaskResumeAll+0x124>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d903      	bls.n	800741c <xTaskResumeAll+0x7c>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	4a2a      	ldr	r2, [pc, #168]	; (80074c4 <xTaskResumeAll+0x124>)
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4a27      	ldr	r2, [pc, #156]	; (80074c8 <xTaskResumeAll+0x128>)
 800742a:	441a      	add	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3304      	adds	r3, #4
 8007430:	4619      	mov	r1, r3
 8007432:	4610      	mov	r0, r2
 8007434:	f7fe fc45 	bl	8005cc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743c:	4b23      	ldr	r3, [pc, #140]	; (80074cc <xTaskResumeAll+0x12c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007442:	429a      	cmp	r2, r3
 8007444:	d302      	bcc.n	800744c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007446:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <xTaskResumeAll+0x130>)
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800744c:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <xTaskResumeAll+0x120>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1cb      	bne.n	80073ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800745a:	f000 fb73 	bl	8007b44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800745e:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <xTaskResumeAll+0x134>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d010      	beq.n	800748c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800746a:	f000 f857 	bl	800751c <xTaskIncrementTick>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007474:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <xTaskResumeAll+0x130>)
 8007476:	2201      	movs	r2, #1
 8007478:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3b01      	subs	r3, #1
 800747e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f1      	bne.n	800746a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007486:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <xTaskResumeAll+0x134>)
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800748c:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <xTaskResumeAll+0x130>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d009      	beq.n	80074a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007498:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <xTaskResumeAll+0x138>)
 800749a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074a8:	f001 f988 	bl	80087bc <vPortExitCritical>

	return xAlreadyYielded;
 80074ac:	68bb      	ldr	r3, [r7, #8]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20001108 	.word	0x20001108
 80074bc:	200010e0 	.word	0x200010e0
 80074c0:	200010a0 	.word	0x200010a0
 80074c4:	200010e8 	.word	0x200010e8
 80074c8:	20000c10 	.word	0x20000c10
 80074cc:	20000c0c 	.word	0x20000c0c
 80074d0:	200010f4 	.word	0x200010f4
 80074d4:	200010f0 	.word	0x200010f0
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074e2:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <xTaskGetTickCount+0x18>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074e8:	687b      	ldr	r3, [r7, #4]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr
 80074f4:	200010e4 	.word	0x200010e4

080074f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074fe:	f001 f9ef 	bl	80088e0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007502:	2300      	movs	r3, #0
 8007504:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007506:	4b04      	ldr	r3, [pc, #16]	; (8007518 <xTaskGetTickCountFromISR+0x20>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800750c:	683b      	ldr	r3, [r7, #0]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	200010e4 	.word	0x200010e4

0800751c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007526:	4b51      	ldr	r3, [pc, #324]	; (800766c <xTaskIncrementTick+0x150>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f040 808e 	bne.w	800764c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007530:	4b4f      	ldr	r3, [pc, #316]	; (8007670 <xTaskIncrementTick+0x154>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007538:	4a4d      	ldr	r2, [pc, #308]	; (8007670 <xTaskIncrementTick+0x154>)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d120      	bne.n	8007586 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007544:	4b4b      	ldr	r3, [pc, #300]	; (8007674 <xTaskIncrementTick+0x158>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <xTaskIncrementTick+0x48>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	603b      	str	r3, [r7, #0]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <xTaskIncrementTick+0x46>
 8007564:	4b43      	ldr	r3, [pc, #268]	; (8007674 <xTaskIncrementTick+0x158>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	4b43      	ldr	r3, [pc, #268]	; (8007678 <xTaskIncrementTick+0x15c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a41      	ldr	r2, [pc, #260]	; (8007674 <xTaskIncrementTick+0x158>)
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	4a41      	ldr	r2, [pc, #260]	; (8007678 <xTaskIncrementTick+0x15c>)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	4b40      	ldr	r3, [pc, #256]	; (800767c <xTaskIncrementTick+0x160>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3301      	adds	r3, #1
 800757e:	4a3f      	ldr	r2, [pc, #252]	; (800767c <xTaskIncrementTick+0x160>)
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	f000 fadf 	bl	8007b44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007586:	4b3e      	ldr	r3, [pc, #248]	; (8007680 <xTaskIncrementTick+0x164>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	429a      	cmp	r2, r3
 800758e:	d34e      	bcc.n	800762e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007590:	4b38      	ldr	r3, [pc, #224]	; (8007674 <xTaskIncrementTick+0x158>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <xTaskIncrementTick+0x82>
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <xTaskIncrementTick+0x84>
 800759e:	2300      	movs	r3, #0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a4:	4b36      	ldr	r3, [pc, #216]	; (8007680 <xTaskIncrementTick+0x164>)
 80075a6:	f04f 32ff 	mov.w	r2, #4294967295
 80075aa:	601a      	str	r2, [r3, #0]
					break;
 80075ac:	e03f      	b.n	800762e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075ae:	4b31      	ldr	r3, [pc, #196]	; (8007674 <xTaskIncrementTick+0x158>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d203      	bcs.n	80075ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075c6:	4a2e      	ldr	r2, [pc, #184]	; (8007680 <xTaskIncrementTick+0x164>)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6013      	str	r3, [r2, #0]
						break;
 80075cc:	e02f      	b.n	800762e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fbd0 	bl	8005d78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	3318      	adds	r3, #24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe fbc7 	bl	8005d78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ee:	4b25      	ldr	r3, [pc, #148]	; (8007684 <xTaskIncrementTick+0x168>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d903      	bls.n	80075fe <xTaskIncrementTick+0xe2>
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	4a22      	ldr	r2, [pc, #136]	; (8007684 <xTaskIncrementTick+0x168>)
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4a1f      	ldr	r2, [pc, #124]	; (8007688 <xTaskIncrementTick+0x16c>)
 800760c:	441a      	add	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	3304      	adds	r3, #4
 8007612:	4619      	mov	r1, r3
 8007614:	4610      	mov	r0, r2
 8007616:	f7fe fb54 	bl	8005cc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761e:	4b1b      	ldr	r3, [pc, #108]	; (800768c <xTaskIncrementTick+0x170>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	429a      	cmp	r2, r3
 8007626:	d3b3      	bcc.n	8007590 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007628:	2301      	movs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800762c:	e7b0      	b.n	8007590 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800762e:	4b17      	ldr	r3, [pc, #92]	; (800768c <xTaskIncrementTick+0x170>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007634:	4914      	ldr	r1, [pc, #80]	; (8007688 <xTaskIncrementTick+0x16c>)
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d907      	bls.n	8007656 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007646:	2301      	movs	r3, #1
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e004      	b.n	8007656 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800764c:	4b10      	ldr	r3, [pc, #64]	; (8007690 <xTaskIncrementTick+0x174>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3301      	adds	r3, #1
 8007652:	4a0f      	ldr	r2, [pc, #60]	; (8007690 <xTaskIncrementTick+0x174>)
 8007654:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007656:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <xTaskIncrementTick+0x178>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800765e:	2301      	movs	r3, #1
 8007660:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007662:	697b      	ldr	r3, [r7, #20]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	20001108 	.word	0x20001108
 8007670:	200010e4 	.word	0x200010e4
 8007674:	20001098 	.word	0x20001098
 8007678:	2000109c 	.word	0x2000109c
 800767c:	200010f8 	.word	0x200010f8
 8007680:	20001100 	.word	0x20001100
 8007684:	200010e8 	.word	0x200010e8
 8007688:	20000c10 	.word	0x20000c10
 800768c:	20000c0c 	.word	0x20000c0c
 8007690:	200010f0 	.word	0x200010f0
 8007694:	200010f4 	.word	0x200010f4

08007698 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800769e:	4b2a      	ldr	r3, [pc, #168]	; (8007748 <vTaskSwitchContext+0xb0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076a6:	4b29      	ldr	r3, [pc, #164]	; (800774c <vTaskSwitchContext+0xb4>)
 80076a8:	2201      	movs	r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076ac:	e046      	b.n	800773c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80076ae:	4b27      	ldr	r3, [pc, #156]	; (800774c <vTaskSwitchContext+0xb4>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80076b4:	4b26      	ldr	r3, [pc, #152]	; (8007750 <vTaskSwitchContext+0xb8>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	e010      	b.n	80076de <vTaskSwitchContext+0x46>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10a      	bne.n	80076d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	607b      	str	r3, [r7, #4]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <vTaskSwitchContext+0x3e>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3b01      	subs	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	491d      	ldr	r1, [pc, #116]	; (8007754 <vTaskSwitchContext+0xbc>)
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0e4      	beq.n	80076bc <vTaskSwitchContext+0x24>
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4a15      	ldr	r2, [pc, #84]	; (8007754 <vTaskSwitchContext+0xbc>)
 80076fe:	4413      	add	r3, r2
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	605a      	str	r2, [r3, #4]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	3308      	adds	r3, #8
 8007714:	429a      	cmp	r2, r3
 8007716:	d104      	bne.n	8007722 <vTaskSwitchContext+0x8a>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	605a      	str	r2, [r3, #4]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	4a0b      	ldr	r2, [pc, #44]	; (8007758 <vTaskSwitchContext+0xc0>)
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	4a08      	ldr	r2, [pc, #32]	; (8007750 <vTaskSwitchContext+0xb8>)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007732:	4b09      	ldr	r3, [pc, #36]	; (8007758 <vTaskSwitchContext+0xc0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3358      	adds	r3, #88	; 0x58
 8007738:	4a08      	ldr	r2, [pc, #32]	; (800775c <vTaskSwitchContext+0xc4>)
 800773a:	6013      	str	r3, [r2, #0]
}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20001108 	.word	0x20001108
 800774c:	200010f4 	.word	0x200010f4
 8007750:	200010e8 	.word	0x200010e8
 8007754:	20000c10 	.word	0x20000c10
 8007758:	20000c0c 	.word	0x20000c0c
 800775c:	20000034 	.word	0x20000034

08007760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	60fb      	str	r3, [r7, #12]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <vTaskPlaceOnEventList+0x44>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3318      	adds	r3, #24
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fe faba 	bl	8005d08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007794:	2101      	movs	r1, #1
 8007796:	6838      	ldr	r0, [r7, #0]
 8007798:	f000 fb8c 	bl	8007eb4 <prvAddCurrentTaskToDelayedList>
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000c0c 	.word	0x20000c0c

080077a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10a      	bne.n	80077d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	617b      	str	r3, [r7, #20]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <vTaskPlaceOnEventListRestricted+0x54>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3318      	adds	r3, #24
 80077d6:	4619      	mov	r1, r3
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7fe fa72 	bl	8005cc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80077e4:	f04f 33ff 	mov.w	r3, #4294967295
 80077e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	68b8      	ldr	r0, [r7, #8]
 80077ee:	f000 fb61 	bl	8007eb4 <prvAddCurrentTaskToDelayedList>
	}
 80077f2:	bf00      	nop
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000c0c 	.word	0x20000c0c

08007800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60fb      	str	r3, [r7, #12]
}
 8007828:	bf00      	nop
 800782a:	e7fe      	b.n	800782a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	3318      	adds	r3, #24
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe faa1 	bl	8005d78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007836:	4b1e      	ldr	r3, [pc, #120]	; (80078b0 <xTaskRemoveFromEventList+0xb0>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d11d      	bne.n	800787a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	3304      	adds	r3, #4
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fa98 	bl	8005d78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784c:	4b19      	ldr	r3, [pc, #100]	; (80078b4 <xTaskRemoveFromEventList+0xb4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d903      	bls.n	800785c <xTaskRemoveFromEventList+0x5c>
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	4a16      	ldr	r2, [pc, #88]	; (80078b4 <xTaskRemoveFromEventList+0xb4>)
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4a13      	ldr	r2, [pc, #76]	; (80078b8 <xTaskRemoveFromEventList+0xb8>)
 800786a:	441a      	add	r2, r3
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	3304      	adds	r3, #4
 8007870:	4619      	mov	r1, r3
 8007872:	4610      	mov	r0, r2
 8007874:	f7fe fa25 	bl	8005cc2 <vListInsertEnd>
 8007878:	e005      	b.n	8007886 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	3318      	adds	r3, #24
 800787e:	4619      	mov	r1, r3
 8007880:	480e      	ldr	r0, [pc, #56]	; (80078bc <xTaskRemoveFromEventList+0xbc>)
 8007882:	f7fe fa1e 	bl	8005cc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788a:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <xTaskRemoveFromEventList+0xc0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	429a      	cmp	r2, r3
 8007892:	d905      	bls.n	80078a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <xTaskRemoveFromEventList+0xc4>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e001      	b.n	80078a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80078a4:	697b      	ldr	r3, [r7, #20]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20001108 	.word	0x20001108
 80078b4:	200010e8 	.word	0x200010e8
 80078b8:	20000c10 	.word	0x20000c10
 80078bc:	200010a0 	.word	0x200010a0
 80078c0:	20000c0c 	.word	0x20000c0c
 80078c4:	200010f4 	.word	0x200010f4

080078c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078d0:	4b06      	ldr	r3, [pc, #24]	; (80078ec <vTaskInternalSetTimeOutState+0x24>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078d8:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <vTaskInternalSetTimeOutState+0x28>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	605a      	str	r2, [r3, #4]
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	200010f8 	.word	0x200010f8
 80078f0:	200010e4 	.word	0x200010e4

080078f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	613b      	str	r3, [r7, #16]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	60fb      	str	r3, [r7, #12]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007936:	f000 ff11 	bl	800875c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800793a:	4b1d      	ldr	r3, [pc, #116]	; (80079b0 <xTaskCheckForTimeOut+0xbc>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007952:	d102      	bne.n	800795a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007954:	2300      	movs	r3, #0
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	e023      	b.n	80079a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	4b15      	ldr	r3, [pc, #84]	; (80079b4 <xTaskCheckForTimeOut+0xc0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d007      	beq.n	8007976 <xTaskCheckForTimeOut+0x82>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	429a      	cmp	r2, r3
 800796e:	d302      	bcc.n	8007976 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007970:	2301      	movs	r3, #1
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	e015      	b.n	80079a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	429a      	cmp	r2, r3
 800797e:	d20b      	bcs.n	8007998 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	1ad2      	subs	r2, r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ff9b 	bl	80078c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007992:	2300      	movs	r3, #0
 8007994:	61fb      	str	r3, [r7, #28]
 8007996:	e004      	b.n	80079a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800799e:	2301      	movs	r3, #1
 80079a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079a2:	f000 ff0b 	bl	80087bc <vPortExitCritical>

	return xReturn;
 80079a6:	69fb      	ldr	r3, [r7, #28]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3720      	adds	r7, #32
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	200010e4 	.word	0x200010e4
 80079b4:	200010f8 	.word	0x200010f8

080079b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079bc:	4b03      	ldr	r3, [pc, #12]	; (80079cc <vTaskMissedYield+0x14>)
 80079be:	2201      	movs	r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
}
 80079c2:	bf00      	nop
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	200010f4 	.word	0x200010f4

080079d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079d8:	f000 f852 	bl	8007a80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079dc:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <prvIdleTask+0x28>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d9f9      	bls.n	80079d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079e4:	4b05      	ldr	r3, [pc, #20]	; (80079fc <prvIdleTask+0x2c>)
 80079e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079f4:	e7f0      	b.n	80079d8 <prvIdleTask+0x8>
 80079f6:	bf00      	nop
 80079f8:	20000c10 	.word	0x20000c10
 80079fc:	e000ed04 	.word	0xe000ed04

08007a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a06:	2300      	movs	r3, #0
 8007a08:	607b      	str	r3, [r7, #4]
 8007a0a:	e00c      	b.n	8007a26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4a12      	ldr	r2, [pc, #72]	; (8007a60 <prvInitialiseTaskLists+0x60>)
 8007a18:	4413      	add	r3, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe f926 	bl	8005c6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3301      	adds	r3, #1
 8007a24:	607b      	str	r3, [r7, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b37      	cmp	r3, #55	; 0x37
 8007a2a:	d9ef      	bls.n	8007a0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a2c:	480d      	ldr	r0, [pc, #52]	; (8007a64 <prvInitialiseTaskLists+0x64>)
 8007a2e:	f7fe f91d 	bl	8005c6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a32:	480d      	ldr	r0, [pc, #52]	; (8007a68 <prvInitialiseTaskLists+0x68>)
 8007a34:	f7fe f91a 	bl	8005c6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a38:	480c      	ldr	r0, [pc, #48]	; (8007a6c <prvInitialiseTaskLists+0x6c>)
 8007a3a:	f7fe f917 	bl	8005c6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a3e:	480c      	ldr	r0, [pc, #48]	; (8007a70 <prvInitialiseTaskLists+0x70>)
 8007a40:	f7fe f914 	bl	8005c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a44:	480b      	ldr	r0, [pc, #44]	; (8007a74 <prvInitialiseTaskLists+0x74>)
 8007a46:	f7fe f911 	bl	8005c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <prvInitialiseTaskLists+0x78>)
 8007a4c:	4a05      	ldr	r2, [pc, #20]	; (8007a64 <prvInitialiseTaskLists+0x64>)
 8007a4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a50:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <prvInitialiseTaskLists+0x7c>)
 8007a52:	4a05      	ldr	r2, [pc, #20]	; (8007a68 <prvInitialiseTaskLists+0x68>)
 8007a54:	601a      	str	r2, [r3, #0]
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000c10 	.word	0x20000c10
 8007a64:	20001070 	.word	0x20001070
 8007a68:	20001084 	.word	0x20001084
 8007a6c:	200010a0 	.word	0x200010a0
 8007a70:	200010b4 	.word	0x200010b4
 8007a74:	200010cc 	.word	0x200010cc
 8007a78:	20001098 	.word	0x20001098
 8007a7c:	2000109c 	.word	0x2000109c

08007a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a86:	e019      	b.n	8007abc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a88:	f000 fe68 	bl	800875c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007a8c:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <prvCheckTasksWaitingTermination+0x50>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3304      	adds	r3, #4
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe f96d 	bl	8005d78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <prvCheckTasksWaitingTermination+0x54>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	4a0b      	ldr	r2, [pc, #44]	; (8007ad4 <prvCheckTasksWaitingTermination+0x54>)
 8007aa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <prvCheckTasksWaitingTermination+0x58>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	4a0a      	ldr	r2, [pc, #40]	; (8007ad8 <prvCheckTasksWaitingTermination+0x58>)
 8007ab0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ab2:	f000 fe83 	bl	80087bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f810 	bl	8007adc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <prvCheckTasksWaitingTermination+0x58>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e1      	bne.n	8007a88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	200010b4 	.word	0x200010b4
 8007ad4:	200010e0 	.word	0x200010e0
 8007ad8:	200010c8 	.word	0x200010c8

08007adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3358      	adds	r3, #88	; 0x58
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f002 fedf 	bl	800a8ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d108      	bne.n	8007b0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fff1 	bl	8008ae4 <vPortFree>
				vPortFree( pxTCB );
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 ffee 	bl	8008ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b08:	e018      	b.n	8007b3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d103      	bne.n	8007b1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 ffe5 	bl	8008ae4 <vPortFree>
	}
 8007b1a:	e00f      	b.n	8007b3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d00a      	beq.n	8007b3c <prvDeleteTCB+0x60>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	60fb      	str	r3, [r7, #12]
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <prvDeleteTCB+0x5e>
	}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b4a:	4b0e      	ldr	r3, [pc, #56]	; (8007b84 <prvResetNextTaskUnblockTime+0x40>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <prvResetNextTaskUnblockTime+0x14>
 8007b54:	2301      	movs	r3, #1
 8007b56:	e000      	b.n	8007b5a <prvResetNextTaskUnblockTime+0x16>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b5e:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <prvResetNextTaskUnblockTime+0x44>)
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b66:	e008      	b.n	8007b7a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b68:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <prvResetNextTaskUnblockTime+0x40>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	4a04      	ldr	r2, [pc, #16]	; (8007b88 <prvResetNextTaskUnblockTime+0x44>)
 8007b78:	6013      	str	r3, [r2, #0]
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bc80      	pop	{r7}
 8007b82:	4770      	bx	lr
 8007b84:	20001098 	.word	0x20001098
 8007b88:	20001100 	.word	0x20001100

08007b8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b92:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <xTaskGetSchedulerState+0x34>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d102      	bne.n	8007ba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	607b      	str	r3, [r7, #4]
 8007b9e:	e008      	b.n	8007bb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ba0:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <xTaskGetSchedulerState+0x38>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	607b      	str	r3, [r7, #4]
 8007bac:	e001      	b.n	8007bb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bb2:	687b      	ldr	r3, [r7, #4]
	}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	200010ec 	.word	0x200010ec
 8007bc4:	20001108 	.word	0x20001108

08007bc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d056      	beq.n	8007c8c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be2:	4b2d      	ldr	r3, [pc, #180]	; (8007c98 <xTaskPriorityInherit+0xd0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d246      	bcs.n	8007c7a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	db06      	blt.n	8007c02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf4:	4b28      	ldr	r3, [pc, #160]	; (8007c98 <xTaskPriorityInherit+0xd0>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	6959      	ldr	r1, [r3, #20]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4a22      	ldr	r2, [pc, #136]	; (8007c9c <xTaskPriorityInherit+0xd4>)
 8007c14:	4413      	add	r3, r2
 8007c16:	4299      	cmp	r1, r3
 8007c18:	d101      	bne.n	8007c1e <xTaskPriorityInherit+0x56>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e000      	b.n	8007c20 <xTaskPriorityInherit+0x58>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d022      	beq.n	8007c6a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe f8a5 	bl	8005d78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c2e:	4b1a      	ldr	r3, [pc, #104]	; (8007c98 <xTaskPriorityInherit+0xd0>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	4b18      	ldr	r3, [pc, #96]	; (8007ca0 <xTaskPriorityInherit+0xd8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d903      	bls.n	8007c4c <xTaskPriorityInherit+0x84>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	4a15      	ldr	r2, [pc, #84]	; (8007ca0 <xTaskPriorityInherit+0xd8>)
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4a10      	ldr	r2, [pc, #64]	; (8007c9c <xTaskPriorityInherit+0xd4>)
 8007c5a:	441a      	add	r2, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f7fe f82d 	bl	8005cc2 <vListInsertEnd>
 8007c68:	e004      	b.n	8007c74 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <xTaskPriorityInherit+0xd0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c74:	2301      	movs	r3, #1
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	e008      	b.n	8007c8c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c7e:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <xTaskPriorityInherit+0xd0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d201      	bcs.n	8007c8c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
	}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20000c0c 	.word	0x20000c0c
 8007c9c:	20000c10 	.word	0x20000c10
 8007ca0:	200010e8 	.word	0x200010e8

08007ca4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d056      	beq.n	8007d68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cba:	4b2e      	ldr	r3, [pc, #184]	; (8007d74 <xTaskPriorityDisinherit+0xd0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d00a      	beq.n	8007cda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	60fb      	str	r3, [r7, #12]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	60bb      	str	r3, [r7, #8]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfc:	1e5a      	subs	r2, r3, #1
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d02c      	beq.n	8007d68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d128      	bne.n	8007d68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe f82c 	bl	8005d78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d38:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <xTaskPriorityDisinherit+0xd4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d903      	bls.n	8007d48 <xTaskPriorityDisinherit+0xa4>
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	4a0c      	ldr	r2, [pc, #48]	; (8007d78 <xTaskPriorityDisinherit+0xd4>)
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4a09      	ldr	r2, [pc, #36]	; (8007d7c <xTaskPriorityDisinherit+0xd8>)
 8007d56:	441a      	add	r2, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f7fd ffaf 	bl	8005cc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d68:	697b      	ldr	r3, [r7, #20]
	}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000c0c 	.word	0x20000c0c
 8007d78:	200010e8 	.word	0x200010e8
 8007d7c:	20000c10 	.word	0x20000c10

08007d80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d06f      	beq.n	8007e78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	60fb      	str	r3, [r7, #12]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d902      	bls.n	8007dc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	e002      	b.n	8007dcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d050      	beq.n	8007e78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d14b      	bne.n	8007e78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007de0:	4b27      	ldr	r3, [pc, #156]	; (8007e80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d10a      	bne.n	8007e00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	60bb      	str	r3, [r7, #8]
}
 8007dfc:	bf00      	nop
 8007dfe:	e7fe      	b.n	8007dfe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	69fa      	ldr	r2, [r7, #28]
 8007e0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	db04      	blt.n	8007e1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	6959      	ldr	r1, [r3, #20]
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4a15      	ldr	r2, [pc, #84]	; (8007e84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e2e:	4413      	add	r3, r2
 8007e30:	4299      	cmp	r1, r3
 8007e32:	d101      	bne.n	8007e38 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01c      	beq.n	8007e78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fd ff98 	bl	8005d78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d903      	bls.n	8007e5c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	4a0b      	ldr	r2, [pc, #44]	; (8007e88 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4a06      	ldr	r2, [pc, #24]	; (8007e84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e6a:	441a      	add	r2, r3
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f7fd ff25 	bl	8005cc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e78:	bf00      	nop
 8007e7a:	3720      	adds	r7, #32
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000c0c 	.word	0x20000c0c
 8007e84:	20000c10 	.word	0x20000c10
 8007e88:	200010e8 	.word	0x200010e8

08007e8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007e90:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007e98:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e9e:	3201      	adds	r2, #1
 8007ea0:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8007ea2:	4b03      	ldr	r3, [pc, #12]	; (8007eb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
	}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20000c0c 	.word	0x20000c0c

08007eb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ebe:	4b21      	ldr	r3, [pc, #132]	; (8007f44 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec4:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fd ff54 	bl	8005d78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d10a      	bne.n	8007eee <prvAddCurrentTaskToDelayedList+0x3a>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d007      	beq.n	8007eee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ede:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4819      	ldr	r0, [pc, #100]	; (8007f4c <prvAddCurrentTaskToDelayedList+0x98>)
 8007ee8:	f7fd feeb 	bl	8005cc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007eec:	e026      	b.n	8007f3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d209      	bcs.n	8007f1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f06:	4b12      	ldr	r3, [pc, #72]	; (8007f50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f7fd fef8 	bl	8005d08 <vListInsert>
}
 8007f18:	e010      	b.n	8007f3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f1a:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3304      	adds	r3, #4
 8007f24:	4619      	mov	r1, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	f7fd feee 	bl	8005d08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d202      	bcs.n	8007f3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f36:	4a08      	ldr	r2, [pc, #32]	; (8007f58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	6013      	str	r3, [r2, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	200010e4 	.word	0x200010e4
 8007f48:	20000c0c 	.word	0x20000c0c
 8007f4c:	200010cc 	.word	0x200010cc
 8007f50:	2000109c 	.word	0x2000109c
 8007f54:	20001098 	.word	0x20001098
 8007f58:	20001100 	.word	0x20001100

08007f5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f66:	f000 facb 	bl	8008500 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f6a:	4b1c      	ldr	r3, [pc, #112]	; (8007fdc <xTimerCreateTimerTask+0x80>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d021      	beq.n	8007fb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f7a:	1d3a      	adds	r2, r7, #4
 8007f7c:	f107 0108 	add.w	r1, r7, #8
 8007f80:	f107 030c 	add.w	r3, r7, #12
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fd fe57 	bl	8005c38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	9202      	str	r2, [sp, #8]
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	2302      	movs	r3, #2
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	460a      	mov	r2, r1
 8007f9c:	4910      	ldr	r1, [pc, #64]	; (8007fe0 <xTimerCreateTimerTask+0x84>)
 8007f9e:	4811      	ldr	r0, [pc, #68]	; (8007fe4 <xTimerCreateTimerTask+0x88>)
 8007fa0:	f7fe ff1e 	bl	8006de0 <xTaskCreateStatic>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	4a10      	ldr	r2, [pc, #64]	; (8007fe8 <xTimerCreateTimerTask+0x8c>)
 8007fa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007faa:	4b0f      	ldr	r3, [pc, #60]	; (8007fe8 <xTimerCreateTimerTask+0x8c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	613b      	str	r3, [r7, #16]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007fd2:	697b      	ldr	r3, [r7, #20]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	2000113c 	.word	0x2000113c
 8007fe0:	0800e418 	.word	0x0800e418
 8007fe4:	08008109 	.word	0x08008109
 8007fe8:	20001140 	.word	0x20001140

08007fec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	; 0x28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10a      	bne.n	800801a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	623b      	str	r3, [r7, #32]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800801a:	4b1a      	ldr	r3, [pc, #104]	; (8008084 <xTimerGenericCommand+0x98>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d02a      	beq.n	8008078 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b05      	cmp	r3, #5
 8008032:	dc18      	bgt.n	8008066 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008034:	f7ff fdaa 	bl	8007b8c <xTaskGetSchedulerState>
 8008038:	4603      	mov	r3, r0
 800803a:	2b02      	cmp	r3, #2
 800803c:	d109      	bne.n	8008052 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800803e:	4b11      	ldr	r3, [pc, #68]	; (8008084 <xTimerGenericCommand+0x98>)
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	f107 0110 	add.w	r1, r7, #16
 8008046:	2300      	movs	r3, #0
 8008048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804a:	f7fe f869 	bl	8006120 <xQueueGenericSend>
 800804e:	6278      	str	r0, [r7, #36]	; 0x24
 8008050:	e012      	b.n	8008078 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <xTimerGenericCommand+0x98>)
 8008054:	6818      	ldr	r0, [r3, #0]
 8008056:	f107 0110 	add.w	r1, r7, #16
 800805a:	2300      	movs	r3, #0
 800805c:	2200      	movs	r2, #0
 800805e:	f7fe f85f 	bl	8006120 <xQueueGenericSend>
 8008062:	6278      	str	r0, [r7, #36]	; 0x24
 8008064:	e008      	b.n	8008078 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008066:	4b07      	ldr	r3, [pc, #28]	; (8008084 <xTimerGenericCommand+0x98>)
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	f107 0110 	add.w	r1, r7, #16
 800806e:	2300      	movs	r3, #0
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	f7fe f953 	bl	800631c <xQueueGenericSendFromISR>
 8008076:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800807a:	4618      	mov	r0, r3
 800807c:	3728      	adds	r7, #40	; 0x28
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	2000113c 	.word	0x2000113c

08008088 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af02      	add	r7, sp, #8
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008092:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <prvProcessExpiredTimer+0x7c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	3304      	adds	r3, #4
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fd fe69 	bl	8005d78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d122      	bne.n	80080f4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	18d1      	adds	r1, r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	6978      	ldr	r0, [r7, #20]
 80080bc:	f000 f8c8 	bl	8008250 <prvInsertTimerInActiveList>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d016      	beq.n	80080f4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080c6:	2300      	movs	r3, #0
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	2100      	movs	r1, #0
 80080d0:	6978      	ldr	r0, [r7, #20]
 80080d2:	f7ff ff8b 	bl	8007fec <xTimerGenericCommand>
 80080d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	60fb      	str	r3, [r7, #12]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	6978      	ldr	r0, [r7, #20]
 80080fa:	4798      	blx	r3
}
 80080fc:	bf00      	nop
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20001134 	.word	0x20001134

08008108 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008110:	f107 0308 	add.w	r3, r7, #8
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f857 	bl	80081c8 <prvGetNextExpireTime>
 800811a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4619      	mov	r1, r3
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f803 	bl	800812c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008126:	f000 f8d5 	bl	80082d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800812a:	e7f1      	b.n	8008110 <prvTimerTask+0x8>

0800812c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008136:	f7ff f925 	bl	8007384 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800813a:	f107 0308 	add.w	r3, r7, #8
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f866 	bl	8008210 <prvSampleTimeNow>
 8008144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d130      	bne.n	80081ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <prvProcessTimerOrBlockTask+0x3c>
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	429a      	cmp	r2, r3
 8008158:	d806      	bhi.n	8008168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800815a:	f7ff f921 	bl	80073a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800815e:	68f9      	ldr	r1, [r7, #12]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff ff91 	bl	8008088 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008166:	e024      	b.n	80081b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <prvProcessTimerOrBlockTask+0x90>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <prvProcessTimerOrBlockTask+0x94>)
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	4619      	mov	r1, r3
 800818e:	f7fe fdf3 	bl	8006d78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008192:	f7ff f905 	bl	80073a0 <xTaskResumeAll>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800819c:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <prvProcessTimerOrBlockTask+0x98>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	f3bf 8f6f 	isb	sy
}
 80081ac:	e001      	b.n	80081b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081ae:	f7ff f8f7 	bl	80073a0 <xTaskResumeAll>
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20001138 	.word	0x20001138
 80081c0:	2000113c 	.word	0x2000113c
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081d0:	4b0e      	ldr	r3, [pc, #56]	; (800820c <prvGetNextExpireTime+0x44>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bf0c      	ite	eq
 80081da:	2301      	moveq	r3, #1
 80081dc:	2300      	movne	r3, #0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081ee:	4b07      	ldr	r3, [pc, #28]	; (800820c <prvGetNextExpireTime+0x44>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	e001      	b.n	80081fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081fe:	68fb      	ldr	r3, [r7, #12]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	bc80      	pop	{r7}
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	20001134 	.word	0x20001134

08008210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008218:	f7ff f960 	bl	80074dc <xTaskGetTickCount>
 800821c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800821e:	4b0b      	ldr	r3, [pc, #44]	; (800824c <prvSampleTimeNow+0x3c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d205      	bcs.n	8008234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008228:	f000 f908 	bl	800843c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	e002      	b.n	800823a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800823a:	4a04      	ldr	r2, [pc, #16]	; (800824c <prvSampleTimeNow+0x3c>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008240:	68fb      	ldr	r3, [r7, #12]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20001144 	.word	0x20001144

08008250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800825e:	2300      	movs	r3, #0
 8008260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	429a      	cmp	r2, r3
 8008274:	d812      	bhi.n	800829c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	1ad2      	subs	r2, r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	429a      	cmp	r2, r3
 8008282:	d302      	bcc.n	800828a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008284:	2301      	movs	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	e01b      	b.n	80082c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800828a:	4b10      	ldr	r3, [pc, #64]	; (80082cc <prvInsertTimerInActiveList+0x7c>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f7fd fd37 	bl	8005d08 <vListInsert>
 800829a:	e012      	b.n	80082c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d206      	bcs.n	80082b2 <prvInsertTimerInActiveList+0x62>
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d302      	bcc.n	80082b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e007      	b.n	80082c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082b2:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <prvInsertTimerInActiveList+0x80>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4619      	mov	r1, r3
 80082bc:	4610      	mov	r0, r2
 80082be:	f7fd fd23 	bl	8005d08 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082c2:	697b      	ldr	r3, [r7, #20]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20001138 	.word	0x20001138
 80082d0:	20001134 	.word	0x20001134

080082d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08e      	sub	sp, #56	; 0x38
 80082d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082da:	e09d      	b.n	8008418 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da18      	bge.n	8008314 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	3304      	adds	r3, #4
 80082e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	61fb      	str	r3, [r7, #28]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800830a:	6850      	ldr	r0, [r2, #4]
 800830c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800830e:	6892      	ldr	r2, [r2, #8]
 8008310:	4611      	mov	r1, r2
 8008312:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	db7d      	blt.n	8008416 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	3304      	adds	r3, #4
 800832a:	4618      	mov	r0, r3
 800832c:	f7fd fd24 	bl	8005d78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008330:	463b      	mov	r3, r7
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff ff6c 	bl	8008210 <prvSampleTimeNow>
 8008338:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b09      	cmp	r3, #9
 800833e:	d86b      	bhi.n	8008418 <prvProcessReceivedCommands+0x144>
 8008340:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <prvProcessReceivedCommands+0x74>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	08008371 	.word	0x08008371
 800834c:	08008371 	.word	0x08008371
 8008350:	08008371 	.word	0x08008371
 8008354:	08008419 	.word	0x08008419
 8008358:	080083cd 	.word	0x080083cd
 800835c:	08008405 	.word	0x08008405
 8008360:	08008371 	.word	0x08008371
 8008364:	08008371 	.word	0x08008371
 8008368:	08008419 	.word	0x08008419
 800836c:	080083cd 	.word	0x080083cd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	18d1      	adds	r1, r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837e:	f7ff ff67 	bl	8008250 <prvInsertTimerInActiveList>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d047      	beq.n	8008418 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d13f      	bne.n	8008418 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	441a      	add	r2, r3
 80083a0:	2300      	movs	r3, #0
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2300      	movs	r3, #0
 80083a6:	2100      	movs	r1, #0
 80083a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083aa:	f7ff fe1f 	bl	8007fec <xTimerGenericCommand>
 80083ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d130      	bne.n	8008418 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	61bb      	str	r3, [r7, #24]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	617b      	str	r3, [r7, #20]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	699a      	ldr	r2, [r3, #24]
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	18d1      	adds	r1, r2, r3
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fe:	f7ff ff27 	bl	8008250 <prvInsertTimerInActiveList>
					break;
 8008402:	e009      	b.n	8008418 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800840a:	2b00      	cmp	r3, #0
 800840c:	d104      	bne.n	8008418 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800840e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008410:	f000 fb68 	bl	8008ae4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008414:	e000      	b.n	8008418 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008416:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008418:	4b07      	ldr	r3, [pc, #28]	; (8008438 <prvProcessReceivedCommands+0x164>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	1d39      	adds	r1, r7, #4
 800841e:	2200      	movs	r2, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe f8a1 	bl	8006568 <xQueueReceive>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	f47f af57 	bne.w	80082dc <prvProcessReceivedCommands+0x8>
	}
}
 800842e:	bf00      	nop
 8008430:	bf00      	nop
 8008432:	3730      	adds	r7, #48	; 0x30
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	2000113c 	.word	0x2000113c

0800843c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008442:	e045      	b.n	80084d0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008444:	4b2c      	ldr	r3, [pc, #176]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800844e:	4b2a      	ldr	r3, [pc, #168]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3304      	adds	r3, #4
 800845c:	4618      	mov	r0, r3
 800845e:	f7fd fc8b 	bl	8005d78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d12e      	bne.n	80084d0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	4413      	add	r3, r2
 800847a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	429a      	cmp	r2, r3
 8008482:	d90e      	bls.n	80084a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008490:	4b19      	ldr	r3, [pc, #100]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7fd fc34 	bl	8005d08 <vListInsert>
 80084a0:	e016      	b.n	80084d0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084a2:	2300      	movs	r3, #0
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	2300      	movs	r3, #0
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	2100      	movs	r1, #0
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff fd9d 	bl	8007fec <xTimerGenericCommand>
 80084b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10a      	bne.n	80084d0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	603b      	str	r3, [r7, #0]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084d0:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1b4      	bne.n	8008444 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084da:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084e0:	4b06      	ldr	r3, [pc, #24]	; (80084fc <prvSwitchTimerLists+0xc0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a04      	ldr	r2, [pc, #16]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 80084e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084e8:	4a04      	ldr	r2, [pc, #16]	; (80084fc <prvSwitchTimerLists+0xc0>)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	6013      	str	r3, [r2, #0]
}
 80084ee:	bf00      	nop
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20001134 	.word	0x20001134
 80084fc:	20001138 	.word	0x20001138

08008500 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008506:	f000 f929 	bl	800875c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800850a:	4b15      	ldr	r3, [pc, #84]	; (8008560 <prvCheckForValidListAndQueue+0x60>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d120      	bne.n	8008554 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008512:	4814      	ldr	r0, [pc, #80]	; (8008564 <prvCheckForValidListAndQueue+0x64>)
 8008514:	f7fd fbaa 	bl	8005c6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008518:	4813      	ldr	r0, [pc, #76]	; (8008568 <prvCheckForValidListAndQueue+0x68>)
 800851a:	f7fd fba7 	bl	8005c6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <prvCheckForValidListAndQueue+0x6c>)
 8008520:	4a10      	ldr	r2, [pc, #64]	; (8008564 <prvCheckForValidListAndQueue+0x64>)
 8008522:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008524:	4b12      	ldr	r3, [pc, #72]	; (8008570 <prvCheckForValidListAndQueue+0x70>)
 8008526:	4a10      	ldr	r2, [pc, #64]	; (8008568 <prvCheckForValidListAndQueue+0x68>)
 8008528:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800852a:	2300      	movs	r3, #0
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4b11      	ldr	r3, [pc, #68]	; (8008574 <prvCheckForValidListAndQueue+0x74>)
 8008530:	4a11      	ldr	r2, [pc, #68]	; (8008578 <prvCheckForValidListAndQueue+0x78>)
 8008532:	2110      	movs	r1, #16
 8008534:	200a      	movs	r0, #10
 8008536:	f7fd fcb1 	bl	8005e9c <xQueueGenericCreateStatic>
 800853a:	4603      	mov	r3, r0
 800853c:	4a08      	ldr	r2, [pc, #32]	; (8008560 <prvCheckForValidListAndQueue+0x60>)
 800853e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <prvCheckForValidListAndQueue+0x60>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d005      	beq.n	8008554 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <prvCheckForValidListAndQueue+0x60>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	490b      	ldr	r1, [pc, #44]	; (800857c <prvCheckForValidListAndQueue+0x7c>)
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fbc0 	bl	8006cd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008554:	f000 f932 	bl	80087bc <vPortExitCritical>
}
 8008558:	bf00      	nop
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	2000113c 	.word	0x2000113c
 8008564:	2000110c 	.word	0x2000110c
 8008568:	20001120 	.word	0x20001120
 800856c:	20001134 	.word	0x20001134
 8008570:	20001138 	.word	0x20001138
 8008574:	200011e8 	.word	0x200011e8
 8008578:	20001148 	.word	0x20001148
 800857c:	0800e420 	.word	0x0800e420

08008580 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3b04      	subs	r3, #4
 8008590:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3b04      	subs	r3, #4
 800859e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f023 0201 	bic.w	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3b04      	subs	r3, #4
 80085ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085b0:	4a08      	ldr	r2, [pc, #32]	; (80085d4 <pxPortInitialiseStack+0x54>)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3b14      	subs	r3, #20
 80085ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3b20      	subs	r3, #32
 80085c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085c8:	68fb      	ldr	r3, [r7, #12]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	080085d9 	.word	0x080085d9

080085d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80085de:	2300      	movs	r3, #0
 80085e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085e2:	4b12      	ldr	r3, [pc, #72]	; (800862c <prvTaskExitError+0x54>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	d00a      	beq.n	8008602 <prvTaskExitError+0x2a>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60fb      	str	r3, [r7, #12]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <prvTaskExitError+0x28>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60bb      	str	r3, [r7, #8]
}
 8008614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008616:	bf00      	nop
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0fc      	beq.n	8008618 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20000010 	.word	0x20000010

08008630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <pxCurrentTCBConst2>)
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	6808      	ldr	r0, [r1, #0]
 8008636:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800863a:	f380 8809 	msr	PSP, r0
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f04f 0000 	mov.w	r0, #0
 8008646:	f380 8811 	msr	BASEPRI, r0
 800864a:	f04e 0e0d 	orr.w	lr, lr, #13
 800864e:	4770      	bx	lr

08008650 <pxCurrentTCBConst2>:
 8008650:	20000c0c 	.word	0x20000c0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop

08008658 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008658:	4806      	ldr	r0, [pc, #24]	; (8008674 <prvPortStartFirstTask+0x1c>)
 800865a:	6800      	ldr	r0, [r0, #0]
 800865c:	6800      	ldr	r0, [r0, #0]
 800865e:	f380 8808 	msr	MSP, r0
 8008662:	b662      	cpsie	i
 8008664:	b661      	cpsie	f
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	df00      	svc	0
 8008670:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008672:	bf00      	nop
 8008674:	e000ed08 	.word	0xe000ed08

08008678 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800867e:	4b32      	ldr	r3, [pc, #200]	; (8008748 <xPortStartScheduler+0xd0>)
 8008680:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	22ff      	movs	r2, #255	; 0xff
 800868e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	4b2a      	ldr	r3, [pc, #168]	; (800874c <xPortStartScheduler+0xd4>)
 80086a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086a6:	4b2a      	ldr	r3, [pc, #168]	; (8008750 <xPortStartScheduler+0xd8>)
 80086a8:	2207      	movs	r2, #7
 80086aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086ac:	e009      	b.n	80086c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80086ae:	4b28      	ldr	r3, [pc, #160]	; (8008750 <xPortStartScheduler+0xd8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	4a26      	ldr	r2, [pc, #152]	; (8008750 <xPortStartScheduler+0xd8>)
 80086b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d0ef      	beq.n	80086ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086ce:	4b20      	ldr	r3, [pc, #128]	; (8008750 <xPortStartScheduler+0xd8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f1c3 0307 	rsb	r3, r3, #7
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d00a      	beq.n	80086f0 <xPortStartScheduler+0x78>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60bb      	str	r3, [r7, #8]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086f0:	4b17      	ldr	r3, [pc, #92]	; (8008750 <xPortStartScheduler+0xd8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	021b      	lsls	r3, r3, #8
 80086f6:	4a16      	ldr	r2, [pc, #88]	; (8008750 <xPortStartScheduler+0xd8>)
 80086f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086fa:	4b15      	ldr	r3, [pc, #84]	; (8008750 <xPortStartScheduler+0xd8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008702:	4a13      	ldr	r2, [pc, #76]	; (8008750 <xPortStartScheduler+0xd8>)
 8008704:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	b2da      	uxtb	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <xPortStartScheduler+0xdc>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a10      	ldr	r2, [pc, #64]	; (8008754 <xPortStartScheduler+0xdc>)
 8008714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800871a:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <xPortStartScheduler+0xdc>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a0d      	ldr	r2, [pc, #52]	; (8008754 <xPortStartScheduler+0xdc>)
 8008720:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008724:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008726:	f000 f8b9 	bl	800889c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <xPortStartScheduler+0xe0>)
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008730:	f7ff ff92 	bl	8008658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008734:	f7fe ffb0 	bl	8007698 <vTaskSwitchContext>
	prvTaskExitError();
 8008738:	f7ff ff4e 	bl	80085d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	e000e400 	.word	0xe000e400
 800874c:	20001238 	.word	0x20001238
 8008750:	2000123c 	.word	0x2000123c
 8008754:	e000ed20 	.word	0xe000ed20
 8008758:	20000010 	.word	0x20000010

0800875c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	607b      	str	r3, [r7, #4]
}
 8008774:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <vPortEnterCritical+0x58>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3301      	adds	r3, #1
 800877c:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <vPortEnterCritical+0x58>)
 800877e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008780:	4b0c      	ldr	r3, [pc, #48]	; (80087b4 <vPortEnterCritical+0x58>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10f      	bne.n	80087a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008788:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <vPortEnterCritical+0x5c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	603b      	str	r3, [r7, #0]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <vPortEnterCritical+0x4a>
	}
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20000010 	.word	0x20000010
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087c2:	4b11      	ldr	r3, [pc, #68]	; (8008808 <vPortExitCritical+0x4c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <vPortExitCritical+0x24>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	607b      	str	r3, [r7, #4]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <vPortExitCritical+0x4c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	4a08      	ldr	r2, [pc, #32]	; (8008808 <vPortExitCritical+0x4c>)
 80087e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <vPortExitCritical+0x4c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d105      	bne.n	80087fe <vPortExitCritical+0x42>
 80087f2:	2300      	movs	r3, #0
 80087f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f383 8811 	msr	BASEPRI, r3
}
 80087fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr
 8008808:	20000010 	.word	0x20000010
 800880c:	00000000 	.word	0x00000000

08008810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008810:	f3ef 8009 	mrs	r0, PSP
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <pxCurrentTCBConst>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008820:	6010      	str	r0, [r2, #0]
 8008822:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008826:	f04f 0050 	mov.w	r0, #80	; 0x50
 800882a:	f380 8811 	msr	BASEPRI, r0
 800882e:	f7fe ff33 	bl	8007698 <vTaskSwitchContext>
 8008832:	f04f 0000 	mov.w	r0, #0
 8008836:	f380 8811 	msr	BASEPRI, r0
 800883a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800883e:	6819      	ldr	r1, [r3, #0]
 8008840:	6808      	ldr	r0, [r1, #0]
 8008842:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008846:	f380 8809 	msr	PSP, r0
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	4770      	bx	lr

08008850 <pxCurrentTCBConst>:
 8008850:	20000c0c 	.word	0x20000c0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008872:	f7fe fe53 	bl	800751c <xTaskIncrementTick>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <SysTick_Handler+0x40>)
 800887e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	2300      	movs	r3, #0
 8008886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f383 8811 	msr	BASEPRI, r3
}
 800888e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <vPortSetupTimerInterrupt+0x30>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088a6:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <vPortSetupTimerInterrupt+0x34>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <vPortSetupTimerInterrupt+0x38>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a09      	ldr	r2, [pc, #36]	; (80088d8 <vPortSetupTimerInterrupt+0x3c>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	099b      	lsrs	r3, r3, #6
 80088b8:	4a08      	ldr	r2, [pc, #32]	; (80088dc <vPortSetupTimerInterrupt+0x40>)
 80088ba:	3b01      	subs	r3, #1
 80088bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088be:	4b03      	ldr	r3, [pc, #12]	; (80088cc <vPortSetupTimerInterrupt+0x30>)
 80088c0:	2207      	movs	r2, #7
 80088c2:	601a      	str	r2, [r3, #0]
}
 80088c4:	bf00      	nop
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr
 80088cc:	e000e010 	.word	0xe000e010
 80088d0:	e000e018 	.word	0xe000e018
 80088d4:	20000004 	.word	0x20000004
 80088d8:	10624dd3 	.word	0x10624dd3
 80088dc:	e000e014 	.word	0xe000e014

080088e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088e6:	f3ef 8305 	mrs	r3, IPSR
 80088ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b0f      	cmp	r3, #15
 80088f0:	d914      	bls.n	800891c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088f2:	4a16      	ldr	r2, [pc, #88]	; (800894c <vPortValidateInterruptPriority+0x6c>)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088fc:	4b14      	ldr	r3, [pc, #80]	; (8008950 <vPortValidateInterruptPriority+0x70>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	7afa      	ldrb	r2, [r7, #11]
 8008902:	429a      	cmp	r2, r3
 8008904:	d20a      	bcs.n	800891c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	607b      	str	r3, [r7, #4]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800891c:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <vPortValidateInterruptPriority+0x74>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008924:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <vPortValidateInterruptPriority+0x78>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d90a      	bls.n	8008942 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	603b      	str	r3, [r7, #0]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <vPortValidateInterruptPriority+0x60>
	}
 8008942:	bf00      	nop
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr
 800894c:	e000e3f0 	.word	0xe000e3f0
 8008950:	20001238 	.word	0x20001238
 8008954:	e000ed0c 	.word	0xe000ed0c
 8008958:	2000123c 	.word	0x2000123c

0800895c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08a      	sub	sp, #40	; 0x28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008968:	f7fe fd0c 	bl	8007384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800896c:	4b58      	ldr	r3, [pc, #352]	; (8008ad0 <pvPortMalloc+0x174>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008974:	f000 f910 	bl	8008b98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008978:	4b56      	ldr	r3, [pc, #344]	; (8008ad4 <pvPortMalloc+0x178>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4013      	ands	r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	f040 808e 	bne.w	8008aa2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01d      	beq.n	80089c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800898c:	2208      	movs	r2, #8
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d014      	beq.n	80089c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f023 0307 	bic.w	r3, r3, #7
 80089a4:	3308      	adds	r3, #8
 80089a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <pvPortMalloc+0x6c>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	617b      	str	r3, [r7, #20]
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d069      	beq.n	8008aa2 <pvPortMalloc+0x146>
 80089ce:	4b42      	ldr	r3, [pc, #264]	; (8008ad8 <pvPortMalloc+0x17c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d864      	bhi.n	8008aa2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089d8:	4b40      	ldr	r3, [pc, #256]	; (8008adc <pvPortMalloc+0x180>)
 80089da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089dc:	4b3f      	ldr	r3, [pc, #252]	; (8008adc <pvPortMalloc+0x180>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089e2:	e004      	b.n	80089ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d903      	bls.n	8008a00 <pvPortMalloc+0xa4>
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f1      	bne.n	80089e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a00:	4b33      	ldr	r3, [pc, #204]	; (8008ad0 <pvPortMalloc+0x174>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d04b      	beq.n	8008aa2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2208      	movs	r2, #8
 8008a10:	4413      	add	r3, r2
 8008a12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	1ad2      	subs	r2, r2, r3
 8008a24:	2308      	movs	r3, #8
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d91f      	bls.n	8008a6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4413      	add	r3, r2
 8008a32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <pvPortMalloc+0xf8>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	613b      	str	r3, [r7, #16]
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a66:	69b8      	ldr	r0, [r7, #24]
 8008a68:	f000 f8f8 	bl	8008c5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <pvPortMalloc+0x17c>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <pvPortMalloc+0x17c>)
 8008a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a7a:	4b17      	ldr	r3, [pc, #92]	; (8008ad8 <pvPortMalloc+0x17c>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <pvPortMalloc+0x184>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d203      	bcs.n	8008a8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <pvPortMalloc+0x17c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a15      	ldr	r2, [pc, #84]	; (8008ae0 <pvPortMalloc+0x184>)
 8008a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <pvPortMalloc+0x178>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008aa2:	f7fe fc7d 	bl	80073a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <pvPortMalloc+0x16a>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <pvPortMalloc+0x168>
	return pvReturn;
 8008ac6:	69fb      	ldr	r3, [r7, #28]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3728      	adds	r7, #40	; 0x28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20003248 	.word	0x20003248
 8008ad4:	20003254 	.word	0x20003254
 8008ad8:	2000324c 	.word	0x2000324c
 8008adc:	20003240 	.word	0x20003240
 8008ae0:	20003250 	.word	0x20003250

08008ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d048      	beq.n	8008b88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008af6:	2308      	movs	r3, #8
 8008af8:	425b      	negs	r3, r3
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4413      	add	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	4b21      	ldr	r3, [pc, #132]	; (8008b90 <vPortFree+0xac>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <vPortFree+0x44>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	60fb      	str	r3, [r7, #12]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00a      	beq.n	8008b46 <vPortFree+0x62>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60bb      	str	r3, [r7, #8]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	4b11      	ldr	r3, [pc, #68]	; (8008b90 <vPortFree+0xac>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d019      	beq.n	8008b88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d115      	bne.n	8008b88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <vPortFree+0xac>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	43db      	mvns	r3, r3
 8008b66:	401a      	ands	r2, r3
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b6c:	f7fe fc0a 	bl	8007384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	4b07      	ldr	r3, [pc, #28]	; (8008b94 <vPortFree+0xb0>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4413      	add	r3, r2
 8008b7a:	4a06      	ldr	r2, [pc, #24]	; (8008b94 <vPortFree+0xb0>)
 8008b7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b7e:	6938      	ldr	r0, [r7, #16]
 8008b80:	f000 f86c 	bl	8008c5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b84:	f7fe fc0c 	bl	80073a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b88:	bf00      	nop
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20003254 	.word	0x20003254
 8008b94:	2000324c 	.word	0x2000324c

08008b98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ba2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ba4:	4b27      	ldr	r3, [pc, #156]	; (8008c44 <prvHeapInit+0xac>)
 8008ba6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00c      	beq.n	8008bcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3307      	adds	r3, #7
 8008bb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	4a1f      	ldr	r2, [pc, #124]	; (8008c44 <prvHeapInit+0xac>)
 8008bc8:	4413      	add	r3, r2
 8008bca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bd0:	4a1d      	ldr	r2, [pc, #116]	; (8008c48 <prvHeapInit+0xb0>)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bd6:	4b1c      	ldr	r3, [pc, #112]	; (8008c48 <prvHeapInit+0xb0>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008be4:	2208      	movs	r2, #8
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <prvHeapInit+0xb4>)
 8008bf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bfa:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <prvHeapInit+0xb4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c02:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <prvHeapInit+0xb4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <prvHeapInit+0xb4>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	4a0a      	ldr	r2, [pc, #40]	; (8008c50 <prvHeapInit+0xb8>)
 8008c26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <prvHeapInit+0xbc>)
 8008c2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c30:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <prvHeapInit+0xc0>)
 8008c32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c36:	601a      	str	r2, [r3, #0]
}
 8008c38:	bf00      	nop
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bc80      	pop	{r7}
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	20001240 	.word	0x20001240
 8008c48:	20003240 	.word	0x20003240
 8008c4c:	20003248 	.word	0x20003248
 8008c50:	20003250 	.word	0x20003250
 8008c54:	2000324c 	.word	0x2000324c
 8008c58:	20003254 	.word	0x20003254

08008c5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c64:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <prvInsertBlockIntoFreeList+0xa8>)
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	e002      	b.n	8008c70 <prvInsertBlockIntoFreeList+0x14>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d8f7      	bhi.n	8008c6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	4413      	add	r3, r2
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d108      	bne.n	8008c9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	441a      	add	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	441a      	add	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d118      	bne.n	8008ce4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <prvInsertBlockIntoFreeList+0xac>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d00d      	beq.n	8008cda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	441a      	add	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	e008      	b.n	8008cec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <prvInsertBlockIntoFreeList+0xac>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	e003      	b.n	8008cec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d002      	beq.n	8008cfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr
 8008d04:	20003240 	.word	0x20003240
 8008d08:	20003248 	.word	0x20003248

08008d0c <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af02      	add	r7, sp, #8
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	f023 030f 	bic.w	r3, r3, #15
 8008d1e:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	011b      	lsls	r3, r3, #4
 8008d24:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	7a5a      	ldrb	r2, [r3, #9]
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	f043 0304 	orr.w	r3, r3, #4
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	7a5a      	ldrb	r2, [r3, #9]
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	7a5a      	ldrb	r2, [r3, #9]
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	f043 0304 	orr.w	r3, r3, #4
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	7a5a      	ldrb	r2, [r3, #9]
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6858      	ldr	r0, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	b299      	uxth	r1, r3
 8008d6c:	f107 0208 	add.w	r2, r7, #8
 8008d70:	2364      	movs	r3, #100	; 0x64
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	2304      	movs	r3, #4
 8008d76:	f7f9 fe91 	bl	8002a9c <HAL_I2C_Master_Transmit>
}
 8008d7a:	bf00      	nop
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b086      	sub	sp, #24
 8008d86:	af02      	add	r7, sp, #8
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	f023 030f 	bic.w	r3, r3, #15
 8008d94:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	011b      	lsls	r3, r3, #4
 8008d9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	7a5a      	ldrb	r2, [r3, #9]
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f043 0305 	orr.w	r3, r3, #5
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	7a5a      	ldrb	r2, [r3, #9]
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7a5a      	ldrb	r2, [r3, #9]
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f043 0305 	orr.w	r3, r3, #5
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7a5a      	ldrb	r2, [r3, #9]
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	f043 0301 	orr.w	r3, r3, #1
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6858      	ldr	r0, [r3, #4]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b299      	uxth	r1, r3
 8008dee:	f107 0208 	add.w	r2, r7, #8
 8008df2:	2364      	movs	r3, #100	; 0x64
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	2304      	movs	r3, #4
 8008df8:	f7f9 fe50 	bl	8002a9c <HAL_I2C_Master_Transmit>
}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <lcd_set_cursor>:
	lcd->Backlightval = LCD_NOBACKLIGHT;
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
 8008e10:	4613      	mov	r3, r2
 8008e12:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8008e14:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <lcd_set_cursor+0x40>)
 8008e16:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	443b      	add	r3, r7
 8008e1e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8008e22:	78bb      	ldrb	r3, [r7, #2]
 8008e24:	4413      	add	r3, r2
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	b25b      	sxtb	r3, r3
 8008e2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e2e:	b25b      	sxtb	r3, r3
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ff69 	bl	8008d0c <lcd_send_cmd>
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	54144000 	.word	0x54144000

08008e48 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7a1b      	ldrb	r3, [r3, #8]
 8008e54:	f023 0301 	bic.w	r3, r3, #1
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	7a1b      	ldrb	r3, [r3, #8]
 8008e62:	f043 0308 	orr.w	r3, r3, #8
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff ff4e 	bl	8008d0c <lcd_send_cmd>
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 8008e78:	b40e      	push	{r1, r2, r3}
 8008e7a:	b590      	push	{r4, r7, lr}
 8008e7c:	b08a      	sub	sp, #40	; 0x28
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 8008e82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e86:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 8008e88:	f107 0310 	add.w	r3, r7, #16
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e90:	4618      	mov	r0, r3
 8008e92:	f002 fcf1 	bl	800b878 <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8008e96:	2300      	movs	r3, #0
 8008e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e9c:	e00e      	b.n	8008ebc <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 8008e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ea2:	3328      	adds	r3, #40	; 0x28
 8008ea4:	443b      	add	r3, r7
 8008ea6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff ff68 	bl	8008d82 <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8008eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ebc:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8008ec0:	f107 0310 	add.w	r3, r7, #16
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7f7 f94d 	bl	8000164 <strlen>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	d203      	bcs.n	8008ed8 <lcd_printf+0x60>
 8008ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ed4:	2b0f      	cmp	r3, #15
 8008ed6:	d9e2      	bls.n	8008e9e <lcd_printf+0x26>
  }
}
 8008ed8:	bf00      	nop
 8008eda:	3728      	adds	r7, #40	; 0x28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008ee2:	b003      	add	sp, #12
 8008ee4:	4770      	bx	lr

08008ee6 <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	7a1b      	ldrb	r3, [r3, #8]
 8008f08:	f043 0304 	orr.w	r3, r3, #4
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 8008f12:	2133      	movs	r1, #51	; 0x33
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f7ff fef9 	bl	8008d0c <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 8008f1a:	2132      	movs	r1, #50	; 0x32
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff fef5 	bl	8008d0c <lcd_send_cmd>
	HAL_Delay(5);
 8008f22:	2005      	movs	r0, #5
 8008f24:	f7f9 f90e 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 8008f28:	2101      	movs	r1, #1
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f7ff feee 	bl	8008d0c <lcd_send_cmd>
	HAL_Delay(5);
 8008f30:	2005      	movs	r0, #5
 8008f32:	f7f9 f907 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 8008f36:	210c      	movs	r1, #12
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7ff fee7 	bl	8008d0c <lcd_send_cmd>
	HAL_Delay(5);
 8008f3e:	2005      	movs	r0, #5
 8008f40:	f7f9 f900 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 8008f44:	2102      	movs	r1, #2
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff fee0 	bl	8008d0c <lcd_send_cmd>
	HAL_Delay(5);
 8008f4c:	2005      	movs	r0, #5
 8008f4e:	f7f9 f8f9 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 8008f52:	2180      	movs	r1, #128	; 0x80
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff fed9 	bl	8008d0c <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff ff74 	bl	8008e48 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2208      	movs	r2, #8
 8008f64:	725a      	strb	r2, [r3, #9]
}
 8008f66:	bf00      	nop
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <DC_Motor_Init>:
#include "dc_motor.h"

void DC_Motor_Init(DC_Motor_HandleTypeDef* MOTOR, TIM_HandleTypeDef* Timer, uint32_t TIMChanel, GPIO_TypeDef* Port_IN1, uint16_t Pin_IN1, GPIO_TypeDef* Port_IN2,uint16_t Pin_IN2) {
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
 8008f7a:	603b      	str	r3, [r7, #0]
	MOTOR->Timer = Timer;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	605a      	str	r2, [r3, #4]
	MOTOR->TIMChanel = TIMChanel;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	609a      	str	r2, [r3, #8]
	MOTOR->Pin_IN1 = Pin_IN1;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8b3a      	ldrh	r2, [r7, #24]
 8008f8c:	819a      	strh	r2, [r3, #12]
	MOTOR->Port_IN1 = Port_IN1;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	611a      	str	r2, [r3, #16]
	MOTOR->Pin_IN2 = Pin_IN2;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8c3a      	ldrh	r2, [r7, #32]
 8008f98:	829a      	strh	r2, [r3, #20]
	MOTOR->Port_IN2 = Port_IN2;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	69fa      	ldr	r2, [r7, #28]
 8008f9e:	619a      	str	r2, [r3, #24]
}
 8008fa0:	bf00      	nop
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bc80      	pop	{r7}
 8008fa8:	4770      	bx	lr

08008faa <TIM_DelayUs>:
  * 		the source of time base.
  * @param  Delay: specifies the delay time length, in microseconds.
  * @retval None
  */
void TIM_DelayUs(TIM_HandleTypeDef *htim, uint16_t Delay)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7fa fd0c 	bl	80039dc <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(htim) < Delay);
 8008fc4:	bf00      	nop
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fcc:	887b      	ldrh	r3, [r7, #2]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d3f9      	bcc.n	8008fc6 <TIM_DelayUs+0x1c>
	HAL_TIM_Base_Stop(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7fa fd4c 	bl	8003a70 <HAL_TIM_Base_Stop>

}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <DHT_DelayUs>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains the configuration information for the specified DHT sensor.
  * @param  Time: specifies the delay time length, in microseconds.
  * @retval None
  */
static void DHT_DelayUs(DHT_HandleTypeDef* DHT, uint16_t Time)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	807b      	strh	r3, [r7, #2]
	TIM_DelayUs(DHT->Timer, Time);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	887a      	ldrh	r2, [r7, #2]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff ffd8 	bl	8008faa <TIM_DelayUs>
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <DHT_SetPinOut>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @retval None
  */
static void DHT_SetPinOut(DHT_HandleTypeDef* DHT)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	; 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800900c:	f107 0318 	add.w	r3, r7, #24
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	605a      	str	r2, [r3, #4]
 8009016:	609a      	str	r2, [r3, #8]
 8009018:	60da      	str	r2, [r3, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800901a:	4b26      	ldr	r3, [pc, #152]	; (80090b4 <DHT_SetPinOut+0xb0>)
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	4a25      	ldr	r2, [pc, #148]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009020:	f043 0304 	orr.w	r3, r3, #4
 8009024:	6193      	str	r3, [r2, #24]
 8009026:	4b23      	ldr	r3, [pc, #140]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	f003 0304 	and.w	r3, r3, #4
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8009032:	4b20      	ldr	r3, [pc, #128]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	4a1f      	ldr	r2, [pc, #124]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009038:	f043 0308 	orr.w	r3, r3, #8
 800903c:	6193      	str	r3, [r2, #24]
 800903e:	4b1d      	ldr	r3, [pc, #116]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	f003 0308 	and.w	r3, r3, #8
 8009046:	613b      	str	r3, [r7, #16]
 8009048:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800904a:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <DHT_SetPinOut+0xb0>)
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	4a19      	ldr	r2, [pc, #100]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009050:	f043 0310 	orr.w	r3, r3, #16
 8009054:	6193      	str	r3, [r2, #24]
 8009056:	4b17      	ldr	r3, [pc, #92]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	f003 0310 	and.w	r3, r3, #16
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8009062:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	4a13      	ldr	r2, [pc, #76]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009068:	f043 0320 	orr.w	r3, r3, #32
 800906c:	6193      	str	r3, [r2, #24]
 800906e:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <DHT_SetPinOut+0xb0>)
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	60bb      	str	r3, [r7, #8]
 8009078:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_WritePin(DHT->Port, DHT->Pin, GPIO_PIN_SET);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68d8      	ldr	r0, [r3, #12]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	891b      	ldrh	r3, [r3, #8]
 8009082:	2201      	movs	r2, #1
 8009084:	4619      	mov	r1, r3
 8009086:	f7f9 fbac 	bl	80027e2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DHT->Pin;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	891b      	ldrh	r3, [r3, #8]
 800908e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009090:	2311      	movs	r3, #17
 8009092:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009094:	2300      	movs	r3, #0
 8009096:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009098:	2302      	movs	r3, #2
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f107 0218 	add.w	r2, r7, #24
 80090a4:	4611      	mov	r1, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7f9 fa00 	bl	80024ac <HAL_GPIO_Init>
}
 80090ac:	bf00      	nop
 80090ae:	3728      	adds	r7, #40	; 0x28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	40021000 	.word	0x40021000

080090b8 <DHT_SetPinIn>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @retval None
  */
static void DHT_SetPinIn(DHT_HandleTypeDef* DHT)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c0:	f107 0308 	add.w	r3, r7, #8
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	605a      	str	r2, [r3, #4]
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	891b      	ldrh	r3, [r3, #8]
 80090d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090d8:	2300      	movs	r3, #0
 80090da:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f107 0208 	add.w	r2, r7, #8
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7f9 f9e0 	bl	80024ac <HAL_GPIO_Init>
}
 80090ec:	bf00      	nop
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <DHT_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
static void DHT_WritePin(DHT_HandleTypeDef* DHT, GPIO_PinState PinState)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->Port, DHT->Pin, PinState);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68d8      	ldr	r0, [r3, #12]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	891b      	ldrh	r3, [r3, #8]
 8009108:	78fa      	ldrb	r2, [r7, #3]
 800910a:	4619      	mov	r1, r3
 800910c:	f7f9 fb69 	bl	80027e2 <HAL_GPIO_WritePin>
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <DHT_ReadPin>:
  * 		the configuration information for the specified DHT sensor.
  *
  * @retval The input port pin value.
  */
static GPIO_PinState DHT_ReadPin(DHT_HandleTypeDef* DHT)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
	GPIO_PinState PinState;
	PinState =  HAL_GPIO_ReadPin(DHT->Port, DHT->Pin);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	891b      	ldrh	r3, [r3, #8]
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f7f9 fb42 	bl	80027b4 <HAL_GPIO_ReadPin>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]
	return PinState;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <DHT_AwaitPinState>:
  * 			DHT_OK: read the expected port pin value on sensor pin.
  * 			DHT_ERR_TIMEOUT: timeout but not read the expected port pin value on sensor pin.
  */
static dht_err_t DHT_AwaitPinState(DHT_HandleTypeDef* DHT, uint32_t timeout,
									GPIO_PinState expected_pin_state, uint32_t* duration)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b086      	sub	sp, #24
 8009142:	af00      	add	r7, sp, #0
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	603b      	str	r3, [r7, #0]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]
	DHT_SetPinIn(DHT);
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7ff ffb2 	bl	80090b8 <DHT_SetPinIn>
    for (uint32_t i = 0; i < timeout; i += DHT_TIMER_INTERVAL)
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	e016      	b.n	8009188 <DHT_AwaitPinState+0x4a>
    {
        // need to wait at least a single interval to prevent reading a jitter
    	DHT_DelayUs(DHT, DHT_TIMER_INTERVAL);
 800915a:	2102      	movs	r1, #2
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff ff3f 	bl	8008fe0 <DHT_DelayUs>
        if (DHT_ReadPin(DHT) == expected_pin_state)
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff ffd8 	bl	8009118 <DHT_ReadPin>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	4293      	cmp	r3, r2
 8009170:	d107      	bne.n	8009182 <DHT_AwaitPinState+0x44>
        {
        	if(duration)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <DHT_AwaitPinState+0x40>
        		*duration = i;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	601a      	str	r2, [r3, #0]
            return DHT_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	e008      	b.n	8009194 <DHT_AwaitPinState+0x56>
    for (uint32_t i = 0; i < timeout; i += DHT_TIMER_INTERVAL)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	3302      	adds	r3, #2
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	429a      	cmp	r2, r3
 800918e:	d3e4      	bcc.n	800915a <DHT_AwaitPinState+0x1c>
        }
    }

    return DHT_ERR_TIMEOUT;
 8009190:	f240 1301 	movw	r3, #257	; 0x101
}
 8009194:	4618      	mov	r0, r3
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <DHT_FetchData>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @param  data[DHT_DATA_BYTES]: Pointer to a uint8_t array.
  * @retval DHT status
  */
static dht_err_t DHT_FetchData(DHT_HandleTypeDef* DHT, uint8_t data[DHT_DATA_BYTES]) {
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
	uint32_t low_duration;
	uint32_t high_duration;

	DHT_SetPinOut(DHT);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff ff2c 	bl	8009004 <DHT_SetPinOut>
	DHT_WritePin(DHT, GPIO_PIN_RESET);
 80091ac:	2100      	movs	r1, #0
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff ffa0 	bl	80090f4 <DHT_WritePin>
//	DHT_DelayMs(DHT, Tbe);
	osDelay(Tbe);
 80091b4:	2014      	movs	r0, #20
 80091b6:	f7fc f9ff 	bl	80055b8 <osDelay>
//	HAL_Delay(20);
	DHT_WritePin(DHT, GPIO_PIN_SET);
 80091ba:	2101      	movs	r1, #1
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff ff99 	bl	80090f4 <DHT_WritePin>

	int ret = DHT_AwaitPinState(DHT, Tgo, GPIO_PIN_RESET, NULL);
 80091c2:	2300      	movs	r3, #0
 80091c4:	2200      	movs	r2, #0
 80091c6:	2123      	movs	r1, #35	; 0x23
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ffb8 	bl	800913e <DHT_AwaitPinState>
 80091ce:	4603      	mov	r3, r0
 80091d0:	61bb      	str	r3, [r7, #24]
	if(ret) {
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <DHT_FetchData+0x42>
		return DHT_ERR_PHASE_B;
 80091d8:	f240 1303 	movw	r3, #259	; 0x103
 80091dc:	e074      	b.n	80092c8 <DHT_FetchData+0x12c>
	}


	ret = DHT_AwaitPinState(DHT, Trel, GPIO_PIN_SET, NULL);
 80091de:	2300      	movs	r3, #0
 80091e0:	2201      	movs	r2, #1
 80091e2:	2158      	movs	r1, #88	; 0x58
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7ff ffaa 	bl	800913e <DHT_AwaitPinState>
 80091ea:	4603      	mov	r3, r0
 80091ec:	61bb      	str	r3, [r7, #24]
	if(ret) {
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <DHT_FetchData+0x5e>
		return DHT_ERR_PHASE_C;
 80091f4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80091f8:	e066      	b.n	80092c8 <DHT_FetchData+0x12c>
	}

	ret = DHT_AwaitPinState(DHT, Treh, GPIO_PIN_RESET, NULL);
 80091fa:	2300      	movs	r3, #0
 80091fc:	2200      	movs	r2, #0
 80091fe:	215c      	movs	r1, #92	; 0x5c
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff ff9c 	bl	800913e <DHT_AwaitPinState>
 8009206:	4603      	mov	r3, r0
 8009208:	61bb      	str	r3, [r7, #24]
	if(ret) {
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <DHT_FetchData+0x7a>
		return DHT_ERR_PHASE_D;
 8009210:	f240 1305 	movw	r3, #261	; 0x105
 8009214:	e058      	b.n	80092c8 <DHT_FetchData+0x12c>
	}

	for (int i = 0; i < DHT_DATA_BITS; ++i) {
 8009216:	2300      	movs	r3, #0
 8009218:	61fb      	str	r3, [r7, #28]
 800921a:	e051      	b.n	80092c0 <DHT_FetchData+0x124>
		ret = DHT_AwaitPinState(DHT, T_LOW, GPIO_PIN_SET, &low_duration);
 800921c:	f107 0310 	add.w	r3, r7, #16
 8009220:	2201      	movs	r2, #1
 8009222:	213a      	movs	r1, #58	; 0x3a
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff ff8a 	bl	800913e <DHT_AwaitPinState>
 800922a:	4603      	mov	r3, r0
 800922c:	61bb      	str	r3, [r7, #24]
		if (ret) {
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <DHT_FetchData+0x9e>
			return DHT_ERR_LBIT_TIMEOUT;
 8009234:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009238:	e046      	b.n	80092c8 <DHT_FetchData+0x12c>
		}
		ret = DHT_AwaitPinState(DHT, TH1, GPIO_PIN_RESET, &high_duration);
 800923a:	f107 030c 	add.w	r3, r7, #12
 800923e:	2200      	movs	r2, #0
 8009240:	214a      	movs	r1, #74	; 0x4a
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff ff7b 	bl	800913e <DHT_AwaitPinState>
 8009248:	4603      	mov	r3, r0
 800924a:	61bb      	str	r3, [r7, #24]
		if (ret) {
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <DHT_FetchData+0xbc>
			return DHT_ERR_HBIT_TIMEOUT;
 8009252:	f240 1307 	movw	r3, #263	; 0x107
 8009256:	e037      	b.n	80092c8 <DHT_FetchData+0x12c>
		}

		uint8_t byte = i / 8;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	da00      	bge.n	8009260 <DHT_FetchData+0xc4>
 800925e:	3307      	adds	r3, #7
 8009260:	10db      	asrs	r3, r3, #3
 8009262:	75fb      	strb	r3, [r7, #23]
		uint8_t bit = i % 8;
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	425a      	negs	r2, r3
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	f002 0207 	and.w	r2, r2, #7
 8009270:	bf58      	it	pl
 8009272:	4253      	negpl	r3, r2
 8009274:	75bb      	strb	r3, [r7, #22]
		if (!bit) {
 8009276:	7dbb      	ldrb	r3, [r7, #22]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <DHT_FetchData+0xea>
		     data[byte] = 0;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	4413      	add	r3, r2
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
		}
		data[byte] |= (high_duration > low_duration) << (7 - bit);
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	4413      	add	r3, r2
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b25a      	sxtb	r2, r3
 8009290:	68f9      	ldr	r1, [r7, #12]
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	4299      	cmp	r1, r3
 8009296:	bf8c      	ite	hi
 8009298:	2301      	movhi	r3, #1
 800929a:	2300      	movls	r3, #0
 800929c:	b2db      	uxtb	r3, r3
 800929e:	4619      	mov	r1, r3
 80092a0:	7dbb      	ldrb	r3, [r7, #22]
 80092a2:	f1c3 0307 	rsb	r3, r3, #7
 80092a6:	fa01 f303 	lsl.w	r3, r1, r3
 80092aa:	b25b      	sxtb	r3, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	b259      	sxtb	r1, r3
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	4413      	add	r3, r2
 80092b6:	b2ca      	uxtb	r2, r1
 80092b8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < DHT_DATA_BITS; ++i) {
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	3301      	adds	r3, #1
 80092be:	61fb      	str	r3, [r7, #28]
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	2b27      	cmp	r3, #39	; 0x27
 80092c4:	ddaa      	ble.n	800921c <DHT_FetchData+0x80>
	}

	return DHT_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3720      	adds	r7, #32
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <DHT_Init>:
  * @param  DHT_Pin: GPIO_PIN_xx that is specified for DHT sensor pin.
  * 		DHT sensor pin.
  * @retval None
  */
void DHT_Init(DHT_HandleTypeDef* DHT, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DHT_Port, uint16_t DHT_Pin)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	807b      	strh	r3, [r7, #2]
	DHT->Error = DHT_OK;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	801a      	strh	r2, [r3, #0]
	DHT->Port = DHT_Port;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	60da      	str	r2, [r3, #12]
	DHT->Pin = DHT_Pin;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	887a      	ldrh	r2, [r7, #2]
 80092ee:	811a      	strh	r2, [r3, #8]
	DHT->Timer = Timer;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	605a      	str	r2, [r3, #4]
	DHT_SetPinOut(DHT);
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f7ff fe84 	bl	8009004 <DHT_SetPinOut>

}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	0000      	movs	r0, r0
	...

08009308 <DHT_ReadTempHum>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @retval DHT status
  */
dht_err_t DHT_ReadTempHum(DHT_HandleTypeDef* DHT)
{
 8009308:	b5b0      	push	{r4, r5, r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	uint8_t data[DHT_DATA_BYTES] = {0};
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	2300      	movs	r3, #0
 8009316:	743b      	strb	r3, [r7, #16]

	DHT_SetPinOut(DHT);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7ff fe73 	bl	8009004 <DHT_SetPinOut>
	DHT_WritePin(DHT, GPIO_PIN_SET);
 800931e:	2101      	movs	r1, #1
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff fee7 	bl	80090f4 <DHT_WritePin>

	int ret = DHT_FetchData(DHT, data);
 8009326:	f107 030c 	add.w	r3, r7, #12
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff35 	bl	800919c <DHT_FetchData>
 8009332:	4603      	mov	r3, r0
 8009334:	617b      	str	r3, [r7, #20]
	if(ret) {
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d006      	beq.n	800934a <DHT_ReadTempHum+0x42>
		DHT->Error = ret;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	b29a      	uxth	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	801a      	strh	r2, [r3, #0]
		return ret;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	b29b      	uxth	r3, r3
 8009348:	e0b5      	b.n	80094b6 <DHT_ReadTempHum+0x1ae>
//	for (int i = 0; i < DHT_DATA_BYTES; i++) {
//		DHT->raw_data[i] = data[i];
//
//	}

	if(data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 800934a:	7c3b      	ldrb	r3, [r7, #16]
 800934c:	461a      	mov	r2, r3
 800934e:	7b3b      	ldrb	r3, [r7, #12]
 8009350:	4619      	mov	r1, r3
 8009352:	7b7b      	ldrb	r3, [r7, #13]
 8009354:	440b      	add	r3, r1
 8009356:	7bb9      	ldrb	r1, [r7, #14]
 8009358:	440b      	add	r3, r1
 800935a:	7bf9      	ldrb	r1, [r7, #15]
 800935c:	440b      	add	r3, r1
 800935e:	b2db      	uxtb	r3, r3
 8009360:	429a      	cmp	r2, r3
 8009362:	d006      	beq.n	8009372 <DHT_ReadTempHum+0x6a>
		DHT->Error = DHT_ERR_INVALID_CRC;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f44f 7281 	mov.w	r2, #258	; 0x102
 800936a:	801a      	strh	r2, [r3, #0]
		return DHT_ERR_INVALID_CRC;
 800936c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009370:	e0a1      	b.n	80094b6 <DHT_ReadTempHum+0x1ae>
	}

	DHT->Temp = data[2] + (data[3]&0x7F)/10.0;
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	4618      	mov	r0, r3
 8009376:	f7f7 f84f 	bl	8000418 <__aeabi_i2d>
 800937a:	4604      	mov	r4, r0
 800937c:	460d      	mov	r5, r1
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009384:	4618      	mov	r0, r3
 8009386:	f7f7 f847 	bl	8000418 <__aeabi_i2d>
 800938a:	f04f 0200 	mov.w	r2, #0
 800938e:	4b4e      	ldr	r3, [pc, #312]	; (80094c8 <DHT_ReadTempHum+0x1c0>)
 8009390:	f7f7 f9d6 	bl	8000740 <__aeabi_ddiv>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4620      	mov	r0, r4
 800939a:	4629      	mov	r1, r5
 800939c:	f7f6 fef0 	bl	8000180 <__adddf3>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4610      	mov	r0, r2
 80093a6:	4619      	mov	r1, r3
 80093a8:	f7f7 fb98 	bl	8000adc <__aeabi_d2f>
 80093ac:	4602      	mov	r2, r0
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	611a      	str	r2, [r3, #16]
	if(data[3]&0x80) {
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	da05      	bge.n	80093c6 <DHT_ReadTempHum+0xbe>
		DHT->Temp = - (DHT->Temp);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	611a      	str	r2, [r3, #16]
	}

	if((DHT->Temp - DHT11_MAX_TEMPERATURE) > 0.001) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	4940      	ldr	r1, [pc, #256]	; (80094cc <DHT_ReadTempHum+0x1c4>)
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7f7 fbd9 	bl	8000b84 <__aeabi_fsub>
 80093d2:	4603      	mov	r3, r0
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7f7 f831 	bl	800043c <__aeabi_f2d>
 80093da:	a339      	add	r3, pc, #228	; (adr r3, 80094c0 <DHT_ReadTempHum+0x1b8>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f7f7 fb14 	bl	8000a0c <__aeabi_dcmpgt>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <DHT_ReadTempHum+0xea>
		DHT->Temp = DHT11_MAX_TEMPERATURE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a37      	ldr	r2, [pc, #220]	; (80094cc <DHT_ReadTempHum+0x1c4>)
 80093ee:	611a      	str	r2, [r3, #16]
 80093f0:	e014      	b.n	800941c <DHT_ReadTempHum+0x114>
	} else if ((DHT->Temp - DHT11_MIN_TEMPERATURE) < 0.001) {
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	4936      	ldr	r1, [pc, #216]	; (80094d0 <DHT_ReadTempHum+0x1c8>)
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7f7 fbc5 	bl	8000b88 <__addsf3>
 80093fe:	4603      	mov	r3, r0
 8009400:	4618      	mov	r0, r3
 8009402:	f7f7 f81b 	bl	800043c <__aeabi_f2d>
 8009406:	a32e      	add	r3, pc, #184	; (adr r3, 80094c0 <DHT_ReadTempHum+0x1b8>)
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	f7f7 fae0 	bl	80009d0 <__aeabi_dcmplt>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <DHT_ReadTempHum+0x114>
		DHT->Temp = DHT11_MIN_TEMPERATURE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a2e      	ldr	r2, [pc, #184]	; (80094d4 <DHT_ReadTempHum+0x1cc>)
 800941a:	611a      	str	r2, [r3, #16]
	}

	DHT->Humi = data[0] + data[1]/10.0;
 800941c:	7b3b      	ldrb	r3, [r7, #12]
 800941e:	4618      	mov	r0, r3
 8009420:	f7f6 fffa 	bl	8000418 <__aeabi_i2d>
 8009424:	4604      	mov	r4, r0
 8009426:	460d      	mov	r5, r1
 8009428:	7b7b      	ldrb	r3, [r7, #13]
 800942a:	4618      	mov	r0, r3
 800942c:	f7f6 fff4 	bl	8000418 <__aeabi_i2d>
 8009430:	f04f 0200 	mov.w	r2, #0
 8009434:	4b24      	ldr	r3, [pc, #144]	; (80094c8 <DHT_ReadTempHum+0x1c0>)
 8009436:	f7f7 f983 	bl	8000740 <__aeabi_ddiv>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	f7f6 fe9d 	bl	8000180 <__adddf3>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4610      	mov	r0, r2
 800944c:	4619      	mov	r1, r3
 800944e:	f7f7 fb45 	bl	8000adc <__aeabi_d2f>
 8009452:	4602      	mov	r2, r0
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	615a      	str	r2, [r3, #20]
	if((DHT->Humi - DHT11_MAX_RELATIVE_HUMIDITY) > 0.001) {
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	491e      	ldr	r1, [pc, #120]	; (80094d8 <DHT_ReadTempHum+0x1d0>)
 800945e:	4618      	mov	r0, r3
 8009460:	f7f7 fb90 	bl	8000b84 <__aeabi_fsub>
 8009464:	4603      	mov	r3, r0
 8009466:	4618      	mov	r0, r3
 8009468:	f7f6 ffe8 	bl	800043c <__aeabi_f2d>
 800946c:	a314      	add	r3, pc, #80	; (adr r3, 80094c0 <DHT_ReadTempHum+0x1b8>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f7 facb 	bl	8000a0c <__aeabi_dcmpgt>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <DHT_ReadTempHum+0x17c>
			DHT->Humi = DHT11_MAX_RELATIVE_HUMIDITY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a16      	ldr	r2, [pc, #88]	; (80094d8 <DHT_ReadTempHum+0x1d0>)
 8009480:	615a      	str	r2, [r3, #20]
 8009482:	e014      	b.n	80094ae <DHT_ReadTempHum+0x1a6>
	} else if ((DHT->Humi - DHT11_MIN_RELATIVE_HUMIDITY) < 0.001) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	4914      	ldr	r1, [pc, #80]	; (80094dc <DHT_ReadTempHum+0x1d4>)
 800948a:	4618      	mov	r0, r3
 800948c:	f7f7 fb7a 	bl	8000b84 <__aeabi_fsub>
 8009490:	4603      	mov	r3, r0
 8009492:	4618      	mov	r0, r3
 8009494:	f7f6 ffd2 	bl	800043c <__aeabi_f2d>
 8009498:	a309      	add	r3, pc, #36	; (adr r3, 80094c0 <DHT_ReadTempHum+0x1b8>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f7 fa97 	bl	80009d0 <__aeabi_dcmplt>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <DHT_ReadTempHum+0x1a6>
			DHT->Humi = DHT11_MIN_RELATIVE_HUMIDITY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a0c      	ldr	r2, [pc, #48]	; (80094dc <DHT_ReadTempHum+0x1d4>)
 80094ac:	615a      	str	r2, [r3, #20]
	}

	DHT->Error = DHT_OK;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	801a      	strh	r2, [r3, #0]
	return DHT_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3718      	adds	r7, #24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bdb0      	pop	{r4, r5, r7, pc}
 80094be:	bf00      	nop
 80094c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80094c4:	3f50624d 	.word	0x3f50624d
 80094c8:	40240000 	.word	0x40240000
 80094cc:	42700000 	.word	0x42700000
 80094d0:	41a00000 	.word	0x41a00000
 80094d4:	c1a00000 	.word	0xc1a00000
 80094d8:	42be0000 	.word	0x42be0000
 80094dc:	40a00000 	.word	0x40a00000

080094e0 <Get_Arg>:
//		}
//	}
//	return HANDLE_RX_UART_NOT_FOUND_CMD;
//}

handle_err_t Get_Arg(char* Rx_data) {
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, (uint8_t *)Rx_data, strlen((char *)Rx_data),50); // test
	uint16_t ret;
	arg_num = 0;
 80094e8:	4b16      	ldr	r3, [pc, #88]	; (8009544 <Get_Arg+0x64>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	701a      	strb	r2, [r3, #0]
	char * pch;
	pch = strtok(Rx_data, " ");
 80094ee:	4916      	ldr	r1, [pc, #88]	; (8009548 <Get_Arg+0x68>)
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f002 f8c7 	bl	800b684 <strtok>
 80094f6:	60f8      	str	r0, [r7, #12]
	while((pch != NULL) && (strcmp(pch, " ")) ) {
 80094f8:	e015      	b.n	8009526 <Get_Arg+0x46>
		strcpy( (char *)argv[arg_num++], pch);
 80094fa:	4b12      	ldr	r3, [pc, #72]	; (8009544 <Get_Arg+0x64>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	b2d1      	uxtb	r1, r2
 8009502:	4a10      	ldr	r2, [pc, #64]	; (8009544 <Get_Arg+0x64>)
 8009504:	7011      	strb	r1, [r2, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4a0e      	ldr	r2, [pc, #56]	; (800954c <Get_Arg+0x6c>)
 8009512:	4413      	add	r3, r2
 8009514:	68f9      	ldr	r1, [r7, #12]
 8009516:	4618      	mov	r0, r3
 8009518:	f001 fa9b 	bl	800aa52 <strcpy>
		pch = strtok(NULL, " ");
 800951c:	490a      	ldr	r1, [pc, #40]	; (8009548 <Get_Arg+0x68>)
 800951e:	2000      	movs	r0, #0
 8009520:	f002 f8b0 	bl	800b684 <strtok>
 8009524:	60f8      	str	r0, [r7, #12]
	while((pch != NULL) && (strcmp(pch, " ")) ) {
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d006      	beq.n	800953a <Get_Arg+0x5a>
 800952c:	4906      	ldr	r1, [pc, #24]	; (8009548 <Get_Arg+0x68>)
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f7f6 fe0e 	bl	8000150 <strcmp>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1df      	bne.n	80094fa <Get_Arg+0x1a>
//	for (int var = 0; var < arg_num; ++var) {
//		HAL_UART_Transmit(&huart2, (uint8_t *)argv[var], strlen((char *)argv[var]),50);
//		HAL_UART_Transmit(&huart2, "\n",1,50); // test
//	}

	return HANDLE_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20003320 	.word	0x20003320
 8009548:	0800e438 	.word	0x0800e438
 800954c:	20003258 	.word	0x20003258

08009550 <Handle_Request>:

handle_err_t Handle_Request() {
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
//	const uint16_t msg = SET_UART_Q;
//	HAL_UART_Transmit(&huart2, "hello\n",7,50); // test
	for (uint8_t i = 0; i < REQUEST_COMMAND_NUMBERS; ++i) {
 8009556:	2300      	movs	r3, #0
 8009558:	71fb      	strb	r3, [r7, #7]
 800955a:	e013      	b.n	8009584 <Handle_Request+0x34>
//		HAL_UART_Transmit(&huart2,(uint8_t* )req_cmds[i], strlen(req_cmds[i]), 30 );
//		HAL_UART_Transmit(&huart2,argv[0], strlen((char *)argv[0]), 30 );
//		HAL_UART_Transmit(&huart2, "hello\n",7,50); // test
		if ( !strcmp((char *)argv[0], req_cmds[i]) ) {
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	4a0d      	ldr	r2, [pc, #52]	; (8009594 <Handle_Request+0x44>)
 8009560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009564:	4619      	mov	r1, r3
 8009566:	480c      	ldr	r0, [pc, #48]	; (8009598 <Handle_Request+0x48>)
 8009568:	f7f6 fdf2 	bl	8000150 <strcmp>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d105      	bne.n	800957e <Handle_Request+0x2e>
//			HAL_UART_Transmit(&huart2,(uint8_t* )req_cmds[i], strlen(req_cmds[i]), 30 );
			handle_func[i]();
 8009572:	79fb      	ldrb	r3, [r7, #7]
 8009574:	4a09      	ldr	r2, [pc, #36]	; (800959c <Handle_Request+0x4c>)
 8009576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800957a:	4798      	blx	r3
//			osMessageQueuePut(motorQueueHandle, &msg, NULL, 0);
			break;
 800957c:	e005      	b.n	800958a <Handle_Request+0x3a>
	for (uint8_t i = 0; i < REQUEST_COMMAND_NUMBERS; ++i) {
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	3301      	adds	r3, #1
 8009582:	71fb      	strb	r3, [r7, #7]
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	2b03      	cmp	r3, #3
 8009588:	d9e8      	bls.n	800955c <Handle_Request+0xc>
		}
	}

	return HANDLE_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000014 	.word	0x20000014
 8009598:	20003258 	.word	0x20003258
 800959c:	20000024 	.word	0x20000024

080095a0 <Handle_SetMode>:



handle_err_t Handle_SetMode(){
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
//	const uint16_t msg = SET_MODE_Q;
	if (arg_num < 2) {
 80095a6:	4b12      	ldr	r3, [pc, #72]	; (80095f0 <Handle_SetMode+0x50>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d802      	bhi.n	80095b4 <Handle_SetMode+0x14>
		return HANDLE_ERR_TOO_FEW_ARG;
 80095ae:	f240 1303 	movw	r3, #259	; 0x103
 80095b2:	e018      	b.n	80095e6 <Handle_SetMode+0x46>
	}
	if (arg_num > 2) {
 80095b4:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <Handle_SetMode+0x50>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d902      	bls.n	80095c2 <Handle_SetMode+0x22>
		return HANDLE_ERR_TOO_MUCH_ARG;
 80095bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80095c0:	e011      	b.n	80095e6 <Handle_SetMode+0x46>
	}
	uint8_t para = atoi((char *)argv[1]);
 80095c2:	480c      	ldr	r0, [pc, #48]	; (80095f4 <Handle_SetMode+0x54>)
 80095c4:	f000 f924 	bl	8009810 <atoi>
 80095c8:	4603      	mov	r3, r0
 80095ca:	71fb      	strb	r3, [r7, #7]
//		sprintf(buffer, " para: %d\n", para);
//		HAL_UART_Transmit(&huart2,(uint8_t* )buffer, strlen(buffer), 300 );
	if(para > 0 && para < 5) {
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d007      	beq.n	80095e2 <Handle_SetMode+0x42>
 80095d2:	79fb      	ldrb	r3, [r7, #7]
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	d804      	bhi.n	80095e2 <Handle_SetMode+0x42>
		controll_mode = para;
 80095d8:	4a07      	ldr	r2, [pc, #28]	; (80095f8 <Handle_SetMode+0x58>)
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	7013      	strb	r3, [r2, #0]
//		sprintf(buffer, " Set mode: %d\n", controll_mode);
//		HAL_UART_Transmit(&huart2,(uint8_t* )buffer, strlen(buffer), 300 );
//		osMessageQueuePut(motorQueueHandle, &msg, NULL, 0);
		return HANDLE_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	e001      	b.n	80095e6 <Handle_SetMode+0x46>
	}
	return HANDLE_ERR_INVALID_ARG;
 80095e2:	f240 1305 	movw	r3, #261	; 0x105

}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20003320 	.word	0x20003320
 80095f4:	2000326c 	.word	0x2000326c
 80095f8:	20000000 	.word	0x20000000

080095fc <Handle_SetTempLevel>:

handle_err_t Handle_SetTempLevel(){
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
//	const uint16_t msg1 = SET_TEMP_Q;
	if (arg_num < 2*NUMBER_LEVELS) {
 8009602:	4b32      	ldr	r3, [pc, #200]	; (80096cc <Handle_SetTempLevel+0xd0>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b07      	cmp	r3, #7
 8009608:	d802      	bhi.n	8009610 <Handle_SetTempLevel+0x14>
		return HANDLE_ERR_TOO_FEW_ARG;
 800960a:	f240 1303 	movw	r3, #259	; 0x103
 800960e:	e058      	b.n	80096c2 <Handle_SetTempLevel+0xc6>
		}
	if (arg_num > 2*NUMBER_LEVELS) {
 8009610:	4b2e      	ldr	r3, [pc, #184]	; (80096cc <Handle_SetTempLevel+0xd0>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b08      	cmp	r3, #8
 8009616:	d902      	bls.n	800961e <Handle_SetTempLevel+0x22>
		return HANDLE_ERR_TOO_MUCH_ARG;
 8009618:	f44f 7382 	mov.w	r3, #260	; 0x104
 800961c:	e051      	b.n	80096c2 <Handle_SetTempLevel+0xc6>
	}
	uint8_t para;
	int i = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	607b      	str	r3, [r7, #4]
	for (i = 1; i < arg_num/2; ++i) {
 8009622:	2301      	movs	r3, #1
 8009624:	607b      	str	r3, [r7, #4]
 8009626:	e01c      	b.n	8009662 <Handle_SetTempLevel+0x66>
		para = atoi((char *)argv[i]);
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <Handle_SetTempLevel+0xd4>)
 8009634:	4413      	add	r3, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f8ea 	bl	8009810 <atoi>
 800963c:	4603      	mov	r3, r0
 800963e:	70fb      	strb	r3, [r7, #3]
		if(para >= DHT11_MIN_TEMPERATURE && para <= DHT11_MAX_TEMPERATURE) {
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	2b3c      	cmp	r3, #60	; 0x3c
 8009644:	d807      	bhi.n	8009656 <Handle_SetTempLevel+0x5a>
			Temp_levels[i] = para;
 8009646:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800964a:	4a22      	ldr	r2, [pc, #136]	; (80096d4 <Handle_SetTempLevel+0xd8>)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	460a      	mov	r2, r1
 8009652:	701a      	strb	r2, [r3, #0]
 8009654:	e002      	b.n	800965c <Handle_SetTempLevel+0x60>
		}
		else {
			return HANDLE_ERR_INVALID_ARG;
 8009656:	f240 1305 	movw	r3, #261	; 0x105
 800965a:	e032      	b.n	80096c2 <Handle_SetTempLevel+0xc6>
	for (i = 1; i < arg_num/2; ++i) {
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3301      	adds	r3, #1
 8009660:	607b      	str	r3, [r7, #4]
 8009662:	4b1a      	ldr	r3, [pc, #104]	; (80096cc <Handle_SetTempLevel+0xd0>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	085b      	lsrs	r3, r3, #1
 8009668:	b2db      	uxtb	r3, r3
 800966a:	461a      	mov	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4293      	cmp	r3, r2
 8009670:	dbda      	blt.n	8009628 <Handle_SetTempLevel+0x2c>
		}
	}
	for (; i < arg_num; ++i) {
 8009672:	e01f      	b.n	80096b4 <Handle_SetTempLevel+0xb8>
		para = atoi((char *)argv[i]);
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	4613      	mov	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4a14      	ldr	r2, [pc, #80]	; (80096d0 <Handle_SetTempLevel+0xd4>)
 8009680:	4413      	add	r3, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f000 f8c4 	bl	8009810 <atoi>
 8009688:	4603      	mov	r3, r0
 800968a:	70fb      	strb	r3, [r7, #3]
		if(para >= 0 && para <= 100) {
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	2b64      	cmp	r3, #100	; 0x64
 8009690:	d80a      	bhi.n	80096a8 <Handle_SetTempLevel+0xac>
			Speed_Temp_mode[i-arg_num/2] = para;
 8009692:	4b0e      	ldr	r3, [pc, #56]	; (80096cc <Handle_SetTempLevel+0xd0>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	085b      	lsrs	r3, r3, #1
 8009698:	b2db      	uxtb	r3, r3
 800969a:	461a      	mov	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	1a9b      	subs	r3, r3, r2
 80096a0:	490d      	ldr	r1, [pc, #52]	; (80096d8 <Handle_SetTempLevel+0xdc>)
 80096a2:	78fa      	ldrb	r2, [r7, #3]
 80096a4:	54ca      	strb	r2, [r1, r3]
 80096a6:	e002      	b.n	80096ae <Handle_SetTempLevel+0xb2>
		}
		else {
			return HANDLE_ERR_INVALID_ARG;
 80096a8:	f240 1305 	movw	r3, #261	; 0x105
 80096ac:	e009      	b.n	80096c2 <Handle_SetTempLevel+0xc6>
	for (; i < arg_num; ++i) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3301      	adds	r3, #1
 80096b2:	607b      	str	r3, [r7, #4]
 80096b4:	4b05      	ldr	r3, [pc, #20]	; (80096cc <Handle_SetTempLevel+0xd0>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4293      	cmp	r3, r2
 80096be:	dbd9      	blt.n	8009674 <Handle_SetTempLevel+0x78>
		}
	}
//	osMessageQueuePut(motorQueueHandle, &msg1, NULL, 0);

	return HANDLE_OK;
 80096c0:	2300      	movs	r3, #0


}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20003320 	.word	0x20003320
 80096d0:	20003258 	.word	0x20003258
 80096d4:	200003ac 	.word	0x200003ac
 80096d8:	200003bc 	.word	0x200003bc

080096dc <Handle_SetHumiLevel>:

handle_err_t Handle_SetHumiLevel(){
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
//	const uint16_t msg2 = SET_HUMI_Q;
	if (arg_num < 2*NUMBER_LEVELS) {
 80096e2:	4b32      	ldr	r3, [pc, #200]	; (80097ac <Handle_SetHumiLevel+0xd0>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	2b07      	cmp	r3, #7
 80096e8:	d802      	bhi.n	80096f0 <Handle_SetHumiLevel+0x14>
			return HANDLE_ERR_TOO_FEW_ARG;
 80096ea:	f240 1303 	movw	r3, #259	; 0x103
 80096ee:	e059      	b.n	80097a4 <Handle_SetHumiLevel+0xc8>
			}
		if (arg_num > 2*NUMBER_LEVELS) {
 80096f0:	4b2e      	ldr	r3, [pc, #184]	; (80097ac <Handle_SetHumiLevel+0xd0>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b08      	cmp	r3, #8
 80096f6:	d902      	bls.n	80096fe <Handle_SetHumiLevel+0x22>
			return HANDLE_ERR_TOO_MUCH_ARG;
 80096f8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80096fc:	e052      	b.n	80097a4 <Handle_SetHumiLevel+0xc8>
		}
		uint8_t para;
		int i = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	607b      	str	r3, [r7, #4]
		for (i = 1; i < arg_num/2; ++i) {
 8009702:	2301      	movs	r3, #1
 8009704:	607b      	str	r3, [r7, #4]
 8009706:	e01d      	b.n	8009744 <Handle_SetHumiLevel+0x68>
			para = atoi((char *)argv[i]);
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4a27      	ldr	r2, [pc, #156]	; (80097b0 <Handle_SetHumiLevel+0xd4>)
 8009714:	4413      	add	r3, r2
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f87a 	bl	8009810 <atoi>
 800971c:	4603      	mov	r3, r0
 800971e:	70fb      	strb	r3, [r7, #3]
			if(para >= DHT11_MIN_RELATIVE_HUMIDITY && para <= DHT11_MAX_RELATIVE_HUMIDITY) {
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	2b04      	cmp	r3, #4
 8009724:	d90b      	bls.n	800973e <Handle_SetHumiLevel+0x62>
 8009726:	78fb      	ldrb	r3, [r7, #3]
 8009728:	2b5f      	cmp	r3, #95	; 0x5f
 800972a:	d808      	bhi.n	800973e <Handle_SetHumiLevel+0x62>
				RHumi_levels[i] = para;
 800972c:	4a21      	ldr	r2, [pc, #132]	; (80097b4 <Handle_SetHumiLevel+0xd8>)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4413      	add	r3, r2
 8009732:	78fa      	ldrb	r2, [r7, #3]
 8009734:	701a      	strb	r2, [r3, #0]
		for (i = 1; i < arg_num/2; ++i) {
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3301      	adds	r3, #1
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	e002      	b.n	8009744 <Handle_SetHumiLevel+0x68>
			}
			else {
				return HANDLE_ERR_INVALID_ARG;
 800973e:	f240 1305 	movw	r3, #261	; 0x105
 8009742:	e02f      	b.n	80097a4 <Handle_SetHumiLevel+0xc8>
		for (i = 1; i < arg_num/2; ++i) {
 8009744:	4b19      	ldr	r3, [pc, #100]	; (80097ac <Handle_SetHumiLevel+0xd0>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	085b      	lsrs	r3, r3, #1
 800974a:	b2db      	uxtb	r3, r3
 800974c:	461a      	mov	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4293      	cmp	r3, r2
 8009752:	dbd9      	blt.n	8009708 <Handle_SetHumiLevel+0x2c>
			}
		}
		for (; i < arg_num; ++i) {
 8009754:	e01f      	b.n	8009796 <Handle_SetHumiLevel+0xba>
			para = atoi((char *)argv[i]);
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	4613      	mov	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4a13      	ldr	r2, [pc, #76]	; (80097b0 <Handle_SetHumiLevel+0xd4>)
 8009762:	4413      	add	r3, r2
 8009764:	4618      	mov	r0, r3
 8009766:	f000 f853 	bl	8009810 <atoi>
 800976a:	4603      	mov	r3, r0
 800976c:	70fb      	strb	r3, [r7, #3]
			if(para >= 0 && para <= 100) {
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	2b64      	cmp	r3, #100	; 0x64
 8009772:	d80a      	bhi.n	800978a <Handle_SetHumiLevel+0xae>
				Speed_RHumi_mode[i-arg_num/2] = para;
 8009774:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <Handle_SetHumiLevel+0xd0>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	085b      	lsrs	r3, r3, #1
 800977a:	b2db      	uxtb	r3, r3
 800977c:	461a      	mov	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	1a9b      	subs	r3, r3, r2
 8009782:	490d      	ldr	r1, [pc, #52]	; (80097b8 <Handle_SetHumiLevel+0xdc>)
 8009784:	78fa      	ldrb	r2, [r7, #3]
 8009786:	54ca      	strb	r2, [r1, r3]
 8009788:	e002      	b.n	8009790 <Handle_SetHumiLevel+0xb4>
			}
			else {
				return HANDLE_ERR_INVALID_ARG;
 800978a:	f240 1305 	movw	r3, #261	; 0x105
 800978e:	e009      	b.n	80097a4 <Handle_SetHumiLevel+0xc8>
		for (; i < arg_num; ++i) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3301      	adds	r3, #1
 8009794:	607b      	str	r3, [r7, #4]
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <Handle_SetHumiLevel+0xd0>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4293      	cmp	r3, r2
 80097a0:	dbd9      	blt.n	8009756 <Handle_SetHumiLevel+0x7a>
			}
		}

//		osMessageQueuePut(motorQueueHandle, &msg2, NULL, 0);
		return HANDLE_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20003320 	.word	0x20003320
 80097b0:	20003258 	.word	0x20003258
 80097b4:	200003b4 	.word	0x200003b4
 80097b8:	200003c0 	.word	0x200003c0

080097bc <Handle_SetMotorSpeed>:

handle_err_t Handle_SetMotorSpeed(){
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
//	const uint16_t msg3 = SET_SPEED_Q;
	if (arg_num < 2) {
 80097c2:	4b10      	ldr	r3, [pc, #64]	; (8009804 <Handle_SetMotorSpeed+0x48>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d802      	bhi.n	80097d0 <Handle_SetMotorSpeed+0x14>
		return HANDLE_ERR_TOO_FEW_ARG;
 80097ca:	f240 1303 	movw	r3, #259	; 0x103
 80097ce:	e015      	b.n	80097fc <Handle_SetMotorSpeed+0x40>
		}
	if (arg_num > 2) {
 80097d0:	4b0c      	ldr	r3, [pc, #48]	; (8009804 <Handle_SetMotorSpeed+0x48>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d902      	bls.n	80097de <Handle_SetMotorSpeed+0x22>
		return HANDLE_ERR_TOO_MUCH_ARG;
 80097d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80097dc:	e00e      	b.n	80097fc <Handle_SetMotorSpeed+0x40>
	}
	uint8_t para = atoi((char *)argv[1]);
 80097de:	480a      	ldr	r0, [pc, #40]	; (8009808 <Handle_SetMotorSpeed+0x4c>)
 80097e0:	f000 f816 	bl	8009810 <atoi>
 80097e4:	4603      	mov	r3, r0
 80097e6:	71fb      	strb	r3, [r7, #7]
	if(para >= 0 && para <= 100) {
 80097e8:	79fb      	ldrb	r3, [r7, #7]
 80097ea:	2b64      	cmp	r3, #100	; 0x64
 80097ec:	d804      	bhi.n	80097f8 <Handle_SetMotorSpeed+0x3c>
		MOTOR.setSpeed = para;
 80097ee:	4a07      	ldr	r2, [pc, #28]	; (800980c <Handle_SetMotorSpeed+0x50>)
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	7053      	strb	r3, [r2, #1]
//				sprintf(buffer, " Set speed: %d\n", MOTOR_1.setSpeed);
//				HAL_UART_Transmit(&huart2,(uint8_t* )buffer, strlen(buffer), 300 );
		return HANDLE_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	e001      	b.n	80097fc <Handle_SetMotorSpeed+0x40>
	}
//	osMessageQueuePut(motorQueueHandle, &msg3, NULL, 0);
	return HANDLE_ERR_INVALID_ARG;
 80097f8:	f240 1305 	movw	r3, #261	; 0x105
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	20003320 	.word	0x20003320
 8009808:	2000326c 	.word	0x2000326c
 800980c:	20000390 	.word	0x20000390

08009810 <atoi>:
 8009810:	220a      	movs	r2, #10
 8009812:	2100      	movs	r1, #0
 8009814:	f002 b810 	b.w	800b838 <strtol>

08009818 <__errno>:
 8009818:	4b01      	ldr	r3, [pc, #4]	; (8009820 <__errno+0x8>)
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	20000034 	.word	0x20000034

08009824 <std>:
 8009824:	2300      	movs	r3, #0
 8009826:	b510      	push	{r4, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	e9c0 3300 	strd	r3, r3, [r0]
 800982e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009832:	6083      	str	r3, [r0, #8]
 8009834:	8181      	strh	r1, [r0, #12]
 8009836:	6643      	str	r3, [r0, #100]	; 0x64
 8009838:	81c2      	strh	r2, [r0, #14]
 800983a:	6183      	str	r3, [r0, #24]
 800983c:	4619      	mov	r1, r3
 800983e:	2208      	movs	r2, #8
 8009840:	305c      	adds	r0, #92	; 0x5c
 8009842:	f000 f91a 	bl	8009a7a <memset>
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <std+0x38>)
 8009848:	6224      	str	r4, [r4, #32]
 800984a:	6263      	str	r3, [r4, #36]	; 0x24
 800984c:	4b04      	ldr	r3, [pc, #16]	; (8009860 <std+0x3c>)
 800984e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009850:	4b04      	ldr	r3, [pc, #16]	; (8009864 <std+0x40>)
 8009852:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009854:	4b04      	ldr	r3, [pc, #16]	; (8009868 <std+0x44>)
 8009856:	6323      	str	r3, [r4, #48]	; 0x30
 8009858:	bd10      	pop	{r4, pc}
 800985a:	bf00      	nop
 800985c:	0800a9cd 	.word	0x0800a9cd
 8009860:	0800a9ef 	.word	0x0800a9ef
 8009864:	0800aa27 	.word	0x0800aa27
 8009868:	0800aa4b 	.word	0x0800aa4b

0800986c <_cleanup_r>:
 800986c:	4901      	ldr	r1, [pc, #4]	; (8009874 <_cleanup_r+0x8>)
 800986e:	f000 b8af 	b.w	80099d0 <_fwalk_reent>
 8009872:	bf00      	nop
 8009874:	0800c709 	.word	0x0800c709

08009878 <__sfmoreglue>:
 8009878:	2268      	movs	r2, #104	; 0x68
 800987a:	b570      	push	{r4, r5, r6, lr}
 800987c:	1e4d      	subs	r5, r1, #1
 800987e:	4355      	muls	r5, r2
 8009880:	460e      	mov	r6, r1
 8009882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009886:	f000 f921 	bl	8009acc <_malloc_r>
 800988a:	4604      	mov	r4, r0
 800988c:	b140      	cbz	r0, 80098a0 <__sfmoreglue+0x28>
 800988e:	2100      	movs	r1, #0
 8009890:	e9c0 1600 	strd	r1, r6, [r0]
 8009894:	300c      	adds	r0, #12
 8009896:	60a0      	str	r0, [r4, #8]
 8009898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800989c:	f000 f8ed 	bl	8009a7a <memset>
 80098a0:	4620      	mov	r0, r4
 80098a2:	bd70      	pop	{r4, r5, r6, pc}

080098a4 <__sfp_lock_acquire>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__sfp_lock_acquire+0x8>)
 80098a6:	f000 b8d8 	b.w	8009a5a <__retarget_lock_acquire_recursive>
 80098aa:	bf00      	nop
 80098ac:	20003322 	.word	0x20003322

080098b0 <__sfp_lock_release>:
 80098b0:	4801      	ldr	r0, [pc, #4]	; (80098b8 <__sfp_lock_release+0x8>)
 80098b2:	f000 b8d3 	b.w	8009a5c <__retarget_lock_release_recursive>
 80098b6:	bf00      	nop
 80098b8:	20003322 	.word	0x20003322

080098bc <__sinit_lock_acquire>:
 80098bc:	4801      	ldr	r0, [pc, #4]	; (80098c4 <__sinit_lock_acquire+0x8>)
 80098be:	f000 b8cc 	b.w	8009a5a <__retarget_lock_acquire_recursive>
 80098c2:	bf00      	nop
 80098c4:	20003323 	.word	0x20003323

080098c8 <__sinit_lock_release>:
 80098c8:	4801      	ldr	r0, [pc, #4]	; (80098d0 <__sinit_lock_release+0x8>)
 80098ca:	f000 b8c7 	b.w	8009a5c <__retarget_lock_release_recursive>
 80098ce:	bf00      	nop
 80098d0:	20003323 	.word	0x20003323

080098d4 <__sinit>:
 80098d4:	b510      	push	{r4, lr}
 80098d6:	4604      	mov	r4, r0
 80098d8:	f7ff fff0 	bl	80098bc <__sinit_lock_acquire>
 80098dc:	69a3      	ldr	r3, [r4, #24]
 80098de:	b11b      	cbz	r3, 80098e8 <__sinit+0x14>
 80098e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098e4:	f7ff bff0 	b.w	80098c8 <__sinit_lock_release>
 80098e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098ec:	6523      	str	r3, [r4, #80]	; 0x50
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <__sinit+0x68>)
 80098f0:	4a13      	ldr	r2, [pc, #76]	; (8009940 <__sinit+0x6c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80098f6:	42a3      	cmp	r3, r4
 80098f8:	bf08      	it	eq
 80098fa:	2301      	moveq	r3, #1
 80098fc:	4620      	mov	r0, r4
 80098fe:	bf08      	it	eq
 8009900:	61a3      	streq	r3, [r4, #24]
 8009902:	f000 f81f 	bl	8009944 <__sfp>
 8009906:	6060      	str	r0, [r4, #4]
 8009908:	4620      	mov	r0, r4
 800990a:	f000 f81b 	bl	8009944 <__sfp>
 800990e:	60a0      	str	r0, [r4, #8]
 8009910:	4620      	mov	r0, r4
 8009912:	f000 f817 	bl	8009944 <__sfp>
 8009916:	2200      	movs	r2, #0
 8009918:	2104      	movs	r1, #4
 800991a:	60e0      	str	r0, [r4, #12]
 800991c:	6860      	ldr	r0, [r4, #4]
 800991e:	f7ff ff81 	bl	8009824 <std>
 8009922:	2201      	movs	r2, #1
 8009924:	2109      	movs	r1, #9
 8009926:	68a0      	ldr	r0, [r4, #8]
 8009928:	f7ff ff7c 	bl	8009824 <std>
 800992c:	2202      	movs	r2, #2
 800992e:	2112      	movs	r1, #18
 8009930:	68e0      	ldr	r0, [r4, #12]
 8009932:	f7ff ff77 	bl	8009824 <std>
 8009936:	2301      	movs	r3, #1
 8009938:	61a3      	str	r3, [r4, #24]
 800993a:	e7d1      	b.n	80098e0 <__sinit+0xc>
 800993c:	0800e5a0 	.word	0x0800e5a0
 8009940:	0800986d 	.word	0x0800986d

08009944 <__sfp>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	4607      	mov	r7, r0
 8009948:	f7ff ffac 	bl	80098a4 <__sfp_lock_acquire>
 800994c:	4b1e      	ldr	r3, [pc, #120]	; (80099c8 <__sfp+0x84>)
 800994e:	681e      	ldr	r6, [r3, #0]
 8009950:	69b3      	ldr	r3, [r6, #24]
 8009952:	b913      	cbnz	r3, 800995a <__sfp+0x16>
 8009954:	4630      	mov	r0, r6
 8009956:	f7ff ffbd 	bl	80098d4 <__sinit>
 800995a:	3648      	adds	r6, #72	; 0x48
 800995c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009960:	3b01      	subs	r3, #1
 8009962:	d503      	bpl.n	800996c <__sfp+0x28>
 8009964:	6833      	ldr	r3, [r6, #0]
 8009966:	b30b      	cbz	r3, 80099ac <__sfp+0x68>
 8009968:	6836      	ldr	r6, [r6, #0]
 800996a:	e7f7      	b.n	800995c <__sfp+0x18>
 800996c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009970:	b9d5      	cbnz	r5, 80099a8 <__sfp+0x64>
 8009972:	4b16      	ldr	r3, [pc, #88]	; (80099cc <__sfp+0x88>)
 8009974:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009978:	60e3      	str	r3, [r4, #12]
 800997a:	6665      	str	r5, [r4, #100]	; 0x64
 800997c:	f000 f86c 	bl	8009a58 <__retarget_lock_init_recursive>
 8009980:	f7ff ff96 	bl	80098b0 <__sfp_lock_release>
 8009984:	2208      	movs	r2, #8
 8009986:	4629      	mov	r1, r5
 8009988:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800998c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009990:	6025      	str	r5, [r4, #0]
 8009992:	61a5      	str	r5, [r4, #24]
 8009994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009998:	f000 f86f 	bl	8009a7a <memset>
 800999c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099a4:	4620      	mov	r0, r4
 80099a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a8:	3468      	adds	r4, #104	; 0x68
 80099aa:	e7d9      	b.n	8009960 <__sfp+0x1c>
 80099ac:	2104      	movs	r1, #4
 80099ae:	4638      	mov	r0, r7
 80099b0:	f7ff ff62 	bl	8009878 <__sfmoreglue>
 80099b4:	4604      	mov	r4, r0
 80099b6:	6030      	str	r0, [r6, #0]
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d1d5      	bne.n	8009968 <__sfp+0x24>
 80099bc:	f7ff ff78 	bl	80098b0 <__sfp_lock_release>
 80099c0:	230c      	movs	r3, #12
 80099c2:	603b      	str	r3, [r7, #0]
 80099c4:	e7ee      	b.n	80099a4 <__sfp+0x60>
 80099c6:	bf00      	nop
 80099c8:	0800e5a0 	.word	0x0800e5a0
 80099cc:	ffff0001 	.word	0xffff0001

080099d0 <_fwalk_reent>:
 80099d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d4:	4606      	mov	r6, r0
 80099d6:	4688      	mov	r8, r1
 80099d8:	2700      	movs	r7, #0
 80099da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099e2:	f1b9 0901 	subs.w	r9, r9, #1
 80099e6:	d505      	bpl.n	80099f4 <_fwalk_reent+0x24>
 80099e8:	6824      	ldr	r4, [r4, #0]
 80099ea:	2c00      	cmp	r4, #0
 80099ec:	d1f7      	bne.n	80099de <_fwalk_reent+0xe>
 80099ee:	4638      	mov	r0, r7
 80099f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f4:	89ab      	ldrh	r3, [r5, #12]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d907      	bls.n	8009a0a <_fwalk_reent+0x3a>
 80099fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099fe:	3301      	adds	r3, #1
 8009a00:	d003      	beq.n	8009a0a <_fwalk_reent+0x3a>
 8009a02:	4629      	mov	r1, r5
 8009a04:	4630      	mov	r0, r6
 8009a06:	47c0      	blx	r8
 8009a08:	4307      	orrs	r7, r0
 8009a0a:	3568      	adds	r5, #104	; 0x68
 8009a0c:	e7e9      	b.n	80099e2 <_fwalk_reent+0x12>
	...

08009a10 <__libc_init_array>:
 8009a10:	b570      	push	{r4, r5, r6, lr}
 8009a12:	2600      	movs	r6, #0
 8009a14:	4d0c      	ldr	r5, [pc, #48]	; (8009a48 <__libc_init_array+0x38>)
 8009a16:	4c0d      	ldr	r4, [pc, #52]	; (8009a4c <__libc_init_array+0x3c>)
 8009a18:	1b64      	subs	r4, r4, r5
 8009a1a:	10a4      	asrs	r4, r4, #2
 8009a1c:	42a6      	cmp	r6, r4
 8009a1e:	d109      	bne.n	8009a34 <__libc_init_array+0x24>
 8009a20:	f004 fc56 	bl	800e2d0 <_init>
 8009a24:	2600      	movs	r6, #0
 8009a26:	4d0a      	ldr	r5, [pc, #40]	; (8009a50 <__libc_init_array+0x40>)
 8009a28:	4c0a      	ldr	r4, [pc, #40]	; (8009a54 <__libc_init_array+0x44>)
 8009a2a:	1b64      	subs	r4, r4, r5
 8009a2c:	10a4      	asrs	r4, r4, #2
 8009a2e:	42a6      	cmp	r6, r4
 8009a30:	d105      	bne.n	8009a3e <__libc_init_array+0x2e>
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a38:	4798      	blx	r3
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	e7ee      	b.n	8009a1c <__libc_init_array+0xc>
 8009a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a42:	4798      	blx	r3
 8009a44:	3601      	adds	r6, #1
 8009a46:	e7f2      	b.n	8009a2e <__libc_init_array+0x1e>
 8009a48:	0800ea40 	.word	0x0800ea40
 8009a4c:	0800ea40 	.word	0x0800ea40
 8009a50:	0800ea40 	.word	0x0800ea40
 8009a54:	0800ea44 	.word	0x0800ea44

08009a58 <__retarget_lock_init_recursive>:
 8009a58:	4770      	bx	lr

08009a5a <__retarget_lock_acquire_recursive>:
 8009a5a:	4770      	bx	lr

08009a5c <__retarget_lock_release_recursive>:
 8009a5c:	4770      	bx	lr

08009a5e <memcpy>:
 8009a5e:	440a      	add	r2, r1
 8009a60:	4291      	cmp	r1, r2
 8009a62:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a66:	d100      	bne.n	8009a6a <memcpy+0xc>
 8009a68:	4770      	bx	lr
 8009a6a:	b510      	push	{r4, lr}
 8009a6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a70:	4291      	cmp	r1, r2
 8009a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a76:	d1f9      	bne.n	8009a6c <memcpy+0xe>
 8009a78:	bd10      	pop	{r4, pc}

08009a7a <memset>:
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	4402      	add	r2, r0
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d100      	bne.n	8009a84 <memset+0xa>
 8009a82:	4770      	bx	lr
 8009a84:	f803 1b01 	strb.w	r1, [r3], #1
 8009a88:	e7f9      	b.n	8009a7e <memset+0x4>
	...

08009a8c <sbrk_aligned>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	4e0e      	ldr	r6, [pc, #56]	; (8009ac8 <sbrk_aligned+0x3c>)
 8009a90:	460c      	mov	r4, r1
 8009a92:	6831      	ldr	r1, [r6, #0]
 8009a94:	4605      	mov	r5, r0
 8009a96:	b911      	cbnz	r1, 8009a9e <sbrk_aligned+0x12>
 8009a98:	f000 ff64 	bl	800a964 <_sbrk_r>
 8009a9c:	6030      	str	r0, [r6, #0]
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f000 ff5f 	bl	800a964 <_sbrk_r>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	d00a      	beq.n	8009ac0 <sbrk_aligned+0x34>
 8009aaa:	1cc4      	adds	r4, r0, #3
 8009aac:	f024 0403 	bic.w	r4, r4, #3
 8009ab0:	42a0      	cmp	r0, r4
 8009ab2:	d007      	beq.n	8009ac4 <sbrk_aligned+0x38>
 8009ab4:	1a21      	subs	r1, r4, r0
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f000 ff54 	bl	800a964 <_sbrk_r>
 8009abc:	3001      	adds	r0, #1
 8009abe:	d101      	bne.n	8009ac4 <sbrk_aligned+0x38>
 8009ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	20003328 	.word	0x20003328

08009acc <_malloc_r>:
 8009acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad0:	1ccd      	adds	r5, r1, #3
 8009ad2:	f025 0503 	bic.w	r5, r5, #3
 8009ad6:	3508      	adds	r5, #8
 8009ad8:	2d0c      	cmp	r5, #12
 8009ada:	bf38      	it	cc
 8009adc:	250c      	movcc	r5, #12
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	db01      	blt.n	8009ae8 <_malloc_r+0x1c>
 8009ae4:	42a9      	cmp	r1, r5
 8009ae6:	d905      	bls.n	8009af4 <_malloc_r+0x28>
 8009ae8:	230c      	movs	r3, #12
 8009aea:	2600      	movs	r6, #0
 8009aec:	603b      	str	r3, [r7, #0]
 8009aee:	4630      	mov	r0, r6
 8009af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af4:	4e2e      	ldr	r6, [pc, #184]	; (8009bb0 <_malloc_r+0xe4>)
 8009af6:	f003 f9f9 	bl	800ceec <__malloc_lock>
 8009afa:	6833      	ldr	r3, [r6, #0]
 8009afc:	461c      	mov	r4, r3
 8009afe:	bb34      	cbnz	r4, 8009b4e <_malloc_r+0x82>
 8009b00:	4629      	mov	r1, r5
 8009b02:	4638      	mov	r0, r7
 8009b04:	f7ff ffc2 	bl	8009a8c <sbrk_aligned>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	d14d      	bne.n	8009baa <_malloc_r+0xde>
 8009b0e:	6834      	ldr	r4, [r6, #0]
 8009b10:	4626      	mov	r6, r4
 8009b12:	2e00      	cmp	r6, #0
 8009b14:	d140      	bne.n	8009b98 <_malloc_r+0xcc>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	eb04 0803 	add.w	r8, r4, r3
 8009b20:	f000 ff20 	bl	800a964 <_sbrk_r>
 8009b24:	4580      	cmp	r8, r0
 8009b26:	d13a      	bne.n	8009b9e <_malloc_r+0xd2>
 8009b28:	6821      	ldr	r1, [r4, #0]
 8009b2a:	3503      	adds	r5, #3
 8009b2c:	1a6d      	subs	r5, r5, r1
 8009b2e:	f025 0503 	bic.w	r5, r5, #3
 8009b32:	3508      	adds	r5, #8
 8009b34:	2d0c      	cmp	r5, #12
 8009b36:	bf38      	it	cc
 8009b38:	250c      	movcc	r5, #12
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	f7ff ffa5 	bl	8009a8c <sbrk_aligned>
 8009b42:	3001      	adds	r0, #1
 8009b44:	d02b      	beq.n	8009b9e <_malloc_r+0xd2>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	442b      	add	r3, r5
 8009b4a:	6023      	str	r3, [r4, #0]
 8009b4c:	e00e      	b.n	8009b6c <_malloc_r+0xa0>
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	1b52      	subs	r2, r2, r5
 8009b52:	d41e      	bmi.n	8009b92 <_malloc_r+0xc6>
 8009b54:	2a0b      	cmp	r2, #11
 8009b56:	d916      	bls.n	8009b86 <_malloc_r+0xba>
 8009b58:	1961      	adds	r1, r4, r5
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	6025      	str	r5, [r4, #0]
 8009b5e:	bf18      	it	ne
 8009b60:	6059      	strne	r1, [r3, #4]
 8009b62:	6863      	ldr	r3, [r4, #4]
 8009b64:	bf08      	it	eq
 8009b66:	6031      	streq	r1, [r6, #0]
 8009b68:	5162      	str	r2, [r4, r5]
 8009b6a:	604b      	str	r3, [r1, #4]
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f104 060b 	add.w	r6, r4, #11
 8009b72:	f003 f9c1 	bl	800cef8 <__malloc_unlock>
 8009b76:	f026 0607 	bic.w	r6, r6, #7
 8009b7a:	1d23      	adds	r3, r4, #4
 8009b7c:	1af2      	subs	r2, r6, r3
 8009b7e:	d0b6      	beq.n	8009aee <_malloc_r+0x22>
 8009b80:	1b9b      	subs	r3, r3, r6
 8009b82:	50a3      	str	r3, [r4, r2]
 8009b84:	e7b3      	b.n	8009aee <_malloc_r+0x22>
 8009b86:	6862      	ldr	r2, [r4, #4]
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	bf0c      	ite	eq
 8009b8c:	6032      	streq	r2, [r6, #0]
 8009b8e:	605a      	strne	r2, [r3, #4]
 8009b90:	e7ec      	b.n	8009b6c <_malloc_r+0xa0>
 8009b92:	4623      	mov	r3, r4
 8009b94:	6864      	ldr	r4, [r4, #4]
 8009b96:	e7b2      	b.n	8009afe <_malloc_r+0x32>
 8009b98:	4634      	mov	r4, r6
 8009b9a:	6876      	ldr	r6, [r6, #4]
 8009b9c:	e7b9      	b.n	8009b12 <_malloc_r+0x46>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	f003 f9a8 	bl	800cef8 <__malloc_unlock>
 8009ba8:	e7a1      	b.n	8009aee <_malloc_r+0x22>
 8009baa:	6025      	str	r5, [r4, #0]
 8009bac:	e7de      	b.n	8009b6c <_malloc_r+0xa0>
 8009bae:	bf00      	nop
 8009bb0:	20003324 	.word	0x20003324

08009bb4 <__cvt>:
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bba:	461f      	mov	r7, r3
 8009bbc:	bfbb      	ittet	lt
 8009bbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009bc2:	461f      	movlt	r7, r3
 8009bc4:	2300      	movge	r3, #0
 8009bc6:	232d      	movlt	r3, #45	; 0x2d
 8009bc8:	b088      	sub	sp, #32
 8009bca:	4614      	mov	r4, r2
 8009bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009bd0:	7013      	strb	r3, [r2, #0]
 8009bd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bd4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009bd8:	f023 0820 	bic.w	r8, r3, #32
 8009bdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009be0:	d005      	beq.n	8009bee <__cvt+0x3a>
 8009be2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009be6:	d100      	bne.n	8009bea <__cvt+0x36>
 8009be8:	3501      	adds	r5, #1
 8009bea:	2302      	movs	r3, #2
 8009bec:	e000      	b.n	8009bf0 <__cvt+0x3c>
 8009bee:	2303      	movs	r3, #3
 8009bf0:	aa07      	add	r2, sp, #28
 8009bf2:	9204      	str	r2, [sp, #16]
 8009bf4:	aa06      	add	r2, sp, #24
 8009bf6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009bfa:	e9cd 3500 	strd	r3, r5, [sp]
 8009bfe:	4622      	mov	r2, r4
 8009c00:	463b      	mov	r3, r7
 8009c02:	f001 ff11 	bl	800ba28 <_dtoa_r>
 8009c06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	d102      	bne.n	8009c14 <__cvt+0x60>
 8009c0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c10:	07db      	lsls	r3, r3, #31
 8009c12:	d522      	bpl.n	8009c5a <__cvt+0xa6>
 8009c14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c18:	eb06 0905 	add.w	r9, r6, r5
 8009c1c:	d110      	bne.n	8009c40 <__cvt+0x8c>
 8009c1e:	7833      	ldrb	r3, [r6, #0]
 8009c20:	2b30      	cmp	r3, #48	; 0x30
 8009c22:	d10a      	bne.n	8009c3a <__cvt+0x86>
 8009c24:	2200      	movs	r2, #0
 8009c26:	2300      	movs	r3, #0
 8009c28:	4620      	mov	r0, r4
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	f7f6 fec6 	bl	80009bc <__aeabi_dcmpeq>
 8009c30:	b918      	cbnz	r0, 8009c3a <__cvt+0x86>
 8009c32:	f1c5 0501 	rsb	r5, r5, #1
 8009c36:	f8ca 5000 	str.w	r5, [sl]
 8009c3a:	f8da 3000 	ldr.w	r3, [sl]
 8009c3e:	4499      	add	r9, r3
 8009c40:	2200      	movs	r2, #0
 8009c42:	2300      	movs	r3, #0
 8009c44:	4620      	mov	r0, r4
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 feb8 	bl	80009bc <__aeabi_dcmpeq>
 8009c4c:	b108      	cbz	r0, 8009c52 <__cvt+0x9e>
 8009c4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009c52:	2230      	movs	r2, #48	; 0x30
 8009c54:	9b07      	ldr	r3, [sp, #28]
 8009c56:	454b      	cmp	r3, r9
 8009c58:	d307      	bcc.n	8009c6a <__cvt+0xb6>
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	9b07      	ldr	r3, [sp, #28]
 8009c5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c60:	1b9b      	subs	r3, r3, r6
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	b008      	add	sp, #32
 8009c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6a:	1c59      	adds	r1, r3, #1
 8009c6c:	9107      	str	r1, [sp, #28]
 8009c6e:	701a      	strb	r2, [r3, #0]
 8009c70:	e7f0      	b.n	8009c54 <__cvt+0xa0>

08009c72 <__exponent>:
 8009c72:	4603      	mov	r3, r0
 8009c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c76:	2900      	cmp	r1, #0
 8009c78:	f803 2b02 	strb.w	r2, [r3], #2
 8009c7c:	bfb6      	itet	lt
 8009c7e:	222d      	movlt	r2, #45	; 0x2d
 8009c80:	222b      	movge	r2, #43	; 0x2b
 8009c82:	4249      	neglt	r1, r1
 8009c84:	2909      	cmp	r1, #9
 8009c86:	7042      	strb	r2, [r0, #1]
 8009c88:	dd2b      	ble.n	8009ce2 <__exponent+0x70>
 8009c8a:	f10d 0407 	add.w	r4, sp, #7
 8009c8e:	46a4      	mov	ip, r4
 8009c90:	270a      	movs	r7, #10
 8009c92:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c96:	460a      	mov	r2, r1
 8009c98:	46a6      	mov	lr, r4
 8009c9a:	fb07 1516 	mls	r5, r7, r6, r1
 8009c9e:	2a63      	cmp	r2, #99	; 0x63
 8009ca0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009caa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009cae:	dcf0      	bgt.n	8009c92 <__exponent+0x20>
 8009cb0:	3130      	adds	r1, #48	; 0x30
 8009cb2:	f1ae 0502 	sub.w	r5, lr, #2
 8009cb6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009cba:	4629      	mov	r1, r5
 8009cbc:	1c44      	adds	r4, r0, #1
 8009cbe:	4561      	cmp	r1, ip
 8009cc0:	d30a      	bcc.n	8009cd8 <__exponent+0x66>
 8009cc2:	f10d 0209 	add.w	r2, sp, #9
 8009cc6:	eba2 020e 	sub.w	r2, r2, lr
 8009cca:	4565      	cmp	r5, ip
 8009ccc:	bf88      	it	hi
 8009cce:	2200      	movhi	r2, #0
 8009cd0:	4413      	add	r3, r2
 8009cd2:	1a18      	subs	r0, r3, r0
 8009cd4:	b003      	add	sp, #12
 8009cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cdc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ce0:	e7ed      	b.n	8009cbe <__exponent+0x4c>
 8009ce2:	2330      	movs	r3, #48	; 0x30
 8009ce4:	3130      	adds	r1, #48	; 0x30
 8009ce6:	7083      	strb	r3, [r0, #2]
 8009ce8:	70c1      	strb	r1, [r0, #3]
 8009cea:	1d03      	adds	r3, r0, #4
 8009cec:	e7f1      	b.n	8009cd2 <__exponent+0x60>
	...

08009cf0 <_printf_float>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	b091      	sub	sp, #68	; 0x44
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	461f      	mov	r7, r3
 8009d00:	4605      	mov	r5, r0
 8009d02:	f003 f8b5 	bl	800ce70 <_localeconv_r>
 8009d06:	6803      	ldr	r3, [r0, #0]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d0c:	f7f6 fa2a 	bl	8000164 <strlen>
 8009d10:	2300      	movs	r3, #0
 8009d12:	930e      	str	r3, [sp, #56]	; 0x38
 8009d14:	f8d8 3000 	ldr.w	r3, [r8]
 8009d18:	900a      	str	r0, [sp, #40]	; 0x28
 8009d1a:	3307      	adds	r3, #7
 8009d1c:	f023 0307 	bic.w	r3, r3, #7
 8009d20:	f103 0208 	add.w	r2, r3, #8
 8009d24:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009d28:	f8d4 b000 	ldr.w	fp, [r4]
 8009d2c:	f8c8 2000 	str.w	r2, [r8]
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d38:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009d3c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d42:	f04f 32ff 	mov.w	r2, #4294967295
 8009d46:	4640      	mov	r0, r8
 8009d48:	4b9c      	ldr	r3, [pc, #624]	; (8009fbc <_printf_float+0x2cc>)
 8009d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d4c:	f7f6 fe68 	bl	8000a20 <__aeabi_dcmpun>
 8009d50:	bb70      	cbnz	r0, 8009db0 <_printf_float+0xc0>
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295
 8009d56:	4640      	mov	r0, r8
 8009d58:	4b98      	ldr	r3, [pc, #608]	; (8009fbc <_printf_float+0x2cc>)
 8009d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d5c:	f7f6 fe42 	bl	80009e4 <__aeabi_dcmple>
 8009d60:	bb30      	cbnz	r0, 8009db0 <_printf_float+0xc0>
 8009d62:	2200      	movs	r2, #0
 8009d64:	2300      	movs	r3, #0
 8009d66:	4640      	mov	r0, r8
 8009d68:	4651      	mov	r1, sl
 8009d6a:	f7f6 fe31 	bl	80009d0 <__aeabi_dcmplt>
 8009d6e:	b110      	cbz	r0, 8009d76 <_printf_float+0x86>
 8009d70:	232d      	movs	r3, #45	; 0x2d
 8009d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d76:	4b92      	ldr	r3, [pc, #584]	; (8009fc0 <_printf_float+0x2d0>)
 8009d78:	4892      	ldr	r0, [pc, #584]	; (8009fc4 <_printf_float+0x2d4>)
 8009d7a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009d7e:	bf94      	ite	ls
 8009d80:	4698      	movls	r8, r3
 8009d82:	4680      	movhi	r8, r0
 8009d84:	2303      	movs	r3, #3
 8009d86:	f04f 0a00 	mov.w	sl, #0
 8009d8a:	6123      	str	r3, [r4, #16]
 8009d8c:	f02b 0304 	bic.w	r3, fp, #4
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	4633      	mov	r3, r6
 8009d94:	4621      	mov	r1, r4
 8009d96:	4628      	mov	r0, r5
 8009d98:	9700      	str	r7, [sp, #0]
 8009d9a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009d9c:	f000 f9d4 	bl	800a148 <_printf_common>
 8009da0:	3001      	adds	r0, #1
 8009da2:	f040 8090 	bne.w	8009ec6 <_printf_float+0x1d6>
 8009da6:	f04f 30ff 	mov.w	r0, #4294967295
 8009daa:	b011      	add	sp, #68	; 0x44
 8009dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db0:	4642      	mov	r2, r8
 8009db2:	4653      	mov	r3, sl
 8009db4:	4640      	mov	r0, r8
 8009db6:	4651      	mov	r1, sl
 8009db8:	f7f6 fe32 	bl	8000a20 <__aeabi_dcmpun>
 8009dbc:	b148      	cbz	r0, 8009dd2 <_printf_float+0xe2>
 8009dbe:	f1ba 0f00 	cmp.w	sl, #0
 8009dc2:	bfb8      	it	lt
 8009dc4:	232d      	movlt	r3, #45	; 0x2d
 8009dc6:	4880      	ldr	r0, [pc, #512]	; (8009fc8 <_printf_float+0x2d8>)
 8009dc8:	bfb8      	it	lt
 8009dca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009dce:	4b7f      	ldr	r3, [pc, #508]	; (8009fcc <_printf_float+0x2dc>)
 8009dd0:	e7d3      	b.n	8009d7a <_printf_float+0x8a>
 8009dd2:	6863      	ldr	r3, [r4, #4]
 8009dd4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	d142      	bne.n	8009e62 <_printf_float+0x172>
 8009ddc:	2306      	movs	r3, #6
 8009dde:	6063      	str	r3, [r4, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	9206      	str	r2, [sp, #24]
 8009de4:	aa0e      	add	r2, sp, #56	; 0x38
 8009de6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009dea:	aa0d      	add	r2, sp, #52	; 0x34
 8009dec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009df0:	9203      	str	r2, [sp, #12]
 8009df2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009df6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	6863      	ldr	r3, [r4, #4]
 8009dfe:	4642      	mov	r2, r8
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	4628      	mov	r0, r5
 8009e04:	4653      	mov	r3, sl
 8009e06:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e08:	f7ff fed4 	bl	8009bb4 <__cvt>
 8009e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e0e:	4680      	mov	r8, r0
 8009e10:	2947      	cmp	r1, #71	; 0x47
 8009e12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e14:	d108      	bne.n	8009e28 <_printf_float+0x138>
 8009e16:	1cc8      	adds	r0, r1, #3
 8009e18:	db02      	blt.n	8009e20 <_printf_float+0x130>
 8009e1a:	6863      	ldr	r3, [r4, #4]
 8009e1c:	4299      	cmp	r1, r3
 8009e1e:	dd40      	ble.n	8009ea2 <_printf_float+0x1b2>
 8009e20:	f1a9 0902 	sub.w	r9, r9, #2
 8009e24:	fa5f f989 	uxtb.w	r9, r9
 8009e28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e2c:	d81f      	bhi.n	8009e6e <_printf_float+0x17e>
 8009e2e:	464a      	mov	r2, r9
 8009e30:	3901      	subs	r1, #1
 8009e32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e36:	910d      	str	r1, [sp, #52]	; 0x34
 8009e38:	f7ff ff1b 	bl	8009c72 <__exponent>
 8009e3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e3e:	4682      	mov	sl, r0
 8009e40:	1813      	adds	r3, r2, r0
 8009e42:	2a01      	cmp	r2, #1
 8009e44:	6123      	str	r3, [r4, #16]
 8009e46:	dc02      	bgt.n	8009e4e <_printf_float+0x15e>
 8009e48:	6822      	ldr	r2, [r4, #0]
 8009e4a:	07d2      	lsls	r2, r2, #31
 8009e4c:	d501      	bpl.n	8009e52 <_printf_float+0x162>
 8009e4e:	3301      	adds	r3, #1
 8009e50:	6123      	str	r3, [r4, #16]
 8009e52:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d09b      	beq.n	8009d92 <_printf_float+0xa2>
 8009e5a:	232d      	movs	r3, #45	; 0x2d
 8009e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e60:	e797      	b.n	8009d92 <_printf_float+0xa2>
 8009e62:	2947      	cmp	r1, #71	; 0x47
 8009e64:	d1bc      	bne.n	8009de0 <_printf_float+0xf0>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1ba      	bne.n	8009de0 <_printf_float+0xf0>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e7b7      	b.n	8009dde <_printf_float+0xee>
 8009e6e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009e72:	d118      	bne.n	8009ea6 <_printf_float+0x1b6>
 8009e74:	2900      	cmp	r1, #0
 8009e76:	6863      	ldr	r3, [r4, #4]
 8009e78:	dd0b      	ble.n	8009e92 <_printf_float+0x1a2>
 8009e7a:	6121      	str	r1, [r4, #16]
 8009e7c:	b913      	cbnz	r3, 8009e84 <_printf_float+0x194>
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	07d0      	lsls	r0, r2, #31
 8009e82:	d502      	bpl.n	8009e8a <_printf_float+0x19a>
 8009e84:	3301      	adds	r3, #1
 8009e86:	440b      	add	r3, r1
 8009e88:	6123      	str	r3, [r4, #16]
 8009e8a:	f04f 0a00 	mov.w	sl, #0
 8009e8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e90:	e7df      	b.n	8009e52 <_printf_float+0x162>
 8009e92:	b913      	cbnz	r3, 8009e9a <_printf_float+0x1aa>
 8009e94:	6822      	ldr	r2, [r4, #0]
 8009e96:	07d2      	lsls	r2, r2, #31
 8009e98:	d501      	bpl.n	8009e9e <_printf_float+0x1ae>
 8009e9a:	3302      	adds	r3, #2
 8009e9c:	e7f4      	b.n	8009e88 <_printf_float+0x198>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e7f2      	b.n	8009e88 <_printf_float+0x198>
 8009ea2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	db05      	blt.n	8009eb8 <_printf_float+0x1c8>
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	6121      	str	r1, [r4, #16]
 8009eb0:	07d8      	lsls	r0, r3, #31
 8009eb2:	d5ea      	bpl.n	8009e8a <_printf_float+0x19a>
 8009eb4:	1c4b      	adds	r3, r1, #1
 8009eb6:	e7e7      	b.n	8009e88 <_printf_float+0x198>
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	bfcc      	ite	gt
 8009ebc:	2201      	movgt	r2, #1
 8009ebe:	f1c1 0202 	rsble	r2, r1, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	e7e0      	b.n	8009e88 <_printf_float+0x198>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	055a      	lsls	r2, r3, #21
 8009eca:	d407      	bmi.n	8009edc <_printf_float+0x1ec>
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	4642      	mov	r2, r8
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	d12b      	bne.n	8009f32 <_printf_float+0x242>
 8009eda:	e764      	b.n	8009da6 <_printf_float+0xb6>
 8009edc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ee0:	f240 80dd 	bls.w	800a09e <_printf_float+0x3ae>
 8009ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2300      	movs	r3, #0
 8009eec:	f7f6 fd66 	bl	80009bc <__aeabi_dcmpeq>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d033      	beq.n	8009f5c <_printf_float+0x26c>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4628      	mov	r0, r5
 8009efa:	4a35      	ldr	r2, [pc, #212]	; (8009fd0 <_printf_float+0x2e0>)
 8009efc:	47b8      	blx	r7
 8009efe:	3001      	adds	r0, #1
 8009f00:	f43f af51 	beq.w	8009da6 <_printf_float+0xb6>
 8009f04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	db02      	blt.n	8009f12 <_printf_float+0x222>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	07d8      	lsls	r0, r3, #31
 8009f10:	d50f      	bpl.n	8009f32 <_printf_float+0x242>
 8009f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f16:	4631      	mov	r1, r6
 8009f18:	4628      	mov	r0, r5
 8009f1a:	47b8      	blx	r7
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	f43f af42 	beq.w	8009da6 <_printf_float+0xb6>
 8009f22:	f04f 0800 	mov.w	r8, #0
 8009f26:	f104 091a 	add.w	r9, r4, #26
 8009f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	4543      	cmp	r3, r8
 8009f30:	dc09      	bgt.n	8009f46 <_printf_float+0x256>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	079b      	lsls	r3, r3, #30
 8009f36:	f100 8102 	bmi.w	800a13e <_printf_float+0x44e>
 8009f3a:	68e0      	ldr	r0, [r4, #12]
 8009f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f3e:	4298      	cmp	r0, r3
 8009f40:	bfb8      	it	lt
 8009f42:	4618      	movlt	r0, r3
 8009f44:	e731      	b.n	8009daa <_printf_float+0xba>
 8009f46:	2301      	movs	r3, #1
 8009f48:	464a      	mov	r2, r9
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b8      	blx	r7
 8009f50:	3001      	adds	r0, #1
 8009f52:	f43f af28 	beq.w	8009da6 <_printf_float+0xb6>
 8009f56:	f108 0801 	add.w	r8, r8, #1
 8009f5a:	e7e6      	b.n	8009f2a <_printf_float+0x23a>
 8009f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	dc38      	bgt.n	8009fd4 <_printf_float+0x2e4>
 8009f62:	2301      	movs	r3, #1
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	4a19      	ldr	r2, [pc, #100]	; (8009fd0 <_printf_float+0x2e0>)
 8009f6a:	47b8      	blx	r7
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	f43f af1a 	beq.w	8009da6 <_printf_float+0xb6>
 8009f72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f76:	4313      	orrs	r3, r2
 8009f78:	d102      	bne.n	8009f80 <_printf_float+0x290>
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	07d9      	lsls	r1, r3, #31
 8009f7e:	d5d8      	bpl.n	8009f32 <_printf_float+0x242>
 8009f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f af0b 	beq.w	8009da6 <_printf_float+0xb6>
 8009f90:	f04f 0900 	mov.w	r9, #0
 8009f94:	f104 0a1a 	add.w	sl, r4, #26
 8009f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f9a:	425b      	negs	r3, r3
 8009f9c:	454b      	cmp	r3, r9
 8009f9e:	dc01      	bgt.n	8009fa4 <_printf_float+0x2b4>
 8009fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fa2:	e794      	b.n	8009ece <_printf_float+0x1de>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4652      	mov	r2, sl
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4628      	mov	r0, r5
 8009fac:	47b8      	blx	r7
 8009fae:	3001      	adds	r0, #1
 8009fb0:	f43f aef9 	beq.w	8009da6 <_printf_float+0xb6>
 8009fb4:	f109 0901 	add.w	r9, r9, #1
 8009fb8:	e7ee      	b.n	8009f98 <_printf_float+0x2a8>
 8009fba:	bf00      	nop
 8009fbc:	7fefffff 	.word	0x7fefffff
 8009fc0:	0800e5a4 	.word	0x0800e5a4
 8009fc4:	0800e5a8 	.word	0x0800e5a8
 8009fc8:	0800e5b0 	.word	0x0800e5b0
 8009fcc:	0800e5ac 	.word	0x0800e5ac
 8009fd0:	0800e5b4 	.word	0x0800e5b4
 8009fd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	bfa8      	it	ge
 8009fdc:	461a      	movge	r2, r3
 8009fde:	2a00      	cmp	r2, #0
 8009fe0:	4691      	mov	r9, r2
 8009fe2:	dc37      	bgt.n	800a054 <_printf_float+0x364>
 8009fe4:	f04f 0b00 	mov.w	fp, #0
 8009fe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fec:	f104 021a 	add.w	r2, r4, #26
 8009ff0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009ff4:	ebaa 0309 	sub.w	r3, sl, r9
 8009ff8:	455b      	cmp	r3, fp
 8009ffa:	dc33      	bgt.n	800a064 <_printf_float+0x374>
 8009ffc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a000:	429a      	cmp	r2, r3
 800a002:	db3b      	blt.n	800a07c <_printf_float+0x38c>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	07da      	lsls	r2, r3, #31
 800a008:	d438      	bmi.n	800a07c <_printf_float+0x38c>
 800a00a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a00c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a00e:	eba3 020a 	sub.w	r2, r3, sl
 800a012:	eba3 0901 	sub.w	r9, r3, r1
 800a016:	4591      	cmp	r9, r2
 800a018:	bfa8      	it	ge
 800a01a:	4691      	movge	r9, r2
 800a01c:	f1b9 0f00 	cmp.w	r9, #0
 800a020:	dc34      	bgt.n	800a08c <_printf_float+0x39c>
 800a022:	f04f 0800 	mov.w	r8, #0
 800a026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a02a:	f104 0a1a 	add.w	sl, r4, #26
 800a02e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	eba3 0309 	sub.w	r3, r3, r9
 800a038:	4543      	cmp	r3, r8
 800a03a:	f77f af7a 	ble.w	8009f32 <_printf_float+0x242>
 800a03e:	2301      	movs	r3, #1
 800a040:	4652      	mov	r2, sl
 800a042:	4631      	mov	r1, r6
 800a044:	4628      	mov	r0, r5
 800a046:	47b8      	blx	r7
 800a048:	3001      	adds	r0, #1
 800a04a:	f43f aeac 	beq.w	8009da6 <_printf_float+0xb6>
 800a04e:	f108 0801 	add.w	r8, r8, #1
 800a052:	e7ec      	b.n	800a02e <_printf_float+0x33e>
 800a054:	4613      	mov	r3, r2
 800a056:	4631      	mov	r1, r6
 800a058:	4642      	mov	r2, r8
 800a05a:	4628      	mov	r0, r5
 800a05c:	47b8      	blx	r7
 800a05e:	3001      	adds	r0, #1
 800a060:	d1c0      	bne.n	8009fe4 <_printf_float+0x2f4>
 800a062:	e6a0      	b.n	8009da6 <_printf_float+0xb6>
 800a064:	2301      	movs	r3, #1
 800a066:	4631      	mov	r1, r6
 800a068:	4628      	mov	r0, r5
 800a06a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f ae99 	beq.w	8009da6 <_printf_float+0xb6>
 800a074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a076:	f10b 0b01 	add.w	fp, fp, #1
 800a07a:	e7b9      	b.n	8009ff0 <_printf_float+0x300>
 800a07c:	4631      	mov	r1, r6
 800a07e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	d1bf      	bne.n	800a00a <_printf_float+0x31a>
 800a08a:	e68c      	b.n	8009da6 <_printf_float+0xb6>
 800a08c:	464b      	mov	r3, r9
 800a08e:	4631      	mov	r1, r6
 800a090:	4628      	mov	r0, r5
 800a092:	eb08 020a 	add.w	r2, r8, sl
 800a096:	47b8      	blx	r7
 800a098:	3001      	adds	r0, #1
 800a09a:	d1c2      	bne.n	800a022 <_printf_float+0x332>
 800a09c:	e683      	b.n	8009da6 <_printf_float+0xb6>
 800a09e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0a0:	2a01      	cmp	r2, #1
 800a0a2:	dc01      	bgt.n	800a0a8 <_printf_float+0x3b8>
 800a0a4:	07db      	lsls	r3, r3, #31
 800a0a6:	d537      	bpl.n	800a118 <_printf_float+0x428>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f43f ae77 	beq.w	8009da6 <_printf_float+0xb6>
 800a0b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	f43f ae6f 	beq.w	8009da6 <_printf_float+0xb6>
 800a0c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f7f6 fc74 	bl	80009bc <__aeabi_dcmpeq>
 800a0d4:	b9d8      	cbnz	r0, 800a10e <_printf_float+0x41e>
 800a0d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0d8:	f108 0201 	add.w	r2, r8, #1
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b8      	blx	r7
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d10e      	bne.n	800a106 <_printf_float+0x416>
 800a0e8:	e65d      	b.n	8009da6 <_printf_float+0xb6>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	464a      	mov	r2, r9
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f43f ae56 	beq.w	8009da6 <_printf_float+0xb6>
 800a0fa:	f108 0801 	add.w	r8, r8, #1
 800a0fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a100:	3b01      	subs	r3, #1
 800a102:	4543      	cmp	r3, r8
 800a104:	dcf1      	bgt.n	800a0ea <_printf_float+0x3fa>
 800a106:	4653      	mov	r3, sl
 800a108:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a10c:	e6e0      	b.n	8009ed0 <_printf_float+0x1e0>
 800a10e:	f04f 0800 	mov.w	r8, #0
 800a112:	f104 091a 	add.w	r9, r4, #26
 800a116:	e7f2      	b.n	800a0fe <_printf_float+0x40e>
 800a118:	2301      	movs	r3, #1
 800a11a:	4642      	mov	r2, r8
 800a11c:	e7df      	b.n	800a0de <_printf_float+0x3ee>
 800a11e:	2301      	movs	r3, #1
 800a120:	464a      	mov	r2, r9
 800a122:	4631      	mov	r1, r6
 800a124:	4628      	mov	r0, r5
 800a126:	47b8      	blx	r7
 800a128:	3001      	adds	r0, #1
 800a12a:	f43f ae3c 	beq.w	8009da6 <_printf_float+0xb6>
 800a12e:	f108 0801 	add.w	r8, r8, #1
 800a132:	68e3      	ldr	r3, [r4, #12]
 800a134:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a136:	1a5b      	subs	r3, r3, r1
 800a138:	4543      	cmp	r3, r8
 800a13a:	dcf0      	bgt.n	800a11e <_printf_float+0x42e>
 800a13c:	e6fd      	b.n	8009f3a <_printf_float+0x24a>
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	f104 0919 	add.w	r9, r4, #25
 800a146:	e7f4      	b.n	800a132 <_printf_float+0x442>

0800a148 <_printf_common>:
 800a148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a14c:	4616      	mov	r6, r2
 800a14e:	4699      	mov	r9, r3
 800a150:	688a      	ldr	r2, [r1, #8]
 800a152:	690b      	ldr	r3, [r1, #16]
 800a154:	4607      	mov	r7, r0
 800a156:	4293      	cmp	r3, r2
 800a158:	bfb8      	it	lt
 800a15a:	4613      	movlt	r3, r2
 800a15c:	6033      	str	r3, [r6, #0]
 800a15e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a162:	460c      	mov	r4, r1
 800a164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a168:	b10a      	cbz	r2, 800a16e <_printf_common+0x26>
 800a16a:	3301      	adds	r3, #1
 800a16c:	6033      	str	r3, [r6, #0]
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	0699      	lsls	r1, r3, #26
 800a172:	bf42      	ittt	mi
 800a174:	6833      	ldrmi	r3, [r6, #0]
 800a176:	3302      	addmi	r3, #2
 800a178:	6033      	strmi	r3, [r6, #0]
 800a17a:	6825      	ldr	r5, [r4, #0]
 800a17c:	f015 0506 	ands.w	r5, r5, #6
 800a180:	d106      	bne.n	800a190 <_printf_common+0x48>
 800a182:	f104 0a19 	add.w	sl, r4, #25
 800a186:	68e3      	ldr	r3, [r4, #12]
 800a188:	6832      	ldr	r2, [r6, #0]
 800a18a:	1a9b      	subs	r3, r3, r2
 800a18c:	42ab      	cmp	r3, r5
 800a18e:	dc28      	bgt.n	800a1e2 <_printf_common+0x9a>
 800a190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a194:	1e13      	subs	r3, r2, #0
 800a196:	6822      	ldr	r2, [r4, #0]
 800a198:	bf18      	it	ne
 800a19a:	2301      	movne	r3, #1
 800a19c:	0692      	lsls	r2, r2, #26
 800a19e:	d42d      	bmi.n	800a1fc <_printf_common+0xb4>
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1a8:	47c0      	blx	r8
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d020      	beq.n	800a1f0 <_printf_common+0xa8>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	68e5      	ldr	r5, [r4, #12]
 800a1b2:	f003 0306 	and.w	r3, r3, #6
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	bf18      	it	ne
 800a1ba:	2500      	movne	r5, #0
 800a1bc:	6832      	ldr	r2, [r6, #0]
 800a1be:	f04f 0600 	mov.w	r6, #0
 800a1c2:	68a3      	ldr	r3, [r4, #8]
 800a1c4:	bf08      	it	eq
 800a1c6:	1aad      	subeq	r5, r5, r2
 800a1c8:	6922      	ldr	r2, [r4, #16]
 800a1ca:	bf08      	it	eq
 800a1cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	bfc4      	itt	gt
 800a1d4:	1a9b      	subgt	r3, r3, r2
 800a1d6:	18ed      	addgt	r5, r5, r3
 800a1d8:	341a      	adds	r4, #26
 800a1da:	42b5      	cmp	r5, r6
 800a1dc:	d11a      	bne.n	800a214 <_printf_common+0xcc>
 800a1de:	2000      	movs	r0, #0
 800a1e0:	e008      	b.n	800a1f4 <_printf_common+0xac>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4652      	mov	r2, sl
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	47c0      	blx	r8
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	d103      	bne.n	800a1f8 <_printf_common+0xb0>
 800a1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f8:	3501      	adds	r5, #1
 800a1fa:	e7c4      	b.n	800a186 <_printf_common+0x3e>
 800a1fc:	2030      	movs	r0, #48	; 0x30
 800a1fe:	18e1      	adds	r1, r4, r3
 800a200:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a20a:	4422      	add	r2, r4
 800a20c:	3302      	adds	r3, #2
 800a20e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a212:	e7c5      	b.n	800a1a0 <_printf_common+0x58>
 800a214:	2301      	movs	r3, #1
 800a216:	4622      	mov	r2, r4
 800a218:	4649      	mov	r1, r9
 800a21a:	4638      	mov	r0, r7
 800a21c:	47c0      	blx	r8
 800a21e:	3001      	adds	r0, #1
 800a220:	d0e6      	beq.n	800a1f0 <_printf_common+0xa8>
 800a222:	3601      	adds	r6, #1
 800a224:	e7d9      	b.n	800a1da <_printf_common+0x92>
	...

0800a228 <_printf_i>:
 800a228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a22c:	7e0f      	ldrb	r7, [r1, #24]
 800a22e:	4691      	mov	r9, r2
 800a230:	2f78      	cmp	r7, #120	; 0x78
 800a232:	4680      	mov	r8, r0
 800a234:	460c      	mov	r4, r1
 800a236:	469a      	mov	sl, r3
 800a238:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a23a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a23e:	d807      	bhi.n	800a250 <_printf_i+0x28>
 800a240:	2f62      	cmp	r7, #98	; 0x62
 800a242:	d80a      	bhi.n	800a25a <_printf_i+0x32>
 800a244:	2f00      	cmp	r7, #0
 800a246:	f000 80d9 	beq.w	800a3fc <_printf_i+0x1d4>
 800a24a:	2f58      	cmp	r7, #88	; 0x58
 800a24c:	f000 80a4 	beq.w	800a398 <_printf_i+0x170>
 800a250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a258:	e03a      	b.n	800a2d0 <_printf_i+0xa8>
 800a25a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a25e:	2b15      	cmp	r3, #21
 800a260:	d8f6      	bhi.n	800a250 <_printf_i+0x28>
 800a262:	a101      	add	r1, pc, #4	; (adr r1, 800a268 <_printf_i+0x40>)
 800a264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a268:	0800a2c1 	.word	0x0800a2c1
 800a26c:	0800a2d5 	.word	0x0800a2d5
 800a270:	0800a251 	.word	0x0800a251
 800a274:	0800a251 	.word	0x0800a251
 800a278:	0800a251 	.word	0x0800a251
 800a27c:	0800a251 	.word	0x0800a251
 800a280:	0800a2d5 	.word	0x0800a2d5
 800a284:	0800a251 	.word	0x0800a251
 800a288:	0800a251 	.word	0x0800a251
 800a28c:	0800a251 	.word	0x0800a251
 800a290:	0800a251 	.word	0x0800a251
 800a294:	0800a3e3 	.word	0x0800a3e3
 800a298:	0800a305 	.word	0x0800a305
 800a29c:	0800a3c5 	.word	0x0800a3c5
 800a2a0:	0800a251 	.word	0x0800a251
 800a2a4:	0800a251 	.word	0x0800a251
 800a2a8:	0800a405 	.word	0x0800a405
 800a2ac:	0800a251 	.word	0x0800a251
 800a2b0:	0800a305 	.word	0x0800a305
 800a2b4:	0800a251 	.word	0x0800a251
 800a2b8:	0800a251 	.word	0x0800a251
 800a2bc:	0800a3cd 	.word	0x0800a3cd
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	1d1a      	adds	r2, r3, #4
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	602a      	str	r2, [r5, #0]
 800a2c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e0a4      	b.n	800a41e <_printf_i+0x1f6>
 800a2d4:	6820      	ldr	r0, [r4, #0]
 800a2d6:	6829      	ldr	r1, [r5, #0]
 800a2d8:	0606      	lsls	r6, r0, #24
 800a2da:	f101 0304 	add.w	r3, r1, #4
 800a2de:	d50a      	bpl.n	800a2f6 <_printf_i+0xce>
 800a2e0:	680e      	ldr	r6, [r1, #0]
 800a2e2:	602b      	str	r3, [r5, #0]
 800a2e4:	2e00      	cmp	r6, #0
 800a2e6:	da03      	bge.n	800a2f0 <_printf_i+0xc8>
 800a2e8:	232d      	movs	r3, #45	; 0x2d
 800a2ea:	4276      	negs	r6, r6
 800a2ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f0:	230a      	movs	r3, #10
 800a2f2:	485e      	ldr	r0, [pc, #376]	; (800a46c <_printf_i+0x244>)
 800a2f4:	e019      	b.n	800a32a <_printf_i+0x102>
 800a2f6:	680e      	ldr	r6, [r1, #0]
 800a2f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2fc:	602b      	str	r3, [r5, #0]
 800a2fe:	bf18      	it	ne
 800a300:	b236      	sxthne	r6, r6
 800a302:	e7ef      	b.n	800a2e4 <_printf_i+0xbc>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	6820      	ldr	r0, [r4, #0]
 800a308:	1d19      	adds	r1, r3, #4
 800a30a:	6029      	str	r1, [r5, #0]
 800a30c:	0601      	lsls	r1, r0, #24
 800a30e:	d501      	bpl.n	800a314 <_printf_i+0xec>
 800a310:	681e      	ldr	r6, [r3, #0]
 800a312:	e002      	b.n	800a31a <_printf_i+0xf2>
 800a314:	0646      	lsls	r6, r0, #25
 800a316:	d5fb      	bpl.n	800a310 <_printf_i+0xe8>
 800a318:	881e      	ldrh	r6, [r3, #0]
 800a31a:	2f6f      	cmp	r7, #111	; 0x6f
 800a31c:	bf0c      	ite	eq
 800a31e:	2308      	moveq	r3, #8
 800a320:	230a      	movne	r3, #10
 800a322:	4852      	ldr	r0, [pc, #328]	; (800a46c <_printf_i+0x244>)
 800a324:	2100      	movs	r1, #0
 800a326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a32a:	6865      	ldr	r5, [r4, #4]
 800a32c:	2d00      	cmp	r5, #0
 800a32e:	bfa8      	it	ge
 800a330:	6821      	ldrge	r1, [r4, #0]
 800a332:	60a5      	str	r5, [r4, #8]
 800a334:	bfa4      	itt	ge
 800a336:	f021 0104 	bicge.w	r1, r1, #4
 800a33a:	6021      	strge	r1, [r4, #0]
 800a33c:	b90e      	cbnz	r6, 800a342 <_printf_i+0x11a>
 800a33e:	2d00      	cmp	r5, #0
 800a340:	d04d      	beq.n	800a3de <_printf_i+0x1b6>
 800a342:	4615      	mov	r5, r2
 800a344:	fbb6 f1f3 	udiv	r1, r6, r3
 800a348:	fb03 6711 	mls	r7, r3, r1, r6
 800a34c:	5dc7      	ldrb	r7, [r0, r7]
 800a34e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a352:	4637      	mov	r7, r6
 800a354:	42bb      	cmp	r3, r7
 800a356:	460e      	mov	r6, r1
 800a358:	d9f4      	bls.n	800a344 <_printf_i+0x11c>
 800a35a:	2b08      	cmp	r3, #8
 800a35c:	d10b      	bne.n	800a376 <_printf_i+0x14e>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	07de      	lsls	r6, r3, #31
 800a362:	d508      	bpl.n	800a376 <_printf_i+0x14e>
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	6861      	ldr	r1, [r4, #4]
 800a368:	4299      	cmp	r1, r3
 800a36a:	bfde      	ittt	le
 800a36c:	2330      	movle	r3, #48	; 0x30
 800a36e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a372:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a376:	1b52      	subs	r2, r2, r5
 800a378:	6122      	str	r2, [r4, #16]
 800a37a:	464b      	mov	r3, r9
 800a37c:	4621      	mov	r1, r4
 800a37e:	4640      	mov	r0, r8
 800a380:	f8cd a000 	str.w	sl, [sp]
 800a384:	aa03      	add	r2, sp, #12
 800a386:	f7ff fedf 	bl	800a148 <_printf_common>
 800a38a:	3001      	adds	r0, #1
 800a38c:	d14c      	bne.n	800a428 <_printf_i+0x200>
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295
 800a392:	b004      	add	sp, #16
 800a394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a398:	4834      	ldr	r0, [pc, #208]	; (800a46c <_printf_i+0x244>)
 800a39a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a39e:	6829      	ldr	r1, [r5, #0]
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3a6:	6029      	str	r1, [r5, #0]
 800a3a8:	061d      	lsls	r5, r3, #24
 800a3aa:	d514      	bpl.n	800a3d6 <_printf_i+0x1ae>
 800a3ac:	07df      	lsls	r7, r3, #31
 800a3ae:	bf44      	itt	mi
 800a3b0:	f043 0320 	orrmi.w	r3, r3, #32
 800a3b4:	6023      	strmi	r3, [r4, #0]
 800a3b6:	b91e      	cbnz	r6, 800a3c0 <_printf_i+0x198>
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	f023 0320 	bic.w	r3, r3, #32
 800a3be:	6023      	str	r3, [r4, #0]
 800a3c0:	2310      	movs	r3, #16
 800a3c2:	e7af      	b.n	800a324 <_printf_i+0xfc>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	f043 0320 	orr.w	r3, r3, #32
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	2378      	movs	r3, #120	; 0x78
 800a3ce:	4828      	ldr	r0, [pc, #160]	; (800a470 <_printf_i+0x248>)
 800a3d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3d4:	e7e3      	b.n	800a39e <_printf_i+0x176>
 800a3d6:	0659      	lsls	r1, r3, #25
 800a3d8:	bf48      	it	mi
 800a3da:	b2b6      	uxthmi	r6, r6
 800a3dc:	e7e6      	b.n	800a3ac <_printf_i+0x184>
 800a3de:	4615      	mov	r5, r2
 800a3e0:	e7bb      	b.n	800a35a <_printf_i+0x132>
 800a3e2:	682b      	ldr	r3, [r5, #0]
 800a3e4:	6826      	ldr	r6, [r4, #0]
 800a3e6:	1d18      	adds	r0, r3, #4
 800a3e8:	6961      	ldr	r1, [r4, #20]
 800a3ea:	6028      	str	r0, [r5, #0]
 800a3ec:	0635      	lsls	r5, r6, #24
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	d501      	bpl.n	800a3f6 <_printf_i+0x1ce>
 800a3f2:	6019      	str	r1, [r3, #0]
 800a3f4:	e002      	b.n	800a3fc <_printf_i+0x1d4>
 800a3f6:	0670      	lsls	r0, r6, #25
 800a3f8:	d5fb      	bpl.n	800a3f2 <_printf_i+0x1ca>
 800a3fa:	8019      	strh	r1, [r3, #0]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4615      	mov	r5, r2
 800a400:	6123      	str	r3, [r4, #16]
 800a402:	e7ba      	b.n	800a37a <_printf_i+0x152>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	2100      	movs	r1, #0
 800a408:	1d1a      	adds	r2, r3, #4
 800a40a:	602a      	str	r2, [r5, #0]
 800a40c:	681d      	ldr	r5, [r3, #0]
 800a40e:	6862      	ldr	r2, [r4, #4]
 800a410:	4628      	mov	r0, r5
 800a412:	f002 fd5d 	bl	800ced0 <memchr>
 800a416:	b108      	cbz	r0, 800a41c <_printf_i+0x1f4>
 800a418:	1b40      	subs	r0, r0, r5
 800a41a:	6060      	str	r0, [r4, #4]
 800a41c:	6863      	ldr	r3, [r4, #4]
 800a41e:	6123      	str	r3, [r4, #16]
 800a420:	2300      	movs	r3, #0
 800a422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a426:	e7a8      	b.n	800a37a <_printf_i+0x152>
 800a428:	462a      	mov	r2, r5
 800a42a:	4649      	mov	r1, r9
 800a42c:	4640      	mov	r0, r8
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	47d0      	blx	sl
 800a432:	3001      	adds	r0, #1
 800a434:	d0ab      	beq.n	800a38e <_printf_i+0x166>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	079b      	lsls	r3, r3, #30
 800a43a:	d413      	bmi.n	800a464 <_printf_i+0x23c>
 800a43c:	68e0      	ldr	r0, [r4, #12]
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	4298      	cmp	r0, r3
 800a442:	bfb8      	it	lt
 800a444:	4618      	movlt	r0, r3
 800a446:	e7a4      	b.n	800a392 <_printf_i+0x16a>
 800a448:	2301      	movs	r3, #1
 800a44a:	4632      	mov	r2, r6
 800a44c:	4649      	mov	r1, r9
 800a44e:	4640      	mov	r0, r8
 800a450:	47d0      	blx	sl
 800a452:	3001      	adds	r0, #1
 800a454:	d09b      	beq.n	800a38e <_printf_i+0x166>
 800a456:	3501      	adds	r5, #1
 800a458:	68e3      	ldr	r3, [r4, #12]
 800a45a:	9903      	ldr	r1, [sp, #12]
 800a45c:	1a5b      	subs	r3, r3, r1
 800a45e:	42ab      	cmp	r3, r5
 800a460:	dcf2      	bgt.n	800a448 <_printf_i+0x220>
 800a462:	e7eb      	b.n	800a43c <_printf_i+0x214>
 800a464:	2500      	movs	r5, #0
 800a466:	f104 0619 	add.w	r6, r4, #25
 800a46a:	e7f5      	b.n	800a458 <_printf_i+0x230>
 800a46c:	0800e5b6 	.word	0x0800e5b6
 800a470:	0800e5c7 	.word	0x0800e5c7

0800a474 <_scanf_float>:
 800a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a478:	b087      	sub	sp, #28
 800a47a:	9303      	str	r3, [sp, #12]
 800a47c:	688b      	ldr	r3, [r1, #8]
 800a47e:	4617      	mov	r7, r2
 800a480:	1e5a      	subs	r2, r3, #1
 800a482:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a486:	bf85      	ittet	hi
 800a488:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a48c:	195b      	addhi	r3, r3, r5
 800a48e:	2300      	movls	r3, #0
 800a490:	9302      	strhi	r3, [sp, #8]
 800a492:	bf88      	it	hi
 800a494:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a498:	468b      	mov	fp, r1
 800a49a:	f04f 0500 	mov.w	r5, #0
 800a49e:	bf8c      	ite	hi
 800a4a0:	608b      	strhi	r3, [r1, #8]
 800a4a2:	9302      	strls	r3, [sp, #8]
 800a4a4:	680b      	ldr	r3, [r1, #0]
 800a4a6:	4680      	mov	r8, r0
 800a4a8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a4ac:	f84b 3b1c 	str.w	r3, [fp], #28
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	465e      	mov	r6, fp
 800a4b4:	46aa      	mov	sl, r5
 800a4b6:	46a9      	mov	r9, r5
 800a4b8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a4bc:	9501      	str	r5, [sp, #4]
 800a4be:	68a2      	ldr	r2, [r4, #8]
 800a4c0:	b152      	cbz	r2, 800a4d8 <_scanf_float+0x64>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b4e      	cmp	r3, #78	; 0x4e
 800a4c8:	d864      	bhi.n	800a594 <_scanf_float+0x120>
 800a4ca:	2b40      	cmp	r3, #64	; 0x40
 800a4cc:	d83c      	bhi.n	800a548 <_scanf_float+0xd4>
 800a4ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a4d2:	b2c8      	uxtb	r0, r1
 800a4d4:	280e      	cmp	r0, #14
 800a4d6:	d93a      	bls.n	800a54e <_scanf_float+0xda>
 800a4d8:	f1b9 0f00 	cmp.w	r9, #0
 800a4dc:	d003      	beq.n	800a4e6 <_scanf_float+0x72>
 800a4de:	6823      	ldr	r3, [r4, #0]
 800a4e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ea:	f1ba 0f01 	cmp.w	sl, #1
 800a4ee:	f200 8113 	bhi.w	800a718 <_scanf_float+0x2a4>
 800a4f2:	455e      	cmp	r6, fp
 800a4f4:	f200 8105 	bhi.w	800a702 <_scanf_float+0x28e>
 800a4f8:	2501      	movs	r5, #1
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	b007      	add	sp, #28
 800a4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a502:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a506:	2a0d      	cmp	r2, #13
 800a508:	d8e6      	bhi.n	800a4d8 <_scanf_float+0x64>
 800a50a:	a101      	add	r1, pc, #4	; (adr r1, 800a510 <_scanf_float+0x9c>)
 800a50c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a510:	0800a64f 	.word	0x0800a64f
 800a514:	0800a4d9 	.word	0x0800a4d9
 800a518:	0800a4d9 	.word	0x0800a4d9
 800a51c:	0800a4d9 	.word	0x0800a4d9
 800a520:	0800a6af 	.word	0x0800a6af
 800a524:	0800a687 	.word	0x0800a687
 800a528:	0800a4d9 	.word	0x0800a4d9
 800a52c:	0800a4d9 	.word	0x0800a4d9
 800a530:	0800a65d 	.word	0x0800a65d
 800a534:	0800a4d9 	.word	0x0800a4d9
 800a538:	0800a4d9 	.word	0x0800a4d9
 800a53c:	0800a4d9 	.word	0x0800a4d9
 800a540:	0800a4d9 	.word	0x0800a4d9
 800a544:	0800a615 	.word	0x0800a615
 800a548:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a54c:	e7db      	b.n	800a506 <_scanf_float+0x92>
 800a54e:	290e      	cmp	r1, #14
 800a550:	d8c2      	bhi.n	800a4d8 <_scanf_float+0x64>
 800a552:	a001      	add	r0, pc, #4	; (adr r0, 800a558 <_scanf_float+0xe4>)
 800a554:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a558:	0800a607 	.word	0x0800a607
 800a55c:	0800a4d9 	.word	0x0800a4d9
 800a560:	0800a607 	.word	0x0800a607
 800a564:	0800a69b 	.word	0x0800a69b
 800a568:	0800a4d9 	.word	0x0800a4d9
 800a56c:	0800a5b5 	.word	0x0800a5b5
 800a570:	0800a5f1 	.word	0x0800a5f1
 800a574:	0800a5f1 	.word	0x0800a5f1
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5f1 	.word	0x0800a5f1
 800a580:	0800a5f1 	.word	0x0800a5f1
 800a584:	0800a5f1 	.word	0x0800a5f1
 800a588:	0800a5f1 	.word	0x0800a5f1
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a5f1 	.word	0x0800a5f1
 800a594:	2b6e      	cmp	r3, #110	; 0x6e
 800a596:	d809      	bhi.n	800a5ac <_scanf_float+0x138>
 800a598:	2b60      	cmp	r3, #96	; 0x60
 800a59a:	d8b2      	bhi.n	800a502 <_scanf_float+0x8e>
 800a59c:	2b54      	cmp	r3, #84	; 0x54
 800a59e:	d077      	beq.n	800a690 <_scanf_float+0x21c>
 800a5a0:	2b59      	cmp	r3, #89	; 0x59
 800a5a2:	d199      	bne.n	800a4d8 <_scanf_float+0x64>
 800a5a4:	2d07      	cmp	r5, #7
 800a5a6:	d197      	bne.n	800a4d8 <_scanf_float+0x64>
 800a5a8:	2508      	movs	r5, #8
 800a5aa:	e029      	b.n	800a600 <_scanf_float+0x18c>
 800a5ac:	2b74      	cmp	r3, #116	; 0x74
 800a5ae:	d06f      	beq.n	800a690 <_scanf_float+0x21c>
 800a5b0:	2b79      	cmp	r3, #121	; 0x79
 800a5b2:	e7f6      	b.n	800a5a2 <_scanf_float+0x12e>
 800a5b4:	6821      	ldr	r1, [r4, #0]
 800a5b6:	05c8      	lsls	r0, r1, #23
 800a5b8:	d51a      	bpl.n	800a5f0 <_scanf_float+0x17c>
 800a5ba:	9b02      	ldr	r3, [sp, #8]
 800a5bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a5c0:	6021      	str	r1, [r4, #0]
 800a5c2:	f109 0901 	add.w	r9, r9, #1
 800a5c6:	b11b      	cbz	r3, 800a5d0 <_scanf_float+0x15c>
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	3201      	adds	r2, #1
 800a5cc:	9302      	str	r3, [sp, #8]
 800a5ce:	60a2      	str	r2, [r4, #8]
 800a5d0:	68a3      	ldr	r3, [r4, #8]
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	60a3      	str	r3, [r4, #8]
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	6123      	str	r3, [r4, #16]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	607b      	str	r3, [r7, #4]
 800a5e4:	f340 8084 	ble.w	800a6f0 <_scanf_float+0x27c>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	603b      	str	r3, [r7, #0]
 800a5ee:	e766      	b.n	800a4be <_scanf_float+0x4a>
 800a5f0:	eb1a 0f05 	cmn.w	sl, r5
 800a5f4:	f47f af70 	bne.w	800a4d8 <_scanf_float+0x64>
 800a5f8:	6822      	ldr	r2, [r4, #0]
 800a5fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	f806 3b01 	strb.w	r3, [r6], #1
 800a604:	e7e4      	b.n	800a5d0 <_scanf_float+0x15c>
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	0610      	lsls	r0, r2, #24
 800a60a:	f57f af65 	bpl.w	800a4d8 <_scanf_float+0x64>
 800a60e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a612:	e7f4      	b.n	800a5fe <_scanf_float+0x18a>
 800a614:	f1ba 0f00 	cmp.w	sl, #0
 800a618:	d10e      	bne.n	800a638 <_scanf_float+0x1c4>
 800a61a:	f1b9 0f00 	cmp.w	r9, #0
 800a61e:	d10e      	bne.n	800a63e <_scanf_float+0x1ca>
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a626:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a62a:	d108      	bne.n	800a63e <_scanf_float+0x1ca>
 800a62c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a630:	f04f 0a01 	mov.w	sl, #1
 800a634:	6022      	str	r2, [r4, #0]
 800a636:	e7e3      	b.n	800a600 <_scanf_float+0x18c>
 800a638:	f1ba 0f02 	cmp.w	sl, #2
 800a63c:	d055      	beq.n	800a6ea <_scanf_float+0x276>
 800a63e:	2d01      	cmp	r5, #1
 800a640:	d002      	beq.n	800a648 <_scanf_float+0x1d4>
 800a642:	2d04      	cmp	r5, #4
 800a644:	f47f af48 	bne.w	800a4d8 <_scanf_float+0x64>
 800a648:	3501      	adds	r5, #1
 800a64a:	b2ed      	uxtb	r5, r5
 800a64c:	e7d8      	b.n	800a600 <_scanf_float+0x18c>
 800a64e:	f1ba 0f01 	cmp.w	sl, #1
 800a652:	f47f af41 	bne.w	800a4d8 <_scanf_float+0x64>
 800a656:	f04f 0a02 	mov.w	sl, #2
 800a65a:	e7d1      	b.n	800a600 <_scanf_float+0x18c>
 800a65c:	b97d      	cbnz	r5, 800a67e <_scanf_float+0x20a>
 800a65e:	f1b9 0f00 	cmp.w	r9, #0
 800a662:	f47f af3c 	bne.w	800a4de <_scanf_float+0x6a>
 800a666:	6822      	ldr	r2, [r4, #0]
 800a668:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a66c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a670:	f47f af39 	bne.w	800a4e6 <_scanf_float+0x72>
 800a674:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a678:	2501      	movs	r5, #1
 800a67a:	6022      	str	r2, [r4, #0]
 800a67c:	e7c0      	b.n	800a600 <_scanf_float+0x18c>
 800a67e:	2d03      	cmp	r5, #3
 800a680:	d0e2      	beq.n	800a648 <_scanf_float+0x1d4>
 800a682:	2d05      	cmp	r5, #5
 800a684:	e7de      	b.n	800a644 <_scanf_float+0x1d0>
 800a686:	2d02      	cmp	r5, #2
 800a688:	f47f af26 	bne.w	800a4d8 <_scanf_float+0x64>
 800a68c:	2503      	movs	r5, #3
 800a68e:	e7b7      	b.n	800a600 <_scanf_float+0x18c>
 800a690:	2d06      	cmp	r5, #6
 800a692:	f47f af21 	bne.w	800a4d8 <_scanf_float+0x64>
 800a696:	2507      	movs	r5, #7
 800a698:	e7b2      	b.n	800a600 <_scanf_float+0x18c>
 800a69a:	6822      	ldr	r2, [r4, #0]
 800a69c:	0591      	lsls	r1, r2, #22
 800a69e:	f57f af1b 	bpl.w	800a4d8 <_scanf_float+0x64>
 800a6a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a6a6:	6022      	str	r2, [r4, #0]
 800a6a8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6ac:	e7a8      	b.n	800a600 <_scanf_float+0x18c>
 800a6ae:	6822      	ldr	r2, [r4, #0]
 800a6b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a6b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a6b8:	d006      	beq.n	800a6c8 <_scanf_float+0x254>
 800a6ba:	0550      	lsls	r0, r2, #21
 800a6bc:	f57f af0c 	bpl.w	800a4d8 <_scanf_float+0x64>
 800a6c0:	f1b9 0f00 	cmp.w	r9, #0
 800a6c4:	f43f af0f 	beq.w	800a4e6 <_scanf_float+0x72>
 800a6c8:	0591      	lsls	r1, r2, #22
 800a6ca:	bf58      	it	pl
 800a6cc:	9901      	ldrpl	r1, [sp, #4]
 800a6ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a6d2:	bf58      	it	pl
 800a6d4:	eba9 0101 	subpl.w	r1, r9, r1
 800a6d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a6dc:	f04f 0900 	mov.w	r9, #0
 800a6e0:	bf58      	it	pl
 800a6e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a6e6:	6022      	str	r2, [r4, #0]
 800a6e8:	e78a      	b.n	800a600 <_scanf_float+0x18c>
 800a6ea:	f04f 0a03 	mov.w	sl, #3
 800a6ee:	e787      	b.n	800a600 <_scanf_float+0x18c>
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a6f8:	4798      	blx	r3
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	f43f aedf 	beq.w	800a4be <_scanf_float+0x4a>
 800a700:	e6ea      	b.n	800a4d8 <_scanf_float+0x64>
 800a702:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a706:	463a      	mov	r2, r7
 800a708:	4640      	mov	r0, r8
 800a70a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a70e:	4798      	blx	r3
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	3b01      	subs	r3, #1
 800a714:	6123      	str	r3, [r4, #16]
 800a716:	e6ec      	b.n	800a4f2 <_scanf_float+0x7e>
 800a718:	1e6b      	subs	r3, r5, #1
 800a71a:	2b06      	cmp	r3, #6
 800a71c:	d825      	bhi.n	800a76a <_scanf_float+0x2f6>
 800a71e:	2d02      	cmp	r5, #2
 800a720:	d836      	bhi.n	800a790 <_scanf_float+0x31c>
 800a722:	455e      	cmp	r6, fp
 800a724:	f67f aee8 	bls.w	800a4f8 <_scanf_float+0x84>
 800a728:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a72c:	463a      	mov	r2, r7
 800a72e:	4640      	mov	r0, r8
 800a730:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a734:	4798      	blx	r3
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	3b01      	subs	r3, #1
 800a73a:	6123      	str	r3, [r4, #16]
 800a73c:	e7f1      	b.n	800a722 <_scanf_float+0x2ae>
 800a73e:	9802      	ldr	r0, [sp, #8]
 800a740:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a744:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a748:	463a      	mov	r2, r7
 800a74a:	9002      	str	r0, [sp, #8]
 800a74c:	4640      	mov	r0, r8
 800a74e:	4798      	blx	r3
 800a750:	6923      	ldr	r3, [r4, #16]
 800a752:	3b01      	subs	r3, #1
 800a754:	6123      	str	r3, [r4, #16]
 800a756:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a75a:	fa5f fa8a 	uxtb.w	sl, sl
 800a75e:	f1ba 0f02 	cmp.w	sl, #2
 800a762:	d1ec      	bne.n	800a73e <_scanf_float+0x2ca>
 800a764:	3d03      	subs	r5, #3
 800a766:	b2ed      	uxtb	r5, r5
 800a768:	1b76      	subs	r6, r6, r5
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	05da      	lsls	r2, r3, #23
 800a76e:	d52f      	bpl.n	800a7d0 <_scanf_float+0x35c>
 800a770:	055b      	lsls	r3, r3, #21
 800a772:	d510      	bpl.n	800a796 <_scanf_float+0x322>
 800a774:	455e      	cmp	r6, fp
 800a776:	f67f aebf 	bls.w	800a4f8 <_scanf_float+0x84>
 800a77a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a77e:	463a      	mov	r2, r7
 800a780:	4640      	mov	r0, r8
 800a782:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a786:	4798      	blx	r3
 800a788:	6923      	ldr	r3, [r4, #16]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	6123      	str	r3, [r4, #16]
 800a78e:	e7f1      	b.n	800a774 <_scanf_float+0x300>
 800a790:	46aa      	mov	sl, r5
 800a792:	9602      	str	r6, [sp, #8]
 800a794:	e7df      	b.n	800a756 <_scanf_float+0x2e2>
 800a796:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a79a:	6923      	ldr	r3, [r4, #16]
 800a79c:	2965      	cmp	r1, #101	; 0x65
 800a79e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7a2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a7a6:	6123      	str	r3, [r4, #16]
 800a7a8:	d00c      	beq.n	800a7c4 <_scanf_float+0x350>
 800a7aa:	2945      	cmp	r1, #69	; 0x45
 800a7ac:	d00a      	beq.n	800a7c4 <_scanf_float+0x350>
 800a7ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7b2:	463a      	mov	r2, r7
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	4798      	blx	r3
 800a7b8:	6923      	ldr	r3, [r4, #16]
 800a7ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	1eb5      	subs	r5, r6, #2
 800a7c2:	6123      	str	r3, [r4, #16]
 800a7c4:	463a      	mov	r2, r7
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7cc:	4798      	blx	r3
 800a7ce:	462e      	mov	r6, r5
 800a7d0:	6825      	ldr	r5, [r4, #0]
 800a7d2:	f015 0510 	ands.w	r5, r5, #16
 800a7d6:	d155      	bne.n	800a884 <_scanf_float+0x410>
 800a7d8:	7035      	strb	r5, [r6, #0]
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7e4:	d11b      	bne.n	800a81e <_scanf_float+0x3aa>
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	454b      	cmp	r3, r9
 800a7ea:	eba3 0209 	sub.w	r2, r3, r9
 800a7ee:	d123      	bne.n	800a838 <_scanf_float+0x3c4>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4659      	mov	r1, fp
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	f000 ff3f 	bl	800b678 <_strtod_r>
 800a7fa:	6822      	ldr	r2, [r4, #0]
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	f012 0f02 	tst.w	r2, #2
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	d021      	beq.n	800a84e <_scanf_float+0x3da>
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	9903      	ldr	r1, [sp, #12]
 800a80e:	600a      	str	r2, [r1, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	e9c3 6700 	strd	r6, r7, [r3]
 800a816:	68e3      	ldr	r3, [r4, #12]
 800a818:	3301      	adds	r3, #1
 800a81a:	60e3      	str	r3, [r4, #12]
 800a81c:	e66d      	b.n	800a4fa <_scanf_float+0x86>
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0e5      	beq.n	800a7f0 <_scanf_float+0x37c>
 800a824:	9905      	ldr	r1, [sp, #20]
 800a826:	230a      	movs	r3, #10
 800a828:	462a      	mov	r2, r5
 800a82a:	4640      	mov	r0, r8
 800a82c:	3101      	adds	r1, #1
 800a82e:	f001 f801 	bl	800b834 <_strtol_r>
 800a832:	9b04      	ldr	r3, [sp, #16]
 800a834:	9e05      	ldr	r6, [sp, #20]
 800a836:	1ac2      	subs	r2, r0, r3
 800a838:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a83c:	429e      	cmp	r6, r3
 800a83e:	bf28      	it	cs
 800a840:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a844:	4630      	mov	r0, r6
 800a846:	4910      	ldr	r1, [pc, #64]	; (800a888 <_scanf_float+0x414>)
 800a848:	f000 f8a0 	bl	800a98c <siprintf>
 800a84c:	e7d0      	b.n	800a7f0 <_scanf_float+0x37c>
 800a84e:	f012 0f04 	tst.w	r2, #4
 800a852:	f103 0204 	add.w	r2, r3, #4
 800a856:	d1d9      	bne.n	800a80c <_scanf_float+0x398>
 800a858:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a85c:	f8cc 2000 	str.w	r2, [ip]
 800a860:	f8d3 8000 	ldr.w	r8, [r3]
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	f7f6 f8da 	bl	8000a20 <__aeabi_dcmpun>
 800a86c:	b128      	cbz	r0, 800a87a <_scanf_float+0x406>
 800a86e:	4807      	ldr	r0, [pc, #28]	; (800a88c <_scanf_float+0x418>)
 800a870:	f000 f888 	bl	800a984 <nanf>
 800a874:	f8c8 0000 	str.w	r0, [r8]
 800a878:	e7cd      	b.n	800a816 <_scanf_float+0x3a2>
 800a87a:	4630      	mov	r0, r6
 800a87c:	4639      	mov	r1, r7
 800a87e:	f7f6 f92d 	bl	8000adc <__aeabi_d2f>
 800a882:	e7f7      	b.n	800a874 <_scanf_float+0x400>
 800a884:	2500      	movs	r5, #0
 800a886:	e638      	b.n	800a4fa <_scanf_float+0x86>
 800a888:	0800e5d8 	.word	0x0800e5d8
 800a88c:	0800e6df 	.word	0x0800e6df

0800a890 <cleanup_glue>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	460c      	mov	r4, r1
 800a894:	6809      	ldr	r1, [r1, #0]
 800a896:	4605      	mov	r5, r0
 800a898:	b109      	cbz	r1, 800a89e <cleanup_glue+0xe>
 800a89a:	f7ff fff9 	bl	800a890 <cleanup_glue>
 800a89e:	4621      	mov	r1, r4
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a6:	f002 bff9 	b.w	800d89c <_free_r>
	...

0800a8ac <_reclaim_reent>:
 800a8ac:	4b2c      	ldr	r3, [pc, #176]	; (800a960 <_reclaim_reent+0xb4>)
 800a8ae:	b570      	push	{r4, r5, r6, lr}
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4283      	cmp	r3, r0
 800a8b6:	d051      	beq.n	800a95c <_reclaim_reent+0xb0>
 800a8b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a8ba:	b143      	cbz	r3, 800a8ce <_reclaim_reent+0x22>
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d14a      	bne.n	800a958 <_reclaim_reent+0xac>
 800a8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8c4:	6819      	ldr	r1, [r3, #0]
 800a8c6:	b111      	cbz	r1, 800a8ce <_reclaim_reent+0x22>
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f002 ffe7 	bl	800d89c <_free_r>
 800a8ce:	6961      	ldr	r1, [r4, #20]
 800a8d0:	b111      	cbz	r1, 800a8d8 <_reclaim_reent+0x2c>
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f002 ffe2 	bl	800d89c <_free_r>
 800a8d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8da:	b111      	cbz	r1, 800a8e2 <_reclaim_reent+0x36>
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f002 ffdd 	bl	800d89c <_free_r>
 800a8e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a8e4:	b111      	cbz	r1, 800a8ec <_reclaim_reent+0x40>
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f002 ffd8 	bl	800d89c <_free_r>
 800a8ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a8ee:	b111      	cbz	r1, 800a8f6 <_reclaim_reent+0x4a>
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f002 ffd3 	bl	800d89c <_free_r>
 800a8f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a8f8:	b111      	cbz	r1, 800a900 <_reclaim_reent+0x54>
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f002 ffce 	bl	800d89c <_free_r>
 800a900:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a902:	b111      	cbz	r1, 800a90a <_reclaim_reent+0x5e>
 800a904:	4620      	mov	r0, r4
 800a906:	f002 ffc9 	bl	800d89c <_free_r>
 800a90a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a90c:	b111      	cbz	r1, 800a914 <_reclaim_reent+0x68>
 800a90e:	4620      	mov	r0, r4
 800a910:	f002 ffc4 	bl	800d89c <_free_r>
 800a914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a916:	b111      	cbz	r1, 800a91e <_reclaim_reent+0x72>
 800a918:	4620      	mov	r0, r4
 800a91a:	f002 ffbf 	bl	800d89c <_free_r>
 800a91e:	69a3      	ldr	r3, [r4, #24]
 800a920:	b1e3      	cbz	r3, 800a95c <_reclaim_reent+0xb0>
 800a922:	4620      	mov	r0, r4
 800a924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a926:	4798      	blx	r3
 800a928:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a92a:	b1b9      	cbz	r1, 800a95c <_reclaim_reent+0xb0>
 800a92c:	4620      	mov	r0, r4
 800a92e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a932:	f7ff bfad 	b.w	800a890 <cleanup_glue>
 800a936:	5949      	ldr	r1, [r1, r5]
 800a938:	b941      	cbnz	r1, 800a94c <_reclaim_reent+0xa0>
 800a93a:	3504      	adds	r5, #4
 800a93c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a93e:	2d80      	cmp	r5, #128	; 0x80
 800a940:	68d9      	ldr	r1, [r3, #12]
 800a942:	d1f8      	bne.n	800a936 <_reclaim_reent+0x8a>
 800a944:	4620      	mov	r0, r4
 800a946:	f002 ffa9 	bl	800d89c <_free_r>
 800a94a:	e7ba      	b.n	800a8c2 <_reclaim_reent+0x16>
 800a94c:	680e      	ldr	r6, [r1, #0]
 800a94e:	4620      	mov	r0, r4
 800a950:	f002 ffa4 	bl	800d89c <_free_r>
 800a954:	4631      	mov	r1, r6
 800a956:	e7ef      	b.n	800a938 <_reclaim_reent+0x8c>
 800a958:	2500      	movs	r5, #0
 800a95a:	e7ef      	b.n	800a93c <_reclaim_reent+0x90>
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
 800a95e:	bf00      	nop
 800a960:	20000034 	.word	0x20000034

0800a964 <_sbrk_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	2300      	movs	r3, #0
 800a968:	4d05      	ldr	r5, [pc, #20]	; (800a980 <_sbrk_r+0x1c>)
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	602b      	str	r3, [r5, #0]
 800a970:	f7f7 fb54 	bl	800201c <_sbrk>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_sbrk_r+0x1a>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_sbrk_r+0x1a>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	2000332c 	.word	0x2000332c

0800a984 <nanf>:
 800a984:	4800      	ldr	r0, [pc, #0]	; (800a988 <nanf+0x4>)
 800a986:	4770      	bx	lr
 800a988:	7fc00000 	.word	0x7fc00000

0800a98c <siprintf>:
 800a98c:	b40e      	push	{r1, r2, r3}
 800a98e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a992:	b500      	push	{lr}
 800a994:	b09c      	sub	sp, #112	; 0x70
 800a996:	ab1d      	add	r3, sp, #116	; 0x74
 800a998:	9002      	str	r0, [sp, #8]
 800a99a:	9006      	str	r0, [sp, #24]
 800a99c:	9107      	str	r1, [sp, #28]
 800a99e:	9104      	str	r1, [sp, #16]
 800a9a0:	4808      	ldr	r0, [pc, #32]	; (800a9c4 <siprintf+0x38>)
 800a9a2:	4909      	ldr	r1, [pc, #36]	; (800a9c8 <siprintf+0x3c>)
 800a9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9a8:	9105      	str	r1, [sp, #20]
 800a9aa:	6800      	ldr	r0, [r0, #0]
 800a9ac:	a902      	add	r1, sp, #8
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	f003 f818 	bl	800d9e4 <_svfiprintf_r>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	9b02      	ldr	r3, [sp, #8]
 800a9b8:	701a      	strb	r2, [r3, #0]
 800a9ba:	b01c      	add	sp, #112	; 0x70
 800a9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9c0:	b003      	add	sp, #12
 800a9c2:	4770      	bx	lr
 800a9c4:	20000034 	.word	0x20000034
 800a9c8:	ffff0208 	.word	0xffff0208

0800a9cc <__sread>:
 800a9cc:	b510      	push	{r4, lr}
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d4:	f003 fa5e 	bl	800de94 <_read_r>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	bfab      	itete	ge
 800a9dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9de:	89a3      	ldrhlt	r3, [r4, #12]
 800a9e0:	181b      	addge	r3, r3, r0
 800a9e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9e6:	bfac      	ite	ge
 800a9e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9ea:	81a3      	strhlt	r3, [r4, #12]
 800a9ec:	bd10      	pop	{r4, pc}

0800a9ee <__swrite>:
 800a9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f2:	461f      	mov	r7, r3
 800a9f4:	898b      	ldrh	r3, [r1, #12]
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	05db      	lsls	r3, r3, #23
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	d505      	bpl.n	800aa0c <__swrite+0x1e>
 800aa00:	2302      	movs	r3, #2
 800aa02:	2200      	movs	r2, #0
 800aa04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa08:	f002 fa36 	bl	800ce78 <_lseek_r>
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	4632      	mov	r2, r6
 800aa10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa14:	81a3      	strh	r3, [r4, #12]
 800aa16:	4628      	mov	r0, r5
 800aa18:	463b      	mov	r3, r7
 800aa1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa22:	f000 bf33 	b.w	800b88c <_write_r>

0800aa26 <__sseek>:
 800aa26:	b510      	push	{r4, lr}
 800aa28:	460c      	mov	r4, r1
 800aa2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2e:	f002 fa23 	bl	800ce78 <_lseek_r>
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	bf15      	itete	ne
 800aa38:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa42:	81a3      	strheq	r3, [r4, #12]
 800aa44:	bf18      	it	ne
 800aa46:	81a3      	strhne	r3, [r4, #12]
 800aa48:	bd10      	pop	{r4, pc}

0800aa4a <__sclose>:
 800aa4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa4e:	f000 bf4d 	b.w	800b8ec <_close_r>

0800aa52 <strcpy>:
 800aa52:	4603      	mov	r3, r0
 800aa54:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa58:	f803 2b01 	strb.w	r2, [r3], #1
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	d1f9      	bne.n	800aa54 <strcpy+0x2>
 800aa60:	4770      	bx	lr

0800aa62 <sulp>:
 800aa62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa66:	460f      	mov	r7, r1
 800aa68:	4690      	mov	r8, r2
 800aa6a:	f002 fdbb 	bl	800d5e4 <__ulp>
 800aa6e:	4604      	mov	r4, r0
 800aa70:	460d      	mov	r5, r1
 800aa72:	f1b8 0f00 	cmp.w	r8, #0
 800aa76:	d011      	beq.n	800aa9c <sulp+0x3a>
 800aa78:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800aa7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	dd0b      	ble.n	800aa9c <sulp+0x3a>
 800aa84:	2400      	movs	r4, #0
 800aa86:	051b      	lsls	r3, r3, #20
 800aa88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aa8c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aa90:	4622      	mov	r2, r4
 800aa92:	462b      	mov	r3, r5
 800aa94:	f7f5 fd2a 	bl	80004ec <__aeabi_dmul>
 800aa98:	4604      	mov	r4, r0
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa4:	0000      	movs	r0, r0
	...

0800aaa8 <_strtod_l>:
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	469b      	mov	fp, r3
 800aaae:	2300      	movs	r3, #0
 800aab0:	b09f      	sub	sp, #124	; 0x7c
 800aab2:	931a      	str	r3, [sp, #104]	; 0x68
 800aab4:	4b9e      	ldr	r3, [pc, #632]	; (800ad30 <_strtod_l+0x288>)
 800aab6:	4682      	mov	sl, r0
 800aab8:	681f      	ldr	r7, [r3, #0]
 800aaba:	460e      	mov	r6, r1
 800aabc:	4638      	mov	r0, r7
 800aabe:	9215      	str	r2, [sp, #84]	; 0x54
 800aac0:	f7f5 fb50 	bl	8000164 <strlen>
 800aac4:	f04f 0800 	mov.w	r8, #0
 800aac8:	4604      	mov	r4, r0
 800aaca:	f04f 0900 	mov.w	r9, #0
 800aace:	9619      	str	r6, [sp, #100]	; 0x64
 800aad0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aad2:	781a      	ldrb	r2, [r3, #0]
 800aad4:	2a2b      	cmp	r2, #43	; 0x2b
 800aad6:	d04c      	beq.n	800ab72 <_strtod_l+0xca>
 800aad8:	d83a      	bhi.n	800ab50 <_strtod_l+0xa8>
 800aada:	2a0d      	cmp	r2, #13
 800aadc:	d833      	bhi.n	800ab46 <_strtod_l+0x9e>
 800aade:	2a08      	cmp	r2, #8
 800aae0:	d833      	bhi.n	800ab4a <_strtod_l+0xa2>
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	d03d      	beq.n	800ab62 <_strtod_l+0xba>
 800aae6:	2300      	movs	r3, #0
 800aae8:	930a      	str	r3, [sp, #40]	; 0x28
 800aaea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aaec:	782b      	ldrb	r3, [r5, #0]
 800aaee:	2b30      	cmp	r3, #48	; 0x30
 800aaf0:	f040 80aa 	bne.w	800ac48 <_strtod_l+0x1a0>
 800aaf4:	786b      	ldrb	r3, [r5, #1]
 800aaf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aafa:	2b58      	cmp	r3, #88	; 0x58
 800aafc:	d166      	bne.n	800abcc <_strtod_l+0x124>
 800aafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab00:	4650      	mov	r0, sl
 800ab02:	9301      	str	r3, [sp, #4]
 800ab04:	ab1a      	add	r3, sp, #104	; 0x68
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	4a8a      	ldr	r2, [pc, #552]	; (800ad34 <_strtod_l+0x28c>)
 800ab0a:	f8cd b008 	str.w	fp, [sp, #8]
 800ab0e:	ab1b      	add	r3, sp, #108	; 0x6c
 800ab10:	a919      	add	r1, sp, #100	; 0x64
 800ab12:	f001 feaf 	bl	800c874 <__gethex>
 800ab16:	f010 0607 	ands.w	r6, r0, #7
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	d005      	beq.n	800ab2a <_strtod_l+0x82>
 800ab1e:	2e06      	cmp	r6, #6
 800ab20:	d129      	bne.n	800ab76 <_strtod_l+0xce>
 800ab22:	2300      	movs	r3, #0
 800ab24:	3501      	adds	r5, #1
 800ab26:	9519      	str	r5, [sp, #100]	; 0x64
 800ab28:	930a      	str	r3, [sp, #40]	; 0x28
 800ab2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f040 858a 	bne.w	800b646 <_strtod_l+0xb9e>
 800ab32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab34:	b1d3      	cbz	r3, 800ab6c <_strtod_l+0xc4>
 800ab36:	4642      	mov	r2, r8
 800ab38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4619      	mov	r1, r3
 800ab40:	b01f      	add	sp, #124	; 0x7c
 800ab42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab46:	2a20      	cmp	r2, #32
 800ab48:	d1cd      	bne.n	800aae6 <_strtod_l+0x3e>
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	9319      	str	r3, [sp, #100]	; 0x64
 800ab4e:	e7bf      	b.n	800aad0 <_strtod_l+0x28>
 800ab50:	2a2d      	cmp	r2, #45	; 0x2d
 800ab52:	d1c8      	bne.n	800aae6 <_strtod_l+0x3e>
 800ab54:	2201      	movs	r2, #1
 800ab56:	920a      	str	r2, [sp, #40]	; 0x28
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	9219      	str	r2, [sp, #100]	; 0x64
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1c3      	bne.n	800aaea <_strtod_l+0x42>
 800ab62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab64:	9619      	str	r6, [sp, #100]	; 0x64
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f040 856b 	bne.w	800b642 <_strtod_l+0xb9a>
 800ab6c:	4642      	mov	r2, r8
 800ab6e:	464b      	mov	r3, r9
 800ab70:	e7e4      	b.n	800ab3c <_strtod_l+0x94>
 800ab72:	2200      	movs	r2, #0
 800ab74:	e7ef      	b.n	800ab56 <_strtod_l+0xae>
 800ab76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ab78:	b13a      	cbz	r2, 800ab8a <_strtod_l+0xe2>
 800ab7a:	2135      	movs	r1, #53	; 0x35
 800ab7c:	a81c      	add	r0, sp, #112	; 0x70
 800ab7e:	f002 fe35 	bl	800d7ec <__copybits>
 800ab82:	4650      	mov	r0, sl
 800ab84:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ab86:	f002 f9fd 	bl	800cf84 <_Bfree>
 800ab8a:	3e01      	subs	r6, #1
 800ab8c:	2e04      	cmp	r6, #4
 800ab8e:	d806      	bhi.n	800ab9e <_strtod_l+0xf6>
 800ab90:	e8df f006 	tbb	[pc, r6]
 800ab94:	1714030a 	.word	0x1714030a
 800ab98:	0a          	.byte	0x0a
 800ab99:	00          	.byte	0x00
 800ab9a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ab9e:	0721      	lsls	r1, r4, #28
 800aba0:	d5c3      	bpl.n	800ab2a <_strtod_l+0x82>
 800aba2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800aba6:	e7c0      	b.n	800ab2a <_strtod_l+0x82>
 800aba8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800abaa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800abae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800abb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800abba:	e7f0      	b.n	800ab9e <_strtod_l+0xf6>
 800abbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ad38 <_strtod_l+0x290>
 800abc0:	e7ed      	b.n	800ab9e <_strtod_l+0xf6>
 800abc2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800abc6:	f04f 38ff 	mov.w	r8, #4294967295
 800abca:	e7e8      	b.n	800ab9e <_strtod_l+0xf6>
 800abcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abce:	1c5a      	adds	r2, r3, #1
 800abd0:	9219      	str	r2, [sp, #100]	; 0x64
 800abd2:	785b      	ldrb	r3, [r3, #1]
 800abd4:	2b30      	cmp	r3, #48	; 0x30
 800abd6:	d0f9      	beq.n	800abcc <_strtod_l+0x124>
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d0a6      	beq.n	800ab2a <_strtod_l+0x82>
 800abdc:	2301      	movs	r3, #1
 800abde:	9307      	str	r3, [sp, #28]
 800abe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abe2:	220a      	movs	r2, #10
 800abe4:	9308      	str	r3, [sp, #32]
 800abe6:	2300      	movs	r3, #0
 800abe8:	469b      	mov	fp, r3
 800abea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800abee:	9819      	ldr	r0, [sp, #100]	; 0x64
 800abf0:	7805      	ldrb	r5, [r0, #0]
 800abf2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800abf6:	b2d9      	uxtb	r1, r3
 800abf8:	2909      	cmp	r1, #9
 800abfa:	d927      	bls.n	800ac4c <_strtod_l+0x1a4>
 800abfc:	4622      	mov	r2, r4
 800abfe:	4639      	mov	r1, r7
 800ac00:	f003 f960 	bl	800dec4 <strncmp>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d033      	beq.n	800ac70 <_strtod_l+0x1c8>
 800ac08:	2000      	movs	r0, #0
 800ac0a:	462a      	mov	r2, r5
 800ac0c:	465c      	mov	r4, fp
 800ac0e:	4603      	mov	r3, r0
 800ac10:	9004      	str	r0, [sp, #16]
 800ac12:	2a65      	cmp	r2, #101	; 0x65
 800ac14:	d001      	beq.n	800ac1a <_strtod_l+0x172>
 800ac16:	2a45      	cmp	r2, #69	; 0x45
 800ac18:	d114      	bne.n	800ac44 <_strtod_l+0x19c>
 800ac1a:	b91c      	cbnz	r4, 800ac24 <_strtod_l+0x17c>
 800ac1c:	9a07      	ldr	r2, [sp, #28]
 800ac1e:	4302      	orrs	r2, r0
 800ac20:	d09f      	beq.n	800ab62 <_strtod_l+0xba>
 800ac22:	2400      	movs	r4, #0
 800ac24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ac26:	1c72      	adds	r2, r6, #1
 800ac28:	9219      	str	r2, [sp, #100]	; 0x64
 800ac2a:	7872      	ldrb	r2, [r6, #1]
 800ac2c:	2a2b      	cmp	r2, #43	; 0x2b
 800ac2e:	d079      	beq.n	800ad24 <_strtod_l+0x27c>
 800ac30:	2a2d      	cmp	r2, #45	; 0x2d
 800ac32:	f000 8083 	beq.w	800ad3c <_strtod_l+0x294>
 800ac36:	2700      	movs	r7, #0
 800ac38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac3c:	2909      	cmp	r1, #9
 800ac3e:	f240 8083 	bls.w	800ad48 <_strtod_l+0x2a0>
 800ac42:	9619      	str	r6, [sp, #100]	; 0x64
 800ac44:	2500      	movs	r5, #0
 800ac46:	e09f      	b.n	800ad88 <_strtod_l+0x2e0>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	e7c8      	b.n	800abde <_strtod_l+0x136>
 800ac4c:	f1bb 0f08 	cmp.w	fp, #8
 800ac50:	bfd5      	itete	le
 800ac52:	9906      	ldrle	r1, [sp, #24]
 800ac54:	9905      	ldrgt	r1, [sp, #20]
 800ac56:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac5a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ac5e:	f100 0001 	add.w	r0, r0, #1
 800ac62:	bfd4      	ite	le
 800ac64:	9306      	strle	r3, [sp, #24]
 800ac66:	9305      	strgt	r3, [sp, #20]
 800ac68:	f10b 0b01 	add.w	fp, fp, #1
 800ac6c:	9019      	str	r0, [sp, #100]	; 0x64
 800ac6e:	e7be      	b.n	800abee <_strtod_l+0x146>
 800ac70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac72:	191a      	adds	r2, r3, r4
 800ac74:	9219      	str	r2, [sp, #100]	; 0x64
 800ac76:	5d1a      	ldrb	r2, [r3, r4]
 800ac78:	f1bb 0f00 	cmp.w	fp, #0
 800ac7c:	d036      	beq.n	800acec <_strtod_l+0x244>
 800ac7e:	465c      	mov	r4, fp
 800ac80:	9004      	str	r0, [sp, #16]
 800ac82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ac86:	2b09      	cmp	r3, #9
 800ac88:	d912      	bls.n	800acb0 <_strtod_l+0x208>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e7c1      	b.n	800ac12 <_strtod_l+0x16a>
 800ac8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac90:	3001      	adds	r0, #1
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	9219      	str	r2, [sp, #100]	; 0x64
 800ac96:	785a      	ldrb	r2, [r3, #1]
 800ac98:	2a30      	cmp	r2, #48	; 0x30
 800ac9a:	d0f8      	beq.n	800ac8e <_strtod_l+0x1e6>
 800ac9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	f200 84d5 	bhi.w	800b650 <_strtod_l+0xba8>
 800aca6:	9004      	str	r0, [sp, #16]
 800aca8:	2000      	movs	r0, #0
 800acaa:	4604      	mov	r4, r0
 800acac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acae:	9308      	str	r3, [sp, #32]
 800acb0:	3a30      	subs	r2, #48	; 0x30
 800acb2:	f100 0301 	add.w	r3, r0, #1
 800acb6:	d013      	beq.n	800ace0 <_strtod_l+0x238>
 800acb8:	9904      	ldr	r1, [sp, #16]
 800acba:	1905      	adds	r5, r0, r4
 800acbc:	4419      	add	r1, r3
 800acbe:	9104      	str	r1, [sp, #16]
 800acc0:	4623      	mov	r3, r4
 800acc2:	210a      	movs	r1, #10
 800acc4:	42ab      	cmp	r3, r5
 800acc6:	d113      	bne.n	800acf0 <_strtod_l+0x248>
 800acc8:	1823      	adds	r3, r4, r0
 800acca:	2b08      	cmp	r3, #8
 800accc:	f104 0401 	add.w	r4, r4, #1
 800acd0:	4404      	add	r4, r0
 800acd2:	dc1b      	bgt.n	800ad0c <_strtod_l+0x264>
 800acd4:	230a      	movs	r3, #10
 800acd6:	9906      	ldr	r1, [sp, #24]
 800acd8:	fb03 2301 	mla	r3, r3, r1, r2
 800acdc:	9306      	str	r3, [sp, #24]
 800acde:	2300      	movs	r3, #0
 800ace0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ace2:	4618      	mov	r0, r3
 800ace4:	1c51      	adds	r1, r2, #1
 800ace6:	9119      	str	r1, [sp, #100]	; 0x64
 800ace8:	7852      	ldrb	r2, [r2, #1]
 800acea:	e7ca      	b.n	800ac82 <_strtod_l+0x1da>
 800acec:	4658      	mov	r0, fp
 800acee:	e7d3      	b.n	800ac98 <_strtod_l+0x1f0>
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	dc04      	bgt.n	800acfe <_strtod_l+0x256>
 800acf4:	9f06      	ldr	r7, [sp, #24]
 800acf6:	434f      	muls	r7, r1
 800acf8:	9706      	str	r7, [sp, #24]
 800acfa:	3301      	adds	r3, #1
 800acfc:	e7e2      	b.n	800acc4 <_strtod_l+0x21c>
 800acfe:	1c5f      	adds	r7, r3, #1
 800ad00:	2f10      	cmp	r7, #16
 800ad02:	bfde      	ittt	le
 800ad04:	9f05      	ldrle	r7, [sp, #20]
 800ad06:	434f      	mulle	r7, r1
 800ad08:	9705      	strle	r7, [sp, #20]
 800ad0a:	e7f6      	b.n	800acfa <_strtod_l+0x252>
 800ad0c:	2c10      	cmp	r4, #16
 800ad0e:	bfdf      	itttt	le
 800ad10:	230a      	movle	r3, #10
 800ad12:	9905      	ldrle	r1, [sp, #20]
 800ad14:	fb03 2301 	mlale	r3, r3, r1, r2
 800ad18:	9305      	strle	r3, [sp, #20]
 800ad1a:	e7e0      	b.n	800acde <_strtod_l+0x236>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	9304      	str	r3, [sp, #16]
 800ad20:	2301      	movs	r3, #1
 800ad22:	e77b      	b.n	800ac1c <_strtod_l+0x174>
 800ad24:	2700      	movs	r7, #0
 800ad26:	1cb2      	adds	r2, r6, #2
 800ad28:	9219      	str	r2, [sp, #100]	; 0x64
 800ad2a:	78b2      	ldrb	r2, [r6, #2]
 800ad2c:	e784      	b.n	800ac38 <_strtod_l+0x190>
 800ad2e:	bf00      	nop
 800ad30:	0800e8c0 	.word	0x0800e8c0
 800ad34:	0800e5e0 	.word	0x0800e5e0
 800ad38:	7ff00000 	.word	0x7ff00000
 800ad3c:	2701      	movs	r7, #1
 800ad3e:	e7f2      	b.n	800ad26 <_strtod_l+0x27e>
 800ad40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad42:	1c51      	adds	r1, r2, #1
 800ad44:	9119      	str	r1, [sp, #100]	; 0x64
 800ad46:	7852      	ldrb	r2, [r2, #1]
 800ad48:	2a30      	cmp	r2, #48	; 0x30
 800ad4a:	d0f9      	beq.n	800ad40 <_strtod_l+0x298>
 800ad4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad50:	2908      	cmp	r1, #8
 800ad52:	f63f af77 	bhi.w	800ac44 <_strtod_l+0x19c>
 800ad56:	f04f 0e0a 	mov.w	lr, #10
 800ad5a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ad5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad60:	9209      	str	r2, [sp, #36]	; 0x24
 800ad62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad64:	1c51      	adds	r1, r2, #1
 800ad66:	9119      	str	r1, [sp, #100]	; 0x64
 800ad68:	7852      	ldrb	r2, [r2, #1]
 800ad6a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ad6e:	2d09      	cmp	r5, #9
 800ad70:	d935      	bls.n	800adde <_strtod_l+0x336>
 800ad72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ad74:	1b49      	subs	r1, r1, r5
 800ad76:	2908      	cmp	r1, #8
 800ad78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ad7c:	dc02      	bgt.n	800ad84 <_strtod_l+0x2dc>
 800ad7e:	4565      	cmp	r5, ip
 800ad80:	bfa8      	it	ge
 800ad82:	4665      	movge	r5, ip
 800ad84:	b107      	cbz	r7, 800ad88 <_strtod_l+0x2e0>
 800ad86:	426d      	negs	r5, r5
 800ad88:	2c00      	cmp	r4, #0
 800ad8a:	d14c      	bne.n	800ae26 <_strtod_l+0x37e>
 800ad8c:	9907      	ldr	r1, [sp, #28]
 800ad8e:	4301      	orrs	r1, r0
 800ad90:	f47f aecb 	bne.w	800ab2a <_strtod_l+0x82>
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f47f aee4 	bne.w	800ab62 <_strtod_l+0xba>
 800ad9a:	2a69      	cmp	r2, #105	; 0x69
 800ad9c:	d026      	beq.n	800adec <_strtod_l+0x344>
 800ad9e:	dc23      	bgt.n	800ade8 <_strtod_l+0x340>
 800ada0:	2a49      	cmp	r2, #73	; 0x49
 800ada2:	d023      	beq.n	800adec <_strtod_l+0x344>
 800ada4:	2a4e      	cmp	r2, #78	; 0x4e
 800ada6:	f47f aedc 	bne.w	800ab62 <_strtod_l+0xba>
 800adaa:	499d      	ldr	r1, [pc, #628]	; (800b020 <_strtod_l+0x578>)
 800adac:	a819      	add	r0, sp, #100	; 0x64
 800adae:	f001 ffaf 	bl	800cd10 <__match>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	f43f aed5 	beq.w	800ab62 <_strtod_l+0xba>
 800adb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b28      	cmp	r3, #40	; 0x28
 800adbe:	d12c      	bne.n	800ae1a <_strtod_l+0x372>
 800adc0:	4998      	ldr	r1, [pc, #608]	; (800b024 <_strtod_l+0x57c>)
 800adc2:	aa1c      	add	r2, sp, #112	; 0x70
 800adc4:	a819      	add	r0, sp, #100	; 0x64
 800adc6:	f001 ffb7 	bl	800cd38 <__hexnan>
 800adca:	2805      	cmp	r0, #5
 800adcc:	d125      	bne.n	800ae1a <_strtod_l+0x372>
 800adce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800add0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800add4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800add8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800addc:	e6a5      	b.n	800ab2a <_strtod_l+0x82>
 800adde:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ade2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ade6:	e7bc      	b.n	800ad62 <_strtod_l+0x2ba>
 800ade8:	2a6e      	cmp	r2, #110	; 0x6e
 800adea:	e7dc      	b.n	800ada6 <_strtod_l+0x2fe>
 800adec:	498e      	ldr	r1, [pc, #568]	; (800b028 <_strtod_l+0x580>)
 800adee:	a819      	add	r0, sp, #100	; 0x64
 800adf0:	f001 ff8e 	bl	800cd10 <__match>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f43f aeb4 	beq.w	800ab62 <_strtod_l+0xba>
 800adfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adfc:	498b      	ldr	r1, [pc, #556]	; (800b02c <_strtod_l+0x584>)
 800adfe:	3b01      	subs	r3, #1
 800ae00:	a819      	add	r0, sp, #100	; 0x64
 800ae02:	9319      	str	r3, [sp, #100]	; 0x64
 800ae04:	f001 ff84 	bl	800cd10 <__match>
 800ae08:	b910      	cbnz	r0, 800ae10 <_strtod_l+0x368>
 800ae0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	9319      	str	r3, [sp, #100]	; 0x64
 800ae10:	f04f 0800 	mov.w	r8, #0
 800ae14:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800b030 <_strtod_l+0x588>
 800ae18:	e687      	b.n	800ab2a <_strtod_l+0x82>
 800ae1a:	4886      	ldr	r0, [pc, #536]	; (800b034 <_strtod_l+0x58c>)
 800ae1c:	f003 f84c 	bl	800deb8 <nan>
 800ae20:	4680      	mov	r8, r0
 800ae22:	4689      	mov	r9, r1
 800ae24:	e681      	b.n	800ab2a <_strtod_l+0x82>
 800ae26:	9b04      	ldr	r3, [sp, #16]
 800ae28:	f1bb 0f00 	cmp.w	fp, #0
 800ae2c:	bf08      	it	eq
 800ae2e:	46a3      	moveq	fp, r4
 800ae30:	1aeb      	subs	r3, r5, r3
 800ae32:	2c10      	cmp	r4, #16
 800ae34:	9806      	ldr	r0, [sp, #24]
 800ae36:	4626      	mov	r6, r4
 800ae38:	9307      	str	r3, [sp, #28]
 800ae3a:	bfa8      	it	ge
 800ae3c:	2610      	movge	r6, #16
 800ae3e:	f7f5 fadb 	bl	80003f8 <__aeabi_ui2d>
 800ae42:	2c09      	cmp	r4, #9
 800ae44:	4680      	mov	r8, r0
 800ae46:	4689      	mov	r9, r1
 800ae48:	dd13      	ble.n	800ae72 <_strtod_l+0x3ca>
 800ae4a:	4b7b      	ldr	r3, [pc, #492]	; (800b038 <_strtod_l+0x590>)
 800ae4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae54:	f7f5 fb4a 	bl	80004ec <__aeabi_dmul>
 800ae58:	4680      	mov	r8, r0
 800ae5a:	9805      	ldr	r0, [sp, #20]
 800ae5c:	4689      	mov	r9, r1
 800ae5e:	f7f5 facb 	bl	80003f8 <__aeabi_ui2d>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4640      	mov	r0, r8
 800ae68:	4649      	mov	r1, r9
 800ae6a:	f7f5 f989 	bl	8000180 <__adddf3>
 800ae6e:	4680      	mov	r8, r0
 800ae70:	4689      	mov	r9, r1
 800ae72:	2c0f      	cmp	r4, #15
 800ae74:	dc36      	bgt.n	800aee4 <_strtod_l+0x43c>
 800ae76:	9b07      	ldr	r3, [sp, #28]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f43f ae56 	beq.w	800ab2a <_strtod_l+0x82>
 800ae7e:	dd22      	ble.n	800aec6 <_strtod_l+0x41e>
 800ae80:	2b16      	cmp	r3, #22
 800ae82:	dc09      	bgt.n	800ae98 <_strtod_l+0x3f0>
 800ae84:	496c      	ldr	r1, [pc, #432]	; (800b038 <_strtod_l+0x590>)
 800ae86:	4642      	mov	r2, r8
 800ae88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae8c:	464b      	mov	r3, r9
 800ae8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae92:	f7f5 fb2b 	bl	80004ec <__aeabi_dmul>
 800ae96:	e7c3      	b.n	800ae20 <_strtod_l+0x378>
 800ae98:	9a07      	ldr	r2, [sp, #28]
 800ae9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	db20      	blt.n	800aee4 <_strtod_l+0x43c>
 800aea2:	4d65      	ldr	r5, [pc, #404]	; (800b038 <_strtod_l+0x590>)
 800aea4:	f1c4 040f 	rsb	r4, r4, #15
 800aea8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800aeac:	4642      	mov	r2, r8
 800aeae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb2:	464b      	mov	r3, r9
 800aeb4:	f7f5 fb1a 	bl	80004ec <__aeabi_dmul>
 800aeb8:	9b07      	ldr	r3, [sp, #28]
 800aeba:	1b1c      	subs	r4, r3, r4
 800aebc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800aec0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aec4:	e7e5      	b.n	800ae92 <_strtod_l+0x3ea>
 800aec6:	9b07      	ldr	r3, [sp, #28]
 800aec8:	3316      	adds	r3, #22
 800aeca:	db0b      	blt.n	800aee4 <_strtod_l+0x43c>
 800aecc:	9b04      	ldr	r3, [sp, #16]
 800aece:	4640      	mov	r0, r8
 800aed0:	1b5d      	subs	r5, r3, r5
 800aed2:	4b59      	ldr	r3, [pc, #356]	; (800b038 <_strtod_l+0x590>)
 800aed4:	4649      	mov	r1, r9
 800aed6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800aeda:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aede:	f7f5 fc2f 	bl	8000740 <__aeabi_ddiv>
 800aee2:	e79d      	b.n	800ae20 <_strtod_l+0x378>
 800aee4:	9b07      	ldr	r3, [sp, #28]
 800aee6:	1ba6      	subs	r6, r4, r6
 800aee8:	441e      	add	r6, r3
 800aeea:	2e00      	cmp	r6, #0
 800aeec:	dd74      	ble.n	800afd8 <_strtod_l+0x530>
 800aeee:	f016 030f 	ands.w	r3, r6, #15
 800aef2:	d00a      	beq.n	800af0a <_strtod_l+0x462>
 800aef4:	4950      	ldr	r1, [pc, #320]	; (800b038 <_strtod_l+0x590>)
 800aef6:	4642      	mov	r2, r8
 800aef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aefc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af00:	464b      	mov	r3, r9
 800af02:	f7f5 faf3 	bl	80004ec <__aeabi_dmul>
 800af06:	4680      	mov	r8, r0
 800af08:	4689      	mov	r9, r1
 800af0a:	f036 060f 	bics.w	r6, r6, #15
 800af0e:	d052      	beq.n	800afb6 <_strtod_l+0x50e>
 800af10:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800af14:	dd27      	ble.n	800af66 <_strtod_l+0x4be>
 800af16:	f04f 0b00 	mov.w	fp, #0
 800af1a:	f8cd b010 	str.w	fp, [sp, #16]
 800af1e:	f8cd b020 	str.w	fp, [sp, #32]
 800af22:	f8cd b018 	str.w	fp, [sp, #24]
 800af26:	2322      	movs	r3, #34	; 0x22
 800af28:	f04f 0800 	mov.w	r8, #0
 800af2c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800b030 <_strtod_l+0x588>
 800af30:	f8ca 3000 	str.w	r3, [sl]
 800af34:	9b08      	ldr	r3, [sp, #32]
 800af36:	2b00      	cmp	r3, #0
 800af38:	f43f adf7 	beq.w	800ab2a <_strtod_l+0x82>
 800af3c:	4650      	mov	r0, sl
 800af3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800af40:	f002 f820 	bl	800cf84 <_Bfree>
 800af44:	4650      	mov	r0, sl
 800af46:	9906      	ldr	r1, [sp, #24]
 800af48:	f002 f81c 	bl	800cf84 <_Bfree>
 800af4c:	4650      	mov	r0, sl
 800af4e:	9904      	ldr	r1, [sp, #16]
 800af50:	f002 f818 	bl	800cf84 <_Bfree>
 800af54:	4650      	mov	r0, sl
 800af56:	9908      	ldr	r1, [sp, #32]
 800af58:	f002 f814 	bl	800cf84 <_Bfree>
 800af5c:	4659      	mov	r1, fp
 800af5e:	4650      	mov	r0, sl
 800af60:	f002 f810 	bl	800cf84 <_Bfree>
 800af64:	e5e1      	b.n	800ab2a <_strtod_l+0x82>
 800af66:	4b35      	ldr	r3, [pc, #212]	; (800b03c <_strtod_l+0x594>)
 800af68:	4640      	mov	r0, r8
 800af6a:	9305      	str	r3, [sp, #20]
 800af6c:	2300      	movs	r3, #0
 800af6e:	4649      	mov	r1, r9
 800af70:	461f      	mov	r7, r3
 800af72:	1136      	asrs	r6, r6, #4
 800af74:	2e01      	cmp	r6, #1
 800af76:	dc21      	bgt.n	800afbc <_strtod_l+0x514>
 800af78:	b10b      	cbz	r3, 800af7e <_strtod_l+0x4d6>
 800af7a:	4680      	mov	r8, r0
 800af7c:	4689      	mov	r9, r1
 800af7e:	4b2f      	ldr	r3, [pc, #188]	; (800b03c <_strtod_l+0x594>)
 800af80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800af84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800af88:	4642      	mov	r2, r8
 800af8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af8e:	464b      	mov	r3, r9
 800af90:	f7f5 faac 	bl	80004ec <__aeabi_dmul>
 800af94:	4b26      	ldr	r3, [pc, #152]	; (800b030 <_strtod_l+0x588>)
 800af96:	460a      	mov	r2, r1
 800af98:	400b      	ands	r3, r1
 800af9a:	4929      	ldr	r1, [pc, #164]	; (800b040 <_strtod_l+0x598>)
 800af9c:	4680      	mov	r8, r0
 800af9e:	428b      	cmp	r3, r1
 800afa0:	d8b9      	bhi.n	800af16 <_strtod_l+0x46e>
 800afa2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800afa6:	428b      	cmp	r3, r1
 800afa8:	bf86      	itte	hi
 800afaa:	f04f 38ff 	movhi.w	r8, #4294967295
 800afae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b044 <_strtod_l+0x59c>
 800afb2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800afb6:	2300      	movs	r3, #0
 800afb8:	9305      	str	r3, [sp, #20]
 800afba:	e07f      	b.n	800b0bc <_strtod_l+0x614>
 800afbc:	07f2      	lsls	r2, r6, #31
 800afbe:	d505      	bpl.n	800afcc <_strtod_l+0x524>
 800afc0:	9b05      	ldr	r3, [sp, #20]
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 fa91 	bl	80004ec <__aeabi_dmul>
 800afca:	2301      	movs	r3, #1
 800afcc:	9a05      	ldr	r2, [sp, #20]
 800afce:	3701      	adds	r7, #1
 800afd0:	3208      	adds	r2, #8
 800afd2:	1076      	asrs	r6, r6, #1
 800afd4:	9205      	str	r2, [sp, #20]
 800afd6:	e7cd      	b.n	800af74 <_strtod_l+0x4cc>
 800afd8:	d0ed      	beq.n	800afb6 <_strtod_l+0x50e>
 800afda:	4276      	negs	r6, r6
 800afdc:	f016 020f 	ands.w	r2, r6, #15
 800afe0:	d00a      	beq.n	800aff8 <_strtod_l+0x550>
 800afe2:	4b15      	ldr	r3, [pc, #84]	; (800b038 <_strtod_l+0x590>)
 800afe4:	4640      	mov	r0, r8
 800afe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afea:	4649      	mov	r1, r9
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 fba6 	bl	8000740 <__aeabi_ddiv>
 800aff4:	4680      	mov	r8, r0
 800aff6:	4689      	mov	r9, r1
 800aff8:	1136      	asrs	r6, r6, #4
 800affa:	d0dc      	beq.n	800afb6 <_strtod_l+0x50e>
 800affc:	2e1f      	cmp	r6, #31
 800affe:	dd23      	ble.n	800b048 <_strtod_l+0x5a0>
 800b000:	f04f 0b00 	mov.w	fp, #0
 800b004:	f8cd b010 	str.w	fp, [sp, #16]
 800b008:	f8cd b020 	str.w	fp, [sp, #32]
 800b00c:	f8cd b018 	str.w	fp, [sp, #24]
 800b010:	2322      	movs	r3, #34	; 0x22
 800b012:	f04f 0800 	mov.w	r8, #0
 800b016:	f04f 0900 	mov.w	r9, #0
 800b01a:	f8ca 3000 	str.w	r3, [sl]
 800b01e:	e789      	b.n	800af34 <_strtod_l+0x48c>
 800b020:	0800e5b1 	.word	0x0800e5b1
 800b024:	0800e5f4 	.word	0x0800e5f4
 800b028:	0800e5a9 	.word	0x0800e5a9
 800b02c:	0800e7e4 	.word	0x0800e7e4
 800b030:	7ff00000 	.word	0x7ff00000
 800b034:	0800e6df 	.word	0x0800e6df
 800b038:	0800e958 	.word	0x0800e958
 800b03c:	0800e930 	.word	0x0800e930
 800b040:	7ca00000 	.word	0x7ca00000
 800b044:	7fefffff 	.word	0x7fefffff
 800b048:	f016 0310 	ands.w	r3, r6, #16
 800b04c:	bf18      	it	ne
 800b04e:	236a      	movne	r3, #106	; 0x6a
 800b050:	4640      	mov	r0, r8
 800b052:	9305      	str	r3, [sp, #20]
 800b054:	4649      	mov	r1, r9
 800b056:	2300      	movs	r3, #0
 800b058:	4fb0      	ldr	r7, [pc, #704]	; (800b31c <_strtod_l+0x874>)
 800b05a:	07f2      	lsls	r2, r6, #31
 800b05c:	d504      	bpl.n	800b068 <_strtod_l+0x5c0>
 800b05e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b062:	f7f5 fa43 	bl	80004ec <__aeabi_dmul>
 800b066:	2301      	movs	r3, #1
 800b068:	1076      	asrs	r6, r6, #1
 800b06a:	f107 0708 	add.w	r7, r7, #8
 800b06e:	d1f4      	bne.n	800b05a <_strtod_l+0x5b2>
 800b070:	b10b      	cbz	r3, 800b076 <_strtod_l+0x5ce>
 800b072:	4680      	mov	r8, r0
 800b074:	4689      	mov	r9, r1
 800b076:	9b05      	ldr	r3, [sp, #20]
 800b078:	b1c3      	cbz	r3, 800b0ac <_strtod_l+0x604>
 800b07a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b07e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b082:	2b00      	cmp	r3, #0
 800b084:	4649      	mov	r1, r9
 800b086:	dd11      	ble.n	800b0ac <_strtod_l+0x604>
 800b088:	2b1f      	cmp	r3, #31
 800b08a:	f340 8127 	ble.w	800b2dc <_strtod_l+0x834>
 800b08e:	2b34      	cmp	r3, #52	; 0x34
 800b090:	bfd8      	it	le
 800b092:	f04f 33ff 	movle.w	r3, #4294967295
 800b096:	f04f 0800 	mov.w	r8, #0
 800b09a:	bfcf      	iteee	gt
 800b09c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b0a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b0a4:	fa03 f202 	lslle.w	r2, r3, r2
 800b0a8:	ea02 0901 	andle.w	r9, r2, r1
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	f7f5 fc82 	bl	80009bc <__aeabi_dcmpeq>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d1a1      	bne.n	800b000 <_strtod_l+0x558>
 800b0bc:	9b06      	ldr	r3, [sp, #24]
 800b0be:	465a      	mov	r2, fp
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	4650      	mov	r0, sl
 800b0c4:	4623      	mov	r3, r4
 800b0c6:	9908      	ldr	r1, [sp, #32]
 800b0c8:	f001 ffc4 	bl	800d054 <__s2b>
 800b0cc:	9008      	str	r0, [sp, #32]
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f af21 	beq.w	800af16 <_strtod_l+0x46e>
 800b0d4:	9b04      	ldr	r3, [sp, #16]
 800b0d6:	f04f 0b00 	mov.w	fp, #0
 800b0da:	1b5d      	subs	r5, r3, r5
 800b0dc:	9b07      	ldr	r3, [sp, #28]
 800b0de:	f8cd b010 	str.w	fp, [sp, #16]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bfb4      	ite	lt
 800b0e6:	462b      	movlt	r3, r5
 800b0e8:	2300      	movge	r3, #0
 800b0ea:	930e      	str	r3, [sp, #56]	; 0x38
 800b0ec:	9b07      	ldr	r3, [sp, #28]
 800b0ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b0f2:	9314      	str	r3, [sp, #80]	; 0x50
 800b0f4:	9b08      	ldr	r3, [sp, #32]
 800b0f6:	4650      	mov	r0, sl
 800b0f8:	6859      	ldr	r1, [r3, #4]
 800b0fa:	f001 ff03 	bl	800cf04 <_Balloc>
 800b0fe:	9006      	str	r0, [sp, #24]
 800b100:	2800      	cmp	r0, #0
 800b102:	f43f af10 	beq.w	800af26 <_strtod_l+0x47e>
 800b106:	9b08      	ldr	r3, [sp, #32]
 800b108:	300c      	adds	r0, #12
 800b10a:	691a      	ldr	r2, [r3, #16]
 800b10c:	f103 010c 	add.w	r1, r3, #12
 800b110:	3202      	adds	r2, #2
 800b112:	0092      	lsls	r2, r2, #2
 800b114:	f7fe fca3 	bl	8009a5e <memcpy>
 800b118:	ab1c      	add	r3, sp, #112	; 0x70
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	ab1b      	add	r3, sp, #108	; 0x6c
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	4642      	mov	r2, r8
 800b122:	464b      	mov	r3, r9
 800b124:	4650      	mov	r0, sl
 800b126:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b12a:	f002 fad5 	bl	800d6d8 <__d2b>
 800b12e:	901a      	str	r0, [sp, #104]	; 0x68
 800b130:	2800      	cmp	r0, #0
 800b132:	f43f aef8 	beq.w	800af26 <_strtod_l+0x47e>
 800b136:	2101      	movs	r1, #1
 800b138:	4650      	mov	r0, sl
 800b13a:	f002 f823 	bl	800d184 <__i2b>
 800b13e:	4603      	mov	r3, r0
 800b140:	9004      	str	r0, [sp, #16]
 800b142:	2800      	cmp	r0, #0
 800b144:	f43f aeef 	beq.w	800af26 <_strtod_l+0x47e>
 800b148:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b14a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b14c:	2d00      	cmp	r5, #0
 800b14e:	bfab      	itete	ge
 800b150:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b152:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b154:	18ee      	addge	r6, r5, r3
 800b156:	1b5c      	sublt	r4, r3, r5
 800b158:	9b05      	ldr	r3, [sp, #20]
 800b15a:	bfa8      	it	ge
 800b15c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b15e:	eba5 0503 	sub.w	r5, r5, r3
 800b162:	4415      	add	r5, r2
 800b164:	4b6e      	ldr	r3, [pc, #440]	; (800b320 <_strtod_l+0x878>)
 800b166:	f105 35ff 	add.w	r5, r5, #4294967295
 800b16a:	bfb8      	it	lt
 800b16c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b16e:	429d      	cmp	r5, r3
 800b170:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b174:	f280 80c4 	bge.w	800b300 <_strtod_l+0x858>
 800b178:	1b5b      	subs	r3, r3, r5
 800b17a:	2b1f      	cmp	r3, #31
 800b17c:	f04f 0701 	mov.w	r7, #1
 800b180:	eba2 0203 	sub.w	r2, r2, r3
 800b184:	f300 80b1 	bgt.w	800b2ea <_strtod_l+0x842>
 800b188:	2500      	movs	r5, #0
 800b18a:	fa07 f303 	lsl.w	r3, r7, r3
 800b18e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b190:	18b7      	adds	r7, r6, r2
 800b192:	9b05      	ldr	r3, [sp, #20]
 800b194:	42be      	cmp	r6, r7
 800b196:	4414      	add	r4, r2
 800b198:	441c      	add	r4, r3
 800b19a:	4633      	mov	r3, r6
 800b19c:	bfa8      	it	ge
 800b19e:	463b      	movge	r3, r7
 800b1a0:	42a3      	cmp	r3, r4
 800b1a2:	bfa8      	it	ge
 800b1a4:	4623      	movge	r3, r4
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	bfc2      	ittt	gt
 800b1aa:	1aff      	subgt	r7, r7, r3
 800b1ac:	1ae4      	subgt	r4, r4, r3
 800b1ae:	1af6      	subgt	r6, r6, r3
 800b1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	dd17      	ble.n	800b1e6 <_strtod_l+0x73e>
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4650      	mov	r0, sl
 800b1ba:	9904      	ldr	r1, [sp, #16]
 800b1bc:	f002 f8a0 	bl	800d300 <__pow5mult>
 800b1c0:	9004      	str	r0, [sp, #16]
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f43f aeaf 	beq.w	800af26 <_strtod_l+0x47e>
 800b1c8:	4601      	mov	r1, r0
 800b1ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b1cc:	4650      	mov	r0, sl
 800b1ce:	f001 ffef 	bl	800d1b0 <__multiply>
 800b1d2:	9009      	str	r0, [sp, #36]	; 0x24
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	f43f aea6 	beq.w	800af26 <_strtod_l+0x47e>
 800b1da:	4650      	mov	r0, sl
 800b1dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b1de:	f001 fed1 	bl	800cf84 <_Bfree>
 800b1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1e6:	2f00      	cmp	r7, #0
 800b1e8:	f300 808e 	bgt.w	800b308 <_strtod_l+0x860>
 800b1ec:	9b07      	ldr	r3, [sp, #28]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	dd08      	ble.n	800b204 <_strtod_l+0x75c>
 800b1f2:	4650      	mov	r0, sl
 800b1f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1f6:	9906      	ldr	r1, [sp, #24]
 800b1f8:	f002 f882 	bl	800d300 <__pow5mult>
 800b1fc:	9006      	str	r0, [sp, #24]
 800b1fe:	2800      	cmp	r0, #0
 800b200:	f43f ae91 	beq.w	800af26 <_strtod_l+0x47e>
 800b204:	2c00      	cmp	r4, #0
 800b206:	dd08      	ble.n	800b21a <_strtod_l+0x772>
 800b208:	4622      	mov	r2, r4
 800b20a:	4650      	mov	r0, sl
 800b20c:	9906      	ldr	r1, [sp, #24]
 800b20e:	f002 f8d1 	bl	800d3b4 <__lshift>
 800b212:	9006      	str	r0, [sp, #24]
 800b214:	2800      	cmp	r0, #0
 800b216:	f43f ae86 	beq.w	800af26 <_strtod_l+0x47e>
 800b21a:	2e00      	cmp	r6, #0
 800b21c:	dd08      	ble.n	800b230 <_strtod_l+0x788>
 800b21e:	4632      	mov	r2, r6
 800b220:	4650      	mov	r0, sl
 800b222:	9904      	ldr	r1, [sp, #16]
 800b224:	f002 f8c6 	bl	800d3b4 <__lshift>
 800b228:	9004      	str	r0, [sp, #16]
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f43f ae7b 	beq.w	800af26 <_strtod_l+0x47e>
 800b230:	4650      	mov	r0, sl
 800b232:	9a06      	ldr	r2, [sp, #24]
 800b234:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b236:	f002 f949 	bl	800d4cc <__mdiff>
 800b23a:	4683      	mov	fp, r0
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f43f ae72 	beq.w	800af26 <_strtod_l+0x47e>
 800b242:	2400      	movs	r4, #0
 800b244:	68c3      	ldr	r3, [r0, #12]
 800b246:	9904      	ldr	r1, [sp, #16]
 800b248:	60c4      	str	r4, [r0, #12]
 800b24a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b24c:	f002 f922 	bl	800d494 <__mcmp>
 800b250:	42a0      	cmp	r0, r4
 800b252:	da6b      	bge.n	800b32c <_strtod_l+0x884>
 800b254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b256:	ea53 0308 	orrs.w	r3, r3, r8
 800b25a:	f040 8091 	bne.w	800b380 <_strtod_l+0x8d8>
 800b25e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b262:	2b00      	cmp	r3, #0
 800b264:	f040 808c 	bne.w	800b380 <_strtod_l+0x8d8>
 800b268:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b26c:	0d1b      	lsrs	r3, r3, #20
 800b26e:	051b      	lsls	r3, r3, #20
 800b270:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b274:	f240 8084 	bls.w	800b380 <_strtod_l+0x8d8>
 800b278:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b27c:	b91b      	cbnz	r3, 800b286 <_strtod_l+0x7de>
 800b27e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b282:	2b01      	cmp	r3, #1
 800b284:	dd7c      	ble.n	800b380 <_strtod_l+0x8d8>
 800b286:	4659      	mov	r1, fp
 800b288:	2201      	movs	r2, #1
 800b28a:	4650      	mov	r0, sl
 800b28c:	f002 f892 	bl	800d3b4 <__lshift>
 800b290:	9904      	ldr	r1, [sp, #16]
 800b292:	4683      	mov	fp, r0
 800b294:	f002 f8fe 	bl	800d494 <__mcmp>
 800b298:	2800      	cmp	r0, #0
 800b29a:	dd71      	ble.n	800b380 <_strtod_l+0x8d8>
 800b29c:	9905      	ldr	r1, [sp, #20]
 800b29e:	464b      	mov	r3, r9
 800b2a0:	4a20      	ldr	r2, [pc, #128]	; (800b324 <_strtod_l+0x87c>)
 800b2a2:	2900      	cmp	r1, #0
 800b2a4:	f000 808c 	beq.w	800b3c0 <_strtod_l+0x918>
 800b2a8:	ea02 0109 	and.w	r1, r2, r9
 800b2ac:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2b0:	f300 8086 	bgt.w	800b3c0 <_strtod_l+0x918>
 800b2b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2b8:	f77f aeaa 	ble.w	800b010 <_strtod_l+0x568>
 800b2bc:	4640      	mov	r0, r8
 800b2be:	4649      	mov	r1, r9
 800b2c0:	4b19      	ldr	r3, [pc, #100]	; (800b328 <_strtod_l+0x880>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f7f5 f912 	bl	80004ec <__aeabi_dmul>
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4303      	orrs	r3, r0
 800b2cc:	bf08      	it	eq
 800b2ce:	2322      	moveq	r3, #34	; 0x22
 800b2d0:	4680      	mov	r8, r0
 800b2d2:	4689      	mov	r9, r1
 800b2d4:	bf08      	it	eq
 800b2d6:	f8ca 3000 	streq.w	r3, [sl]
 800b2da:	e62f      	b.n	800af3c <_strtod_l+0x494>
 800b2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e4:	ea03 0808 	and.w	r8, r3, r8
 800b2e8:	e6e0      	b.n	800b0ac <_strtod_l+0x604>
 800b2ea:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b2ee:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b2f2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b2f6:	35e2      	adds	r5, #226	; 0xe2
 800b2f8:	fa07 f505 	lsl.w	r5, r7, r5
 800b2fc:	970f      	str	r7, [sp, #60]	; 0x3c
 800b2fe:	e747      	b.n	800b190 <_strtod_l+0x6e8>
 800b300:	2301      	movs	r3, #1
 800b302:	2500      	movs	r5, #0
 800b304:	930f      	str	r3, [sp, #60]	; 0x3c
 800b306:	e743      	b.n	800b190 <_strtod_l+0x6e8>
 800b308:	463a      	mov	r2, r7
 800b30a:	4650      	mov	r0, sl
 800b30c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b30e:	f002 f851 	bl	800d3b4 <__lshift>
 800b312:	901a      	str	r0, [sp, #104]	; 0x68
 800b314:	2800      	cmp	r0, #0
 800b316:	f47f af69 	bne.w	800b1ec <_strtod_l+0x744>
 800b31a:	e604      	b.n	800af26 <_strtod_l+0x47e>
 800b31c:	0800e608 	.word	0x0800e608
 800b320:	fffffc02 	.word	0xfffffc02
 800b324:	7ff00000 	.word	0x7ff00000
 800b328:	39500000 	.word	0x39500000
 800b32c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b330:	d165      	bne.n	800b3fe <_strtod_l+0x956>
 800b332:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b334:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b338:	b35a      	cbz	r2, 800b392 <_strtod_l+0x8ea>
 800b33a:	4a99      	ldr	r2, [pc, #612]	; (800b5a0 <_strtod_l+0xaf8>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d12b      	bne.n	800b398 <_strtod_l+0x8f0>
 800b340:	9b05      	ldr	r3, [sp, #20]
 800b342:	4641      	mov	r1, r8
 800b344:	b303      	cbz	r3, 800b388 <_strtod_l+0x8e0>
 800b346:	464a      	mov	r2, r9
 800b348:	4b96      	ldr	r3, [pc, #600]	; (800b5a4 <_strtod_l+0xafc>)
 800b34a:	4013      	ands	r3, r2
 800b34c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b350:	f04f 32ff 	mov.w	r2, #4294967295
 800b354:	d81b      	bhi.n	800b38e <_strtod_l+0x8e6>
 800b356:	0d1b      	lsrs	r3, r3, #20
 800b358:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b35c:	fa02 f303 	lsl.w	r3, r2, r3
 800b360:	4299      	cmp	r1, r3
 800b362:	d119      	bne.n	800b398 <_strtod_l+0x8f0>
 800b364:	4b90      	ldr	r3, [pc, #576]	; (800b5a8 <_strtod_l+0xb00>)
 800b366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b368:	429a      	cmp	r2, r3
 800b36a:	d102      	bne.n	800b372 <_strtod_l+0x8ca>
 800b36c:	3101      	adds	r1, #1
 800b36e:	f43f adda 	beq.w	800af26 <_strtod_l+0x47e>
 800b372:	f04f 0800 	mov.w	r8, #0
 800b376:	4b8b      	ldr	r3, [pc, #556]	; (800b5a4 <_strtod_l+0xafc>)
 800b378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b37a:	401a      	ands	r2, r3
 800b37c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b380:	9b05      	ldr	r3, [sp, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d19a      	bne.n	800b2bc <_strtod_l+0x814>
 800b386:	e5d9      	b.n	800af3c <_strtod_l+0x494>
 800b388:	f04f 33ff 	mov.w	r3, #4294967295
 800b38c:	e7e8      	b.n	800b360 <_strtod_l+0x8b8>
 800b38e:	4613      	mov	r3, r2
 800b390:	e7e6      	b.n	800b360 <_strtod_l+0x8b8>
 800b392:	ea53 0308 	orrs.w	r3, r3, r8
 800b396:	d081      	beq.n	800b29c <_strtod_l+0x7f4>
 800b398:	b1e5      	cbz	r5, 800b3d4 <_strtod_l+0x92c>
 800b39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b39c:	421d      	tst	r5, r3
 800b39e:	d0ef      	beq.n	800b380 <_strtod_l+0x8d8>
 800b3a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	9a05      	ldr	r2, [sp, #20]
 800b3a8:	b1c3      	cbz	r3, 800b3dc <_strtod_l+0x934>
 800b3aa:	f7ff fb5a 	bl	800aa62 <sulp>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3b6:	f7f4 fee3 	bl	8000180 <__adddf3>
 800b3ba:	4680      	mov	r8, r0
 800b3bc:	4689      	mov	r9, r1
 800b3be:	e7df      	b.n	800b380 <_strtod_l+0x8d8>
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3c6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b3ca:	f04f 38ff 	mov.w	r8, #4294967295
 800b3ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b3d2:	e7d5      	b.n	800b380 <_strtod_l+0x8d8>
 800b3d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3d6:	ea13 0f08 	tst.w	r3, r8
 800b3da:	e7e0      	b.n	800b39e <_strtod_l+0x8f6>
 800b3dc:	f7ff fb41 	bl	800aa62 <sulp>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3e8:	f7f4 fec8 	bl	800017c <__aeabi_dsub>
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	4680      	mov	r8, r0
 800b3f2:	4689      	mov	r9, r1
 800b3f4:	f7f5 fae2 	bl	80009bc <__aeabi_dcmpeq>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d0c1      	beq.n	800b380 <_strtod_l+0x8d8>
 800b3fc:	e608      	b.n	800b010 <_strtod_l+0x568>
 800b3fe:	4658      	mov	r0, fp
 800b400:	9904      	ldr	r1, [sp, #16]
 800b402:	f002 f9c5 	bl	800d790 <__ratio>
 800b406:	2200      	movs	r2, #0
 800b408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b40c:	4606      	mov	r6, r0
 800b40e:	460f      	mov	r7, r1
 800b410:	f7f5 fae8 	bl	80009e4 <__aeabi_dcmple>
 800b414:	2800      	cmp	r0, #0
 800b416:	d070      	beq.n	800b4fa <_strtod_l+0xa52>
 800b418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d042      	beq.n	800b4a4 <_strtod_l+0x9fc>
 800b41e:	2600      	movs	r6, #0
 800b420:	4f62      	ldr	r7, [pc, #392]	; (800b5ac <_strtod_l+0xb04>)
 800b422:	4d62      	ldr	r5, [pc, #392]	; (800b5ac <_strtod_l+0xb04>)
 800b424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b42a:	0d1b      	lsrs	r3, r3, #20
 800b42c:	051b      	lsls	r3, r3, #20
 800b42e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b432:	4b5f      	ldr	r3, [pc, #380]	; (800b5b0 <_strtod_l+0xb08>)
 800b434:	429a      	cmp	r2, r3
 800b436:	f040 80c3 	bne.w	800b5c0 <_strtod_l+0xb18>
 800b43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43c:	4640      	mov	r0, r8
 800b43e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b442:	4649      	mov	r1, r9
 800b444:	f002 f8ce 	bl	800d5e4 <__ulp>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4630      	mov	r0, r6
 800b44e:	4639      	mov	r1, r7
 800b450:	f7f5 f84c 	bl	80004ec <__aeabi_dmul>
 800b454:	4642      	mov	r2, r8
 800b456:	464b      	mov	r3, r9
 800b458:	f7f4 fe92 	bl	8000180 <__adddf3>
 800b45c:	460b      	mov	r3, r1
 800b45e:	4951      	ldr	r1, [pc, #324]	; (800b5a4 <_strtod_l+0xafc>)
 800b460:	4a54      	ldr	r2, [pc, #336]	; (800b5b4 <_strtod_l+0xb0c>)
 800b462:	4019      	ands	r1, r3
 800b464:	4291      	cmp	r1, r2
 800b466:	4680      	mov	r8, r0
 800b468:	d95d      	bls.n	800b526 <_strtod_l+0xa7e>
 800b46a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b46c:	4b4e      	ldr	r3, [pc, #312]	; (800b5a8 <_strtod_l+0xb00>)
 800b46e:	429a      	cmp	r2, r3
 800b470:	d103      	bne.n	800b47a <_strtod_l+0x9d2>
 800b472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b474:	3301      	adds	r3, #1
 800b476:	f43f ad56 	beq.w	800af26 <_strtod_l+0x47e>
 800b47a:	f04f 38ff 	mov.w	r8, #4294967295
 800b47e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b5a8 <_strtod_l+0xb00>
 800b482:	4650      	mov	r0, sl
 800b484:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b486:	f001 fd7d 	bl	800cf84 <_Bfree>
 800b48a:	4650      	mov	r0, sl
 800b48c:	9906      	ldr	r1, [sp, #24]
 800b48e:	f001 fd79 	bl	800cf84 <_Bfree>
 800b492:	4650      	mov	r0, sl
 800b494:	9904      	ldr	r1, [sp, #16]
 800b496:	f001 fd75 	bl	800cf84 <_Bfree>
 800b49a:	4659      	mov	r1, fp
 800b49c:	4650      	mov	r0, sl
 800b49e:	f001 fd71 	bl	800cf84 <_Bfree>
 800b4a2:	e627      	b.n	800b0f4 <_strtod_l+0x64c>
 800b4a4:	f1b8 0f00 	cmp.w	r8, #0
 800b4a8:	d119      	bne.n	800b4de <_strtod_l+0xa36>
 800b4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4b0:	b9e3      	cbnz	r3, 800b4ec <_strtod_l+0xa44>
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	4b3c      	ldr	r3, [pc, #240]	; (800b5ac <_strtod_l+0xb04>)
 800b4ba:	f7f5 fa89 	bl	80009d0 <__aeabi_dcmplt>
 800b4be:	b9c8      	cbnz	r0, 800b4f4 <_strtod_l+0xa4c>
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	4b3c      	ldr	r3, [pc, #240]	; (800b5b8 <_strtod_l+0xb10>)
 800b4c8:	f7f5 f810 	bl	80004ec <__aeabi_dmul>
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	460d      	mov	r5, r1
 800b4d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b4d4:	9416      	str	r4, [sp, #88]	; 0x58
 800b4d6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b4d8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b4dc:	e7a2      	b.n	800b424 <_strtod_l+0x97c>
 800b4de:	f1b8 0f01 	cmp.w	r8, #1
 800b4e2:	d103      	bne.n	800b4ec <_strtod_l+0xa44>
 800b4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f43f ad92 	beq.w	800b010 <_strtod_l+0x568>
 800b4ec:	2600      	movs	r6, #0
 800b4ee:	2400      	movs	r4, #0
 800b4f0:	4f32      	ldr	r7, [pc, #200]	; (800b5bc <_strtod_l+0xb14>)
 800b4f2:	e796      	b.n	800b422 <_strtod_l+0x97a>
 800b4f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b4f6:	4d30      	ldr	r5, [pc, #192]	; (800b5b8 <_strtod_l+0xb10>)
 800b4f8:	e7ea      	b.n	800b4d0 <_strtod_l+0xa28>
 800b4fa:	4b2f      	ldr	r3, [pc, #188]	; (800b5b8 <_strtod_l+0xb10>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	4630      	mov	r0, r6
 800b500:	4639      	mov	r1, r7
 800b502:	f7f4 fff3 	bl	80004ec <__aeabi_dmul>
 800b506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b508:	4604      	mov	r4, r0
 800b50a:	460d      	mov	r5, r1
 800b50c:	b933      	cbnz	r3, 800b51c <_strtod_l+0xa74>
 800b50e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b512:	9010      	str	r0, [sp, #64]	; 0x40
 800b514:	9311      	str	r3, [sp, #68]	; 0x44
 800b516:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b51a:	e783      	b.n	800b424 <_strtod_l+0x97c>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b524:	e7f7      	b.n	800b516 <_strtod_l+0xa6e>
 800b526:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b52a:	9b05      	ldr	r3, [sp, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1a8      	bne.n	800b482 <_strtod_l+0x9da>
 800b530:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b536:	0d1b      	lsrs	r3, r3, #20
 800b538:	051b      	lsls	r3, r3, #20
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d1a1      	bne.n	800b482 <_strtod_l+0x9da>
 800b53e:	4620      	mov	r0, r4
 800b540:	4629      	mov	r1, r5
 800b542:	f7f5 fc9f 	bl	8000e84 <__aeabi_d2lz>
 800b546:	f7f4 ffa3 	bl	8000490 <__aeabi_l2d>
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f4 fe13 	bl	800017c <__aeabi_dsub>
 800b556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b55c:	ea43 0308 	orr.w	r3, r3, r8
 800b560:	4313      	orrs	r3, r2
 800b562:	4604      	mov	r4, r0
 800b564:	460d      	mov	r5, r1
 800b566:	d066      	beq.n	800b636 <_strtod_l+0xb8e>
 800b568:	a309      	add	r3, pc, #36	; (adr r3, 800b590 <_strtod_l+0xae8>)
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	f7f5 fa2f 	bl	80009d0 <__aeabi_dcmplt>
 800b572:	2800      	cmp	r0, #0
 800b574:	f47f ace2 	bne.w	800af3c <_strtod_l+0x494>
 800b578:	a307      	add	r3, pc, #28	; (adr r3, 800b598 <_strtod_l+0xaf0>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	f7f5 fa43 	bl	8000a0c <__aeabi_dcmpgt>
 800b586:	2800      	cmp	r0, #0
 800b588:	f43f af7b 	beq.w	800b482 <_strtod_l+0x9da>
 800b58c:	e4d6      	b.n	800af3c <_strtod_l+0x494>
 800b58e:	bf00      	nop
 800b590:	94a03595 	.word	0x94a03595
 800b594:	3fdfffff 	.word	0x3fdfffff
 800b598:	35afe535 	.word	0x35afe535
 800b59c:	3fe00000 	.word	0x3fe00000
 800b5a0:	000fffff 	.word	0x000fffff
 800b5a4:	7ff00000 	.word	0x7ff00000
 800b5a8:	7fefffff 	.word	0x7fefffff
 800b5ac:	3ff00000 	.word	0x3ff00000
 800b5b0:	7fe00000 	.word	0x7fe00000
 800b5b4:	7c9fffff 	.word	0x7c9fffff
 800b5b8:	3fe00000 	.word	0x3fe00000
 800b5bc:	bff00000 	.word	0xbff00000
 800b5c0:	9b05      	ldr	r3, [sp, #20]
 800b5c2:	b313      	cbz	r3, 800b60a <_strtod_l+0xb62>
 800b5c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5ca:	d81e      	bhi.n	800b60a <_strtod_l+0xb62>
 800b5cc:	a326      	add	r3, pc, #152	; (adr r3, 800b668 <_strtod_l+0xbc0>)
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	f7f5 fa05 	bl	80009e4 <__aeabi_dcmple>
 800b5da:	b190      	cbz	r0, 800b602 <_strtod_l+0xb5a>
 800b5dc:	4629      	mov	r1, r5
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f7f5 fa5c 	bl	8000a9c <__aeabi_d2uiz>
 800b5e4:	2801      	cmp	r0, #1
 800b5e6:	bf38      	it	cc
 800b5e8:	2001      	movcc	r0, #1
 800b5ea:	f7f4 ff05 	bl	80003f8 <__aeabi_ui2d>
 800b5ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	b9d3      	cbnz	r3, 800b62c <_strtod_l+0xb84>
 800b5f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5fa:	9012      	str	r0, [sp, #72]	; 0x48
 800b5fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800b5fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b604:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b608:	1a9f      	subs	r7, r3, r2
 800b60a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b60e:	f001 ffe9 	bl	800d5e4 <__ulp>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4630      	mov	r0, r6
 800b618:	4639      	mov	r1, r7
 800b61a:	f7f4 ff67 	bl	80004ec <__aeabi_dmul>
 800b61e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b622:	f7f4 fdad 	bl	8000180 <__adddf3>
 800b626:	4680      	mov	r8, r0
 800b628:	4689      	mov	r9, r1
 800b62a:	e77e      	b.n	800b52a <_strtod_l+0xa82>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b634:	e7e3      	b.n	800b5fe <_strtod_l+0xb56>
 800b636:	a30e      	add	r3, pc, #56	; (adr r3, 800b670 <_strtod_l+0xbc8>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	f7f5 f9c8 	bl	80009d0 <__aeabi_dcmplt>
 800b640:	e7a1      	b.n	800b586 <_strtod_l+0xade>
 800b642:	2300      	movs	r3, #0
 800b644:	930a      	str	r3, [sp, #40]	; 0x28
 800b646:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b648:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	f7ff ba71 	b.w	800ab32 <_strtod_l+0x8a>
 800b650:	2a65      	cmp	r2, #101	; 0x65
 800b652:	f43f ab63 	beq.w	800ad1c <_strtod_l+0x274>
 800b656:	2a45      	cmp	r2, #69	; 0x45
 800b658:	f43f ab60 	beq.w	800ad1c <_strtod_l+0x274>
 800b65c:	2301      	movs	r3, #1
 800b65e:	f7ff bb95 	b.w	800ad8c <_strtod_l+0x2e4>
 800b662:	bf00      	nop
 800b664:	f3af 8000 	nop.w
 800b668:	ffc00000 	.word	0xffc00000
 800b66c:	41dfffff 	.word	0x41dfffff
 800b670:	94a03595 	.word	0x94a03595
 800b674:	3fcfffff 	.word	0x3fcfffff

0800b678 <_strtod_r>:
 800b678:	4b01      	ldr	r3, [pc, #4]	; (800b680 <_strtod_r+0x8>)
 800b67a:	f7ff ba15 	b.w	800aaa8 <_strtod_l>
 800b67e:	bf00      	nop
 800b680:	2000009c 	.word	0x2000009c

0800b684 <strtok>:
 800b684:	4b16      	ldr	r3, [pc, #88]	; (800b6e0 <strtok+0x5c>)
 800b686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68a:	681f      	ldr	r7, [r3, #0]
 800b68c:	4605      	mov	r5, r0
 800b68e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800b690:	460e      	mov	r6, r1
 800b692:	b9ec      	cbnz	r4, 800b6d0 <strtok+0x4c>
 800b694:	2050      	movs	r0, #80	; 0x50
 800b696:	f001 fc01 	bl	800ce9c <malloc>
 800b69a:	4602      	mov	r2, r0
 800b69c:	65b8      	str	r0, [r7, #88]	; 0x58
 800b69e:	b920      	cbnz	r0, 800b6aa <strtok+0x26>
 800b6a0:	2157      	movs	r1, #87	; 0x57
 800b6a2:	4b10      	ldr	r3, [pc, #64]	; (800b6e4 <strtok+0x60>)
 800b6a4:	4810      	ldr	r0, [pc, #64]	; (800b6e8 <strtok+0x64>)
 800b6a6:	f000 f903 	bl	800b8b0 <__assert_func>
 800b6aa:	e9c0 4400 	strd	r4, r4, [r0]
 800b6ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b6b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b6b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b6ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b6be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b6c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b6c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b6ca:	6184      	str	r4, [r0, #24]
 800b6cc:	7704      	strb	r4, [r0, #28]
 800b6ce:	6244      	str	r4, [r0, #36]	; 0x24
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6dc:	f000 b806 	b.w	800b6ec <__strtok_r>
 800b6e0:	20000034 	.word	0x20000034
 800b6e4:	0800e630 	.word	0x0800e630
 800b6e8:	0800e647 	.word	0x0800e647

0800b6ec <__strtok_r>:
 800b6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ee:	b908      	cbnz	r0, 800b6f4 <__strtok_r+0x8>
 800b6f0:	6810      	ldr	r0, [r2, #0]
 800b6f2:	b188      	cbz	r0, 800b718 <__strtok_r+0x2c>
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	460f      	mov	r7, r1
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b6fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b702:	b91e      	cbnz	r6, 800b70c <__strtok_r+0x20>
 800b704:	b965      	cbnz	r5, 800b720 <__strtok_r+0x34>
 800b706:	4628      	mov	r0, r5
 800b708:	6015      	str	r5, [r2, #0]
 800b70a:	e005      	b.n	800b718 <__strtok_r+0x2c>
 800b70c:	42b5      	cmp	r5, r6
 800b70e:	d1f6      	bne.n	800b6fe <__strtok_r+0x12>
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1f0      	bne.n	800b6f6 <__strtok_r+0xa>
 800b714:	6014      	str	r4, [r2, #0]
 800b716:	7003      	strb	r3, [r0, #0]
 800b718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b71a:	461c      	mov	r4, r3
 800b71c:	e00c      	b.n	800b738 <__strtok_r+0x4c>
 800b71e:	b915      	cbnz	r5, 800b726 <__strtok_r+0x3a>
 800b720:	460e      	mov	r6, r1
 800b722:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b726:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b72a:	42ab      	cmp	r3, r5
 800b72c:	d1f7      	bne.n	800b71e <__strtok_r+0x32>
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0f3      	beq.n	800b71a <__strtok_r+0x2e>
 800b732:	2300      	movs	r3, #0
 800b734:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b738:	6014      	str	r4, [r2, #0]
 800b73a:	e7ed      	b.n	800b718 <__strtok_r+0x2c>

0800b73c <_strtol_l.constprop.0>:
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b742:	4680      	mov	r8, r0
 800b744:	d001      	beq.n	800b74a <_strtol_l.constprop.0+0xe>
 800b746:	2b24      	cmp	r3, #36	; 0x24
 800b748:	d906      	bls.n	800b758 <_strtol_l.constprop.0+0x1c>
 800b74a:	f7fe f865 	bl	8009818 <__errno>
 800b74e:	2316      	movs	r3, #22
 800b750:	6003      	str	r3, [r0, #0]
 800b752:	2000      	movs	r0, #0
 800b754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b758:	460d      	mov	r5, r1
 800b75a:	4f35      	ldr	r7, [pc, #212]	; (800b830 <_strtol_l.constprop.0+0xf4>)
 800b75c:	4628      	mov	r0, r5
 800b75e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b762:	5de6      	ldrb	r6, [r4, r7]
 800b764:	f016 0608 	ands.w	r6, r6, #8
 800b768:	d1f8      	bne.n	800b75c <_strtol_l.constprop.0+0x20>
 800b76a:	2c2d      	cmp	r4, #45	; 0x2d
 800b76c:	d12f      	bne.n	800b7ce <_strtol_l.constprop.0+0x92>
 800b76e:	2601      	movs	r6, #1
 800b770:	782c      	ldrb	r4, [r5, #0]
 800b772:	1c85      	adds	r5, r0, #2
 800b774:	2b00      	cmp	r3, #0
 800b776:	d057      	beq.n	800b828 <_strtol_l.constprop.0+0xec>
 800b778:	2b10      	cmp	r3, #16
 800b77a:	d109      	bne.n	800b790 <_strtol_l.constprop.0+0x54>
 800b77c:	2c30      	cmp	r4, #48	; 0x30
 800b77e:	d107      	bne.n	800b790 <_strtol_l.constprop.0+0x54>
 800b780:	7828      	ldrb	r0, [r5, #0]
 800b782:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b786:	2858      	cmp	r0, #88	; 0x58
 800b788:	d149      	bne.n	800b81e <_strtol_l.constprop.0+0xe2>
 800b78a:	2310      	movs	r3, #16
 800b78c:	786c      	ldrb	r4, [r5, #1]
 800b78e:	3502      	adds	r5, #2
 800b790:	2700      	movs	r7, #0
 800b792:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b796:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b79a:	fbbe f9f3 	udiv	r9, lr, r3
 800b79e:	4638      	mov	r0, r7
 800b7a0:	fb03 ea19 	mls	sl, r3, r9, lr
 800b7a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b7a8:	f1bc 0f09 	cmp.w	ip, #9
 800b7ac:	d814      	bhi.n	800b7d8 <_strtol_l.constprop.0+0x9c>
 800b7ae:	4664      	mov	r4, ip
 800b7b0:	42a3      	cmp	r3, r4
 800b7b2:	dd22      	ble.n	800b7fa <_strtol_l.constprop.0+0xbe>
 800b7b4:	2f00      	cmp	r7, #0
 800b7b6:	db1d      	blt.n	800b7f4 <_strtol_l.constprop.0+0xb8>
 800b7b8:	4581      	cmp	r9, r0
 800b7ba:	d31b      	bcc.n	800b7f4 <_strtol_l.constprop.0+0xb8>
 800b7bc:	d101      	bne.n	800b7c2 <_strtol_l.constprop.0+0x86>
 800b7be:	45a2      	cmp	sl, r4
 800b7c0:	db18      	blt.n	800b7f4 <_strtol_l.constprop.0+0xb8>
 800b7c2:	2701      	movs	r7, #1
 800b7c4:	fb00 4003 	mla	r0, r0, r3, r4
 800b7c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7cc:	e7ea      	b.n	800b7a4 <_strtol_l.constprop.0+0x68>
 800b7ce:	2c2b      	cmp	r4, #43	; 0x2b
 800b7d0:	bf04      	itt	eq
 800b7d2:	782c      	ldrbeq	r4, [r5, #0]
 800b7d4:	1c85      	addeq	r5, r0, #2
 800b7d6:	e7cd      	b.n	800b774 <_strtol_l.constprop.0+0x38>
 800b7d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b7dc:	f1bc 0f19 	cmp.w	ip, #25
 800b7e0:	d801      	bhi.n	800b7e6 <_strtol_l.constprop.0+0xaa>
 800b7e2:	3c37      	subs	r4, #55	; 0x37
 800b7e4:	e7e4      	b.n	800b7b0 <_strtol_l.constprop.0+0x74>
 800b7e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b7ea:	f1bc 0f19 	cmp.w	ip, #25
 800b7ee:	d804      	bhi.n	800b7fa <_strtol_l.constprop.0+0xbe>
 800b7f0:	3c57      	subs	r4, #87	; 0x57
 800b7f2:	e7dd      	b.n	800b7b0 <_strtol_l.constprop.0+0x74>
 800b7f4:	f04f 37ff 	mov.w	r7, #4294967295
 800b7f8:	e7e6      	b.n	800b7c8 <_strtol_l.constprop.0+0x8c>
 800b7fa:	2f00      	cmp	r7, #0
 800b7fc:	da07      	bge.n	800b80e <_strtol_l.constprop.0+0xd2>
 800b7fe:	2322      	movs	r3, #34	; 0x22
 800b800:	4670      	mov	r0, lr
 800b802:	f8c8 3000 	str.w	r3, [r8]
 800b806:	2a00      	cmp	r2, #0
 800b808:	d0a4      	beq.n	800b754 <_strtol_l.constprop.0+0x18>
 800b80a:	1e69      	subs	r1, r5, #1
 800b80c:	e005      	b.n	800b81a <_strtol_l.constprop.0+0xde>
 800b80e:	b106      	cbz	r6, 800b812 <_strtol_l.constprop.0+0xd6>
 800b810:	4240      	negs	r0, r0
 800b812:	2a00      	cmp	r2, #0
 800b814:	d09e      	beq.n	800b754 <_strtol_l.constprop.0+0x18>
 800b816:	2f00      	cmp	r7, #0
 800b818:	d1f7      	bne.n	800b80a <_strtol_l.constprop.0+0xce>
 800b81a:	6011      	str	r1, [r2, #0]
 800b81c:	e79a      	b.n	800b754 <_strtol_l.constprop.0+0x18>
 800b81e:	2430      	movs	r4, #48	; 0x30
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1b5      	bne.n	800b790 <_strtol_l.constprop.0+0x54>
 800b824:	2308      	movs	r3, #8
 800b826:	e7b3      	b.n	800b790 <_strtol_l.constprop.0+0x54>
 800b828:	2c30      	cmp	r4, #48	; 0x30
 800b82a:	d0a9      	beq.n	800b780 <_strtol_l.constprop.0+0x44>
 800b82c:	230a      	movs	r3, #10
 800b82e:	e7af      	b.n	800b790 <_strtol_l.constprop.0+0x54>
 800b830:	0800e6e1 	.word	0x0800e6e1

0800b834 <_strtol_r>:
 800b834:	f7ff bf82 	b.w	800b73c <_strtol_l.constprop.0>

0800b838 <strtol>:
 800b838:	4613      	mov	r3, r2
 800b83a:	460a      	mov	r2, r1
 800b83c:	4601      	mov	r1, r0
 800b83e:	4802      	ldr	r0, [pc, #8]	; (800b848 <strtol+0x10>)
 800b840:	6800      	ldr	r0, [r0, #0]
 800b842:	f7ff bf7b 	b.w	800b73c <_strtol_l.constprop.0>
 800b846:	bf00      	nop
 800b848:	20000034 	.word	0x20000034

0800b84c <_vsiprintf_r>:
 800b84c:	b500      	push	{lr}
 800b84e:	b09b      	sub	sp, #108	; 0x6c
 800b850:	9100      	str	r1, [sp, #0]
 800b852:	9104      	str	r1, [sp, #16]
 800b854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b858:	9105      	str	r1, [sp, #20]
 800b85a:	9102      	str	r1, [sp, #8]
 800b85c:	4905      	ldr	r1, [pc, #20]	; (800b874 <_vsiprintf_r+0x28>)
 800b85e:	9103      	str	r1, [sp, #12]
 800b860:	4669      	mov	r1, sp
 800b862:	f002 f8bf 	bl	800d9e4 <_svfiprintf_r>
 800b866:	2200      	movs	r2, #0
 800b868:	9b00      	ldr	r3, [sp, #0]
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	b01b      	add	sp, #108	; 0x6c
 800b86e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b872:	bf00      	nop
 800b874:	ffff0208 	.word	0xffff0208

0800b878 <vsiprintf>:
 800b878:	4613      	mov	r3, r2
 800b87a:	460a      	mov	r2, r1
 800b87c:	4601      	mov	r1, r0
 800b87e:	4802      	ldr	r0, [pc, #8]	; (800b888 <vsiprintf+0x10>)
 800b880:	6800      	ldr	r0, [r0, #0]
 800b882:	f7ff bfe3 	b.w	800b84c <_vsiprintf_r>
 800b886:	bf00      	nop
 800b888:	20000034 	.word	0x20000034

0800b88c <_write_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	4611      	mov	r1, r2
 800b894:	2200      	movs	r2, #0
 800b896:	4d05      	ldr	r5, [pc, #20]	; (800b8ac <_write_r+0x20>)
 800b898:	602a      	str	r2, [r5, #0]
 800b89a:	461a      	mov	r2, r3
 800b89c:	f7f6 fb72 	bl	8001f84 <_write>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d102      	bne.n	800b8aa <_write_r+0x1e>
 800b8a4:	682b      	ldr	r3, [r5, #0]
 800b8a6:	b103      	cbz	r3, 800b8aa <_write_r+0x1e>
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	2000332c 	.word	0x2000332c

0800b8b0 <__assert_func>:
 800b8b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8b2:	4614      	mov	r4, r2
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	4b09      	ldr	r3, [pc, #36]	; (800b8dc <__assert_func+0x2c>)
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68d8      	ldr	r0, [r3, #12]
 800b8be:	b14c      	cbz	r4, 800b8d4 <__assert_func+0x24>
 800b8c0:	4b07      	ldr	r3, [pc, #28]	; (800b8e0 <__assert_func+0x30>)
 800b8c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8c6:	9100      	str	r1, [sp, #0]
 800b8c8:	462b      	mov	r3, r5
 800b8ca:	4906      	ldr	r1, [pc, #24]	; (800b8e4 <__assert_func+0x34>)
 800b8cc:	f000 ff58 	bl	800c780 <fiprintf>
 800b8d0:	f002 fbda 	bl	800e088 <abort>
 800b8d4:	4b04      	ldr	r3, [pc, #16]	; (800b8e8 <__assert_func+0x38>)
 800b8d6:	461c      	mov	r4, r3
 800b8d8:	e7f3      	b.n	800b8c2 <__assert_func+0x12>
 800b8da:	bf00      	nop
 800b8dc:	20000034 	.word	0x20000034
 800b8e0:	0800e6a4 	.word	0x0800e6a4
 800b8e4:	0800e6b1 	.word	0x0800e6b1
 800b8e8:	0800e6df 	.word	0x0800e6df

0800b8ec <_close_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	4d05      	ldr	r5, [pc, #20]	; (800b908 <_close_r+0x1c>)
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	4608      	mov	r0, r1
 800b8f6:	602b      	str	r3, [r5, #0]
 800b8f8:	f7f6 fb60 	bl	8001fbc <_close>
 800b8fc:	1c43      	adds	r3, r0, #1
 800b8fe:	d102      	bne.n	800b906 <_close_r+0x1a>
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	b103      	cbz	r3, 800b906 <_close_r+0x1a>
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	bd38      	pop	{r3, r4, r5, pc}
 800b908:	2000332c 	.word	0x2000332c

0800b90c <quorem>:
 800b90c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	6903      	ldr	r3, [r0, #16]
 800b912:	690c      	ldr	r4, [r1, #16]
 800b914:	4607      	mov	r7, r0
 800b916:	42a3      	cmp	r3, r4
 800b918:	f2c0 8082 	blt.w	800ba20 <quorem+0x114>
 800b91c:	3c01      	subs	r4, #1
 800b91e:	f100 0514 	add.w	r5, r0, #20
 800b922:	f101 0814 	add.w	r8, r1, #20
 800b926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b92a:	9301      	str	r3, [sp, #4]
 800b92c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b934:	3301      	adds	r3, #1
 800b936:	429a      	cmp	r2, r3
 800b938:	fbb2 f6f3 	udiv	r6, r2, r3
 800b93c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b940:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b944:	d331      	bcc.n	800b9aa <quorem+0x9e>
 800b946:	f04f 0e00 	mov.w	lr, #0
 800b94a:	4640      	mov	r0, r8
 800b94c:	46ac      	mov	ip, r5
 800b94e:	46f2      	mov	sl, lr
 800b950:	f850 2b04 	ldr.w	r2, [r0], #4
 800b954:	b293      	uxth	r3, r2
 800b956:	fb06 e303 	mla	r3, r6, r3, lr
 800b95a:	0c12      	lsrs	r2, r2, #16
 800b95c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b960:	b29b      	uxth	r3, r3
 800b962:	fb06 e202 	mla	r2, r6, r2, lr
 800b966:	ebaa 0303 	sub.w	r3, sl, r3
 800b96a:	f8dc a000 	ldr.w	sl, [ip]
 800b96e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b972:	fa1f fa8a 	uxth.w	sl, sl
 800b976:	4453      	add	r3, sl
 800b978:	f8dc a000 	ldr.w	sl, [ip]
 800b97c:	b292      	uxth	r2, r2
 800b97e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b982:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b986:	b29b      	uxth	r3, r3
 800b988:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b98c:	4581      	cmp	r9, r0
 800b98e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b992:	f84c 3b04 	str.w	r3, [ip], #4
 800b996:	d2db      	bcs.n	800b950 <quorem+0x44>
 800b998:	f855 300b 	ldr.w	r3, [r5, fp]
 800b99c:	b92b      	cbnz	r3, 800b9aa <quorem+0x9e>
 800b99e:	9b01      	ldr	r3, [sp, #4]
 800b9a0:	3b04      	subs	r3, #4
 800b9a2:	429d      	cmp	r5, r3
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	d32f      	bcc.n	800ba08 <quorem+0xfc>
 800b9a8:	613c      	str	r4, [r7, #16]
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	f001 fd72 	bl	800d494 <__mcmp>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	db25      	blt.n	800ba00 <quorem+0xf4>
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	f04f 0c00 	mov.w	ip, #0
 800b9ba:	3601      	adds	r6, #1
 800b9bc:	f858 1b04 	ldr.w	r1, [r8], #4
 800b9c0:	f8d0 e000 	ldr.w	lr, [r0]
 800b9c4:	b28b      	uxth	r3, r1
 800b9c6:	ebac 0303 	sub.w	r3, ip, r3
 800b9ca:	fa1f f28e 	uxth.w	r2, lr
 800b9ce:	4413      	add	r3, r2
 800b9d0:	0c0a      	lsrs	r2, r1, #16
 800b9d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b9d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9e0:	45c1      	cmp	r9, r8
 800b9e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b9e6:	f840 3b04 	str.w	r3, [r0], #4
 800b9ea:	d2e7      	bcs.n	800b9bc <quorem+0xb0>
 800b9ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9f4:	b922      	cbnz	r2, 800ba00 <quorem+0xf4>
 800b9f6:	3b04      	subs	r3, #4
 800b9f8:	429d      	cmp	r5, r3
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	d30a      	bcc.n	800ba14 <quorem+0x108>
 800b9fe:	613c      	str	r4, [r7, #16]
 800ba00:	4630      	mov	r0, r6
 800ba02:	b003      	add	sp, #12
 800ba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba08:	6812      	ldr	r2, [r2, #0]
 800ba0a:	3b04      	subs	r3, #4
 800ba0c:	2a00      	cmp	r2, #0
 800ba0e:	d1cb      	bne.n	800b9a8 <quorem+0x9c>
 800ba10:	3c01      	subs	r4, #1
 800ba12:	e7c6      	b.n	800b9a2 <quorem+0x96>
 800ba14:	6812      	ldr	r2, [r2, #0]
 800ba16:	3b04      	subs	r3, #4
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	d1f0      	bne.n	800b9fe <quorem+0xf2>
 800ba1c:	3c01      	subs	r4, #1
 800ba1e:	e7eb      	b.n	800b9f8 <quorem+0xec>
 800ba20:	2000      	movs	r0, #0
 800ba22:	e7ee      	b.n	800ba02 <quorem+0xf6>
 800ba24:	0000      	movs	r0, r0
	...

0800ba28 <_dtoa_r>:
 800ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2c:	4616      	mov	r6, r2
 800ba2e:	461f      	mov	r7, r3
 800ba30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ba32:	b099      	sub	sp, #100	; 0x64
 800ba34:	4605      	mov	r5, r0
 800ba36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ba3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ba3e:	b974      	cbnz	r4, 800ba5e <_dtoa_r+0x36>
 800ba40:	2010      	movs	r0, #16
 800ba42:	f001 fa2b 	bl	800ce9c <malloc>
 800ba46:	4602      	mov	r2, r0
 800ba48:	6268      	str	r0, [r5, #36]	; 0x24
 800ba4a:	b920      	cbnz	r0, 800ba56 <_dtoa_r+0x2e>
 800ba4c:	21ea      	movs	r1, #234	; 0xea
 800ba4e:	4ba8      	ldr	r3, [pc, #672]	; (800bcf0 <_dtoa_r+0x2c8>)
 800ba50:	48a8      	ldr	r0, [pc, #672]	; (800bcf4 <_dtoa_r+0x2cc>)
 800ba52:	f7ff ff2d 	bl	800b8b0 <__assert_func>
 800ba56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba5a:	6004      	str	r4, [r0, #0]
 800ba5c:	60c4      	str	r4, [r0, #12]
 800ba5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba60:	6819      	ldr	r1, [r3, #0]
 800ba62:	b151      	cbz	r1, 800ba7a <_dtoa_r+0x52>
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	2301      	movs	r3, #1
 800ba68:	4093      	lsls	r3, r2
 800ba6a:	604a      	str	r2, [r1, #4]
 800ba6c:	608b      	str	r3, [r1, #8]
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f001 fa88 	bl	800cf84 <_Bfree>
 800ba74:	2200      	movs	r2, #0
 800ba76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	1e3b      	subs	r3, r7, #0
 800ba7c:	bfaf      	iteee	ge
 800ba7e:	2300      	movge	r3, #0
 800ba80:	2201      	movlt	r2, #1
 800ba82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ba86:	9305      	strlt	r3, [sp, #20]
 800ba88:	bfa8      	it	ge
 800ba8a:	f8c8 3000 	strge.w	r3, [r8]
 800ba8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ba92:	4b99      	ldr	r3, [pc, #612]	; (800bcf8 <_dtoa_r+0x2d0>)
 800ba94:	bfb8      	it	lt
 800ba96:	f8c8 2000 	strlt.w	r2, [r8]
 800ba9a:	ea33 0309 	bics.w	r3, r3, r9
 800ba9e:	d119      	bne.n	800bad4 <_dtoa_r+0xac>
 800baa0:	f242 730f 	movw	r3, #9999	; 0x270f
 800baa4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800baa6:	6013      	str	r3, [r2, #0]
 800baa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baac:	4333      	orrs	r3, r6
 800baae:	f000 857f 	beq.w	800c5b0 <_dtoa_r+0xb88>
 800bab2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bab4:	b953      	cbnz	r3, 800bacc <_dtoa_r+0xa4>
 800bab6:	4b91      	ldr	r3, [pc, #580]	; (800bcfc <_dtoa_r+0x2d4>)
 800bab8:	e022      	b.n	800bb00 <_dtoa_r+0xd8>
 800baba:	4b91      	ldr	r3, [pc, #580]	; (800bd00 <_dtoa_r+0x2d8>)
 800babc:	9303      	str	r3, [sp, #12]
 800babe:	3308      	adds	r3, #8
 800bac0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	9803      	ldr	r0, [sp, #12]
 800bac6:	b019      	add	sp, #100	; 0x64
 800bac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bacc:	4b8b      	ldr	r3, [pc, #556]	; (800bcfc <_dtoa_r+0x2d4>)
 800bace:	9303      	str	r3, [sp, #12]
 800bad0:	3303      	adds	r3, #3
 800bad2:	e7f5      	b.n	800bac0 <_dtoa_r+0x98>
 800bad4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bad8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800badc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bae0:	2200      	movs	r2, #0
 800bae2:	2300      	movs	r3, #0
 800bae4:	f7f4 ff6a 	bl	80009bc <__aeabi_dcmpeq>
 800bae8:	4680      	mov	r8, r0
 800baea:	b158      	cbz	r0, 800bb04 <_dtoa_r+0xdc>
 800baec:	2301      	movs	r3, #1
 800baee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800baf0:	6013      	str	r3, [r2, #0]
 800baf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f000 8558 	beq.w	800c5aa <_dtoa_r+0xb82>
 800bafa:	4882      	ldr	r0, [pc, #520]	; (800bd04 <_dtoa_r+0x2dc>)
 800bafc:	6018      	str	r0, [r3, #0]
 800bafe:	1e43      	subs	r3, r0, #1
 800bb00:	9303      	str	r3, [sp, #12]
 800bb02:	e7df      	b.n	800bac4 <_dtoa_r+0x9c>
 800bb04:	ab16      	add	r3, sp, #88	; 0x58
 800bb06:	9301      	str	r3, [sp, #4]
 800bb08:	ab17      	add	r3, sp, #92	; 0x5c
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bb12:	f001 fde1 	bl	800d6d8 <__d2b>
 800bb16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bb1a:	4683      	mov	fp, r0
 800bb1c:	2c00      	cmp	r4, #0
 800bb1e:	d07f      	beq.n	800bc20 <_dtoa_r+0x1f8>
 800bb20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bb2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bb32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bb36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	4b72      	ldr	r3, [pc, #456]	; (800bd08 <_dtoa_r+0x2e0>)
 800bb3e:	f7f4 fb1d 	bl	800017c <__aeabi_dsub>
 800bb42:	a365      	add	r3, pc, #404	; (adr r3, 800bcd8 <_dtoa_r+0x2b0>)
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f7f4 fcd0 	bl	80004ec <__aeabi_dmul>
 800bb4c:	a364      	add	r3, pc, #400	; (adr r3, 800bce0 <_dtoa_r+0x2b8>)
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	f7f4 fb15 	bl	8000180 <__adddf3>
 800bb56:	4606      	mov	r6, r0
 800bb58:	4620      	mov	r0, r4
 800bb5a:	460f      	mov	r7, r1
 800bb5c:	f7f4 fc5c 	bl	8000418 <__aeabi_i2d>
 800bb60:	a361      	add	r3, pc, #388	; (adr r3, 800bce8 <_dtoa_r+0x2c0>)
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	f7f4 fcc1 	bl	80004ec <__aeabi_dmul>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7f4 fb05 	bl	8000180 <__adddf3>
 800bb76:	4606      	mov	r6, r0
 800bb78:	460f      	mov	r7, r1
 800bb7a:	f7f4 ff67 	bl	8000a4c <__aeabi_d2iz>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	4682      	mov	sl, r0
 800bb82:	2300      	movs	r3, #0
 800bb84:	4630      	mov	r0, r6
 800bb86:	4639      	mov	r1, r7
 800bb88:	f7f4 ff22 	bl	80009d0 <__aeabi_dcmplt>
 800bb8c:	b148      	cbz	r0, 800bba2 <_dtoa_r+0x17a>
 800bb8e:	4650      	mov	r0, sl
 800bb90:	f7f4 fc42 	bl	8000418 <__aeabi_i2d>
 800bb94:	4632      	mov	r2, r6
 800bb96:	463b      	mov	r3, r7
 800bb98:	f7f4 ff10 	bl	80009bc <__aeabi_dcmpeq>
 800bb9c:	b908      	cbnz	r0, 800bba2 <_dtoa_r+0x17a>
 800bb9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bba2:	f1ba 0f16 	cmp.w	sl, #22
 800bba6:	d858      	bhi.n	800bc5a <_dtoa_r+0x232>
 800bba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbac:	4b57      	ldr	r3, [pc, #348]	; (800bd0c <_dtoa_r+0x2e4>)
 800bbae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	f7f4 ff0b 	bl	80009d0 <__aeabi_dcmplt>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d04f      	beq.n	800bc5e <_dtoa_r+0x236>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bbc8:	1b1c      	subs	r4, r3, r4
 800bbca:	1e63      	subs	r3, r4, #1
 800bbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800bbce:	bf49      	itett	mi
 800bbd0:	f1c4 0301 	rsbmi	r3, r4, #1
 800bbd4:	2300      	movpl	r3, #0
 800bbd6:	9306      	strmi	r3, [sp, #24]
 800bbd8:	2300      	movmi	r3, #0
 800bbda:	bf54      	ite	pl
 800bbdc:	9306      	strpl	r3, [sp, #24]
 800bbde:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bbe0:	f1ba 0f00 	cmp.w	sl, #0
 800bbe4:	db3d      	blt.n	800bc62 <_dtoa_r+0x23a>
 800bbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bbec:	4453      	add	r3, sl
 800bbee:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	930a      	str	r3, [sp, #40]	; 0x28
 800bbf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbf6:	2b09      	cmp	r3, #9
 800bbf8:	f200 808c 	bhi.w	800bd14 <_dtoa_r+0x2ec>
 800bbfc:	2b05      	cmp	r3, #5
 800bbfe:	bfc4      	itt	gt
 800bc00:	3b04      	subgt	r3, #4
 800bc02:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bc04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc06:	bfc8      	it	gt
 800bc08:	2400      	movgt	r4, #0
 800bc0a:	f1a3 0302 	sub.w	r3, r3, #2
 800bc0e:	bfd8      	it	le
 800bc10:	2401      	movle	r4, #1
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	f200 808a 	bhi.w	800bd2c <_dtoa_r+0x304>
 800bc18:	e8df f003 	tbb	[pc, r3]
 800bc1c:	5b4d4f2d 	.word	0x5b4d4f2d
 800bc20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bc24:	441c      	add	r4, r3
 800bc26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bc2a:	2b20      	cmp	r3, #32
 800bc2c:	bfc3      	ittte	gt
 800bc2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800bc36:	fa09 f303 	lslgt.w	r3, r9, r3
 800bc3a:	f1c3 0320 	rsble	r3, r3, #32
 800bc3e:	bfc6      	itte	gt
 800bc40:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bc44:	4318      	orrgt	r0, r3
 800bc46:	fa06 f003 	lslle.w	r0, r6, r3
 800bc4a:	f7f4 fbd5 	bl	80003f8 <__aeabi_ui2d>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bc54:	3c01      	subs	r4, #1
 800bc56:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc58:	e76f      	b.n	800bb3a <_dtoa_r+0x112>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e7b2      	b.n	800bbc4 <_dtoa_r+0x19c>
 800bc5e:	900f      	str	r0, [sp, #60]	; 0x3c
 800bc60:	e7b1      	b.n	800bbc6 <_dtoa_r+0x19e>
 800bc62:	9b06      	ldr	r3, [sp, #24]
 800bc64:	eba3 030a 	sub.w	r3, r3, sl
 800bc68:	9306      	str	r3, [sp, #24]
 800bc6a:	f1ca 0300 	rsb	r3, sl, #0
 800bc6e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc70:	2300      	movs	r3, #0
 800bc72:	930e      	str	r3, [sp, #56]	; 0x38
 800bc74:	e7be      	b.n	800bbf4 <_dtoa_r+0x1cc>
 800bc76:	2300      	movs	r3, #0
 800bc78:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dc58      	bgt.n	800bd32 <_dtoa_r+0x30a>
 800bc80:	f04f 0901 	mov.w	r9, #1
 800bc84:	464b      	mov	r3, r9
 800bc86:	f8cd 9020 	str.w	r9, [sp, #32]
 800bc8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800bc8e:	2200      	movs	r2, #0
 800bc90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bc92:	6042      	str	r2, [r0, #4]
 800bc94:	2204      	movs	r2, #4
 800bc96:	f102 0614 	add.w	r6, r2, #20
 800bc9a:	429e      	cmp	r6, r3
 800bc9c:	6841      	ldr	r1, [r0, #4]
 800bc9e:	d94e      	bls.n	800bd3e <_dtoa_r+0x316>
 800bca0:	4628      	mov	r0, r5
 800bca2:	f001 f92f 	bl	800cf04 <_Balloc>
 800bca6:	9003      	str	r0, [sp, #12]
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d14c      	bne.n	800bd46 <_dtoa_r+0x31e>
 800bcac:	4602      	mov	r2, r0
 800bcae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bcb2:	4b17      	ldr	r3, [pc, #92]	; (800bd10 <_dtoa_r+0x2e8>)
 800bcb4:	e6cc      	b.n	800ba50 <_dtoa_r+0x28>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e7de      	b.n	800bc78 <_dtoa_r+0x250>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bcc0:	eb0a 0903 	add.w	r9, sl, r3
 800bcc4:	f109 0301 	add.w	r3, r9, #1
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	9308      	str	r3, [sp, #32]
 800bccc:	bfb8      	it	lt
 800bcce:	2301      	movlt	r3, #1
 800bcd0:	e7dd      	b.n	800bc8e <_dtoa_r+0x266>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e7f2      	b.n	800bcbc <_dtoa_r+0x294>
 800bcd6:	bf00      	nop
 800bcd8:	636f4361 	.word	0x636f4361
 800bcdc:	3fd287a7 	.word	0x3fd287a7
 800bce0:	8b60c8b3 	.word	0x8b60c8b3
 800bce4:	3fc68a28 	.word	0x3fc68a28
 800bce8:	509f79fb 	.word	0x509f79fb
 800bcec:	3fd34413 	.word	0x3fd34413
 800bcf0:	0800e630 	.word	0x0800e630
 800bcf4:	0800e7ee 	.word	0x0800e7ee
 800bcf8:	7ff00000 	.word	0x7ff00000
 800bcfc:	0800e7ea 	.word	0x0800e7ea
 800bd00:	0800e7e1 	.word	0x0800e7e1
 800bd04:	0800e5b5 	.word	0x0800e5b5
 800bd08:	3ff80000 	.word	0x3ff80000
 800bd0c:	0800e958 	.word	0x0800e958
 800bd10:	0800e849 	.word	0x0800e849
 800bd14:	2401      	movs	r4, #1
 800bd16:	2300      	movs	r3, #0
 800bd18:	940b      	str	r4, [sp, #44]	; 0x2c
 800bd1a:	9322      	str	r3, [sp, #136]	; 0x88
 800bd1c:	f04f 39ff 	mov.w	r9, #4294967295
 800bd20:	2200      	movs	r2, #0
 800bd22:	2312      	movs	r3, #18
 800bd24:	f8cd 9020 	str.w	r9, [sp, #32]
 800bd28:	9223      	str	r2, [sp, #140]	; 0x8c
 800bd2a:	e7b0      	b.n	800bc8e <_dtoa_r+0x266>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd30:	e7f4      	b.n	800bd1c <_dtoa_r+0x2f4>
 800bd32:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bd36:	464b      	mov	r3, r9
 800bd38:	f8cd 9020 	str.w	r9, [sp, #32]
 800bd3c:	e7a7      	b.n	800bc8e <_dtoa_r+0x266>
 800bd3e:	3101      	adds	r1, #1
 800bd40:	6041      	str	r1, [r0, #4]
 800bd42:	0052      	lsls	r2, r2, #1
 800bd44:	e7a7      	b.n	800bc96 <_dtoa_r+0x26e>
 800bd46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd48:	9a03      	ldr	r2, [sp, #12]
 800bd4a:	601a      	str	r2, [r3, #0]
 800bd4c:	9b08      	ldr	r3, [sp, #32]
 800bd4e:	2b0e      	cmp	r3, #14
 800bd50:	f200 80a8 	bhi.w	800bea4 <_dtoa_r+0x47c>
 800bd54:	2c00      	cmp	r4, #0
 800bd56:	f000 80a5 	beq.w	800bea4 <_dtoa_r+0x47c>
 800bd5a:	f1ba 0f00 	cmp.w	sl, #0
 800bd5e:	dd34      	ble.n	800bdca <_dtoa_r+0x3a2>
 800bd60:	4a9a      	ldr	r2, [pc, #616]	; (800bfcc <_dtoa_r+0x5a4>)
 800bd62:	f00a 030f 	and.w	r3, sl, #15
 800bd66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bd6a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bd6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bd76:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bd7a:	d016      	beq.n	800bdaa <_dtoa_r+0x382>
 800bd7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd80:	4b93      	ldr	r3, [pc, #588]	; (800bfd0 <_dtoa_r+0x5a8>)
 800bd82:	2703      	movs	r7, #3
 800bd84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd88:	f7f4 fcda 	bl	8000740 <__aeabi_ddiv>
 800bd8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd90:	f004 040f 	and.w	r4, r4, #15
 800bd94:	4e8e      	ldr	r6, [pc, #568]	; (800bfd0 <_dtoa_r+0x5a8>)
 800bd96:	b954      	cbnz	r4, 800bdae <_dtoa_r+0x386>
 800bd98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bda0:	f7f4 fcce 	bl	8000740 <__aeabi_ddiv>
 800bda4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bda8:	e029      	b.n	800bdfe <_dtoa_r+0x3d6>
 800bdaa:	2702      	movs	r7, #2
 800bdac:	e7f2      	b.n	800bd94 <_dtoa_r+0x36c>
 800bdae:	07e1      	lsls	r1, r4, #31
 800bdb0:	d508      	bpl.n	800bdc4 <_dtoa_r+0x39c>
 800bdb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdba:	f7f4 fb97 	bl	80004ec <__aeabi_dmul>
 800bdbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bdc2:	3701      	adds	r7, #1
 800bdc4:	1064      	asrs	r4, r4, #1
 800bdc6:	3608      	adds	r6, #8
 800bdc8:	e7e5      	b.n	800bd96 <_dtoa_r+0x36e>
 800bdca:	f000 80a5 	beq.w	800bf18 <_dtoa_r+0x4f0>
 800bdce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdd2:	f1ca 0400 	rsb	r4, sl, #0
 800bdd6:	4b7d      	ldr	r3, [pc, #500]	; (800bfcc <_dtoa_r+0x5a4>)
 800bdd8:	f004 020f 	and.w	r2, r4, #15
 800bddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	f7f4 fb82 	bl	80004ec <__aeabi_dmul>
 800bde8:	2702      	movs	r7, #2
 800bdea:	2300      	movs	r3, #0
 800bdec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdf0:	4e77      	ldr	r6, [pc, #476]	; (800bfd0 <_dtoa_r+0x5a8>)
 800bdf2:	1124      	asrs	r4, r4, #4
 800bdf4:	2c00      	cmp	r4, #0
 800bdf6:	f040 8084 	bne.w	800bf02 <_dtoa_r+0x4da>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1d2      	bne.n	800bda4 <_dtoa_r+0x37c>
 800bdfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 808b 	beq.w	800bf1c <_dtoa_r+0x4f4>
 800be06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800be0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800be0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be12:	2200      	movs	r2, #0
 800be14:	4b6f      	ldr	r3, [pc, #444]	; (800bfd4 <_dtoa_r+0x5ac>)
 800be16:	f7f4 fddb 	bl	80009d0 <__aeabi_dcmplt>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d07e      	beq.n	800bf1c <_dtoa_r+0x4f4>
 800be1e:	9b08      	ldr	r3, [sp, #32]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d07b      	beq.n	800bf1c <_dtoa_r+0x4f4>
 800be24:	f1b9 0f00 	cmp.w	r9, #0
 800be28:	dd38      	ble.n	800be9c <_dtoa_r+0x474>
 800be2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be2e:	2200      	movs	r2, #0
 800be30:	4b69      	ldr	r3, [pc, #420]	; (800bfd8 <_dtoa_r+0x5b0>)
 800be32:	f7f4 fb5b 	bl	80004ec <__aeabi_dmul>
 800be36:	464c      	mov	r4, r9
 800be38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be3c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800be40:	3701      	adds	r7, #1
 800be42:	4638      	mov	r0, r7
 800be44:	f7f4 fae8 	bl	8000418 <__aeabi_i2d>
 800be48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be4c:	f7f4 fb4e 	bl	80004ec <__aeabi_dmul>
 800be50:	2200      	movs	r2, #0
 800be52:	4b62      	ldr	r3, [pc, #392]	; (800bfdc <_dtoa_r+0x5b4>)
 800be54:	f7f4 f994 	bl	8000180 <__adddf3>
 800be58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800be5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be60:	9611      	str	r6, [sp, #68]	; 0x44
 800be62:	2c00      	cmp	r4, #0
 800be64:	d15d      	bne.n	800bf22 <_dtoa_r+0x4fa>
 800be66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be6a:	2200      	movs	r2, #0
 800be6c:	4b5c      	ldr	r3, [pc, #368]	; (800bfe0 <_dtoa_r+0x5b8>)
 800be6e:	f7f4 f985 	bl	800017c <__aeabi_dsub>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be7a:	4633      	mov	r3, r6
 800be7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800be7e:	f7f4 fdc5 	bl	8000a0c <__aeabi_dcmpgt>
 800be82:	2800      	cmp	r0, #0
 800be84:	f040 829c 	bne.w	800c3c0 <_dtoa_r+0x998>
 800be88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800be8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800be92:	f7f4 fd9d 	bl	80009d0 <__aeabi_dcmplt>
 800be96:	2800      	cmp	r0, #0
 800be98:	f040 8290 	bne.w	800c3bc <_dtoa_r+0x994>
 800be9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bea0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f2c0 8152 	blt.w	800c150 <_dtoa_r+0x728>
 800beac:	f1ba 0f0e 	cmp.w	sl, #14
 800beb0:	f300 814e 	bgt.w	800c150 <_dtoa_r+0x728>
 800beb4:	4b45      	ldr	r3, [pc, #276]	; (800bfcc <_dtoa_r+0x5a4>)
 800beb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800beba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bebe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f280 80db 	bge.w	800c080 <_dtoa_r+0x658>
 800beca:	9b08      	ldr	r3, [sp, #32]
 800becc:	2b00      	cmp	r3, #0
 800bece:	f300 80d7 	bgt.w	800c080 <_dtoa_r+0x658>
 800bed2:	f040 8272 	bne.w	800c3ba <_dtoa_r+0x992>
 800bed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800beda:	2200      	movs	r2, #0
 800bedc:	4b40      	ldr	r3, [pc, #256]	; (800bfe0 <_dtoa_r+0x5b8>)
 800bede:	f7f4 fb05 	bl	80004ec <__aeabi_dmul>
 800bee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bee6:	f7f4 fd87 	bl	80009f8 <__aeabi_dcmpge>
 800beea:	9c08      	ldr	r4, [sp, #32]
 800beec:	4626      	mov	r6, r4
 800beee:	2800      	cmp	r0, #0
 800bef0:	f040 8248 	bne.w	800c384 <_dtoa_r+0x95c>
 800bef4:	2331      	movs	r3, #49	; 0x31
 800bef6:	9f03      	ldr	r7, [sp, #12]
 800bef8:	f10a 0a01 	add.w	sl, sl, #1
 800befc:	f807 3b01 	strb.w	r3, [r7], #1
 800bf00:	e244      	b.n	800c38c <_dtoa_r+0x964>
 800bf02:	07e2      	lsls	r2, r4, #31
 800bf04:	d505      	bpl.n	800bf12 <_dtoa_r+0x4ea>
 800bf06:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf0a:	f7f4 faef 	bl	80004ec <__aeabi_dmul>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	3701      	adds	r7, #1
 800bf12:	1064      	asrs	r4, r4, #1
 800bf14:	3608      	adds	r6, #8
 800bf16:	e76d      	b.n	800bdf4 <_dtoa_r+0x3cc>
 800bf18:	2702      	movs	r7, #2
 800bf1a:	e770      	b.n	800bdfe <_dtoa_r+0x3d6>
 800bf1c:	46d0      	mov	r8, sl
 800bf1e:	9c08      	ldr	r4, [sp, #32]
 800bf20:	e78f      	b.n	800be42 <_dtoa_r+0x41a>
 800bf22:	9903      	ldr	r1, [sp, #12]
 800bf24:	4b29      	ldr	r3, [pc, #164]	; (800bfcc <_dtoa_r+0x5a4>)
 800bf26:	4421      	add	r1, r4
 800bf28:	9112      	str	r1, [sp, #72]	; 0x48
 800bf2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bf34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf38:	2900      	cmp	r1, #0
 800bf3a:	d055      	beq.n	800bfe8 <_dtoa_r+0x5c0>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	4929      	ldr	r1, [pc, #164]	; (800bfe4 <_dtoa_r+0x5bc>)
 800bf40:	f7f4 fbfe 	bl	8000740 <__aeabi_ddiv>
 800bf44:	463b      	mov	r3, r7
 800bf46:	4632      	mov	r2, r6
 800bf48:	f7f4 f918 	bl	800017c <__aeabi_dsub>
 800bf4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bf50:	9f03      	ldr	r7, [sp, #12]
 800bf52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf56:	f7f4 fd79 	bl	8000a4c <__aeabi_d2iz>
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	f7f4 fa5c 	bl	8000418 <__aeabi_i2d>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf68:	f7f4 f908 	bl	800017c <__aeabi_dsub>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	3430      	adds	r4, #48	; 0x30
 800bf72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bf7a:	f807 4b01 	strb.w	r4, [r7], #1
 800bf7e:	f7f4 fd27 	bl	80009d0 <__aeabi_dcmplt>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	d174      	bne.n	800c070 <_dtoa_r+0x648>
 800bf86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	4911      	ldr	r1, [pc, #68]	; (800bfd4 <_dtoa_r+0x5ac>)
 800bf8e:	f7f4 f8f5 	bl	800017c <__aeabi_dsub>
 800bf92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bf96:	f7f4 fd1b 	bl	80009d0 <__aeabi_dcmplt>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	f040 80b7 	bne.w	800c10e <_dtoa_r+0x6e6>
 800bfa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bfa2:	429f      	cmp	r7, r3
 800bfa4:	f43f af7a 	beq.w	800be9c <_dtoa_r+0x474>
 800bfa8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfac:	2200      	movs	r2, #0
 800bfae:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <_dtoa_r+0x5b0>)
 800bfb0:	f7f4 fa9c 	bl	80004ec <__aeabi_dmul>
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bfba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfbe:	4b06      	ldr	r3, [pc, #24]	; (800bfd8 <_dtoa_r+0x5b0>)
 800bfc0:	f7f4 fa94 	bl	80004ec <__aeabi_dmul>
 800bfc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfc8:	e7c3      	b.n	800bf52 <_dtoa_r+0x52a>
 800bfca:	bf00      	nop
 800bfcc:	0800e958 	.word	0x0800e958
 800bfd0:	0800e930 	.word	0x0800e930
 800bfd4:	3ff00000 	.word	0x3ff00000
 800bfd8:	40240000 	.word	0x40240000
 800bfdc:	401c0000 	.word	0x401c0000
 800bfe0:	40140000 	.word	0x40140000
 800bfe4:	3fe00000 	.word	0x3fe00000
 800bfe8:	4630      	mov	r0, r6
 800bfea:	4639      	mov	r1, r7
 800bfec:	f7f4 fa7e 	bl	80004ec <__aeabi_dmul>
 800bff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bff2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bff6:	9c03      	ldr	r4, [sp, #12]
 800bff8:	9314      	str	r3, [sp, #80]	; 0x50
 800bffa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bffe:	f7f4 fd25 	bl	8000a4c <__aeabi_d2iz>
 800c002:	9015      	str	r0, [sp, #84]	; 0x54
 800c004:	f7f4 fa08 	bl	8000418 <__aeabi_i2d>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c010:	f7f4 f8b4 	bl	800017c <__aeabi_dsub>
 800c014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c016:	4606      	mov	r6, r0
 800c018:	3330      	adds	r3, #48	; 0x30
 800c01a:	f804 3b01 	strb.w	r3, [r4], #1
 800c01e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c020:	460f      	mov	r7, r1
 800c022:	429c      	cmp	r4, r3
 800c024:	f04f 0200 	mov.w	r2, #0
 800c028:	d124      	bne.n	800c074 <_dtoa_r+0x64c>
 800c02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c02e:	4bb0      	ldr	r3, [pc, #704]	; (800c2f0 <_dtoa_r+0x8c8>)
 800c030:	f7f4 f8a6 	bl	8000180 <__adddf3>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4630      	mov	r0, r6
 800c03a:	4639      	mov	r1, r7
 800c03c:	f7f4 fce6 	bl	8000a0c <__aeabi_dcmpgt>
 800c040:	2800      	cmp	r0, #0
 800c042:	d163      	bne.n	800c10c <_dtoa_r+0x6e4>
 800c044:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c048:	2000      	movs	r0, #0
 800c04a:	49a9      	ldr	r1, [pc, #676]	; (800c2f0 <_dtoa_r+0x8c8>)
 800c04c:	f7f4 f896 	bl	800017c <__aeabi_dsub>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	4630      	mov	r0, r6
 800c056:	4639      	mov	r1, r7
 800c058:	f7f4 fcba 	bl	80009d0 <__aeabi_dcmplt>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	f43f af1d 	beq.w	800be9c <_dtoa_r+0x474>
 800c062:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c064:	1e7b      	subs	r3, r7, #1
 800c066:	9314      	str	r3, [sp, #80]	; 0x50
 800c068:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c06c:	2b30      	cmp	r3, #48	; 0x30
 800c06e:	d0f8      	beq.n	800c062 <_dtoa_r+0x63a>
 800c070:	46c2      	mov	sl, r8
 800c072:	e03b      	b.n	800c0ec <_dtoa_r+0x6c4>
 800c074:	4b9f      	ldr	r3, [pc, #636]	; (800c2f4 <_dtoa_r+0x8cc>)
 800c076:	f7f4 fa39 	bl	80004ec <__aeabi_dmul>
 800c07a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c07e:	e7bc      	b.n	800bffa <_dtoa_r+0x5d2>
 800c080:	9f03      	ldr	r7, [sp, #12]
 800c082:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c086:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c08a:	4640      	mov	r0, r8
 800c08c:	4649      	mov	r1, r9
 800c08e:	f7f4 fb57 	bl	8000740 <__aeabi_ddiv>
 800c092:	f7f4 fcdb 	bl	8000a4c <__aeabi_d2iz>
 800c096:	4604      	mov	r4, r0
 800c098:	f7f4 f9be 	bl	8000418 <__aeabi_i2d>
 800c09c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0a0:	f7f4 fa24 	bl	80004ec <__aeabi_dmul>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	f7f4 f866 	bl	800017c <__aeabi_dsub>
 800c0b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c0b4:	f807 6b01 	strb.w	r6, [r7], #1
 800c0b8:	9e03      	ldr	r6, [sp, #12]
 800c0ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c0be:	1bbe      	subs	r6, r7, r6
 800c0c0:	45b4      	cmp	ip, r6
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	d136      	bne.n	800c136 <_dtoa_r+0x70e>
 800c0c8:	f7f4 f85a 	bl	8000180 <__adddf3>
 800c0cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0d0:	4680      	mov	r8, r0
 800c0d2:	4689      	mov	r9, r1
 800c0d4:	f7f4 fc9a 	bl	8000a0c <__aeabi_dcmpgt>
 800c0d8:	bb58      	cbnz	r0, 800c132 <_dtoa_r+0x70a>
 800c0da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0de:	4640      	mov	r0, r8
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	f7f4 fc6b 	bl	80009bc <__aeabi_dcmpeq>
 800c0e6:	b108      	cbz	r0, 800c0ec <_dtoa_r+0x6c4>
 800c0e8:	07e1      	lsls	r1, r4, #31
 800c0ea:	d422      	bmi.n	800c132 <_dtoa_r+0x70a>
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	4659      	mov	r1, fp
 800c0f0:	f000 ff48 	bl	800cf84 <_Bfree>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	703b      	strb	r3, [r7, #0]
 800c0f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c0fa:	f10a 0001 	add.w	r0, sl, #1
 800c0fe:	6018      	str	r0, [r3, #0]
 800c100:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c102:	2b00      	cmp	r3, #0
 800c104:	f43f acde 	beq.w	800bac4 <_dtoa_r+0x9c>
 800c108:	601f      	str	r7, [r3, #0]
 800c10a:	e4db      	b.n	800bac4 <_dtoa_r+0x9c>
 800c10c:	4627      	mov	r7, r4
 800c10e:	463b      	mov	r3, r7
 800c110:	461f      	mov	r7, r3
 800c112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c116:	2a39      	cmp	r2, #57	; 0x39
 800c118:	d107      	bne.n	800c12a <_dtoa_r+0x702>
 800c11a:	9a03      	ldr	r2, [sp, #12]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d1f7      	bne.n	800c110 <_dtoa_r+0x6e8>
 800c120:	2230      	movs	r2, #48	; 0x30
 800c122:	9903      	ldr	r1, [sp, #12]
 800c124:	f108 0801 	add.w	r8, r8, #1
 800c128:	700a      	strb	r2, [r1, #0]
 800c12a:	781a      	ldrb	r2, [r3, #0]
 800c12c:	3201      	adds	r2, #1
 800c12e:	701a      	strb	r2, [r3, #0]
 800c130:	e79e      	b.n	800c070 <_dtoa_r+0x648>
 800c132:	46d0      	mov	r8, sl
 800c134:	e7eb      	b.n	800c10e <_dtoa_r+0x6e6>
 800c136:	2200      	movs	r2, #0
 800c138:	4b6e      	ldr	r3, [pc, #440]	; (800c2f4 <_dtoa_r+0x8cc>)
 800c13a:	f7f4 f9d7 	bl	80004ec <__aeabi_dmul>
 800c13e:	2200      	movs	r2, #0
 800c140:	2300      	movs	r3, #0
 800c142:	4680      	mov	r8, r0
 800c144:	4689      	mov	r9, r1
 800c146:	f7f4 fc39 	bl	80009bc <__aeabi_dcmpeq>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d09b      	beq.n	800c086 <_dtoa_r+0x65e>
 800c14e:	e7cd      	b.n	800c0ec <_dtoa_r+0x6c4>
 800c150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c152:	2a00      	cmp	r2, #0
 800c154:	f000 80d0 	beq.w	800c2f8 <_dtoa_r+0x8d0>
 800c158:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c15a:	2a01      	cmp	r2, #1
 800c15c:	f300 80ae 	bgt.w	800c2bc <_dtoa_r+0x894>
 800c160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c162:	2a00      	cmp	r2, #0
 800c164:	f000 80a6 	beq.w	800c2b4 <_dtoa_r+0x88c>
 800c168:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c16c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c16e:	9f06      	ldr	r7, [sp, #24]
 800c170:	9a06      	ldr	r2, [sp, #24]
 800c172:	2101      	movs	r1, #1
 800c174:	441a      	add	r2, r3
 800c176:	9206      	str	r2, [sp, #24]
 800c178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c17a:	4628      	mov	r0, r5
 800c17c:	441a      	add	r2, r3
 800c17e:	9209      	str	r2, [sp, #36]	; 0x24
 800c180:	f001 f800 	bl	800d184 <__i2b>
 800c184:	4606      	mov	r6, r0
 800c186:	2f00      	cmp	r7, #0
 800c188:	dd0c      	ble.n	800c1a4 <_dtoa_r+0x77c>
 800c18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	dd09      	ble.n	800c1a4 <_dtoa_r+0x77c>
 800c190:	42bb      	cmp	r3, r7
 800c192:	bfa8      	it	ge
 800c194:	463b      	movge	r3, r7
 800c196:	9a06      	ldr	r2, [sp, #24]
 800c198:	1aff      	subs	r7, r7, r3
 800c19a:	1ad2      	subs	r2, r2, r3
 800c19c:	9206      	str	r2, [sp, #24]
 800c19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1a6:	b1f3      	cbz	r3, 800c1e6 <_dtoa_r+0x7be>
 800c1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f000 80a8 	beq.w	800c300 <_dtoa_r+0x8d8>
 800c1b0:	2c00      	cmp	r4, #0
 800c1b2:	dd10      	ble.n	800c1d6 <_dtoa_r+0x7ae>
 800c1b4:	4631      	mov	r1, r6
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f001 f8a1 	bl	800d300 <__pow5mult>
 800c1be:	465a      	mov	r2, fp
 800c1c0:	4601      	mov	r1, r0
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f000 fff3 	bl	800d1b0 <__multiply>
 800c1ca:	4680      	mov	r8, r0
 800c1cc:	4659      	mov	r1, fp
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f000 fed8 	bl	800cf84 <_Bfree>
 800c1d4:	46c3      	mov	fp, r8
 800c1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1d8:	1b1a      	subs	r2, r3, r4
 800c1da:	d004      	beq.n	800c1e6 <_dtoa_r+0x7be>
 800c1dc:	4659      	mov	r1, fp
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f001 f88e 	bl	800d300 <__pow5mult>
 800c1e4:	4683      	mov	fp, r0
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	f000 ffcb 	bl	800d184 <__i2b>
 800c1ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f340 8086 	ble.w	800c304 <_dtoa_r+0x8dc>
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	f001 f87f 	bl	800d300 <__pow5mult>
 800c202:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c204:	4604      	mov	r4, r0
 800c206:	2b01      	cmp	r3, #1
 800c208:	dd7f      	ble.n	800c30a <_dtoa_r+0x8e2>
 800c20a:	f04f 0800 	mov.w	r8, #0
 800c20e:	6923      	ldr	r3, [r4, #16]
 800c210:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c214:	6918      	ldr	r0, [r3, #16]
 800c216:	f000 ff67 	bl	800d0e8 <__hi0bits>
 800c21a:	f1c0 0020 	rsb	r0, r0, #32
 800c21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c220:	4418      	add	r0, r3
 800c222:	f010 001f 	ands.w	r0, r0, #31
 800c226:	f000 8092 	beq.w	800c34e <_dtoa_r+0x926>
 800c22a:	f1c0 0320 	rsb	r3, r0, #32
 800c22e:	2b04      	cmp	r3, #4
 800c230:	f340 808a 	ble.w	800c348 <_dtoa_r+0x920>
 800c234:	f1c0 001c 	rsb	r0, r0, #28
 800c238:	9b06      	ldr	r3, [sp, #24]
 800c23a:	4407      	add	r7, r0
 800c23c:	4403      	add	r3, r0
 800c23e:	9306      	str	r3, [sp, #24]
 800c240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c242:	4403      	add	r3, r0
 800c244:	9309      	str	r3, [sp, #36]	; 0x24
 800c246:	9b06      	ldr	r3, [sp, #24]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	dd05      	ble.n	800c258 <_dtoa_r+0x830>
 800c24c:	4659      	mov	r1, fp
 800c24e:	461a      	mov	r2, r3
 800c250:	4628      	mov	r0, r5
 800c252:	f001 f8af 	bl	800d3b4 <__lshift>
 800c256:	4683      	mov	fp, r0
 800c258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	dd05      	ble.n	800c26a <_dtoa_r+0x842>
 800c25e:	4621      	mov	r1, r4
 800c260:	461a      	mov	r2, r3
 800c262:	4628      	mov	r0, r5
 800c264:	f001 f8a6 	bl	800d3b4 <__lshift>
 800c268:	4604      	mov	r4, r0
 800c26a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d070      	beq.n	800c352 <_dtoa_r+0x92a>
 800c270:	4621      	mov	r1, r4
 800c272:	4658      	mov	r0, fp
 800c274:	f001 f90e 	bl	800d494 <__mcmp>
 800c278:	2800      	cmp	r0, #0
 800c27a:	da6a      	bge.n	800c352 <_dtoa_r+0x92a>
 800c27c:	2300      	movs	r3, #0
 800c27e:	4659      	mov	r1, fp
 800c280:	220a      	movs	r2, #10
 800c282:	4628      	mov	r0, r5
 800c284:	f000 fea0 	bl	800cfc8 <__multadd>
 800c288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c28a:	4683      	mov	fp, r0
 800c28c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 8194 	beq.w	800c5be <_dtoa_r+0xb96>
 800c296:	4631      	mov	r1, r6
 800c298:	2300      	movs	r3, #0
 800c29a:	220a      	movs	r2, #10
 800c29c:	4628      	mov	r0, r5
 800c29e:	f000 fe93 	bl	800cfc8 <__multadd>
 800c2a2:	f1b9 0f00 	cmp.w	r9, #0
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	f300 8093 	bgt.w	800c3d2 <_dtoa_r+0x9aa>
 800c2ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	dc57      	bgt.n	800c362 <_dtoa_r+0x93a>
 800c2b2:	e08e      	b.n	800c3d2 <_dtoa_r+0x9aa>
 800c2b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c2b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c2ba:	e757      	b.n	800c16c <_dtoa_r+0x744>
 800c2bc:	9b08      	ldr	r3, [sp, #32]
 800c2be:	1e5c      	subs	r4, r3, #1
 800c2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c2:	42a3      	cmp	r3, r4
 800c2c4:	bfb7      	itett	lt
 800c2c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c2c8:	1b1c      	subge	r4, r3, r4
 800c2ca:	1ae2      	sublt	r2, r4, r3
 800c2cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c2ce:	bfbe      	ittt	lt
 800c2d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c2d2:	189b      	addlt	r3, r3, r2
 800c2d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c2d6:	9b08      	ldr	r3, [sp, #32]
 800c2d8:	bfb8      	it	lt
 800c2da:	2400      	movlt	r4, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bfbb      	ittet	lt
 800c2e0:	9b06      	ldrlt	r3, [sp, #24]
 800c2e2:	9a08      	ldrlt	r2, [sp, #32]
 800c2e4:	9f06      	ldrge	r7, [sp, #24]
 800c2e6:	1a9f      	sublt	r7, r3, r2
 800c2e8:	bfac      	ite	ge
 800c2ea:	9b08      	ldrge	r3, [sp, #32]
 800c2ec:	2300      	movlt	r3, #0
 800c2ee:	e73f      	b.n	800c170 <_dtoa_r+0x748>
 800c2f0:	3fe00000 	.word	0x3fe00000
 800c2f4:	40240000 	.word	0x40240000
 800c2f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c2fa:	9f06      	ldr	r7, [sp, #24]
 800c2fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c2fe:	e742      	b.n	800c186 <_dtoa_r+0x75e>
 800c300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c302:	e76b      	b.n	800c1dc <_dtoa_r+0x7b4>
 800c304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c306:	2b01      	cmp	r3, #1
 800c308:	dc19      	bgt.n	800c33e <_dtoa_r+0x916>
 800c30a:	9b04      	ldr	r3, [sp, #16]
 800c30c:	b9bb      	cbnz	r3, 800c33e <_dtoa_r+0x916>
 800c30e:	9b05      	ldr	r3, [sp, #20]
 800c310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c314:	b99b      	cbnz	r3, 800c33e <_dtoa_r+0x916>
 800c316:	9b05      	ldr	r3, [sp, #20]
 800c318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c31c:	0d1b      	lsrs	r3, r3, #20
 800c31e:	051b      	lsls	r3, r3, #20
 800c320:	b183      	cbz	r3, 800c344 <_dtoa_r+0x91c>
 800c322:	f04f 0801 	mov.w	r8, #1
 800c326:	9b06      	ldr	r3, [sp, #24]
 800c328:	3301      	adds	r3, #1
 800c32a:	9306      	str	r3, [sp, #24]
 800c32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c32e:	3301      	adds	r3, #1
 800c330:	9309      	str	r3, [sp, #36]	; 0x24
 800c332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c334:	2b00      	cmp	r3, #0
 800c336:	f47f af6a 	bne.w	800c20e <_dtoa_r+0x7e6>
 800c33a:	2001      	movs	r0, #1
 800c33c:	e76f      	b.n	800c21e <_dtoa_r+0x7f6>
 800c33e:	f04f 0800 	mov.w	r8, #0
 800c342:	e7f6      	b.n	800c332 <_dtoa_r+0x90a>
 800c344:	4698      	mov	r8, r3
 800c346:	e7f4      	b.n	800c332 <_dtoa_r+0x90a>
 800c348:	f43f af7d 	beq.w	800c246 <_dtoa_r+0x81e>
 800c34c:	4618      	mov	r0, r3
 800c34e:	301c      	adds	r0, #28
 800c350:	e772      	b.n	800c238 <_dtoa_r+0x810>
 800c352:	9b08      	ldr	r3, [sp, #32]
 800c354:	2b00      	cmp	r3, #0
 800c356:	dc36      	bgt.n	800c3c6 <_dtoa_r+0x99e>
 800c358:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	dd33      	ble.n	800c3c6 <_dtoa_r+0x99e>
 800c35e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c362:	f1b9 0f00 	cmp.w	r9, #0
 800c366:	d10d      	bne.n	800c384 <_dtoa_r+0x95c>
 800c368:	4621      	mov	r1, r4
 800c36a:	464b      	mov	r3, r9
 800c36c:	2205      	movs	r2, #5
 800c36e:	4628      	mov	r0, r5
 800c370:	f000 fe2a 	bl	800cfc8 <__multadd>
 800c374:	4601      	mov	r1, r0
 800c376:	4604      	mov	r4, r0
 800c378:	4658      	mov	r0, fp
 800c37a:	f001 f88b 	bl	800d494 <__mcmp>
 800c37e:	2800      	cmp	r0, #0
 800c380:	f73f adb8 	bgt.w	800bef4 <_dtoa_r+0x4cc>
 800c384:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c386:	9f03      	ldr	r7, [sp, #12]
 800c388:	ea6f 0a03 	mvn.w	sl, r3
 800c38c:	f04f 0800 	mov.w	r8, #0
 800c390:	4621      	mov	r1, r4
 800c392:	4628      	mov	r0, r5
 800c394:	f000 fdf6 	bl	800cf84 <_Bfree>
 800c398:	2e00      	cmp	r6, #0
 800c39a:	f43f aea7 	beq.w	800c0ec <_dtoa_r+0x6c4>
 800c39e:	f1b8 0f00 	cmp.w	r8, #0
 800c3a2:	d005      	beq.n	800c3b0 <_dtoa_r+0x988>
 800c3a4:	45b0      	cmp	r8, r6
 800c3a6:	d003      	beq.n	800c3b0 <_dtoa_r+0x988>
 800c3a8:	4641      	mov	r1, r8
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f000 fdea 	bl	800cf84 <_Bfree>
 800c3b0:	4631      	mov	r1, r6
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	f000 fde6 	bl	800cf84 <_Bfree>
 800c3b8:	e698      	b.n	800c0ec <_dtoa_r+0x6c4>
 800c3ba:	2400      	movs	r4, #0
 800c3bc:	4626      	mov	r6, r4
 800c3be:	e7e1      	b.n	800c384 <_dtoa_r+0x95c>
 800c3c0:	46c2      	mov	sl, r8
 800c3c2:	4626      	mov	r6, r4
 800c3c4:	e596      	b.n	800bef4 <_dtoa_r+0x4cc>
 800c3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 80fd 	beq.w	800c5cc <_dtoa_r+0xba4>
 800c3d2:	2f00      	cmp	r7, #0
 800c3d4:	dd05      	ble.n	800c3e2 <_dtoa_r+0x9ba>
 800c3d6:	4631      	mov	r1, r6
 800c3d8:	463a      	mov	r2, r7
 800c3da:	4628      	mov	r0, r5
 800c3dc:	f000 ffea 	bl	800d3b4 <__lshift>
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	f1b8 0f00 	cmp.w	r8, #0
 800c3e6:	d05c      	beq.n	800c4a2 <_dtoa_r+0xa7a>
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	6871      	ldr	r1, [r6, #4]
 800c3ec:	f000 fd8a 	bl	800cf04 <_Balloc>
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	b928      	cbnz	r0, 800c400 <_dtoa_r+0x9d8>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c3fa:	4b7f      	ldr	r3, [pc, #508]	; (800c5f8 <_dtoa_r+0xbd0>)
 800c3fc:	f7ff bb28 	b.w	800ba50 <_dtoa_r+0x28>
 800c400:	6932      	ldr	r2, [r6, #16]
 800c402:	f106 010c 	add.w	r1, r6, #12
 800c406:	3202      	adds	r2, #2
 800c408:	0092      	lsls	r2, r2, #2
 800c40a:	300c      	adds	r0, #12
 800c40c:	f7fd fb27 	bl	8009a5e <memcpy>
 800c410:	2201      	movs	r2, #1
 800c412:	4639      	mov	r1, r7
 800c414:	4628      	mov	r0, r5
 800c416:	f000 ffcd 	bl	800d3b4 <__lshift>
 800c41a:	46b0      	mov	r8, r6
 800c41c:	4606      	mov	r6, r0
 800c41e:	9b03      	ldr	r3, [sp, #12]
 800c420:	3301      	adds	r3, #1
 800c422:	9308      	str	r3, [sp, #32]
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	444b      	add	r3, r9
 800c428:	930a      	str	r3, [sp, #40]	; 0x28
 800c42a:	9b04      	ldr	r3, [sp, #16]
 800c42c:	f003 0301 	and.w	r3, r3, #1
 800c430:	9309      	str	r3, [sp, #36]	; 0x24
 800c432:	9b08      	ldr	r3, [sp, #32]
 800c434:	4621      	mov	r1, r4
 800c436:	3b01      	subs	r3, #1
 800c438:	4658      	mov	r0, fp
 800c43a:	9304      	str	r3, [sp, #16]
 800c43c:	f7ff fa66 	bl	800b90c <quorem>
 800c440:	4603      	mov	r3, r0
 800c442:	4641      	mov	r1, r8
 800c444:	3330      	adds	r3, #48	; 0x30
 800c446:	9006      	str	r0, [sp, #24]
 800c448:	4658      	mov	r0, fp
 800c44a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c44c:	f001 f822 	bl	800d494 <__mcmp>
 800c450:	4632      	mov	r2, r6
 800c452:	4681      	mov	r9, r0
 800c454:	4621      	mov	r1, r4
 800c456:	4628      	mov	r0, r5
 800c458:	f001 f838 	bl	800d4cc <__mdiff>
 800c45c:	68c2      	ldr	r2, [r0, #12]
 800c45e:	4607      	mov	r7, r0
 800c460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c462:	bb02      	cbnz	r2, 800c4a6 <_dtoa_r+0xa7e>
 800c464:	4601      	mov	r1, r0
 800c466:	4658      	mov	r0, fp
 800c468:	f001 f814 	bl	800d494 <__mcmp>
 800c46c:	4602      	mov	r2, r0
 800c46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c470:	4639      	mov	r1, r7
 800c472:	4628      	mov	r0, r5
 800c474:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c478:	f000 fd84 	bl	800cf84 <_Bfree>
 800c47c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c47e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c480:	9f08      	ldr	r7, [sp, #32]
 800c482:	ea43 0102 	orr.w	r1, r3, r2
 800c486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c488:	430b      	orrs	r3, r1
 800c48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c48c:	d10d      	bne.n	800c4aa <_dtoa_r+0xa82>
 800c48e:	2b39      	cmp	r3, #57	; 0x39
 800c490:	d029      	beq.n	800c4e6 <_dtoa_r+0xabe>
 800c492:	f1b9 0f00 	cmp.w	r9, #0
 800c496:	dd01      	ble.n	800c49c <_dtoa_r+0xa74>
 800c498:	9b06      	ldr	r3, [sp, #24]
 800c49a:	3331      	adds	r3, #49	; 0x31
 800c49c:	9a04      	ldr	r2, [sp, #16]
 800c49e:	7013      	strb	r3, [r2, #0]
 800c4a0:	e776      	b.n	800c390 <_dtoa_r+0x968>
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	e7b9      	b.n	800c41a <_dtoa_r+0x9f2>
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	e7e2      	b.n	800c470 <_dtoa_r+0xa48>
 800c4aa:	f1b9 0f00 	cmp.w	r9, #0
 800c4ae:	db06      	blt.n	800c4be <_dtoa_r+0xa96>
 800c4b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c4b2:	ea41 0909 	orr.w	r9, r1, r9
 800c4b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4b8:	ea59 0101 	orrs.w	r1, r9, r1
 800c4bc:	d120      	bne.n	800c500 <_dtoa_r+0xad8>
 800c4be:	2a00      	cmp	r2, #0
 800c4c0:	ddec      	ble.n	800c49c <_dtoa_r+0xa74>
 800c4c2:	4659      	mov	r1, fp
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	9308      	str	r3, [sp, #32]
 800c4ca:	f000 ff73 	bl	800d3b4 <__lshift>
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	4683      	mov	fp, r0
 800c4d2:	f000 ffdf 	bl	800d494 <__mcmp>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	9b08      	ldr	r3, [sp, #32]
 800c4da:	dc02      	bgt.n	800c4e2 <_dtoa_r+0xaba>
 800c4dc:	d1de      	bne.n	800c49c <_dtoa_r+0xa74>
 800c4de:	07da      	lsls	r2, r3, #31
 800c4e0:	d5dc      	bpl.n	800c49c <_dtoa_r+0xa74>
 800c4e2:	2b39      	cmp	r3, #57	; 0x39
 800c4e4:	d1d8      	bne.n	800c498 <_dtoa_r+0xa70>
 800c4e6:	2339      	movs	r3, #57	; 0x39
 800c4e8:	9a04      	ldr	r2, [sp, #16]
 800c4ea:	7013      	strb	r3, [r2, #0]
 800c4ec:	463b      	mov	r3, r7
 800c4ee:	461f      	mov	r7, r3
 800c4f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	2a39      	cmp	r2, #57	; 0x39
 800c4f8:	d050      	beq.n	800c59c <_dtoa_r+0xb74>
 800c4fa:	3201      	adds	r2, #1
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	e747      	b.n	800c390 <_dtoa_r+0x968>
 800c500:	2a00      	cmp	r2, #0
 800c502:	dd03      	ble.n	800c50c <_dtoa_r+0xae4>
 800c504:	2b39      	cmp	r3, #57	; 0x39
 800c506:	d0ee      	beq.n	800c4e6 <_dtoa_r+0xabe>
 800c508:	3301      	adds	r3, #1
 800c50a:	e7c7      	b.n	800c49c <_dtoa_r+0xa74>
 800c50c:	9a08      	ldr	r2, [sp, #32]
 800c50e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c510:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c514:	428a      	cmp	r2, r1
 800c516:	d02a      	beq.n	800c56e <_dtoa_r+0xb46>
 800c518:	4659      	mov	r1, fp
 800c51a:	2300      	movs	r3, #0
 800c51c:	220a      	movs	r2, #10
 800c51e:	4628      	mov	r0, r5
 800c520:	f000 fd52 	bl	800cfc8 <__multadd>
 800c524:	45b0      	cmp	r8, r6
 800c526:	4683      	mov	fp, r0
 800c528:	f04f 0300 	mov.w	r3, #0
 800c52c:	f04f 020a 	mov.w	r2, #10
 800c530:	4641      	mov	r1, r8
 800c532:	4628      	mov	r0, r5
 800c534:	d107      	bne.n	800c546 <_dtoa_r+0xb1e>
 800c536:	f000 fd47 	bl	800cfc8 <__multadd>
 800c53a:	4680      	mov	r8, r0
 800c53c:	4606      	mov	r6, r0
 800c53e:	9b08      	ldr	r3, [sp, #32]
 800c540:	3301      	adds	r3, #1
 800c542:	9308      	str	r3, [sp, #32]
 800c544:	e775      	b.n	800c432 <_dtoa_r+0xa0a>
 800c546:	f000 fd3f 	bl	800cfc8 <__multadd>
 800c54a:	4631      	mov	r1, r6
 800c54c:	4680      	mov	r8, r0
 800c54e:	2300      	movs	r3, #0
 800c550:	220a      	movs	r2, #10
 800c552:	4628      	mov	r0, r5
 800c554:	f000 fd38 	bl	800cfc8 <__multadd>
 800c558:	4606      	mov	r6, r0
 800c55a:	e7f0      	b.n	800c53e <_dtoa_r+0xb16>
 800c55c:	f1b9 0f00 	cmp.w	r9, #0
 800c560:	bfcc      	ite	gt
 800c562:	464f      	movgt	r7, r9
 800c564:	2701      	movle	r7, #1
 800c566:	f04f 0800 	mov.w	r8, #0
 800c56a:	9a03      	ldr	r2, [sp, #12]
 800c56c:	4417      	add	r7, r2
 800c56e:	4659      	mov	r1, fp
 800c570:	2201      	movs	r2, #1
 800c572:	4628      	mov	r0, r5
 800c574:	9308      	str	r3, [sp, #32]
 800c576:	f000 ff1d 	bl	800d3b4 <__lshift>
 800c57a:	4621      	mov	r1, r4
 800c57c:	4683      	mov	fp, r0
 800c57e:	f000 ff89 	bl	800d494 <__mcmp>
 800c582:	2800      	cmp	r0, #0
 800c584:	dcb2      	bgt.n	800c4ec <_dtoa_r+0xac4>
 800c586:	d102      	bne.n	800c58e <_dtoa_r+0xb66>
 800c588:	9b08      	ldr	r3, [sp, #32]
 800c58a:	07db      	lsls	r3, r3, #31
 800c58c:	d4ae      	bmi.n	800c4ec <_dtoa_r+0xac4>
 800c58e:	463b      	mov	r3, r7
 800c590:	461f      	mov	r7, r3
 800c592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c596:	2a30      	cmp	r2, #48	; 0x30
 800c598:	d0fa      	beq.n	800c590 <_dtoa_r+0xb68>
 800c59a:	e6f9      	b.n	800c390 <_dtoa_r+0x968>
 800c59c:	9a03      	ldr	r2, [sp, #12]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d1a5      	bne.n	800c4ee <_dtoa_r+0xac6>
 800c5a2:	2331      	movs	r3, #49	; 0x31
 800c5a4:	f10a 0a01 	add.w	sl, sl, #1
 800c5a8:	e779      	b.n	800c49e <_dtoa_r+0xa76>
 800c5aa:	4b14      	ldr	r3, [pc, #80]	; (800c5fc <_dtoa_r+0xbd4>)
 800c5ac:	f7ff baa8 	b.w	800bb00 <_dtoa_r+0xd8>
 800c5b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f47f aa81 	bne.w	800baba <_dtoa_r+0x92>
 800c5b8:	4b11      	ldr	r3, [pc, #68]	; (800c600 <_dtoa_r+0xbd8>)
 800c5ba:	f7ff baa1 	b.w	800bb00 <_dtoa_r+0xd8>
 800c5be:	f1b9 0f00 	cmp.w	r9, #0
 800c5c2:	dc03      	bgt.n	800c5cc <_dtoa_r+0xba4>
 800c5c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	f73f aecb 	bgt.w	800c362 <_dtoa_r+0x93a>
 800c5cc:	9f03      	ldr	r7, [sp, #12]
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	4658      	mov	r0, fp
 800c5d2:	f7ff f99b 	bl	800b90c <quorem>
 800c5d6:	9a03      	ldr	r2, [sp, #12]
 800c5d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c5dc:	f807 3b01 	strb.w	r3, [r7], #1
 800c5e0:	1aba      	subs	r2, r7, r2
 800c5e2:	4591      	cmp	r9, r2
 800c5e4:	ddba      	ble.n	800c55c <_dtoa_r+0xb34>
 800c5e6:	4659      	mov	r1, fp
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	220a      	movs	r2, #10
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	f000 fceb 	bl	800cfc8 <__multadd>
 800c5f2:	4683      	mov	fp, r0
 800c5f4:	e7eb      	b.n	800c5ce <_dtoa_r+0xba6>
 800c5f6:	bf00      	nop
 800c5f8:	0800e849 	.word	0x0800e849
 800c5fc:	0800e5b4 	.word	0x0800e5b4
 800c600:	0800e7e1 	.word	0x0800e7e1

0800c604 <__sflush_r>:
 800c604:	898a      	ldrh	r2, [r1, #12]
 800c606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c608:	4605      	mov	r5, r0
 800c60a:	0710      	lsls	r0, r2, #28
 800c60c:	460c      	mov	r4, r1
 800c60e:	d457      	bmi.n	800c6c0 <__sflush_r+0xbc>
 800c610:	684b      	ldr	r3, [r1, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	dc04      	bgt.n	800c620 <__sflush_r+0x1c>
 800c616:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dc01      	bgt.n	800c620 <__sflush_r+0x1c>
 800c61c:	2000      	movs	r0, #0
 800c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c622:	2e00      	cmp	r6, #0
 800c624:	d0fa      	beq.n	800c61c <__sflush_r+0x18>
 800c626:	2300      	movs	r3, #0
 800c628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c62c:	682f      	ldr	r7, [r5, #0]
 800c62e:	602b      	str	r3, [r5, #0]
 800c630:	d032      	beq.n	800c698 <__sflush_r+0x94>
 800c632:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c634:	89a3      	ldrh	r3, [r4, #12]
 800c636:	075a      	lsls	r2, r3, #29
 800c638:	d505      	bpl.n	800c646 <__sflush_r+0x42>
 800c63a:	6863      	ldr	r3, [r4, #4]
 800c63c:	1ac0      	subs	r0, r0, r3
 800c63e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c640:	b10b      	cbz	r3, 800c646 <__sflush_r+0x42>
 800c642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c644:	1ac0      	subs	r0, r0, r3
 800c646:	2300      	movs	r3, #0
 800c648:	4602      	mov	r2, r0
 800c64a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c64c:	4628      	mov	r0, r5
 800c64e:	6a21      	ldr	r1, [r4, #32]
 800c650:	47b0      	blx	r6
 800c652:	1c43      	adds	r3, r0, #1
 800c654:	89a3      	ldrh	r3, [r4, #12]
 800c656:	d106      	bne.n	800c666 <__sflush_r+0x62>
 800c658:	6829      	ldr	r1, [r5, #0]
 800c65a:	291d      	cmp	r1, #29
 800c65c:	d82c      	bhi.n	800c6b8 <__sflush_r+0xb4>
 800c65e:	4a29      	ldr	r2, [pc, #164]	; (800c704 <__sflush_r+0x100>)
 800c660:	40ca      	lsrs	r2, r1
 800c662:	07d6      	lsls	r6, r2, #31
 800c664:	d528      	bpl.n	800c6b8 <__sflush_r+0xb4>
 800c666:	2200      	movs	r2, #0
 800c668:	6062      	str	r2, [r4, #4]
 800c66a:	6922      	ldr	r2, [r4, #16]
 800c66c:	04d9      	lsls	r1, r3, #19
 800c66e:	6022      	str	r2, [r4, #0]
 800c670:	d504      	bpl.n	800c67c <__sflush_r+0x78>
 800c672:	1c42      	adds	r2, r0, #1
 800c674:	d101      	bne.n	800c67a <__sflush_r+0x76>
 800c676:	682b      	ldr	r3, [r5, #0]
 800c678:	b903      	cbnz	r3, 800c67c <__sflush_r+0x78>
 800c67a:	6560      	str	r0, [r4, #84]	; 0x54
 800c67c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c67e:	602f      	str	r7, [r5, #0]
 800c680:	2900      	cmp	r1, #0
 800c682:	d0cb      	beq.n	800c61c <__sflush_r+0x18>
 800c684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c688:	4299      	cmp	r1, r3
 800c68a:	d002      	beq.n	800c692 <__sflush_r+0x8e>
 800c68c:	4628      	mov	r0, r5
 800c68e:	f001 f905 	bl	800d89c <_free_r>
 800c692:	2000      	movs	r0, #0
 800c694:	6360      	str	r0, [r4, #52]	; 0x34
 800c696:	e7c2      	b.n	800c61e <__sflush_r+0x1a>
 800c698:	6a21      	ldr	r1, [r4, #32]
 800c69a:	2301      	movs	r3, #1
 800c69c:	4628      	mov	r0, r5
 800c69e:	47b0      	blx	r6
 800c6a0:	1c41      	adds	r1, r0, #1
 800c6a2:	d1c7      	bne.n	800c634 <__sflush_r+0x30>
 800c6a4:	682b      	ldr	r3, [r5, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0c4      	beq.n	800c634 <__sflush_r+0x30>
 800c6aa:	2b1d      	cmp	r3, #29
 800c6ac:	d001      	beq.n	800c6b2 <__sflush_r+0xae>
 800c6ae:	2b16      	cmp	r3, #22
 800c6b0:	d101      	bne.n	800c6b6 <__sflush_r+0xb2>
 800c6b2:	602f      	str	r7, [r5, #0]
 800c6b4:	e7b2      	b.n	800c61c <__sflush_r+0x18>
 800c6b6:	89a3      	ldrh	r3, [r4, #12]
 800c6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6bc:	81a3      	strh	r3, [r4, #12]
 800c6be:	e7ae      	b.n	800c61e <__sflush_r+0x1a>
 800c6c0:	690f      	ldr	r7, [r1, #16]
 800c6c2:	2f00      	cmp	r7, #0
 800c6c4:	d0aa      	beq.n	800c61c <__sflush_r+0x18>
 800c6c6:	0793      	lsls	r3, r2, #30
 800c6c8:	bf18      	it	ne
 800c6ca:	2300      	movne	r3, #0
 800c6cc:	680e      	ldr	r6, [r1, #0]
 800c6ce:	bf08      	it	eq
 800c6d0:	694b      	ldreq	r3, [r1, #20]
 800c6d2:	1bf6      	subs	r6, r6, r7
 800c6d4:	600f      	str	r7, [r1, #0]
 800c6d6:	608b      	str	r3, [r1, #8]
 800c6d8:	2e00      	cmp	r6, #0
 800c6da:	dd9f      	ble.n	800c61c <__sflush_r+0x18>
 800c6dc:	4633      	mov	r3, r6
 800c6de:	463a      	mov	r2, r7
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	6a21      	ldr	r1, [r4, #32]
 800c6e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c6e8:	47e0      	blx	ip
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	dc06      	bgt.n	800c6fc <__sflush_r+0xf8>
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6f8:	81a3      	strh	r3, [r4, #12]
 800c6fa:	e790      	b.n	800c61e <__sflush_r+0x1a>
 800c6fc:	4407      	add	r7, r0
 800c6fe:	1a36      	subs	r6, r6, r0
 800c700:	e7ea      	b.n	800c6d8 <__sflush_r+0xd4>
 800c702:	bf00      	nop
 800c704:	20400001 	.word	0x20400001

0800c708 <_fflush_r>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	690b      	ldr	r3, [r1, #16]
 800c70c:	4605      	mov	r5, r0
 800c70e:	460c      	mov	r4, r1
 800c710:	b913      	cbnz	r3, 800c718 <_fflush_r+0x10>
 800c712:	2500      	movs	r5, #0
 800c714:	4628      	mov	r0, r5
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	b118      	cbz	r0, 800c722 <_fflush_r+0x1a>
 800c71a:	6983      	ldr	r3, [r0, #24]
 800c71c:	b90b      	cbnz	r3, 800c722 <_fflush_r+0x1a>
 800c71e:	f7fd f8d9 	bl	80098d4 <__sinit>
 800c722:	4b14      	ldr	r3, [pc, #80]	; (800c774 <_fflush_r+0x6c>)
 800c724:	429c      	cmp	r4, r3
 800c726:	d11b      	bne.n	800c760 <_fflush_r+0x58>
 800c728:	686c      	ldr	r4, [r5, #4]
 800c72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d0ef      	beq.n	800c712 <_fflush_r+0xa>
 800c732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c734:	07d0      	lsls	r0, r2, #31
 800c736:	d404      	bmi.n	800c742 <_fflush_r+0x3a>
 800c738:	0599      	lsls	r1, r3, #22
 800c73a:	d402      	bmi.n	800c742 <_fflush_r+0x3a>
 800c73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c73e:	f7fd f98c 	bl	8009a5a <__retarget_lock_acquire_recursive>
 800c742:	4628      	mov	r0, r5
 800c744:	4621      	mov	r1, r4
 800c746:	f7ff ff5d 	bl	800c604 <__sflush_r>
 800c74a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c74c:	4605      	mov	r5, r0
 800c74e:	07da      	lsls	r2, r3, #31
 800c750:	d4e0      	bmi.n	800c714 <_fflush_r+0xc>
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	059b      	lsls	r3, r3, #22
 800c756:	d4dd      	bmi.n	800c714 <_fflush_r+0xc>
 800c758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c75a:	f7fd f97f 	bl	8009a5c <__retarget_lock_release_recursive>
 800c75e:	e7d9      	b.n	800c714 <_fflush_r+0xc>
 800c760:	4b05      	ldr	r3, [pc, #20]	; (800c778 <_fflush_r+0x70>)
 800c762:	429c      	cmp	r4, r3
 800c764:	d101      	bne.n	800c76a <_fflush_r+0x62>
 800c766:	68ac      	ldr	r4, [r5, #8]
 800c768:	e7df      	b.n	800c72a <_fflush_r+0x22>
 800c76a:	4b04      	ldr	r3, [pc, #16]	; (800c77c <_fflush_r+0x74>)
 800c76c:	429c      	cmp	r4, r3
 800c76e:	bf08      	it	eq
 800c770:	68ec      	ldreq	r4, [r5, #12]
 800c772:	e7da      	b.n	800c72a <_fflush_r+0x22>
 800c774:	0800e560 	.word	0x0800e560
 800c778:	0800e580 	.word	0x0800e580
 800c77c:	0800e540 	.word	0x0800e540

0800c780 <fiprintf>:
 800c780:	b40e      	push	{r1, r2, r3}
 800c782:	b503      	push	{r0, r1, lr}
 800c784:	4601      	mov	r1, r0
 800c786:	ab03      	add	r3, sp, #12
 800c788:	4805      	ldr	r0, [pc, #20]	; (800c7a0 <fiprintf+0x20>)
 800c78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c78e:	6800      	ldr	r0, [r0, #0]
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	f001 fa4f 	bl	800dc34 <_vfiprintf_r>
 800c796:	b002      	add	sp, #8
 800c798:	f85d eb04 	ldr.w	lr, [sp], #4
 800c79c:	b003      	add	sp, #12
 800c79e:	4770      	bx	lr
 800c7a0:	20000034 	.word	0x20000034

0800c7a4 <rshift>:
 800c7a4:	6903      	ldr	r3, [r0, #16]
 800c7a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c7ae:	f100 0414 	add.w	r4, r0, #20
 800c7b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7b6:	dd46      	ble.n	800c846 <rshift+0xa2>
 800c7b8:	f011 011f 	ands.w	r1, r1, #31
 800c7bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7c4:	d10c      	bne.n	800c7e0 <rshift+0x3c>
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	f100 0710 	add.w	r7, r0, #16
 800c7cc:	42b1      	cmp	r1, r6
 800c7ce:	d335      	bcc.n	800c83c <rshift+0x98>
 800c7d0:	1a9b      	subs	r3, r3, r2
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	1eea      	subs	r2, r5, #3
 800c7d6:	4296      	cmp	r6, r2
 800c7d8:	bf38      	it	cc
 800c7da:	2300      	movcc	r3, #0
 800c7dc:	4423      	add	r3, r4
 800c7de:	e015      	b.n	800c80c <rshift+0x68>
 800c7e0:	46a1      	mov	r9, r4
 800c7e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c7e6:	f1c1 0820 	rsb	r8, r1, #32
 800c7ea:	40cf      	lsrs	r7, r1
 800c7ec:	f105 0e04 	add.w	lr, r5, #4
 800c7f0:	4576      	cmp	r6, lr
 800c7f2:	46f4      	mov	ip, lr
 800c7f4:	d816      	bhi.n	800c824 <rshift+0x80>
 800c7f6:	1a9a      	subs	r2, r3, r2
 800c7f8:	0092      	lsls	r2, r2, #2
 800c7fa:	3a04      	subs	r2, #4
 800c7fc:	3501      	adds	r5, #1
 800c7fe:	42ae      	cmp	r6, r5
 800c800:	bf38      	it	cc
 800c802:	2200      	movcc	r2, #0
 800c804:	18a3      	adds	r3, r4, r2
 800c806:	50a7      	str	r7, [r4, r2]
 800c808:	b107      	cbz	r7, 800c80c <rshift+0x68>
 800c80a:	3304      	adds	r3, #4
 800c80c:	42a3      	cmp	r3, r4
 800c80e:	eba3 0204 	sub.w	r2, r3, r4
 800c812:	bf08      	it	eq
 800c814:	2300      	moveq	r3, #0
 800c816:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c81a:	6102      	str	r2, [r0, #16]
 800c81c:	bf08      	it	eq
 800c81e:	6143      	streq	r3, [r0, #20]
 800c820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c824:	f8dc c000 	ldr.w	ip, [ip]
 800c828:	fa0c fc08 	lsl.w	ip, ip, r8
 800c82c:	ea4c 0707 	orr.w	r7, ip, r7
 800c830:	f849 7b04 	str.w	r7, [r9], #4
 800c834:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c838:	40cf      	lsrs	r7, r1
 800c83a:	e7d9      	b.n	800c7f0 <rshift+0x4c>
 800c83c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c840:	f847 cf04 	str.w	ip, [r7, #4]!
 800c844:	e7c2      	b.n	800c7cc <rshift+0x28>
 800c846:	4623      	mov	r3, r4
 800c848:	e7e0      	b.n	800c80c <rshift+0x68>

0800c84a <__hexdig_fun>:
 800c84a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c84e:	2b09      	cmp	r3, #9
 800c850:	d802      	bhi.n	800c858 <__hexdig_fun+0xe>
 800c852:	3820      	subs	r0, #32
 800c854:	b2c0      	uxtb	r0, r0
 800c856:	4770      	bx	lr
 800c858:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c85c:	2b05      	cmp	r3, #5
 800c85e:	d801      	bhi.n	800c864 <__hexdig_fun+0x1a>
 800c860:	3847      	subs	r0, #71	; 0x47
 800c862:	e7f7      	b.n	800c854 <__hexdig_fun+0xa>
 800c864:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c868:	2b05      	cmp	r3, #5
 800c86a:	d801      	bhi.n	800c870 <__hexdig_fun+0x26>
 800c86c:	3827      	subs	r0, #39	; 0x27
 800c86e:	e7f1      	b.n	800c854 <__hexdig_fun+0xa>
 800c870:	2000      	movs	r0, #0
 800c872:	4770      	bx	lr

0800c874 <__gethex>:
 800c874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c878:	b08b      	sub	sp, #44	; 0x2c
 800c87a:	9305      	str	r3, [sp, #20]
 800c87c:	4bb2      	ldr	r3, [pc, #712]	; (800cb48 <__gethex+0x2d4>)
 800c87e:	9002      	str	r0, [sp, #8]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	468b      	mov	fp, r1
 800c884:	4618      	mov	r0, r3
 800c886:	4690      	mov	r8, r2
 800c888:	9303      	str	r3, [sp, #12]
 800c88a:	f7f3 fc6b 	bl	8000164 <strlen>
 800c88e:	4682      	mov	sl, r0
 800c890:	9b03      	ldr	r3, [sp, #12]
 800c892:	f8db 2000 	ldr.w	r2, [fp]
 800c896:	4403      	add	r3, r0
 800c898:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c89c:	9306      	str	r3, [sp, #24]
 800c89e:	1c93      	adds	r3, r2, #2
 800c8a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c8a4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c8a8:	32fe      	adds	r2, #254	; 0xfe
 800c8aa:	18d1      	adds	r1, r2, r3
 800c8ac:	461f      	mov	r7, r3
 800c8ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c8b2:	9101      	str	r1, [sp, #4]
 800c8b4:	2830      	cmp	r0, #48	; 0x30
 800c8b6:	d0f8      	beq.n	800c8aa <__gethex+0x36>
 800c8b8:	f7ff ffc7 	bl	800c84a <__hexdig_fun>
 800c8bc:	4604      	mov	r4, r0
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d13a      	bne.n	800c938 <__gethex+0xc4>
 800c8c2:	4652      	mov	r2, sl
 800c8c4:	4638      	mov	r0, r7
 800c8c6:	9903      	ldr	r1, [sp, #12]
 800c8c8:	f001 fafc 	bl	800dec4 <strncmp>
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d166      	bne.n	800c9a0 <__gethex+0x12c>
 800c8d2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c8d6:	eb07 060a 	add.w	r6, r7, sl
 800c8da:	f7ff ffb6 	bl	800c84a <__hexdig_fun>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d060      	beq.n	800c9a4 <__gethex+0x130>
 800c8e2:	4633      	mov	r3, r6
 800c8e4:	7818      	ldrb	r0, [r3, #0]
 800c8e6:	461f      	mov	r7, r3
 800c8e8:	2830      	cmp	r0, #48	; 0x30
 800c8ea:	f103 0301 	add.w	r3, r3, #1
 800c8ee:	d0f9      	beq.n	800c8e4 <__gethex+0x70>
 800c8f0:	f7ff ffab 	bl	800c84a <__hexdig_fun>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	fab0 f480 	clz	r4, r0
 800c8fa:	4635      	mov	r5, r6
 800c8fc:	0964      	lsrs	r4, r4, #5
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	463a      	mov	r2, r7
 800c902:	4616      	mov	r6, r2
 800c904:	7830      	ldrb	r0, [r6, #0]
 800c906:	3201      	adds	r2, #1
 800c908:	f7ff ff9f 	bl	800c84a <__hexdig_fun>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d1f8      	bne.n	800c902 <__gethex+0x8e>
 800c910:	4652      	mov	r2, sl
 800c912:	4630      	mov	r0, r6
 800c914:	9903      	ldr	r1, [sp, #12]
 800c916:	f001 fad5 	bl	800dec4 <strncmp>
 800c91a:	b980      	cbnz	r0, 800c93e <__gethex+0xca>
 800c91c:	b94d      	cbnz	r5, 800c932 <__gethex+0xbe>
 800c91e:	eb06 050a 	add.w	r5, r6, sl
 800c922:	462a      	mov	r2, r5
 800c924:	4616      	mov	r6, r2
 800c926:	7830      	ldrb	r0, [r6, #0]
 800c928:	3201      	adds	r2, #1
 800c92a:	f7ff ff8e 	bl	800c84a <__hexdig_fun>
 800c92e:	2800      	cmp	r0, #0
 800c930:	d1f8      	bne.n	800c924 <__gethex+0xb0>
 800c932:	1bad      	subs	r5, r5, r6
 800c934:	00ad      	lsls	r5, r5, #2
 800c936:	e004      	b.n	800c942 <__gethex+0xce>
 800c938:	2400      	movs	r4, #0
 800c93a:	4625      	mov	r5, r4
 800c93c:	e7e0      	b.n	800c900 <__gethex+0x8c>
 800c93e:	2d00      	cmp	r5, #0
 800c940:	d1f7      	bne.n	800c932 <__gethex+0xbe>
 800c942:	7833      	ldrb	r3, [r6, #0]
 800c944:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c948:	2b50      	cmp	r3, #80	; 0x50
 800c94a:	d139      	bne.n	800c9c0 <__gethex+0x14c>
 800c94c:	7873      	ldrb	r3, [r6, #1]
 800c94e:	2b2b      	cmp	r3, #43	; 0x2b
 800c950:	d02a      	beq.n	800c9a8 <__gethex+0x134>
 800c952:	2b2d      	cmp	r3, #45	; 0x2d
 800c954:	d02c      	beq.n	800c9b0 <__gethex+0x13c>
 800c956:	f04f 0900 	mov.w	r9, #0
 800c95a:	1c71      	adds	r1, r6, #1
 800c95c:	7808      	ldrb	r0, [r1, #0]
 800c95e:	f7ff ff74 	bl	800c84a <__hexdig_fun>
 800c962:	1e43      	subs	r3, r0, #1
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b18      	cmp	r3, #24
 800c968:	d82a      	bhi.n	800c9c0 <__gethex+0x14c>
 800c96a:	f1a0 0210 	sub.w	r2, r0, #16
 800c96e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c972:	f7ff ff6a 	bl	800c84a <__hexdig_fun>
 800c976:	1e43      	subs	r3, r0, #1
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	2b18      	cmp	r3, #24
 800c97c:	d91b      	bls.n	800c9b6 <__gethex+0x142>
 800c97e:	f1b9 0f00 	cmp.w	r9, #0
 800c982:	d000      	beq.n	800c986 <__gethex+0x112>
 800c984:	4252      	negs	r2, r2
 800c986:	4415      	add	r5, r2
 800c988:	f8cb 1000 	str.w	r1, [fp]
 800c98c:	b1d4      	cbz	r4, 800c9c4 <__gethex+0x150>
 800c98e:	9b01      	ldr	r3, [sp, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	bf14      	ite	ne
 800c994:	2700      	movne	r7, #0
 800c996:	2706      	moveq	r7, #6
 800c998:	4638      	mov	r0, r7
 800c99a:	b00b      	add	sp, #44	; 0x2c
 800c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a0:	463e      	mov	r6, r7
 800c9a2:	4625      	mov	r5, r4
 800c9a4:	2401      	movs	r4, #1
 800c9a6:	e7cc      	b.n	800c942 <__gethex+0xce>
 800c9a8:	f04f 0900 	mov.w	r9, #0
 800c9ac:	1cb1      	adds	r1, r6, #2
 800c9ae:	e7d5      	b.n	800c95c <__gethex+0xe8>
 800c9b0:	f04f 0901 	mov.w	r9, #1
 800c9b4:	e7fa      	b.n	800c9ac <__gethex+0x138>
 800c9b6:	230a      	movs	r3, #10
 800c9b8:	fb03 0202 	mla	r2, r3, r2, r0
 800c9bc:	3a10      	subs	r2, #16
 800c9be:	e7d6      	b.n	800c96e <__gethex+0xfa>
 800c9c0:	4631      	mov	r1, r6
 800c9c2:	e7e1      	b.n	800c988 <__gethex+0x114>
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	1bf3      	subs	r3, r6, r7
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	2b07      	cmp	r3, #7
 800c9cc:	dc0a      	bgt.n	800c9e4 <__gethex+0x170>
 800c9ce:	9802      	ldr	r0, [sp, #8]
 800c9d0:	f000 fa98 	bl	800cf04 <_Balloc>
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	b940      	cbnz	r0, 800c9ea <__gethex+0x176>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	21de      	movs	r1, #222	; 0xde
 800c9dc:	4b5b      	ldr	r3, [pc, #364]	; (800cb4c <__gethex+0x2d8>)
 800c9de:	485c      	ldr	r0, [pc, #368]	; (800cb50 <__gethex+0x2dc>)
 800c9e0:	f7fe ff66 	bl	800b8b0 <__assert_func>
 800c9e4:	3101      	adds	r1, #1
 800c9e6:	105b      	asrs	r3, r3, #1
 800c9e8:	e7ef      	b.n	800c9ca <__gethex+0x156>
 800c9ea:	f04f 0b00 	mov.w	fp, #0
 800c9ee:	f100 0914 	add.w	r9, r0, #20
 800c9f2:	f1ca 0301 	rsb	r3, sl, #1
 800c9f6:	f8cd 9010 	str.w	r9, [sp, #16]
 800c9fa:	f8cd b004 	str.w	fp, [sp, #4]
 800c9fe:	9308      	str	r3, [sp, #32]
 800ca00:	42b7      	cmp	r7, r6
 800ca02:	d33f      	bcc.n	800ca84 <__gethex+0x210>
 800ca04:	9f04      	ldr	r7, [sp, #16]
 800ca06:	9b01      	ldr	r3, [sp, #4]
 800ca08:	f847 3b04 	str.w	r3, [r7], #4
 800ca0c:	eba7 0709 	sub.w	r7, r7, r9
 800ca10:	10bf      	asrs	r7, r7, #2
 800ca12:	6127      	str	r7, [r4, #16]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 fb67 	bl	800d0e8 <__hi0bits>
 800ca1a:	017f      	lsls	r7, r7, #5
 800ca1c:	f8d8 6000 	ldr.w	r6, [r8]
 800ca20:	1a3f      	subs	r7, r7, r0
 800ca22:	42b7      	cmp	r7, r6
 800ca24:	dd62      	ble.n	800caec <__gethex+0x278>
 800ca26:	1bbf      	subs	r7, r7, r6
 800ca28:	4639      	mov	r1, r7
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 ff01 	bl	800d832 <__any_on>
 800ca30:	4682      	mov	sl, r0
 800ca32:	b1a8      	cbz	r0, 800ca60 <__gethex+0x1ec>
 800ca34:	f04f 0a01 	mov.w	sl, #1
 800ca38:	1e7b      	subs	r3, r7, #1
 800ca3a:	1159      	asrs	r1, r3, #5
 800ca3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ca40:	f003 021f 	and.w	r2, r3, #31
 800ca44:	fa0a f202 	lsl.w	r2, sl, r2
 800ca48:	420a      	tst	r2, r1
 800ca4a:	d009      	beq.n	800ca60 <__gethex+0x1ec>
 800ca4c:	4553      	cmp	r3, sl
 800ca4e:	dd05      	ble.n	800ca5c <__gethex+0x1e8>
 800ca50:	4620      	mov	r0, r4
 800ca52:	1eb9      	subs	r1, r7, #2
 800ca54:	f000 feed 	bl	800d832 <__any_on>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d144      	bne.n	800cae6 <__gethex+0x272>
 800ca5c:	f04f 0a02 	mov.w	sl, #2
 800ca60:	4639      	mov	r1, r7
 800ca62:	4620      	mov	r0, r4
 800ca64:	f7ff fe9e 	bl	800c7a4 <rshift>
 800ca68:	443d      	add	r5, r7
 800ca6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca6e:	42ab      	cmp	r3, r5
 800ca70:	da4a      	bge.n	800cb08 <__gethex+0x294>
 800ca72:	4621      	mov	r1, r4
 800ca74:	9802      	ldr	r0, [sp, #8]
 800ca76:	f000 fa85 	bl	800cf84 <_Bfree>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca7e:	27a3      	movs	r7, #163	; 0xa3
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	e789      	b.n	800c998 <__gethex+0x124>
 800ca84:	1e73      	subs	r3, r6, #1
 800ca86:	9a06      	ldr	r2, [sp, #24]
 800ca88:	9307      	str	r3, [sp, #28]
 800ca8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d019      	beq.n	800cac6 <__gethex+0x252>
 800ca92:	f1bb 0f20 	cmp.w	fp, #32
 800ca96:	d107      	bne.n	800caa8 <__gethex+0x234>
 800ca98:	9b04      	ldr	r3, [sp, #16]
 800ca9a:	9a01      	ldr	r2, [sp, #4]
 800ca9c:	f843 2b04 	str.w	r2, [r3], #4
 800caa0:	9304      	str	r3, [sp, #16]
 800caa2:	2300      	movs	r3, #0
 800caa4:	469b      	mov	fp, r3
 800caa6:	9301      	str	r3, [sp, #4]
 800caa8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800caac:	f7ff fecd 	bl	800c84a <__hexdig_fun>
 800cab0:	9b01      	ldr	r3, [sp, #4]
 800cab2:	f000 000f 	and.w	r0, r0, #15
 800cab6:	fa00 f00b 	lsl.w	r0, r0, fp
 800caba:	4303      	orrs	r3, r0
 800cabc:	9301      	str	r3, [sp, #4]
 800cabe:	f10b 0b04 	add.w	fp, fp, #4
 800cac2:	9b07      	ldr	r3, [sp, #28]
 800cac4:	e00d      	b.n	800cae2 <__gethex+0x26e>
 800cac6:	9a08      	ldr	r2, [sp, #32]
 800cac8:	1e73      	subs	r3, r6, #1
 800caca:	4413      	add	r3, r2
 800cacc:	42bb      	cmp	r3, r7
 800cace:	d3e0      	bcc.n	800ca92 <__gethex+0x21e>
 800cad0:	4618      	mov	r0, r3
 800cad2:	4652      	mov	r2, sl
 800cad4:	9903      	ldr	r1, [sp, #12]
 800cad6:	9309      	str	r3, [sp, #36]	; 0x24
 800cad8:	f001 f9f4 	bl	800dec4 <strncmp>
 800cadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cade:	2800      	cmp	r0, #0
 800cae0:	d1d7      	bne.n	800ca92 <__gethex+0x21e>
 800cae2:	461e      	mov	r6, r3
 800cae4:	e78c      	b.n	800ca00 <__gethex+0x18c>
 800cae6:	f04f 0a03 	mov.w	sl, #3
 800caea:	e7b9      	b.n	800ca60 <__gethex+0x1ec>
 800caec:	da09      	bge.n	800cb02 <__gethex+0x28e>
 800caee:	1bf7      	subs	r7, r6, r7
 800caf0:	4621      	mov	r1, r4
 800caf2:	463a      	mov	r2, r7
 800caf4:	9802      	ldr	r0, [sp, #8]
 800caf6:	f000 fc5d 	bl	800d3b4 <__lshift>
 800cafa:	4604      	mov	r4, r0
 800cafc:	1bed      	subs	r5, r5, r7
 800cafe:	f100 0914 	add.w	r9, r0, #20
 800cb02:	f04f 0a00 	mov.w	sl, #0
 800cb06:	e7b0      	b.n	800ca6a <__gethex+0x1f6>
 800cb08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb0c:	42a8      	cmp	r0, r5
 800cb0e:	dd72      	ble.n	800cbf6 <__gethex+0x382>
 800cb10:	1b45      	subs	r5, r0, r5
 800cb12:	42ae      	cmp	r6, r5
 800cb14:	dc35      	bgt.n	800cb82 <__gethex+0x30e>
 800cb16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d029      	beq.n	800cb72 <__gethex+0x2fe>
 800cb1e:	2b03      	cmp	r3, #3
 800cb20:	d02b      	beq.n	800cb7a <__gethex+0x306>
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d11c      	bne.n	800cb60 <__gethex+0x2ec>
 800cb26:	42ae      	cmp	r6, r5
 800cb28:	d11a      	bne.n	800cb60 <__gethex+0x2ec>
 800cb2a:	2e01      	cmp	r6, #1
 800cb2c:	d112      	bne.n	800cb54 <__gethex+0x2e0>
 800cb2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb32:	9a05      	ldr	r2, [sp, #20]
 800cb34:	2762      	movs	r7, #98	; 0x62
 800cb36:	6013      	str	r3, [r2, #0]
 800cb38:	2301      	movs	r3, #1
 800cb3a:	6123      	str	r3, [r4, #16]
 800cb3c:	f8c9 3000 	str.w	r3, [r9]
 800cb40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb42:	601c      	str	r4, [r3, #0]
 800cb44:	e728      	b.n	800c998 <__gethex+0x124>
 800cb46:	bf00      	nop
 800cb48:	0800e8c0 	.word	0x0800e8c0
 800cb4c:	0800e849 	.word	0x0800e849
 800cb50:	0800e85a 	.word	0x0800e85a
 800cb54:	4620      	mov	r0, r4
 800cb56:	1e71      	subs	r1, r6, #1
 800cb58:	f000 fe6b 	bl	800d832 <__any_on>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d1e6      	bne.n	800cb2e <__gethex+0x2ba>
 800cb60:	4621      	mov	r1, r4
 800cb62:	9802      	ldr	r0, [sp, #8]
 800cb64:	f000 fa0e 	bl	800cf84 <_Bfree>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb6c:	2750      	movs	r7, #80	; 0x50
 800cb6e:	6013      	str	r3, [r2, #0]
 800cb70:	e712      	b.n	800c998 <__gethex+0x124>
 800cb72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1f3      	bne.n	800cb60 <__gethex+0x2ec>
 800cb78:	e7d9      	b.n	800cb2e <__gethex+0x2ba>
 800cb7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1d6      	bne.n	800cb2e <__gethex+0x2ba>
 800cb80:	e7ee      	b.n	800cb60 <__gethex+0x2ec>
 800cb82:	1e6f      	subs	r7, r5, #1
 800cb84:	f1ba 0f00 	cmp.w	sl, #0
 800cb88:	d132      	bne.n	800cbf0 <__gethex+0x37c>
 800cb8a:	b127      	cbz	r7, 800cb96 <__gethex+0x322>
 800cb8c:	4639      	mov	r1, r7
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f000 fe4f 	bl	800d832 <__any_on>
 800cb94:	4682      	mov	sl, r0
 800cb96:	2101      	movs	r1, #1
 800cb98:	117b      	asrs	r3, r7, #5
 800cb9a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cb9e:	f007 071f 	and.w	r7, r7, #31
 800cba2:	fa01 f707 	lsl.w	r7, r1, r7
 800cba6:	421f      	tst	r7, r3
 800cba8:	f04f 0702 	mov.w	r7, #2
 800cbac:	4629      	mov	r1, r5
 800cbae:	4620      	mov	r0, r4
 800cbb0:	bf18      	it	ne
 800cbb2:	f04a 0a02 	orrne.w	sl, sl, #2
 800cbb6:	1b76      	subs	r6, r6, r5
 800cbb8:	f7ff fdf4 	bl	800c7a4 <rshift>
 800cbbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cbc0:	f1ba 0f00 	cmp.w	sl, #0
 800cbc4:	d048      	beq.n	800cc58 <__gethex+0x3e4>
 800cbc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d015      	beq.n	800cbfa <__gethex+0x386>
 800cbce:	2b03      	cmp	r3, #3
 800cbd0:	d017      	beq.n	800cc02 <__gethex+0x38e>
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d109      	bne.n	800cbea <__gethex+0x376>
 800cbd6:	f01a 0f02 	tst.w	sl, #2
 800cbda:	d006      	beq.n	800cbea <__gethex+0x376>
 800cbdc:	f8d9 0000 	ldr.w	r0, [r9]
 800cbe0:	ea4a 0a00 	orr.w	sl, sl, r0
 800cbe4:	f01a 0f01 	tst.w	sl, #1
 800cbe8:	d10e      	bne.n	800cc08 <__gethex+0x394>
 800cbea:	f047 0710 	orr.w	r7, r7, #16
 800cbee:	e033      	b.n	800cc58 <__gethex+0x3e4>
 800cbf0:	f04f 0a01 	mov.w	sl, #1
 800cbf4:	e7cf      	b.n	800cb96 <__gethex+0x322>
 800cbf6:	2701      	movs	r7, #1
 800cbf8:	e7e2      	b.n	800cbc0 <__gethex+0x34c>
 800cbfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbfc:	f1c3 0301 	rsb	r3, r3, #1
 800cc00:	9315      	str	r3, [sp, #84]	; 0x54
 800cc02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d0f0      	beq.n	800cbea <__gethex+0x376>
 800cc08:	f04f 0c00 	mov.w	ip, #0
 800cc0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc10:	f104 0314 	add.w	r3, r4, #20
 800cc14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc22:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc26:	d01c      	beq.n	800cc62 <__gethex+0x3ee>
 800cc28:	3201      	adds	r2, #1
 800cc2a:	6002      	str	r2, [r0, #0]
 800cc2c:	2f02      	cmp	r7, #2
 800cc2e:	f104 0314 	add.w	r3, r4, #20
 800cc32:	d13d      	bne.n	800ccb0 <__gethex+0x43c>
 800cc34:	f8d8 2000 	ldr.w	r2, [r8]
 800cc38:	3a01      	subs	r2, #1
 800cc3a:	42b2      	cmp	r2, r6
 800cc3c:	d10a      	bne.n	800cc54 <__gethex+0x3e0>
 800cc3e:	2201      	movs	r2, #1
 800cc40:	1171      	asrs	r1, r6, #5
 800cc42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc46:	f006 061f 	and.w	r6, r6, #31
 800cc4a:	fa02 f606 	lsl.w	r6, r2, r6
 800cc4e:	421e      	tst	r6, r3
 800cc50:	bf18      	it	ne
 800cc52:	4617      	movne	r7, r2
 800cc54:	f047 0720 	orr.w	r7, r7, #32
 800cc58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc5a:	601c      	str	r4, [r3, #0]
 800cc5c:	9b05      	ldr	r3, [sp, #20]
 800cc5e:	601d      	str	r5, [r3, #0]
 800cc60:	e69a      	b.n	800c998 <__gethex+0x124>
 800cc62:	4299      	cmp	r1, r3
 800cc64:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc68:	d8d8      	bhi.n	800cc1c <__gethex+0x3a8>
 800cc6a:	68a3      	ldr	r3, [r4, #8]
 800cc6c:	459b      	cmp	fp, r3
 800cc6e:	db17      	blt.n	800cca0 <__gethex+0x42c>
 800cc70:	6861      	ldr	r1, [r4, #4]
 800cc72:	9802      	ldr	r0, [sp, #8]
 800cc74:	3101      	adds	r1, #1
 800cc76:	f000 f945 	bl	800cf04 <_Balloc>
 800cc7a:	4681      	mov	r9, r0
 800cc7c:	b918      	cbnz	r0, 800cc86 <__gethex+0x412>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	2184      	movs	r1, #132	; 0x84
 800cc82:	4b19      	ldr	r3, [pc, #100]	; (800cce8 <__gethex+0x474>)
 800cc84:	e6ab      	b.n	800c9de <__gethex+0x16a>
 800cc86:	6922      	ldr	r2, [r4, #16]
 800cc88:	f104 010c 	add.w	r1, r4, #12
 800cc8c:	3202      	adds	r2, #2
 800cc8e:	0092      	lsls	r2, r2, #2
 800cc90:	300c      	adds	r0, #12
 800cc92:	f7fc fee4 	bl	8009a5e <memcpy>
 800cc96:	4621      	mov	r1, r4
 800cc98:	9802      	ldr	r0, [sp, #8]
 800cc9a:	f000 f973 	bl	800cf84 <_Bfree>
 800cc9e:	464c      	mov	r4, r9
 800cca0:	6923      	ldr	r3, [r4, #16]
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	6122      	str	r2, [r4, #16]
 800cca6:	2201      	movs	r2, #1
 800cca8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ccac:	615a      	str	r2, [r3, #20]
 800ccae:	e7bd      	b.n	800cc2c <__gethex+0x3b8>
 800ccb0:	6922      	ldr	r2, [r4, #16]
 800ccb2:	455a      	cmp	r2, fp
 800ccb4:	dd0b      	ble.n	800ccce <__gethex+0x45a>
 800ccb6:	2101      	movs	r1, #1
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f7ff fd73 	bl	800c7a4 <rshift>
 800ccbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ccc2:	3501      	adds	r5, #1
 800ccc4:	42ab      	cmp	r3, r5
 800ccc6:	f6ff aed4 	blt.w	800ca72 <__gethex+0x1fe>
 800ccca:	2701      	movs	r7, #1
 800cccc:	e7c2      	b.n	800cc54 <__gethex+0x3e0>
 800ccce:	f016 061f 	ands.w	r6, r6, #31
 800ccd2:	d0fa      	beq.n	800ccca <__gethex+0x456>
 800ccd4:	4453      	add	r3, sl
 800ccd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ccda:	f000 fa05 	bl	800d0e8 <__hi0bits>
 800ccde:	f1c6 0620 	rsb	r6, r6, #32
 800cce2:	42b0      	cmp	r0, r6
 800cce4:	dbe7      	blt.n	800ccb6 <__gethex+0x442>
 800cce6:	e7f0      	b.n	800ccca <__gethex+0x456>
 800cce8:	0800e849 	.word	0x0800e849

0800ccec <L_shift>:
 800ccec:	f1c2 0208 	rsb	r2, r2, #8
 800ccf0:	0092      	lsls	r2, r2, #2
 800ccf2:	b570      	push	{r4, r5, r6, lr}
 800ccf4:	f1c2 0620 	rsb	r6, r2, #32
 800ccf8:	6843      	ldr	r3, [r0, #4]
 800ccfa:	6804      	ldr	r4, [r0, #0]
 800ccfc:	fa03 f506 	lsl.w	r5, r3, r6
 800cd00:	432c      	orrs	r4, r5
 800cd02:	40d3      	lsrs	r3, r2
 800cd04:	6004      	str	r4, [r0, #0]
 800cd06:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd0a:	4288      	cmp	r0, r1
 800cd0c:	d3f4      	bcc.n	800ccf8 <L_shift+0xc>
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}

0800cd10 <__match>:
 800cd10:	b530      	push	{r4, r5, lr}
 800cd12:	6803      	ldr	r3, [r0, #0]
 800cd14:	3301      	adds	r3, #1
 800cd16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd1a:	b914      	cbnz	r4, 800cd22 <__match+0x12>
 800cd1c:	6003      	str	r3, [r0, #0]
 800cd1e:	2001      	movs	r0, #1
 800cd20:	bd30      	pop	{r4, r5, pc}
 800cd22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd2a:	2d19      	cmp	r5, #25
 800cd2c:	bf98      	it	ls
 800cd2e:	3220      	addls	r2, #32
 800cd30:	42a2      	cmp	r2, r4
 800cd32:	d0f0      	beq.n	800cd16 <__match+0x6>
 800cd34:	2000      	movs	r0, #0
 800cd36:	e7f3      	b.n	800cd20 <__match+0x10>

0800cd38 <__hexnan>:
 800cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3c:	2500      	movs	r5, #0
 800cd3e:	680b      	ldr	r3, [r1, #0]
 800cd40:	4682      	mov	sl, r0
 800cd42:	115e      	asrs	r6, r3, #5
 800cd44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd48:	f013 031f 	ands.w	r3, r3, #31
 800cd4c:	bf18      	it	ne
 800cd4e:	3604      	addne	r6, #4
 800cd50:	1f37      	subs	r7, r6, #4
 800cd52:	46b9      	mov	r9, r7
 800cd54:	463c      	mov	r4, r7
 800cd56:	46ab      	mov	fp, r5
 800cd58:	b087      	sub	sp, #28
 800cd5a:	4690      	mov	r8, r2
 800cd5c:	6802      	ldr	r2, [r0, #0]
 800cd5e:	9301      	str	r3, [sp, #4]
 800cd60:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd64:	9502      	str	r5, [sp, #8]
 800cd66:	7851      	ldrb	r1, [r2, #1]
 800cd68:	1c53      	adds	r3, r2, #1
 800cd6a:	9303      	str	r3, [sp, #12]
 800cd6c:	b341      	cbz	r1, 800cdc0 <__hexnan+0x88>
 800cd6e:	4608      	mov	r0, r1
 800cd70:	9205      	str	r2, [sp, #20]
 800cd72:	9104      	str	r1, [sp, #16]
 800cd74:	f7ff fd69 	bl	800c84a <__hexdig_fun>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d14f      	bne.n	800ce1c <__hexnan+0xe4>
 800cd7c:	9904      	ldr	r1, [sp, #16]
 800cd7e:	9a05      	ldr	r2, [sp, #20]
 800cd80:	2920      	cmp	r1, #32
 800cd82:	d818      	bhi.n	800cdb6 <__hexnan+0x7e>
 800cd84:	9b02      	ldr	r3, [sp, #8]
 800cd86:	459b      	cmp	fp, r3
 800cd88:	dd13      	ble.n	800cdb2 <__hexnan+0x7a>
 800cd8a:	454c      	cmp	r4, r9
 800cd8c:	d206      	bcs.n	800cd9c <__hexnan+0x64>
 800cd8e:	2d07      	cmp	r5, #7
 800cd90:	dc04      	bgt.n	800cd9c <__hexnan+0x64>
 800cd92:	462a      	mov	r2, r5
 800cd94:	4649      	mov	r1, r9
 800cd96:	4620      	mov	r0, r4
 800cd98:	f7ff ffa8 	bl	800ccec <L_shift>
 800cd9c:	4544      	cmp	r4, r8
 800cd9e:	d950      	bls.n	800ce42 <__hexnan+0x10a>
 800cda0:	2300      	movs	r3, #0
 800cda2:	f1a4 0904 	sub.w	r9, r4, #4
 800cda6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdaa:	461d      	mov	r5, r3
 800cdac:	464c      	mov	r4, r9
 800cdae:	f8cd b008 	str.w	fp, [sp, #8]
 800cdb2:	9a03      	ldr	r2, [sp, #12]
 800cdb4:	e7d7      	b.n	800cd66 <__hexnan+0x2e>
 800cdb6:	2929      	cmp	r1, #41	; 0x29
 800cdb8:	d156      	bne.n	800ce68 <__hexnan+0x130>
 800cdba:	3202      	adds	r2, #2
 800cdbc:	f8ca 2000 	str.w	r2, [sl]
 800cdc0:	f1bb 0f00 	cmp.w	fp, #0
 800cdc4:	d050      	beq.n	800ce68 <__hexnan+0x130>
 800cdc6:	454c      	cmp	r4, r9
 800cdc8:	d206      	bcs.n	800cdd8 <__hexnan+0xa0>
 800cdca:	2d07      	cmp	r5, #7
 800cdcc:	dc04      	bgt.n	800cdd8 <__hexnan+0xa0>
 800cdce:	462a      	mov	r2, r5
 800cdd0:	4649      	mov	r1, r9
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7ff ff8a 	bl	800ccec <L_shift>
 800cdd8:	4544      	cmp	r4, r8
 800cdda:	d934      	bls.n	800ce46 <__hexnan+0x10e>
 800cddc:	4623      	mov	r3, r4
 800cdde:	f1a8 0204 	sub.w	r2, r8, #4
 800cde2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cde6:	429f      	cmp	r7, r3
 800cde8:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdec:	d2f9      	bcs.n	800cde2 <__hexnan+0xaa>
 800cdee:	1b3b      	subs	r3, r7, r4
 800cdf0:	f023 0303 	bic.w	r3, r3, #3
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	3401      	adds	r4, #1
 800cdf8:	3e03      	subs	r6, #3
 800cdfa:	42b4      	cmp	r4, r6
 800cdfc:	bf88      	it	hi
 800cdfe:	2304      	movhi	r3, #4
 800ce00:	2200      	movs	r2, #0
 800ce02:	4443      	add	r3, r8
 800ce04:	f843 2b04 	str.w	r2, [r3], #4
 800ce08:	429f      	cmp	r7, r3
 800ce0a:	d2fb      	bcs.n	800ce04 <__hexnan+0xcc>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	b91b      	cbnz	r3, 800ce18 <__hexnan+0xe0>
 800ce10:	4547      	cmp	r7, r8
 800ce12:	d127      	bne.n	800ce64 <__hexnan+0x12c>
 800ce14:	2301      	movs	r3, #1
 800ce16:	603b      	str	r3, [r7, #0]
 800ce18:	2005      	movs	r0, #5
 800ce1a:	e026      	b.n	800ce6a <__hexnan+0x132>
 800ce1c:	3501      	adds	r5, #1
 800ce1e:	2d08      	cmp	r5, #8
 800ce20:	f10b 0b01 	add.w	fp, fp, #1
 800ce24:	dd06      	ble.n	800ce34 <__hexnan+0xfc>
 800ce26:	4544      	cmp	r4, r8
 800ce28:	d9c3      	bls.n	800cdb2 <__hexnan+0x7a>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	2501      	movs	r5, #1
 800ce2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce32:	3c04      	subs	r4, #4
 800ce34:	6822      	ldr	r2, [r4, #0]
 800ce36:	f000 000f 	and.w	r0, r0, #15
 800ce3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ce3e:	6022      	str	r2, [r4, #0]
 800ce40:	e7b7      	b.n	800cdb2 <__hexnan+0x7a>
 800ce42:	2508      	movs	r5, #8
 800ce44:	e7b5      	b.n	800cdb2 <__hexnan+0x7a>
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d0df      	beq.n	800ce0c <__hexnan+0xd4>
 800ce4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce50:	f1c3 0320 	rsb	r3, r3, #32
 800ce54:	fa22 f303 	lsr.w	r3, r2, r3
 800ce58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce5c:	401a      	ands	r2, r3
 800ce5e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ce62:	e7d3      	b.n	800ce0c <__hexnan+0xd4>
 800ce64:	3f04      	subs	r7, #4
 800ce66:	e7d1      	b.n	800ce0c <__hexnan+0xd4>
 800ce68:	2004      	movs	r0, #4
 800ce6a:	b007      	add	sp, #28
 800ce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce70 <_localeconv_r>:
 800ce70:	4800      	ldr	r0, [pc, #0]	; (800ce74 <_localeconv_r+0x4>)
 800ce72:	4770      	bx	lr
 800ce74:	2000018c 	.word	0x2000018c

0800ce78 <_lseek_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	4608      	mov	r0, r1
 800ce7e:	4611      	mov	r1, r2
 800ce80:	2200      	movs	r2, #0
 800ce82:	4d05      	ldr	r5, [pc, #20]	; (800ce98 <_lseek_r+0x20>)
 800ce84:	602a      	str	r2, [r5, #0]
 800ce86:	461a      	mov	r2, r3
 800ce88:	f7f5 f8bc 	bl	8002004 <_lseek>
 800ce8c:	1c43      	adds	r3, r0, #1
 800ce8e:	d102      	bne.n	800ce96 <_lseek_r+0x1e>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	b103      	cbz	r3, 800ce96 <_lseek_r+0x1e>
 800ce94:	6023      	str	r3, [r4, #0]
 800ce96:	bd38      	pop	{r3, r4, r5, pc}
 800ce98:	2000332c 	.word	0x2000332c

0800ce9c <malloc>:
 800ce9c:	4b02      	ldr	r3, [pc, #8]	; (800cea8 <malloc+0xc>)
 800ce9e:	4601      	mov	r1, r0
 800cea0:	6818      	ldr	r0, [r3, #0]
 800cea2:	f7fc be13 	b.w	8009acc <_malloc_r>
 800cea6:	bf00      	nop
 800cea8:	20000034 	.word	0x20000034

0800ceac <__ascii_mbtowc>:
 800ceac:	b082      	sub	sp, #8
 800ceae:	b901      	cbnz	r1, 800ceb2 <__ascii_mbtowc+0x6>
 800ceb0:	a901      	add	r1, sp, #4
 800ceb2:	b142      	cbz	r2, 800cec6 <__ascii_mbtowc+0x1a>
 800ceb4:	b14b      	cbz	r3, 800ceca <__ascii_mbtowc+0x1e>
 800ceb6:	7813      	ldrb	r3, [r2, #0]
 800ceb8:	600b      	str	r3, [r1, #0]
 800ceba:	7812      	ldrb	r2, [r2, #0]
 800cebc:	1e10      	subs	r0, r2, #0
 800cebe:	bf18      	it	ne
 800cec0:	2001      	movne	r0, #1
 800cec2:	b002      	add	sp, #8
 800cec4:	4770      	bx	lr
 800cec6:	4610      	mov	r0, r2
 800cec8:	e7fb      	b.n	800cec2 <__ascii_mbtowc+0x16>
 800ceca:	f06f 0001 	mvn.w	r0, #1
 800cece:	e7f8      	b.n	800cec2 <__ascii_mbtowc+0x16>

0800ced0 <memchr>:
 800ced0:	4603      	mov	r3, r0
 800ced2:	b510      	push	{r4, lr}
 800ced4:	b2c9      	uxtb	r1, r1
 800ced6:	4402      	add	r2, r0
 800ced8:	4293      	cmp	r3, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	d101      	bne.n	800cee2 <memchr+0x12>
 800cede:	2000      	movs	r0, #0
 800cee0:	e003      	b.n	800ceea <memchr+0x1a>
 800cee2:	7804      	ldrb	r4, [r0, #0]
 800cee4:	3301      	adds	r3, #1
 800cee6:	428c      	cmp	r4, r1
 800cee8:	d1f6      	bne.n	800ced8 <memchr+0x8>
 800ceea:	bd10      	pop	{r4, pc}

0800ceec <__malloc_lock>:
 800ceec:	4801      	ldr	r0, [pc, #4]	; (800cef4 <__malloc_lock+0x8>)
 800ceee:	f7fc bdb4 	b.w	8009a5a <__retarget_lock_acquire_recursive>
 800cef2:	bf00      	nop
 800cef4:	20003321 	.word	0x20003321

0800cef8 <__malloc_unlock>:
 800cef8:	4801      	ldr	r0, [pc, #4]	; (800cf00 <__malloc_unlock+0x8>)
 800cefa:	f7fc bdaf 	b.w	8009a5c <__retarget_lock_release_recursive>
 800cefe:	bf00      	nop
 800cf00:	20003321 	.word	0x20003321

0800cf04 <_Balloc>:
 800cf04:	b570      	push	{r4, r5, r6, lr}
 800cf06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf08:	4604      	mov	r4, r0
 800cf0a:	460d      	mov	r5, r1
 800cf0c:	b976      	cbnz	r6, 800cf2c <_Balloc+0x28>
 800cf0e:	2010      	movs	r0, #16
 800cf10:	f7ff ffc4 	bl	800ce9c <malloc>
 800cf14:	4602      	mov	r2, r0
 800cf16:	6260      	str	r0, [r4, #36]	; 0x24
 800cf18:	b920      	cbnz	r0, 800cf24 <_Balloc+0x20>
 800cf1a:	2166      	movs	r1, #102	; 0x66
 800cf1c:	4b17      	ldr	r3, [pc, #92]	; (800cf7c <_Balloc+0x78>)
 800cf1e:	4818      	ldr	r0, [pc, #96]	; (800cf80 <_Balloc+0x7c>)
 800cf20:	f7fe fcc6 	bl	800b8b0 <__assert_func>
 800cf24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf28:	6006      	str	r6, [r0, #0]
 800cf2a:	60c6      	str	r6, [r0, #12]
 800cf2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf2e:	68f3      	ldr	r3, [r6, #12]
 800cf30:	b183      	cbz	r3, 800cf54 <_Balloc+0x50>
 800cf32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf3a:	b9b8      	cbnz	r0, 800cf6c <_Balloc+0x68>
 800cf3c:	2101      	movs	r1, #1
 800cf3e:	fa01 f605 	lsl.w	r6, r1, r5
 800cf42:	1d72      	adds	r2, r6, #5
 800cf44:	4620      	mov	r0, r4
 800cf46:	0092      	lsls	r2, r2, #2
 800cf48:	f000 fc94 	bl	800d874 <_calloc_r>
 800cf4c:	b160      	cbz	r0, 800cf68 <_Balloc+0x64>
 800cf4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf52:	e00e      	b.n	800cf72 <_Balloc+0x6e>
 800cf54:	2221      	movs	r2, #33	; 0x21
 800cf56:	2104      	movs	r1, #4
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f000 fc8b 	bl	800d874 <_calloc_r>
 800cf5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf60:	60f0      	str	r0, [r6, #12]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1e4      	bne.n	800cf32 <_Balloc+0x2e>
 800cf68:	2000      	movs	r0, #0
 800cf6a:	bd70      	pop	{r4, r5, r6, pc}
 800cf6c:	6802      	ldr	r2, [r0, #0]
 800cf6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf72:	2300      	movs	r3, #0
 800cf74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf78:	e7f7      	b.n	800cf6a <_Balloc+0x66>
 800cf7a:	bf00      	nop
 800cf7c:	0800e630 	.word	0x0800e630
 800cf80:	0800e8d4 	.word	0x0800e8d4

0800cf84 <_Bfree>:
 800cf84:	b570      	push	{r4, r5, r6, lr}
 800cf86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf88:	4605      	mov	r5, r0
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	b976      	cbnz	r6, 800cfac <_Bfree+0x28>
 800cf8e:	2010      	movs	r0, #16
 800cf90:	f7ff ff84 	bl	800ce9c <malloc>
 800cf94:	4602      	mov	r2, r0
 800cf96:	6268      	str	r0, [r5, #36]	; 0x24
 800cf98:	b920      	cbnz	r0, 800cfa4 <_Bfree+0x20>
 800cf9a:	218a      	movs	r1, #138	; 0x8a
 800cf9c:	4b08      	ldr	r3, [pc, #32]	; (800cfc0 <_Bfree+0x3c>)
 800cf9e:	4809      	ldr	r0, [pc, #36]	; (800cfc4 <_Bfree+0x40>)
 800cfa0:	f7fe fc86 	bl	800b8b0 <__assert_func>
 800cfa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfa8:	6006      	str	r6, [r0, #0]
 800cfaa:	60c6      	str	r6, [r0, #12]
 800cfac:	b13c      	cbz	r4, 800cfbe <_Bfree+0x3a>
 800cfae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfb0:	6862      	ldr	r2, [r4, #4]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfb8:	6021      	str	r1, [r4, #0]
 800cfba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfbe:	bd70      	pop	{r4, r5, r6, pc}
 800cfc0:	0800e630 	.word	0x0800e630
 800cfc4:	0800e8d4 	.word	0x0800e8d4

0800cfc8 <__multadd>:
 800cfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfcc:	4607      	mov	r7, r0
 800cfce:	460c      	mov	r4, r1
 800cfd0:	461e      	mov	r6, r3
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	690d      	ldr	r5, [r1, #16]
 800cfd6:	f101 0c14 	add.w	ip, r1, #20
 800cfda:	f8dc 3000 	ldr.w	r3, [ip]
 800cfde:	3001      	adds	r0, #1
 800cfe0:	b299      	uxth	r1, r3
 800cfe2:	fb02 6101 	mla	r1, r2, r1, r6
 800cfe6:	0c1e      	lsrs	r6, r3, #16
 800cfe8:	0c0b      	lsrs	r3, r1, #16
 800cfea:	fb02 3306 	mla	r3, r2, r6, r3
 800cfee:	b289      	uxth	r1, r1
 800cff0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cff4:	4285      	cmp	r5, r0
 800cff6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cffa:	f84c 1b04 	str.w	r1, [ip], #4
 800cffe:	dcec      	bgt.n	800cfda <__multadd+0x12>
 800d000:	b30e      	cbz	r6, 800d046 <__multadd+0x7e>
 800d002:	68a3      	ldr	r3, [r4, #8]
 800d004:	42ab      	cmp	r3, r5
 800d006:	dc19      	bgt.n	800d03c <__multadd+0x74>
 800d008:	6861      	ldr	r1, [r4, #4]
 800d00a:	4638      	mov	r0, r7
 800d00c:	3101      	adds	r1, #1
 800d00e:	f7ff ff79 	bl	800cf04 <_Balloc>
 800d012:	4680      	mov	r8, r0
 800d014:	b928      	cbnz	r0, 800d022 <__multadd+0x5a>
 800d016:	4602      	mov	r2, r0
 800d018:	21b5      	movs	r1, #181	; 0xb5
 800d01a:	4b0c      	ldr	r3, [pc, #48]	; (800d04c <__multadd+0x84>)
 800d01c:	480c      	ldr	r0, [pc, #48]	; (800d050 <__multadd+0x88>)
 800d01e:	f7fe fc47 	bl	800b8b0 <__assert_func>
 800d022:	6922      	ldr	r2, [r4, #16]
 800d024:	f104 010c 	add.w	r1, r4, #12
 800d028:	3202      	adds	r2, #2
 800d02a:	0092      	lsls	r2, r2, #2
 800d02c:	300c      	adds	r0, #12
 800d02e:	f7fc fd16 	bl	8009a5e <memcpy>
 800d032:	4621      	mov	r1, r4
 800d034:	4638      	mov	r0, r7
 800d036:	f7ff ffa5 	bl	800cf84 <_Bfree>
 800d03a:	4644      	mov	r4, r8
 800d03c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d040:	3501      	adds	r5, #1
 800d042:	615e      	str	r6, [r3, #20]
 800d044:	6125      	str	r5, [r4, #16]
 800d046:	4620      	mov	r0, r4
 800d048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d04c:	0800e849 	.word	0x0800e849
 800d050:	0800e8d4 	.word	0x0800e8d4

0800d054 <__s2b>:
 800d054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d058:	4615      	mov	r5, r2
 800d05a:	2209      	movs	r2, #9
 800d05c:	461f      	mov	r7, r3
 800d05e:	3308      	adds	r3, #8
 800d060:	460c      	mov	r4, r1
 800d062:	fb93 f3f2 	sdiv	r3, r3, r2
 800d066:	4606      	mov	r6, r0
 800d068:	2201      	movs	r2, #1
 800d06a:	2100      	movs	r1, #0
 800d06c:	429a      	cmp	r2, r3
 800d06e:	db09      	blt.n	800d084 <__s2b+0x30>
 800d070:	4630      	mov	r0, r6
 800d072:	f7ff ff47 	bl	800cf04 <_Balloc>
 800d076:	b940      	cbnz	r0, 800d08a <__s2b+0x36>
 800d078:	4602      	mov	r2, r0
 800d07a:	21ce      	movs	r1, #206	; 0xce
 800d07c:	4b18      	ldr	r3, [pc, #96]	; (800d0e0 <__s2b+0x8c>)
 800d07e:	4819      	ldr	r0, [pc, #100]	; (800d0e4 <__s2b+0x90>)
 800d080:	f7fe fc16 	bl	800b8b0 <__assert_func>
 800d084:	0052      	lsls	r2, r2, #1
 800d086:	3101      	adds	r1, #1
 800d088:	e7f0      	b.n	800d06c <__s2b+0x18>
 800d08a:	9b08      	ldr	r3, [sp, #32]
 800d08c:	2d09      	cmp	r5, #9
 800d08e:	6143      	str	r3, [r0, #20]
 800d090:	f04f 0301 	mov.w	r3, #1
 800d094:	6103      	str	r3, [r0, #16]
 800d096:	dd16      	ble.n	800d0c6 <__s2b+0x72>
 800d098:	f104 0909 	add.w	r9, r4, #9
 800d09c:	46c8      	mov	r8, r9
 800d09e:	442c      	add	r4, r5
 800d0a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0a4:	4601      	mov	r1, r0
 800d0a6:	220a      	movs	r2, #10
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	3b30      	subs	r3, #48	; 0x30
 800d0ac:	f7ff ff8c 	bl	800cfc8 <__multadd>
 800d0b0:	45a0      	cmp	r8, r4
 800d0b2:	d1f5      	bne.n	800d0a0 <__s2b+0x4c>
 800d0b4:	f1a5 0408 	sub.w	r4, r5, #8
 800d0b8:	444c      	add	r4, r9
 800d0ba:	1b2d      	subs	r5, r5, r4
 800d0bc:	1963      	adds	r3, r4, r5
 800d0be:	42bb      	cmp	r3, r7
 800d0c0:	db04      	blt.n	800d0cc <__s2b+0x78>
 800d0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c6:	2509      	movs	r5, #9
 800d0c8:	340a      	adds	r4, #10
 800d0ca:	e7f6      	b.n	800d0ba <__s2b+0x66>
 800d0cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0d0:	4601      	mov	r1, r0
 800d0d2:	220a      	movs	r2, #10
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	3b30      	subs	r3, #48	; 0x30
 800d0d8:	f7ff ff76 	bl	800cfc8 <__multadd>
 800d0dc:	e7ee      	b.n	800d0bc <__s2b+0x68>
 800d0de:	bf00      	nop
 800d0e0:	0800e849 	.word	0x0800e849
 800d0e4:	0800e8d4 	.word	0x0800e8d4

0800d0e8 <__hi0bits>:
 800d0e8:	0c02      	lsrs	r2, r0, #16
 800d0ea:	0412      	lsls	r2, r2, #16
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	b9ca      	cbnz	r2, 800d124 <__hi0bits+0x3c>
 800d0f0:	0403      	lsls	r3, r0, #16
 800d0f2:	2010      	movs	r0, #16
 800d0f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d0f8:	bf04      	itt	eq
 800d0fa:	021b      	lsleq	r3, r3, #8
 800d0fc:	3008      	addeq	r0, #8
 800d0fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d102:	bf04      	itt	eq
 800d104:	011b      	lsleq	r3, r3, #4
 800d106:	3004      	addeq	r0, #4
 800d108:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d10c:	bf04      	itt	eq
 800d10e:	009b      	lsleq	r3, r3, #2
 800d110:	3002      	addeq	r0, #2
 800d112:	2b00      	cmp	r3, #0
 800d114:	db05      	blt.n	800d122 <__hi0bits+0x3a>
 800d116:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d11a:	f100 0001 	add.w	r0, r0, #1
 800d11e:	bf08      	it	eq
 800d120:	2020      	moveq	r0, #32
 800d122:	4770      	bx	lr
 800d124:	2000      	movs	r0, #0
 800d126:	e7e5      	b.n	800d0f4 <__hi0bits+0xc>

0800d128 <__lo0bits>:
 800d128:	6803      	ldr	r3, [r0, #0]
 800d12a:	4602      	mov	r2, r0
 800d12c:	f013 0007 	ands.w	r0, r3, #7
 800d130:	d00b      	beq.n	800d14a <__lo0bits+0x22>
 800d132:	07d9      	lsls	r1, r3, #31
 800d134:	d421      	bmi.n	800d17a <__lo0bits+0x52>
 800d136:	0798      	lsls	r0, r3, #30
 800d138:	bf49      	itett	mi
 800d13a:	085b      	lsrmi	r3, r3, #1
 800d13c:	089b      	lsrpl	r3, r3, #2
 800d13e:	2001      	movmi	r0, #1
 800d140:	6013      	strmi	r3, [r2, #0]
 800d142:	bf5c      	itt	pl
 800d144:	2002      	movpl	r0, #2
 800d146:	6013      	strpl	r3, [r2, #0]
 800d148:	4770      	bx	lr
 800d14a:	b299      	uxth	r1, r3
 800d14c:	b909      	cbnz	r1, 800d152 <__lo0bits+0x2a>
 800d14e:	2010      	movs	r0, #16
 800d150:	0c1b      	lsrs	r3, r3, #16
 800d152:	b2d9      	uxtb	r1, r3
 800d154:	b909      	cbnz	r1, 800d15a <__lo0bits+0x32>
 800d156:	3008      	adds	r0, #8
 800d158:	0a1b      	lsrs	r3, r3, #8
 800d15a:	0719      	lsls	r1, r3, #28
 800d15c:	bf04      	itt	eq
 800d15e:	091b      	lsreq	r3, r3, #4
 800d160:	3004      	addeq	r0, #4
 800d162:	0799      	lsls	r1, r3, #30
 800d164:	bf04      	itt	eq
 800d166:	089b      	lsreq	r3, r3, #2
 800d168:	3002      	addeq	r0, #2
 800d16a:	07d9      	lsls	r1, r3, #31
 800d16c:	d403      	bmi.n	800d176 <__lo0bits+0x4e>
 800d16e:	085b      	lsrs	r3, r3, #1
 800d170:	f100 0001 	add.w	r0, r0, #1
 800d174:	d003      	beq.n	800d17e <__lo0bits+0x56>
 800d176:	6013      	str	r3, [r2, #0]
 800d178:	4770      	bx	lr
 800d17a:	2000      	movs	r0, #0
 800d17c:	4770      	bx	lr
 800d17e:	2020      	movs	r0, #32
 800d180:	4770      	bx	lr
	...

0800d184 <__i2b>:
 800d184:	b510      	push	{r4, lr}
 800d186:	460c      	mov	r4, r1
 800d188:	2101      	movs	r1, #1
 800d18a:	f7ff febb 	bl	800cf04 <_Balloc>
 800d18e:	4602      	mov	r2, r0
 800d190:	b928      	cbnz	r0, 800d19e <__i2b+0x1a>
 800d192:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d196:	4b04      	ldr	r3, [pc, #16]	; (800d1a8 <__i2b+0x24>)
 800d198:	4804      	ldr	r0, [pc, #16]	; (800d1ac <__i2b+0x28>)
 800d19a:	f7fe fb89 	bl	800b8b0 <__assert_func>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	6144      	str	r4, [r0, #20]
 800d1a2:	6103      	str	r3, [r0, #16]
 800d1a4:	bd10      	pop	{r4, pc}
 800d1a6:	bf00      	nop
 800d1a8:	0800e849 	.word	0x0800e849
 800d1ac:	0800e8d4 	.word	0x0800e8d4

0800d1b0 <__multiply>:
 800d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	4691      	mov	r9, r2
 800d1b6:	690a      	ldr	r2, [r1, #16]
 800d1b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1bc:	460c      	mov	r4, r1
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	bfbe      	ittt	lt
 800d1c2:	460b      	movlt	r3, r1
 800d1c4:	464c      	movlt	r4, r9
 800d1c6:	4699      	movlt	r9, r3
 800d1c8:	6927      	ldr	r7, [r4, #16]
 800d1ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d1ce:	68a3      	ldr	r3, [r4, #8]
 800d1d0:	6861      	ldr	r1, [r4, #4]
 800d1d2:	eb07 060a 	add.w	r6, r7, sl
 800d1d6:	42b3      	cmp	r3, r6
 800d1d8:	b085      	sub	sp, #20
 800d1da:	bfb8      	it	lt
 800d1dc:	3101      	addlt	r1, #1
 800d1de:	f7ff fe91 	bl	800cf04 <_Balloc>
 800d1e2:	b930      	cbnz	r0, 800d1f2 <__multiply+0x42>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	f240 115d 	movw	r1, #349	; 0x15d
 800d1ea:	4b43      	ldr	r3, [pc, #268]	; (800d2f8 <__multiply+0x148>)
 800d1ec:	4843      	ldr	r0, [pc, #268]	; (800d2fc <__multiply+0x14c>)
 800d1ee:	f7fe fb5f 	bl	800b8b0 <__assert_func>
 800d1f2:	f100 0514 	add.w	r5, r0, #20
 800d1f6:	462b      	mov	r3, r5
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d1fe:	4543      	cmp	r3, r8
 800d200:	d321      	bcc.n	800d246 <__multiply+0x96>
 800d202:	f104 0314 	add.w	r3, r4, #20
 800d206:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d20a:	f109 0314 	add.w	r3, r9, #20
 800d20e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d212:	9202      	str	r2, [sp, #8]
 800d214:	1b3a      	subs	r2, r7, r4
 800d216:	3a15      	subs	r2, #21
 800d218:	f022 0203 	bic.w	r2, r2, #3
 800d21c:	3204      	adds	r2, #4
 800d21e:	f104 0115 	add.w	r1, r4, #21
 800d222:	428f      	cmp	r7, r1
 800d224:	bf38      	it	cc
 800d226:	2204      	movcc	r2, #4
 800d228:	9201      	str	r2, [sp, #4]
 800d22a:	9a02      	ldr	r2, [sp, #8]
 800d22c:	9303      	str	r3, [sp, #12]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d80c      	bhi.n	800d24c <__multiply+0x9c>
 800d232:	2e00      	cmp	r6, #0
 800d234:	dd03      	ble.n	800d23e <__multiply+0x8e>
 800d236:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d059      	beq.n	800d2f2 <__multiply+0x142>
 800d23e:	6106      	str	r6, [r0, #16]
 800d240:	b005      	add	sp, #20
 800d242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d246:	f843 2b04 	str.w	r2, [r3], #4
 800d24a:	e7d8      	b.n	800d1fe <__multiply+0x4e>
 800d24c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d250:	f1ba 0f00 	cmp.w	sl, #0
 800d254:	d023      	beq.n	800d29e <__multiply+0xee>
 800d256:	46a9      	mov	r9, r5
 800d258:	f04f 0c00 	mov.w	ip, #0
 800d25c:	f104 0e14 	add.w	lr, r4, #20
 800d260:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d264:	f8d9 1000 	ldr.w	r1, [r9]
 800d268:	fa1f fb82 	uxth.w	fp, r2
 800d26c:	b289      	uxth	r1, r1
 800d26e:	fb0a 110b 	mla	r1, sl, fp, r1
 800d272:	4461      	add	r1, ip
 800d274:	f8d9 c000 	ldr.w	ip, [r9]
 800d278:	0c12      	lsrs	r2, r2, #16
 800d27a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d27e:	fb0a c202 	mla	r2, sl, r2, ip
 800d282:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d286:	b289      	uxth	r1, r1
 800d288:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d28c:	4577      	cmp	r7, lr
 800d28e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d292:	f849 1b04 	str.w	r1, [r9], #4
 800d296:	d8e3      	bhi.n	800d260 <__multiply+0xb0>
 800d298:	9a01      	ldr	r2, [sp, #4]
 800d29a:	f845 c002 	str.w	ip, [r5, r2]
 800d29e:	9a03      	ldr	r2, [sp, #12]
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d2a6:	f1b9 0f00 	cmp.w	r9, #0
 800d2aa:	d020      	beq.n	800d2ee <__multiply+0x13e>
 800d2ac:	46ae      	mov	lr, r5
 800d2ae:	f04f 0a00 	mov.w	sl, #0
 800d2b2:	6829      	ldr	r1, [r5, #0]
 800d2b4:	f104 0c14 	add.w	ip, r4, #20
 800d2b8:	f8bc b000 	ldrh.w	fp, [ip]
 800d2bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d2c0:	b289      	uxth	r1, r1
 800d2c2:	fb09 220b 	mla	r2, r9, fp, r2
 800d2c6:	4492      	add	sl, r2
 800d2c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d2cc:	f84e 1b04 	str.w	r1, [lr], #4
 800d2d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d2d4:	f8be 1000 	ldrh.w	r1, [lr]
 800d2d8:	0c12      	lsrs	r2, r2, #16
 800d2da:	fb09 1102 	mla	r1, r9, r2, r1
 800d2de:	4567      	cmp	r7, ip
 800d2e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d2e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d2e8:	d8e6      	bhi.n	800d2b8 <__multiply+0x108>
 800d2ea:	9a01      	ldr	r2, [sp, #4]
 800d2ec:	50a9      	str	r1, [r5, r2]
 800d2ee:	3504      	adds	r5, #4
 800d2f0:	e79b      	b.n	800d22a <__multiply+0x7a>
 800d2f2:	3e01      	subs	r6, #1
 800d2f4:	e79d      	b.n	800d232 <__multiply+0x82>
 800d2f6:	bf00      	nop
 800d2f8:	0800e849 	.word	0x0800e849
 800d2fc:	0800e8d4 	.word	0x0800e8d4

0800d300 <__pow5mult>:
 800d300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d304:	4615      	mov	r5, r2
 800d306:	f012 0203 	ands.w	r2, r2, #3
 800d30a:	4606      	mov	r6, r0
 800d30c:	460f      	mov	r7, r1
 800d30e:	d007      	beq.n	800d320 <__pow5mult+0x20>
 800d310:	4c25      	ldr	r4, [pc, #148]	; (800d3a8 <__pow5mult+0xa8>)
 800d312:	3a01      	subs	r2, #1
 800d314:	2300      	movs	r3, #0
 800d316:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d31a:	f7ff fe55 	bl	800cfc8 <__multadd>
 800d31e:	4607      	mov	r7, r0
 800d320:	10ad      	asrs	r5, r5, #2
 800d322:	d03d      	beq.n	800d3a0 <__pow5mult+0xa0>
 800d324:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d326:	b97c      	cbnz	r4, 800d348 <__pow5mult+0x48>
 800d328:	2010      	movs	r0, #16
 800d32a:	f7ff fdb7 	bl	800ce9c <malloc>
 800d32e:	4602      	mov	r2, r0
 800d330:	6270      	str	r0, [r6, #36]	; 0x24
 800d332:	b928      	cbnz	r0, 800d340 <__pow5mult+0x40>
 800d334:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d338:	4b1c      	ldr	r3, [pc, #112]	; (800d3ac <__pow5mult+0xac>)
 800d33a:	481d      	ldr	r0, [pc, #116]	; (800d3b0 <__pow5mult+0xb0>)
 800d33c:	f7fe fab8 	bl	800b8b0 <__assert_func>
 800d340:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d344:	6004      	str	r4, [r0, #0]
 800d346:	60c4      	str	r4, [r0, #12]
 800d348:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d34c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d350:	b94c      	cbnz	r4, 800d366 <__pow5mult+0x66>
 800d352:	f240 2171 	movw	r1, #625	; 0x271
 800d356:	4630      	mov	r0, r6
 800d358:	f7ff ff14 	bl	800d184 <__i2b>
 800d35c:	2300      	movs	r3, #0
 800d35e:	4604      	mov	r4, r0
 800d360:	f8c8 0008 	str.w	r0, [r8, #8]
 800d364:	6003      	str	r3, [r0, #0]
 800d366:	f04f 0900 	mov.w	r9, #0
 800d36a:	07eb      	lsls	r3, r5, #31
 800d36c:	d50a      	bpl.n	800d384 <__pow5mult+0x84>
 800d36e:	4639      	mov	r1, r7
 800d370:	4622      	mov	r2, r4
 800d372:	4630      	mov	r0, r6
 800d374:	f7ff ff1c 	bl	800d1b0 <__multiply>
 800d378:	4680      	mov	r8, r0
 800d37a:	4639      	mov	r1, r7
 800d37c:	4630      	mov	r0, r6
 800d37e:	f7ff fe01 	bl	800cf84 <_Bfree>
 800d382:	4647      	mov	r7, r8
 800d384:	106d      	asrs	r5, r5, #1
 800d386:	d00b      	beq.n	800d3a0 <__pow5mult+0xa0>
 800d388:	6820      	ldr	r0, [r4, #0]
 800d38a:	b938      	cbnz	r0, 800d39c <__pow5mult+0x9c>
 800d38c:	4622      	mov	r2, r4
 800d38e:	4621      	mov	r1, r4
 800d390:	4630      	mov	r0, r6
 800d392:	f7ff ff0d 	bl	800d1b0 <__multiply>
 800d396:	6020      	str	r0, [r4, #0]
 800d398:	f8c0 9000 	str.w	r9, [r0]
 800d39c:	4604      	mov	r4, r0
 800d39e:	e7e4      	b.n	800d36a <__pow5mult+0x6a>
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3a6:	bf00      	nop
 800d3a8:	0800ea20 	.word	0x0800ea20
 800d3ac:	0800e630 	.word	0x0800e630
 800d3b0:	0800e8d4 	.word	0x0800e8d4

0800d3b4 <__lshift>:
 800d3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	4607      	mov	r7, r0
 800d3bc:	4691      	mov	r9, r2
 800d3be:	6923      	ldr	r3, [r4, #16]
 800d3c0:	6849      	ldr	r1, [r1, #4]
 800d3c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3c6:	68a3      	ldr	r3, [r4, #8]
 800d3c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3cc:	f108 0601 	add.w	r6, r8, #1
 800d3d0:	42b3      	cmp	r3, r6
 800d3d2:	db0b      	blt.n	800d3ec <__lshift+0x38>
 800d3d4:	4638      	mov	r0, r7
 800d3d6:	f7ff fd95 	bl	800cf04 <_Balloc>
 800d3da:	4605      	mov	r5, r0
 800d3dc:	b948      	cbnz	r0, 800d3f2 <__lshift+0x3e>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d3e4:	4b29      	ldr	r3, [pc, #164]	; (800d48c <__lshift+0xd8>)
 800d3e6:	482a      	ldr	r0, [pc, #168]	; (800d490 <__lshift+0xdc>)
 800d3e8:	f7fe fa62 	bl	800b8b0 <__assert_func>
 800d3ec:	3101      	adds	r1, #1
 800d3ee:	005b      	lsls	r3, r3, #1
 800d3f0:	e7ee      	b.n	800d3d0 <__lshift+0x1c>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	f100 0114 	add.w	r1, r0, #20
 800d3f8:	f100 0210 	add.w	r2, r0, #16
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	4553      	cmp	r3, sl
 800d400:	db37      	blt.n	800d472 <__lshift+0xbe>
 800d402:	6920      	ldr	r0, [r4, #16]
 800d404:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d408:	f104 0314 	add.w	r3, r4, #20
 800d40c:	f019 091f 	ands.w	r9, r9, #31
 800d410:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d414:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d418:	d02f      	beq.n	800d47a <__lshift+0xc6>
 800d41a:	468a      	mov	sl, r1
 800d41c:	f04f 0c00 	mov.w	ip, #0
 800d420:	f1c9 0e20 	rsb	lr, r9, #32
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	fa02 f209 	lsl.w	r2, r2, r9
 800d42a:	ea42 020c 	orr.w	r2, r2, ip
 800d42e:	f84a 2b04 	str.w	r2, [sl], #4
 800d432:	f853 2b04 	ldr.w	r2, [r3], #4
 800d436:	4298      	cmp	r0, r3
 800d438:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d43c:	d8f2      	bhi.n	800d424 <__lshift+0x70>
 800d43e:	1b03      	subs	r3, r0, r4
 800d440:	3b15      	subs	r3, #21
 800d442:	f023 0303 	bic.w	r3, r3, #3
 800d446:	3304      	adds	r3, #4
 800d448:	f104 0215 	add.w	r2, r4, #21
 800d44c:	4290      	cmp	r0, r2
 800d44e:	bf38      	it	cc
 800d450:	2304      	movcc	r3, #4
 800d452:	f841 c003 	str.w	ip, [r1, r3]
 800d456:	f1bc 0f00 	cmp.w	ip, #0
 800d45a:	d001      	beq.n	800d460 <__lshift+0xac>
 800d45c:	f108 0602 	add.w	r6, r8, #2
 800d460:	3e01      	subs	r6, #1
 800d462:	4638      	mov	r0, r7
 800d464:	4621      	mov	r1, r4
 800d466:	612e      	str	r6, [r5, #16]
 800d468:	f7ff fd8c 	bl	800cf84 <_Bfree>
 800d46c:	4628      	mov	r0, r5
 800d46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d472:	f842 0f04 	str.w	r0, [r2, #4]!
 800d476:	3301      	adds	r3, #1
 800d478:	e7c1      	b.n	800d3fe <__lshift+0x4a>
 800d47a:	3904      	subs	r1, #4
 800d47c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d480:	4298      	cmp	r0, r3
 800d482:	f841 2f04 	str.w	r2, [r1, #4]!
 800d486:	d8f9      	bhi.n	800d47c <__lshift+0xc8>
 800d488:	e7ea      	b.n	800d460 <__lshift+0xac>
 800d48a:	bf00      	nop
 800d48c:	0800e849 	.word	0x0800e849
 800d490:	0800e8d4 	.word	0x0800e8d4

0800d494 <__mcmp>:
 800d494:	4603      	mov	r3, r0
 800d496:	690a      	ldr	r2, [r1, #16]
 800d498:	6900      	ldr	r0, [r0, #16]
 800d49a:	b530      	push	{r4, r5, lr}
 800d49c:	1a80      	subs	r0, r0, r2
 800d49e:	d10d      	bne.n	800d4bc <__mcmp+0x28>
 800d4a0:	3314      	adds	r3, #20
 800d4a2:	3114      	adds	r1, #20
 800d4a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d4a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d4ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d4b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d4b4:	4295      	cmp	r5, r2
 800d4b6:	d002      	beq.n	800d4be <__mcmp+0x2a>
 800d4b8:	d304      	bcc.n	800d4c4 <__mcmp+0x30>
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	bd30      	pop	{r4, r5, pc}
 800d4be:	42a3      	cmp	r3, r4
 800d4c0:	d3f4      	bcc.n	800d4ac <__mcmp+0x18>
 800d4c2:	e7fb      	b.n	800d4bc <__mcmp+0x28>
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	e7f8      	b.n	800d4bc <__mcmp+0x28>
	...

0800d4cc <__mdiff>:
 800d4cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d0:	460d      	mov	r5, r1
 800d4d2:	4607      	mov	r7, r0
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	4614      	mov	r4, r2
 800d4da:	f7ff ffdb 	bl	800d494 <__mcmp>
 800d4de:	1e06      	subs	r6, r0, #0
 800d4e0:	d111      	bne.n	800d506 <__mdiff+0x3a>
 800d4e2:	4631      	mov	r1, r6
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	f7ff fd0d 	bl	800cf04 <_Balloc>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	b928      	cbnz	r0, 800d4fa <__mdiff+0x2e>
 800d4ee:	f240 2132 	movw	r1, #562	; 0x232
 800d4f2:	4b3a      	ldr	r3, [pc, #232]	; (800d5dc <__mdiff+0x110>)
 800d4f4:	483a      	ldr	r0, [pc, #232]	; (800d5e0 <__mdiff+0x114>)
 800d4f6:	f7fe f9db 	bl	800b8b0 <__assert_func>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d500:	4610      	mov	r0, r2
 800d502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d506:	bfa4      	itt	ge
 800d508:	4623      	movge	r3, r4
 800d50a:	462c      	movge	r4, r5
 800d50c:	4638      	mov	r0, r7
 800d50e:	6861      	ldr	r1, [r4, #4]
 800d510:	bfa6      	itte	ge
 800d512:	461d      	movge	r5, r3
 800d514:	2600      	movge	r6, #0
 800d516:	2601      	movlt	r6, #1
 800d518:	f7ff fcf4 	bl	800cf04 <_Balloc>
 800d51c:	4602      	mov	r2, r0
 800d51e:	b918      	cbnz	r0, 800d528 <__mdiff+0x5c>
 800d520:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d524:	4b2d      	ldr	r3, [pc, #180]	; (800d5dc <__mdiff+0x110>)
 800d526:	e7e5      	b.n	800d4f4 <__mdiff+0x28>
 800d528:	f102 0814 	add.w	r8, r2, #20
 800d52c:	46c2      	mov	sl, r8
 800d52e:	f04f 0c00 	mov.w	ip, #0
 800d532:	6927      	ldr	r7, [r4, #16]
 800d534:	60c6      	str	r6, [r0, #12]
 800d536:	692e      	ldr	r6, [r5, #16]
 800d538:	f104 0014 	add.w	r0, r4, #20
 800d53c:	f105 0914 	add.w	r9, r5, #20
 800d540:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d544:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d548:	3410      	adds	r4, #16
 800d54a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d54e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d552:	fa1f f18b 	uxth.w	r1, fp
 800d556:	448c      	add	ip, r1
 800d558:	b299      	uxth	r1, r3
 800d55a:	0c1b      	lsrs	r3, r3, #16
 800d55c:	ebac 0101 	sub.w	r1, ip, r1
 800d560:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d564:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d568:	b289      	uxth	r1, r1
 800d56a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d56e:	454e      	cmp	r6, r9
 800d570:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d574:	f84a 3b04 	str.w	r3, [sl], #4
 800d578:	d8e7      	bhi.n	800d54a <__mdiff+0x7e>
 800d57a:	1b73      	subs	r3, r6, r5
 800d57c:	3b15      	subs	r3, #21
 800d57e:	f023 0303 	bic.w	r3, r3, #3
 800d582:	3515      	adds	r5, #21
 800d584:	3304      	adds	r3, #4
 800d586:	42ae      	cmp	r6, r5
 800d588:	bf38      	it	cc
 800d58a:	2304      	movcc	r3, #4
 800d58c:	4418      	add	r0, r3
 800d58e:	4443      	add	r3, r8
 800d590:	461e      	mov	r6, r3
 800d592:	4605      	mov	r5, r0
 800d594:	4575      	cmp	r5, lr
 800d596:	d30e      	bcc.n	800d5b6 <__mdiff+0xea>
 800d598:	f10e 0103 	add.w	r1, lr, #3
 800d59c:	1a09      	subs	r1, r1, r0
 800d59e:	f021 0103 	bic.w	r1, r1, #3
 800d5a2:	3803      	subs	r0, #3
 800d5a4:	4586      	cmp	lr, r0
 800d5a6:	bf38      	it	cc
 800d5a8:	2100      	movcc	r1, #0
 800d5aa:	4419      	add	r1, r3
 800d5ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d5b0:	b18b      	cbz	r3, 800d5d6 <__mdiff+0x10a>
 800d5b2:	6117      	str	r7, [r2, #16]
 800d5b4:	e7a4      	b.n	800d500 <__mdiff+0x34>
 800d5b6:	f855 8b04 	ldr.w	r8, [r5], #4
 800d5ba:	fa1f f188 	uxth.w	r1, r8
 800d5be:	4461      	add	r1, ip
 800d5c0:	140c      	asrs	r4, r1, #16
 800d5c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d5c6:	b289      	uxth	r1, r1
 800d5c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d5cc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d5d0:	f846 1b04 	str.w	r1, [r6], #4
 800d5d4:	e7de      	b.n	800d594 <__mdiff+0xc8>
 800d5d6:	3f01      	subs	r7, #1
 800d5d8:	e7e8      	b.n	800d5ac <__mdiff+0xe0>
 800d5da:	bf00      	nop
 800d5dc:	0800e849 	.word	0x0800e849
 800d5e0:	0800e8d4 	.word	0x0800e8d4

0800d5e4 <__ulp>:
 800d5e4:	4b11      	ldr	r3, [pc, #68]	; (800d62c <__ulp+0x48>)
 800d5e6:	400b      	ands	r3, r1
 800d5e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	dd02      	ble.n	800d5f6 <__ulp+0x12>
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	4770      	bx	lr
 800d5f6:	425b      	negs	r3, r3
 800d5f8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d5fc:	f04f 0000 	mov.w	r0, #0
 800d600:	f04f 0100 	mov.w	r1, #0
 800d604:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d608:	da04      	bge.n	800d614 <__ulp+0x30>
 800d60a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d60e:	fa43 f102 	asr.w	r1, r3, r2
 800d612:	4770      	bx	lr
 800d614:	f1a2 0314 	sub.w	r3, r2, #20
 800d618:	2b1e      	cmp	r3, #30
 800d61a:	bfd6      	itet	le
 800d61c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d620:	2301      	movgt	r3, #1
 800d622:	fa22 f303 	lsrle.w	r3, r2, r3
 800d626:	4618      	mov	r0, r3
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	7ff00000 	.word	0x7ff00000

0800d630 <__b2d>:
 800d630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d634:	6907      	ldr	r7, [r0, #16]
 800d636:	f100 0914 	add.w	r9, r0, #20
 800d63a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d63e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d642:	f1a7 0804 	sub.w	r8, r7, #4
 800d646:	4630      	mov	r0, r6
 800d648:	f7ff fd4e 	bl	800d0e8 <__hi0bits>
 800d64c:	f1c0 0320 	rsb	r3, r0, #32
 800d650:	280a      	cmp	r0, #10
 800d652:	600b      	str	r3, [r1, #0]
 800d654:	491f      	ldr	r1, [pc, #124]	; (800d6d4 <__b2d+0xa4>)
 800d656:	dc17      	bgt.n	800d688 <__b2d+0x58>
 800d658:	45c1      	cmp	r9, r8
 800d65a:	bf28      	it	cs
 800d65c:	2200      	movcs	r2, #0
 800d65e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d662:	fa26 f30c 	lsr.w	r3, r6, ip
 800d666:	bf38      	it	cc
 800d668:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d66c:	ea43 0501 	orr.w	r5, r3, r1
 800d670:	f100 0315 	add.w	r3, r0, #21
 800d674:	fa06 f303 	lsl.w	r3, r6, r3
 800d678:	fa22 f20c 	lsr.w	r2, r2, ip
 800d67c:	ea43 0402 	orr.w	r4, r3, r2
 800d680:	4620      	mov	r0, r4
 800d682:	4629      	mov	r1, r5
 800d684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d688:	45c1      	cmp	r9, r8
 800d68a:	bf2e      	itee	cs
 800d68c:	2200      	movcs	r2, #0
 800d68e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d692:	f1a7 0808 	subcc.w	r8, r7, #8
 800d696:	f1b0 030b 	subs.w	r3, r0, #11
 800d69a:	d016      	beq.n	800d6ca <__b2d+0x9a>
 800d69c:	f1c3 0720 	rsb	r7, r3, #32
 800d6a0:	fa22 f107 	lsr.w	r1, r2, r7
 800d6a4:	45c8      	cmp	r8, r9
 800d6a6:	fa06 f603 	lsl.w	r6, r6, r3
 800d6aa:	ea46 0601 	orr.w	r6, r6, r1
 800d6ae:	bf94      	ite	ls
 800d6b0:	2100      	movls	r1, #0
 800d6b2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d6b6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d6ba:	fa02 f003 	lsl.w	r0, r2, r3
 800d6be:	40f9      	lsrs	r1, r7
 800d6c0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d6c4:	ea40 0401 	orr.w	r4, r0, r1
 800d6c8:	e7da      	b.n	800d680 <__b2d+0x50>
 800d6ca:	4614      	mov	r4, r2
 800d6cc:	ea46 0501 	orr.w	r5, r6, r1
 800d6d0:	e7d6      	b.n	800d680 <__b2d+0x50>
 800d6d2:	bf00      	nop
 800d6d4:	3ff00000 	.word	0x3ff00000

0800d6d8 <__d2b>:
 800d6d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d6dc:	2101      	movs	r1, #1
 800d6de:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d6e2:	4690      	mov	r8, r2
 800d6e4:	461d      	mov	r5, r3
 800d6e6:	f7ff fc0d 	bl	800cf04 <_Balloc>
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	b930      	cbnz	r0, 800d6fc <__d2b+0x24>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	f240 310a 	movw	r1, #778	; 0x30a
 800d6f4:	4b24      	ldr	r3, [pc, #144]	; (800d788 <__d2b+0xb0>)
 800d6f6:	4825      	ldr	r0, [pc, #148]	; (800d78c <__d2b+0xb4>)
 800d6f8:	f7fe f8da 	bl	800b8b0 <__assert_func>
 800d6fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d700:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d704:	bb2d      	cbnz	r5, 800d752 <__d2b+0x7a>
 800d706:	9301      	str	r3, [sp, #4]
 800d708:	f1b8 0300 	subs.w	r3, r8, #0
 800d70c:	d026      	beq.n	800d75c <__d2b+0x84>
 800d70e:	4668      	mov	r0, sp
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	f7ff fd09 	bl	800d128 <__lo0bits>
 800d716:	9900      	ldr	r1, [sp, #0]
 800d718:	b1f0      	cbz	r0, 800d758 <__d2b+0x80>
 800d71a:	9a01      	ldr	r2, [sp, #4]
 800d71c:	f1c0 0320 	rsb	r3, r0, #32
 800d720:	fa02 f303 	lsl.w	r3, r2, r3
 800d724:	430b      	orrs	r3, r1
 800d726:	40c2      	lsrs	r2, r0
 800d728:	6163      	str	r3, [r4, #20]
 800d72a:	9201      	str	r2, [sp, #4]
 800d72c:	9b01      	ldr	r3, [sp, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	bf14      	ite	ne
 800d732:	2102      	movne	r1, #2
 800d734:	2101      	moveq	r1, #1
 800d736:	61a3      	str	r3, [r4, #24]
 800d738:	6121      	str	r1, [r4, #16]
 800d73a:	b1c5      	cbz	r5, 800d76e <__d2b+0x96>
 800d73c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d740:	4405      	add	r5, r0
 800d742:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d746:	603d      	str	r5, [r7, #0]
 800d748:	6030      	str	r0, [r6, #0]
 800d74a:	4620      	mov	r0, r4
 800d74c:	b002      	add	sp, #8
 800d74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d756:	e7d6      	b.n	800d706 <__d2b+0x2e>
 800d758:	6161      	str	r1, [r4, #20]
 800d75a:	e7e7      	b.n	800d72c <__d2b+0x54>
 800d75c:	a801      	add	r0, sp, #4
 800d75e:	f7ff fce3 	bl	800d128 <__lo0bits>
 800d762:	2101      	movs	r1, #1
 800d764:	9b01      	ldr	r3, [sp, #4]
 800d766:	6121      	str	r1, [r4, #16]
 800d768:	6163      	str	r3, [r4, #20]
 800d76a:	3020      	adds	r0, #32
 800d76c:	e7e5      	b.n	800d73a <__d2b+0x62>
 800d76e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d772:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d776:	6038      	str	r0, [r7, #0]
 800d778:	6918      	ldr	r0, [r3, #16]
 800d77a:	f7ff fcb5 	bl	800d0e8 <__hi0bits>
 800d77e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d782:	6031      	str	r1, [r6, #0]
 800d784:	e7e1      	b.n	800d74a <__d2b+0x72>
 800d786:	bf00      	nop
 800d788:	0800e849 	.word	0x0800e849
 800d78c:	0800e8d4 	.word	0x0800e8d4

0800d790 <__ratio>:
 800d790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	4688      	mov	r8, r1
 800d796:	4669      	mov	r1, sp
 800d798:	4681      	mov	r9, r0
 800d79a:	f7ff ff49 	bl	800d630 <__b2d>
 800d79e:	460f      	mov	r7, r1
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	460d      	mov	r5, r1
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	a901      	add	r1, sp, #4
 800d7a8:	f7ff ff42 	bl	800d630 <__b2d>
 800d7ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d7b4:	468b      	mov	fp, r1
 800d7b6:	eba3 0c02 	sub.w	ip, r3, r2
 800d7ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7be:	1a9b      	subs	r3, r3, r2
 800d7c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	bfd5      	itete	le
 800d7c8:	460a      	movle	r2, r1
 800d7ca:	462a      	movgt	r2, r5
 800d7cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d7d0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d7d4:	bfd8      	it	le
 800d7d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d7da:	465b      	mov	r3, fp
 800d7dc:	4602      	mov	r2, r0
 800d7de:	4639      	mov	r1, r7
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f7f2 ffad 	bl	8000740 <__aeabi_ddiv>
 800d7e6:	b003      	add	sp, #12
 800d7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7ec <__copybits>:
 800d7ec:	3901      	subs	r1, #1
 800d7ee:	b570      	push	{r4, r5, r6, lr}
 800d7f0:	1149      	asrs	r1, r1, #5
 800d7f2:	6914      	ldr	r4, [r2, #16]
 800d7f4:	3101      	adds	r1, #1
 800d7f6:	f102 0314 	add.w	r3, r2, #20
 800d7fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d7fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d802:	1f05      	subs	r5, r0, #4
 800d804:	42a3      	cmp	r3, r4
 800d806:	d30c      	bcc.n	800d822 <__copybits+0x36>
 800d808:	1aa3      	subs	r3, r4, r2
 800d80a:	3b11      	subs	r3, #17
 800d80c:	f023 0303 	bic.w	r3, r3, #3
 800d810:	3211      	adds	r2, #17
 800d812:	42a2      	cmp	r2, r4
 800d814:	bf88      	it	hi
 800d816:	2300      	movhi	r3, #0
 800d818:	4418      	add	r0, r3
 800d81a:	2300      	movs	r3, #0
 800d81c:	4288      	cmp	r0, r1
 800d81e:	d305      	bcc.n	800d82c <__copybits+0x40>
 800d820:	bd70      	pop	{r4, r5, r6, pc}
 800d822:	f853 6b04 	ldr.w	r6, [r3], #4
 800d826:	f845 6f04 	str.w	r6, [r5, #4]!
 800d82a:	e7eb      	b.n	800d804 <__copybits+0x18>
 800d82c:	f840 3b04 	str.w	r3, [r0], #4
 800d830:	e7f4      	b.n	800d81c <__copybits+0x30>

0800d832 <__any_on>:
 800d832:	f100 0214 	add.w	r2, r0, #20
 800d836:	6900      	ldr	r0, [r0, #16]
 800d838:	114b      	asrs	r3, r1, #5
 800d83a:	4298      	cmp	r0, r3
 800d83c:	b510      	push	{r4, lr}
 800d83e:	db11      	blt.n	800d864 <__any_on+0x32>
 800d840:	dd0a      	ble.n	800d858 <__any_on+0x26>
 800d842:	f011 011f 	ands.w	r1, r1, #31
 800d846:	d007      	beq.n	800d858 <__any_on+0x26>
 800d848:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d84c:	fa24 f001 	lsr.w	r0, r4, r1
 800d850:	fa00 f101 	lsl.w	r1, r0, r1
 800d854:	428c      	cmp	r4, r1
 800d856:	d10b      	bne.n	800d870 <__any_on+0x3e>
 800d858:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d803      	bhi.n	800d868 <__any_on+0x36>
 800d860:	2000      	movs	r0, #0
 800d862:	bd10      	pop	{r4, pc}
 800d864:	4603      	mov	r3, r0
 800d866:	e7f7      	b.n	800d858 <__any_on+0x26>
 800d868:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d86c:	2900      	cmp	r1, #0
 800d86e:	d0f5      	beq.n	800d85c <__any_on+0x2a>
 800d870:	2001      	movs	r0, #1
 800d872:	e7f6      	b.n	800d862 <__any_on+0x30>

0800d874 <_calloc_r>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	fba1 5402 	umull	r5, r4, r1, r2
 800d87a:	b934      	cbnz	r4, 800d88a <_calloc_r+0x16>
 800d87c:	4629      	mov	r1, r5
 800d87e:	f7fc f925 	bl	8009acc <_malloc_r>
 800d882:	4606      	mov	r6, r0
 800d884:	b928      	cbnz	r0, 800d892 <_calloc_r+0x1e>
 800d886:	4630      	mov	r0, r6
 800d888:	bd70      	pop	{r4, r5, r6, pc}
 800d88a:	220c      	movs	r2, #12
 800d88c:	2600      	movs	r6, #0
 800d88e:	6002      	str	r2, [r0, #0]
 800d890:	e7f9      	b.n	800d886 <_calloc_r+0x12>
 800d892:	462a      	mov	r2, r5
 800d894:	4621      	mov	r1, r4
 800d896:	f7fc f8f0 	bl	8009a7a <memset>
 800d89a:	e7f4      	b.n	800d886 <_calloc_r+0x12>

0800d89c <_free_r>:
 800d89c:	b538      	push	{r3, r4, r5, lr}
 800d89e:	4605      	mov	r5, r0
 800d8a0:	2900      	cmp	r1, #0
 800d8a2:	d040      	beq.n	800d926 <_free_r+0x8a>
 800d8a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8a8:	1f0c      	subs	r4, r1, #4
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	bfb8      	it	lt
 800d8ae:	18e4      	addlt	r4, r4, r3
 800d8b0:	f7ff fb1c 	bl	800ceec <__malloc_lock>
 800d8b4:	4a1c      	ldr	r2, [pc, #112]	; (800d928 <_free_r+0x8c>)
 800d8b6:	6813      	ldr	r3, [r2, #0]
 800d8b8:	b933      	cbnz	r3, 800d8c8 <_free_r+0x2c>
 800d8ba:	6063      	str	r3, [r4, #4]
 800d8bc:	6014      	str	r4, [r2, #0]
 800d8be:	4628      	mov	r0, r5
 800d8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8c4:	f7ff bb18 	b.w	800cef8 <__malloc_unlock>
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	d908      	bls.n	800d8de <_free_r+0x42>
 800d8cc:	6820      	ldr	r0, [r4, #0]
 800d8ce:	1821      	adds	r1, r4, r0
 800d8d0:	428b      	cmp	r3, r1
 800d8d2:	bf01      	itttt	eq
 800d8d4:	6819      	ldreq	r1, [r3, #0]
 800d8d6:	685b      	ldreq	r3, [r3, #4]
 800d8d8:	1809      	addeq	r1, r1, r0
 800d8da:	6021      	streq	r1, [r4, #0]
 800d8dc:	e7ed      	b.n	800d8ba <_free_r+0x1e>
 800d8de:	461a      	mov	r2, r3
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	b10b      	cbz	r3, 800d8e8 <_free_r+0x4c>
 800d8e4:	42a3      	cmp	r3, r4
 800d8e6:	d9fa      	bls.n	800d8de <_free_r+0x42>
 800d8e8:	6811      	ldr	r1, [r2, #0]
 800d8ea:	1850      	adds	r0, r2, r1
 800d8ec:	42a0      	cmp	r0, r4
 800d8ee:	d10b      	bne.n	800d908 <_free_r+0x6c>
 800d8f0:	6820      	ldr	r0, [r4, #0]
 800d8f2:	4401      	add	r1, r0
 800d8f4:	1850      	adds	r0, r2, r1
 800d8f6:	4283      	cmp	r3, r0
 800d8f8:	6011      	str	r1, [r2, #0]
 800d8fa:	d1e0      	bne.n	800d8be <_free_r+0x22>
 800d8fc:	6818      	ldr	r0, [r3, #0]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	4401      	add	r1, r0
 800d902:	6011      	str	r1, [r2, #0]
 800d904:	6053      	str	r3, [r2, #4]
 800d906:	e7da      	b.n	800d8be <_free_r+0x22>
 800d908:	d902      	bls.n	800d910 <_free_r+0x74>
 800d90a:	230c      	movs	r3, #12
 800d90c:	602b      	str	r3, [r5, #0]
 800d90e:	e7d6      	b.n	800d8be <_free_r+0x22>
 800d910:	6820      	ldr	r0, [r4, #0]
 800d912:	1821      	adds	r1, r4, r0
 800d914:	428b      	cmp	r3, r1
 800d916:	bf01      	itttt	eq
 800d918:	6819      	ldreq	r1, [r3, #0]
 800d91a:	685b      	ldreq	r3, [r3, #4]
 800d91c:	1809      	addeq	r1, r1, r0
 800d91e:	6021      	streq	r1, [r4, #0]
 800d920:	6063      	str	r3, [r4, #4]
 800d922:	6054      	str	r4, [r2, #4]
 800d924:	e7cb      	b.n	800d8be <_free_r+0x22>
 800d926:	bd38      	pop	{r3, r4, r5, pc}
 800d928:	20003324 	.word	0x20003324

0800d92c <__ssputs_r>:
 800d92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d930:	688e      	ldr	r6, [r1, #8]
 800d932:	4682      	mov	sl, r0
 800d934:	429e      	cmp	r6, r3
 800d936:	460c      	mov	r4, r1
 800d938:	4690      	mov	r8, r2
 800d93a:	461f      	mov	r7, r3
 800d93c:	d838      	bhi.n	800d9b0 <__ssputs_r+0x84>
 800d93e:	898a      	ldrh	r2, [r1, #12]
 800d940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d944:	d032      	beq.n	800d9ac <__ssputs_r+0x80>
 800d946:	6825      	ldr	r5, [r4, #0]
 800d948:	6909      	ldr	r1, [r1, #16]
 800d94a:	3301      	adds	r3, #1
 800d94c:	eba5 0901 	sub.w	r9, r5, r1
 800d950:	6965      	ldr	r5, [r4, #20]
 800d952:	444b      	add	r3, r9
 800d954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d95c:	106d      	asrs	r5, r5, #1
 800d95e:	429d      	cmp	r5, r3
 800d960:	bf38      	it	cc
 800d962:	461d      	movcc	r5, r3
 800d964:	0553      	lsls	r3, r2, #21
 800d966:	d531      	bpl.n	800d9cc <__ssputs_r+0xa0>
 800d968:	4629      	mov	r1, r5
 800d96a:	f7fc f8af 	bl	8009acc <_malloc_r>
 800d96e:	4606      	mov	r6, r0
 800d970:	b950      	cbnz	r0, 800d988 <__ssputs_r+0x5c>
 800d972:	230c      	movs	r3, #12
 800d974:	f04f 30ff 	mov.w	r0, #4294967295
 800d978:	f8ca 3000 	str.w	r3, [sl]
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d982:	81a3      	strh	r3, [r4, #12]
 800d984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d988:	464a      	mov	r2, r9
 800d98a:	6921      	ldr	r1, [r4, #16]
 800d98c:	f7fc f867 	bl	8009a5e <memcpy>
 800d990:	89a3      	ldrh	r3, [r4, #12]
 800d992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d99a:	81a3      	strh	r3, [r4, #12]
 800d99c:	6126      	str	r6, [r4, #16]
 800d99e:	444e      	add	r6, r9
 800d9a0:	6026      	str	r6, [r4, #0]
 800d9a2:	463e      	mov	r6, r7
 800d9a4:	6165      	str	r5, [r4, #20]
 800d9a6:	eba5 0509 	sub.w	r5, r5, r9
 800d9aa:	60a5      	str	r5, [r4, #8]
 800d9ac:	42be      	cmp	r6, r7
 800d9ae:	d900      	bls.n	800d9b2 <__ssputs_r+0x86>
 800d9b0:	463e      	mov	r6, r7
 800d9b2:	4632      	mov	r2, r6
 800d9b4:	4641      	mov	r1, r8
 800d9b6:	6820      	ldr	r0, [r4, #0]
 800d9b8:	f000 fbd2 	bl	800e160 <memmove>
 800d9bc:	68a3      	ldr	r3, [r4, #8]
 800d9be:	2000      	movs	r0, #0
 800d9c0:	1b9b      	subs	r3, r3, r6
 800d9c2:	60a3      	str	r3, [r4, #8]
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	4433      	add	r3, r6
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	e7db      	b.n	800d984 <__ssputs_r+0x58>
 800d9cc:	462a      	mov	r2, r5
 800d9ce:	f000 fbe1 	bl	800e194 <_realloc_r>
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d1e1      	bne.n	800d99c <__ssputs_r+0x70>
 800d9d8:	4650      	mov	r0, sl
 800d9da:	6921      	ldr	r1, [r4, #16]
 800d9dc:	f7ff ff5e 	bl	800d89c <_free_r>
 800d9e0:	e7c7      	b.n	800d972 <__ssputs_r+0x46>
	...

0800d9e4 <_svfiprintf_r>:
 800d9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e8:	4698      	mov	r8, r3
 800d9ea:	898b      	ldrh	r3, [r1, #12]
 800d9ec:	4607      	mov	r7, r0
 800d9ee:	061b      	lsls	r3, r3, #24
 800d9f0:	460d      	mov	r5, r1
 800d9f2:	4614      	mov	r4, r2
 800d9f4:	b09d      	sub	sp, #116	; 0x74
 800d9f6:	d50e      	bpl.n	800da16 <_svfiprintf_r+0x32>
 800d9f8:	690b      	ldr	r3, [r1, #16]
 800d9fa:	b963      	cbnz	r3, 800da16 <_svfiprintf_r+0x32>
 800d9fc:	2140      	movs	r1, #64	; 0x40
 800d9fe:	f7fc f865 	bl	8009acc <_malloc_r>
 800da02:	6028      	str	r0, [r5, #0]
 800da04:	6128      	str	r0, [r5, #16]
 800da06:	b920      	cbnz	r0, 800da12 <_svfiprintf_r+0x2e>
 800da08:	230c      	movs	r3, #12
 800da0a:	603b      	str	r3, [r7, #0]
 800da0c:	f04f 30ff 	mov.w	r0, #4294967295
 800da10:	e0d1      	b.n	800dbb6 <_svfiprintf_r+0x1d2>
 800da12:	2340      	movs	r3, #64	; 0x40
 800da14:	616b      	str	r3, [r5, #20]
 800da16:	2300      	movs	r3, #0
 800da18:	9309      	str	r3, [sp, #36]	; 0x24
 800da1a:	2320      	movs	r3, #32
 800da1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da20:	2330      	movs	r3, #48	; 0x30
 800da22:	f04f 0901 	mov.w	r9, #1
 800da26:	f8cd 800c 	str.w	r8, [sp, #12]
 800da2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dbd0 <_svfiprintf_r+0x1ec>
 800da2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da32:	4623      	mov	r3, r4
 800da34:	469a      	mov	sl, r3
 800da36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da3a:	b10a      	cbz	r2, 800da40 <_svfiprintf_r+0x5c>
 800da3c:	2a25      	cmp	r2, #37	; 0x25
 800da3e:	d1f9      	bne.n	800da34 <_svfiprintf_r+0x50>
 800da40:	ebba 0b04 	subs.w	fp, sl, r4
 800da44:	d00b      	beq.n	800da5e <_svfiprintf_r+0x7a>
 800da46:	465b      	mov	r3, fp
 800da48:	4622      	mov	r2, r4
 800da4a:	4629      	mov	r1, r5
 800da4c:	4638      	mov	r0, r7
 800da4e:	f7ff ff6d 	bl	800d92c <__ssputs_r>
 800da52:	3001      	adds	r0, #1
 800da54:	f000 80aa 	beq.w	800dbac <_svfiprintf_r+0x1c8>
 800da58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da5a:	445a      	add	r2, fp
 800da5c:	9209      	str	r2, [sp, #36]	; 0x24
 800da5e:	f89a 3000 	ldrb.w	r3, [sl]
 800da62:	2b00      	cmp	r3, #0
 800da64:	f000 80a2 	beq.w	800dbac <_svfiprintf_r+0x1c8>
 800da68:	2300      	movs	r3, #0
 800da6a:	f04f 32ff 	mov.w	r2, #4294967295
 800da6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da72:	f10a 0a01 	add.w	sl, sl, #1
 800da76:	9304      	str	r3, [sp, #16]
 800da78:	9307      	str	r3, [sp, #28]
 800da7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da7e:	931a      	str	r3, [sp, #104]	; 0x68
 800da80:	4654      	mov	r4, sl
 800da82:	2205      	movs	r2, #5
 800da84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da88:	4851      	ldr	r0, [pc, #324]	; (800dbd0 <_svfiprintf_r+0x1ec>)
 800da8a:	f7ff fa21 	bl	800ced0 <memchr>
 800da8e:	9a04      	ldr	r2, [sp, #16]
 800da90:	b9d8      	cbnz	r0, 800daca <_svfiprintf_r+0xe6>
 800da92:	06d0      	lsls	r0, r2, #27
 800da94:	bf44      	itt	mi
 800da96:	2320      	movmi	r3, #32
 800da98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da9c:	0711      	lsls	r1, r2, #28
 800da9e:	bf44      	itt	mi
 800daa0:	232b      	movmi	r3, #43	; 0x2b
 800daa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daa6:	f89a 3000 	ldrb.w	r3, [sl]
 800daaa:	2b2a      	cmp	r3, #42	; 0x2a
 800daac:	d015      	beq.n	800dada <_svfiprintf_r+0xf6>
 800daae:	4654      	mov	r4, sl
 800dab0:	2000      	movs	r0, #0
 800dab2:	f04f 0c0a 	mov.w	ip, #10
 800dab6:	9a07      	ldr	r2, [sp, #28]
 800dab8:	4621      	mov	r1, r4
 800daba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dabe:	3b30      	subs	r3, #48	; 0x30
 800dac0:	2b09      	cmp	r3, #9
 800dac2:	d94e      	bls.n	800db62 <_svfiprintf_r+0x17e>
 800dac4:	b1b0      	cbz	r0, 800daf4 <_svfiprintf_r+0x110>
 800dac6:	9207      	str	r2, [sp, #28]
 800dac8:	e014      	b.n	800daf4 <_svfiprintf_r+0x110>
 800daca:	eba0 0308 	sub.w	r3, r0, r8
 800dace:	fa09 f303 	lsl.w	r3, r9, r3
 800dad2:	4313      	orrs	r3, r2
 800dad4:	46a2      	mov	sl, r4
 800dad6:	9304      	str	r3, [sp, #16]
 800dad8:	e7d2      	b.n	800da80 <_svfiprintf_r+0x9c>
 800dada:	9b03      	ldr	r3, [sp, #12]
 800dadc:	1d19      	adds	r1, r3, #4
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	9103      	str	r1, [sp, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	bfbb      	ittet	lt
 800dae6:	425b      	neglt	r3, r3
 800dae8:	f042 0202 	orrlt.w	r2, r2, #2
 800daec:	9307      	strge	r3, [sp, #28]
 800daee:	9307      	strlt	r3, [sp, #28]
 800daf0:	bfb8      	it	lt
 800daf2:	9204      	strlt	r2, [sp, #16]
 800daf4:	7823      	ldrb	r3, [r4, #0]
 800daf6:	2b2e      	cmp	r3, #46	; 0x2e
 800daf8:	d10c      	bne.n	800db14 <_svfiprintf_r+0x130>
 800dafa:	7863      	ldrb	r3, [r4, #1]
 800dafc:	2b2a      	cmp	r3, #42	; 0x2a
 800dafe:	d135      	bne.n	800db6c <_svfiprintf_r+0x188>
 800db00:	9b03      	ldr	r3, [sp, #12]
 800db02:	3402      	adds	r4, #2
 800db04:	1d1a      	adds	r2, r3, #4
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	9203      	str	r2, [sp, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	bfb8      	it	lt
 800db0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800db12:	9305      	str	r3, [sp, #20]
 800db14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800dbd4 <_svfiprintf_r+0x1f0>
 800db18:	2203      	movs	r2, #3
 800db1a:	4650      	mov	r0, sl
 800db1c:	7821      	ldrb	r1, [r4, #0]
 800db1e:	f7ff f9d7 	bl	800ced0 <memchr>
 800db22:	b140      	cbz	r0, 800db36 <_svfiprintf_r+0x152>
 800db24:	2340      	movs	r3, #64	; 0x40
 800db26:	eba0 000a 	sub.w	r0, r0, sl
 800db2a:	fa03 f000 	lsl.w	r0, r3, r0
 800db2e:	9b04      	ldr	r3, [sp, #16]
 800db30:	3401      	adds	r4, #1
 800db32:	4303      	orrs	r3, r0
 800db34:	9304      	str	r3, [sp, #16]
 800db36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3a:	2206      	movs	r2, #6
 800db3c:	4826      	ldr	r0, [pc, #152]	; (800dbd8 <_svfiprintf_r+0x1f4>)
 800db3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db42:	f7ff f9c5 	bl	800ced0 <memchr>
 800db46:	2800      	cmp	r0, #0
 800db48:	d038      	beq.n	800dbbc <_svfiprintf_r+0x1d8>
 800db4a:	4b24      	ldr	r3, [pc, #144]	; (800dbdc <_svfiprintf_r+0x1f8>)
 800db4c:	bb1b      	cbnz	r3, 800db96 <_svfiprintf_r+0x1b2>
 800db4e:	9b03      	ldr	r3, [sp, #12]
 800db50:	3307      	adds	r3, #7
 800db52:	f023 0307 	bic.w	r3, r3, #7
 800db56:	3308      	adds	r3, #8
 800db58:	9303      	str	r3, [sp, #12]
 800db5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5c:	4433      	add	r3, r6
 800db5e:	9309      	str	r3, [sp, #36]	; 0x24
 800db60:	e767      	b.n	800da32 <_svfiprintf_r+0x4e>
 800db62:	460c      	mov	r4, r1
 800db64:	2001      	movs	r0, #1
 800db66:	fb0c 3202 	mla	r2, ip, r2, r3
 800db6a:	e7a5      	b.n	800dab8 <_svfiprintf_r+0xd4>
 800db6c:	2300      	movs	r3, #0
 800db6e:	f04f 0c0a 	mov.w	ip, #10
 800db72:	4619      	mov	r1, r3
 800db74:	3401      	adds	r4, #1
 800db76:	9305      	str	r3, [sp, #20]
 800db78:	4620      	mov	r0, r4
 800db7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db7e:	3a30      	subs	r2, #48	; 0x30
 800db80:	2a09      	cmp	r2, #9
 800db82:	d903      	bls.n	800db8c <_svfiprintf_r+0x1a8>
 800db84:	2b00      	cmp	r3, #0
 800db86:	d0c5      	beq.n	800db14 <_svfiprintf_r+0x130>
 800db88:	9105      	str	r1, [sp, #20]
 800db8a:	e7c3      	b.n	800db14 <_svfiprintf_r+0x130>
 800db8c:	4604      	mov	r4, r0
 800db8e:	2301      	movs	r3, #1
 800db90:	fb0c 2101 	mla	r1, ip, r1, r2
 800db94:	e7f0      	b.n	800db78 <_svfiprintf_r+0x194>
 800db96:	ab03      	add	r3, sp, #12
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	462a      	mov	r2, r5
 800db9c:	4638      	mov	r0, r7
 800db9e:	4b10      	ldr	r3, [pc, #64]	; (800dbe0 <_svfiprintf_r+0x1fc>)
 800dba0:	a904      	add	r1, sp, #16
 800dba2:	f7fc f8a5 	bl	8009cf0 <_printf_float>
 800dba6:	1c42      	adds	r2, r0, #1
 800dba8:	4606      	mov	r6, r0
 800dbaa:	d1d6      	bne.n	800db5a <_svfiprintf_r+0x176>
 800dbac:	89ab      	ldrh	r3, [r5, #12]
 800dbae:	065b      	lsls	r3, r3, #25
 800dbb0:	f53f af2c 	bmi.w	800da0c <_svfiprintf_r+0x28>
 800dbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbb6:	b01d      	add	sp, #116	; 0x74
 800dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbc:	ab03      	add	r3, sp, #12
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	462a      	mov	r2, r5
 800dbc2:	4638      	mov	r0, r7
 800dbc4:	4b06      	ldr	r3, [pc, #24]	; (800dbe0 <_svfiprintf_r+0x1fc>)
 800dbc6:	a904      	add	r1, sp, #16
 800dbc8:	f7fc fb2e 	bl	800a228 <_printf_i>
 800dbcc:	e7eb      	b.n	800dba6 <_svfiprintf_r+0x1c2>
 800dbce:	bf00      	nop
 800dbd0:	0800ea2c 	.word	0x0800ea2c
 800dbd4:	0800ea32 	.word	0x0800ea32
 800dbd8:	0800ea36 	.word	0x0800ea36
 800dbdc:	08009cf1 	.word	0x08009cf1
 800dbe0:	0800d92d 	.word	0x0800d92d

0800dbe4 <__sfputc_r>:
 800dbe4:	6893      	ldr	r3, [r2, #8]
 800dbe6:	b410      	push	{r4}
 800dbe8:	3b01      	subs	r3, #1
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	6093      	str	r3, [r2, #8]
 800dbee:	da07      	bge.n	800dc00 <__sfputc_r+0x1c>
 800dbf0:	6994      	ldr	r4, [r2, #24]
 800dbf2:	42a3      	cmp	r3, r4
 800dbf4:	db01      	blt.n	800dbfa <__sfputc_r+0x16>
 800dbf6:	290a      	cmp	r1, #10
 800dbf8:	d102      	bne.n	800dc00 <__sfputc_r+0x1c>
 800dbfa:	bc10      	pop	{r4}
 800dbfc:	f000 b976 	b.w	800deec <__swbuf_r>
 800dc00:	6813      	ldr	r3, [r2, #0]
 800dc02:	1c58      	adds	r0, r3, #1
 800dc04:	6010      	str	r0, [r2, #0]
 800dc06:	7019      	strb	r1, [r3, #0]
 800dc08:	4608      	mov	r0, r1
 800dc0a:	bc10      	pop	{r4}
 800dc0c:	4770      	bx	lr

0800dc0e <__sfputs_r>:
 800dc0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc10:	4606      	mov	r6, r0
 800dc12:	460f      	mov	r7, r1
 800dc14:	4614      	mov	r4, r2
 800dc16:	18d5      	adds	r5, r2, r3
 800dc18:	42ac      	cmp	r4, r5
 800dc1a:	d101      	bne.n	800dc20 <__sfputs_r+0x12>
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	e007      	b.n	800dc30 <__sfputs_r+0x22>
 800dc20:	463a      	mov	r2, r7
 800dc22:	4630      	mov	r0, r6
 800dc24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc28:	f7ff ffdc 	bl	800dbe4 <__sfputc_r>
 800dc2c:	1c43      	adds	r3, r0, #1
 800dc2e:	d1f3      	bne.n	800dc18 <__sfputs_r+0xa>
 800dc30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc34 <_vfiprintf_r>:
 800dc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc38:	460d      	mov	r5, r1
 800dc3a:	4614      	mov	r4, r2
 800dc3c:	4698      	mov	r8, r3
 800dc3e:	4606      	mov	r6, r0
 800dc40:	b09d      	sub	sp, #116	; 0x74
 800dc42:	b118      	cbz	r0, 800dc4c <_vfiprintf_r+0x18>
 800dc44:	6983      	ldr	r3, [r0, #24]
 800dc46:	b90b      	cbnz	r3, 800dc4c <_vfiprintf_r+0x18>
 800dc48:	f7fb fe44 	bl	80098d4 <__sinit>
 800dc4c:	4b89      	ldr	r3, [pc, #548]	; (800de74 <_vfiprintf_r+0x240>)
 800dc4e:	429d      	cmp	r5, r3
 800dc50:	d11b      	bne.n	800dc8a <_vfiprintf_r+0x56>
 800dc52:	6875      	ldr	r5, [r6, #4]
 800dc54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc56:	07d9      	lsls	r1, r3, #31
 800dc58:	d405      	bmi.n	800dc66 <_vfiprintf_r+0x32>
 800dc5a:	89ab      	ldrh	r3, [r5, #12]
 800dc5c:	059a      	lsls	r2, r3, #22
 800dc5e:	d402      	bmi.n	800dc66 <_vfiprintf_r+0x32>
 800dc60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc62:	f7fb fefa 	bl	8009a5a <__retarget_lock_acquire_recursive>
 800dc66:	89ab      	ldrh	r3, [r5, #12]
 800dc68:	071b      	lsls	r3, r3, #28
 800dc6a:	d501      	bpl.n	800dc70 <_vfiprintf_r+0x3c>
 800dc6c:	692b      	ldr	r3, [r5, #16]
 800dc6e:	b9eb      	cbnz	r3, 800dcac <_vfiprintf_r+0x78>
 800dc70:	4629      	mov	r1, r5
 800dc72:	4630      	mov	r0, r6
 800dc74:	f000 f99a 	bl	800dfac <__swsetup_r>
 800dc78:	b1c0      	cbz	r0, 800dcac <_vfiprintf_r+0x78>
 800dc7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc7c:	07dc      	lsls	r4, r3, #31
 800dc7e:	d50e      	bpl.n	800dc9e <_vfiprintf_r+0x6a>
 800dc80:	f04f 30ff 	mov.w	r0, #4294967295
 800dc84:	b01d      	add	sp, #116	; 0x74
 800dc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8a:	4b7b      	ldr	r3, [pc, #492]	; (800de78 <_vfiprintf_r+0x244>)
 800dc8c:	429d      	cmp	r5, r3
 800dc8e:	d101      	bne.n	800dc94 <_vfiprintf_r+0x60>
 800dc90:	68b5      	ldr	r5, [r6, #8]
 800dc92:	e7df      	b.n	800dc54 <_vfiprintf_r+0x20>
 800dc94:	4b79      	ldr	r3, [pc, #484]	; (800de7c <_vfiprintf_r+0x248>)
 800dc96:	429d      	cmp	r5, r3
 800dc98:	bf08      	it	eq
 800dc9a:	68f5      	ldreq	r5, [r6, #12]
 800dc9c:	e7da      	b.n	800dc54 <_vfiprintf_r+0x20>
 800dc9e:	89ab      	ldrh	r3, [r5, #12]
 800dca0:	0598      	lsls	r0, r3, #22
 800dca2:	d4ed      	bmi.n	800dc80 <_vfiprintf_r+0x4c>
 800dca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dca6:	f7fb fed9 	bl	8009a5c <__retarget_lock_release_recursive>
 800dcaa:	e7e9      	b.n	800dc80 <_vfiprintf_r+0x4c>
 800dcac:	2300      	movs	r3, #0
 800dcae:	9309      	str	r3, [sp, #36]	; 0x24
 800dcb0:	2320      	movs	r3, #32
 800dcb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcb6:	2330      	movs	r3, #48	; 0x30
 800dcb8:	f04f 0901 	mov.w	r9, #1
 800dcbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800de80 <_vfiprintf_r+0x24c>
 800dcc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcc8:	4623      	mov	r3, r4
 800dcca:	469a      	mov	sl, r3
 800dccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcd0:	b10a      	cbz	r2, 800dcd6 <_vfiprintf_r+0xa2>
 800dcd2:	2a25      	cmp	r2, #37	; 0x25
 800dcd4:	d1f9      	bne.n	800dcca <_vfiprintf_r+0x96>
 800dcd6:	ebba 0b04 	subs.w	fp, sl, r4
 800dcda:	d00b      	beq.n	800dcf4 <_vfiprintf_r+0xc0>
 800dcdc:	465b      	mov	r3, fp
 800dcde:	4622      	mov	r2, r4
 800dce0:	4629      	mov	r1, r5
 800dce2:	4630      	mov	r0, r6
 800dce4:	f7ff ff93 	bl	800dc0e <__sfputs_r>
 800dce8:	3001      	adds	r0, #1
 800dcea:	f000 80aa 	beq.w	800de42 <_vfiprintf_r+0x20e>
 800dcee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcf0:	445a      	add	r2, fp
 800dcf2:	9209      	str	r2, [sp, #36]	; 0x24
 800dcf4:	f89a 3000 	ldrb.w	r3, [sl]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 80a2 	beq.w	800de42 <_vfiprintf_r+0x20e>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	f04f 32ff 	mov.w	r2, #4294967295
 800dd04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd08:	f10a 0a01 	add.w	sl, sl, #1
 800dd0c:	9304      	str	r3, [sp, #16]
 800dd0e:	9307      	str	r3, [sp, #28]
 800dd10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd14:	931a      	str	r3, [sp, #104]	; 0x68
 800dd16:	4654      	mov	r4, sl
 800dd18:	2205      	movs	r2, #5
 800dd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd1e:	4858      	ldr	r0, [pc, #352]	; (800de80 <_vfiprintf_r+0x24c>)
 800dd20:	f7ff f8d6 	bl	800ced0 <memchr>
 800dd24:	9a04      	ldr	r2, [sp, #16]
 800dd26:	b9d8      	cbnz	r0, 800dd60 <_vfiprintf_r+0x12c>
 800dd28:	06d1      	lsls	r1, r2, #27
 800dd2a:	bf44      	itt	mi
 800dd2c:	2320      	movmi	r3, #32
 800dd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd32:	0713      	lsls	r3, r2, #28
 800dd34:	bf44      	itt	mi
 800dd36:	232b      	movmi	r3, #43	; 0x2b
 800dd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd40:	2b2a      	cmp	r3, #42	; 0x2a
 800dd42:	d015      	beq.n	800dd70 <_vfiprintf_r+0x13c>
 800dd44:	4654      	mov	r4, sl
 800dd46:	2000      	movs	r0, #0
 800dd48:	f04f 0c0a 	mov.w	ip, #10
 800dd4c:	9a07      	ldr	r2, [sp, #28]
 800dd4e:	4621      	mov	r1, r4
 800dd50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd54:	3b30      	subs	r3, #48	; 0x30
 800dd56:	2b09      	cmp	r3, #9
 800dd58:	d94e      	bls.n	800ddf8 <_vfiprintf_r+0x1c4>
 800dd5a:	b1b0      	cbz	r0, 800dd8a <_vfiprintf_r+0x156>
 800dd5c:	9207      	str	r2, [sp, #28]
 800dd5e:	e014      	b.n	800dd8a <_vfiprintf_r+0x156>
 800dd60:	eba0 0308 	sub.w	r3, r0, r8
 800dd64:	fa09 f303 	lsl.w	r3, r9, r3
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	46a2      	mov	sl, r4
 800dd6c:	9304      	str	r3, [sp, #16]
 800dd6e:	e7d2      	b.n	800dd16 <_vfiprintf_r+0xe2>
 800dd70:	9b03      	ldr	r3, [sp, #12]
 800dd72:	1d19      	adds	r1, r3, #4
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	9103      	str	r1, [sp, #12]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	bfbb      	ittet	lt
 800dd7c:	425b      	neglt	r3, r3
 800dd7e:	f042 0202 	orrlt.w	r2, r2, #2
 800dd82:	9307      	strge	r3, [sp, #28]
 800dd84:	9307      	strlt	r3, [sp, #28]
 800dd86:	bfb8      	it	lt
 800dd88:	9204      	strlt	r2, [sp, #16]
 800dd8a:	7823      	ldrb	r3, [r4, #0]
 800dd8c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd8e:	d10c      	bne.n	800ddaa <_vfiprintf_r+0x176>
 800dd90:	7863      	ldrb	r3, [r4, #1]
 800dd92:	2b2a      	cmp	r3, #42	; 0x2a
 800dd94:	d135      	bne.n	800de02 <_vfiprintf_r+0x1ce>
 800dd96:	9b03      	ldr	r3, [sp, #12]
 800dd98:	3402      	adds	r4, #2
 800dd9a:	1d1a      	adds	r2, r3, #4
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	9203      	str	r2, [sp, #12]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	bfb8      	it	lt
 800dda4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dda8:	9305      	str	r3, [sp, #20]
 800ddaa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800de84 <_vfiprintf_r+0x250>
 800ddae:	2203      	movs	r2, #3
 800ddb0:	4650      	mov	r0, sl
 800ddb2:	7821      	ldrb	r1, [r4, #0]
 800ddb4:	f7ff f88c 	bl	800ced0 <memchr>
 800ddb8:	b140      	cbz	r0, 800ddcc <_vfiprintf_r+0x198>
 800ddba:	2340      	movs	r3, #64	; 0x40
 800ddbc:	eba0 000a 	sub.w	r0, r0, sl
 800ddc0:	fa03 f000 	lsl.w	r0, r3, r0
 800ddc4:	9b04      	ldr	r3, [sp, #16]
 800ddc6:	3401      	adds	r4, #1
 800ddc8:	4303      	orrs	r3, r0
 800ddca:	9304      	str	r3, [sp, #16]
 800ddcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd0:	2206      	movs	r2, #6
 800ddd2:	482d      	ldr	r0, [pc, #180]	; (800de88 <_vfiprintf_r+0x254>)
 800ddd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddd8:	f7ff f87a 	bl	800ced0 <memchr>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d03f      	beq.n	800de60 <_vfiprintf_r+0x22c>
 800dde0:	4b2a      	ldr	r3, [pc, #168]	; (800de8c <_vfiprintf_r+0x258>)
 800dde2:	bb1b      	cbnz	r3, 800de2c <_vfiprintf_r+0x1f8>
 800dde4:	9b03      	ldr	r3, [sp, #12]
 800dde6:	3307      	adds	r3, #7
 800dde8:	f023 0307 	bic.w	r3, r3, #7
 800ddec:	3308      	adds	r3, #8
 800ddee:	9303      	str	r3, [sp, #12]
 800ddf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf2:	443b      	add	r3, r7
 800ddf4:	9309      	str	r3, [sp, #36]	; 0x24
 800ddf6:	e767      	b.n	800dcc8 <_vfiprintf_r+0x94>
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	2001      	movs	r0, #1
 800ddfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800de00:	e7a5      	b.n	800dd4e <_vfiprintf_r+0x11a>
 800de02:	2300      	movs	r3, #0
 800de04:	f04f 0c0a 	mov.w	ip, #10
 800de08:	4619      	mov	r1, r3
 800de0a:	3401      	adds	r4, #1
 800de0c:	9305      	str	r3, [sp, #20]
 800de0e:	4620      	mov	r0, r4
 800de10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de14:	3a30      	subs	r2, #48	; 0x30
 800de16:	2a09      	cmp	r2, #9
 800de18:	d903      	bls.n	800de22 <_vfiprintf_r+0x1ee>
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d0c5      	beq.n	800ddaa <_vfiprintf_r+0x176>
 800de1e:	9105      	str	r1, [sp, #20]
 800de20:	e7c3      	b.n	800ddaa <_vfiprintf_r+0x176>
 800de22:	4604      	mov	r4, r0
 800de24:	2301      	movs	r3, #1
 800de26:	fb0c 2101 	mla	r1, ip, r1, r2
 800de2a:	e7f0      	b.n	800de0e <_vfiprintf_r+0x1da>
 800de2c:	ab03      	add	r3, sp, #12
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	462a      	mov	r2, r5
 800de32:	4630      	mov	r0, r6
 800de34:	4b16      	ldr	r3, [pc, #88]	; (800de90 <_vfiprintf_r+0x25c>)
 800de36:	a904      	add	r1, sp, #16
 800de38:	f7fb ff5a 	bl	8009cf0 <_printf_float>
 800de3c:	4607      	mov	r7, r0
 800de3e:	1c78      	adds	r0, r7, #1
 800de40:	d1d6      	bne.n	800ddf0 <_vfiprintf_r+0x1bc>
 800de42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de44:	07d9      	lsls	r1, r3, #31
 800de46:	d405      	bmi.n	800de54 <_vfiprintf_r+0x220>
 800de48:	89ab      	ldrh	r3, [r5, #12]
 800de4a:	059a      	lsls	r2, r3, #22
 800de4c:	d402      	bmi.n	800de54 <_vfiprintf_r+0x220>
 800de4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de50:	f7fb fe04 	bl	8009a5c <__retarget_lock_release_recursive>
 800de54:	89ab      	ldrh	r3, [r5, #12]
 800de56:	065b      	lsls	r3, r3, #25
 800de58:	f53f af12 	bmi.w	800dc80 <_vfiprintf_r+0x4c>
 800de5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de5e:	e711      	b.n	800dc84 <_vfiprintf_r+0x50>
 800de60:	ab03      	add	r3, sp, #12
 800de62:	9300      	str	r3, [sp, #0]
 800de64:	462a      	mov	r2, r5
 800de66:	4630      	mov	r0, r6
 800de68:	4b09      	ldr	r3, [pc, #36]	; (800de90 <_vfiprintf_r+0x25c>)
 800de6a:	a904      	add	r1, sp, #16
 800de6c:	f7fc f9dc 	bl	800a228 <_printf_i>
 800de70:	e7e4      	b.n	800de3c <_vfiprintf_r+0x208>
 800de72:	bf00      	nop
 800de74:	0800e560 	.word	0x0800e560
 800de78:	0800e580 	.word	0x0800e580
 800de7c:	0800e540 	.word	0x0800e540
 800de80:	0800ea2c 	.word	0x0800ea2c
 800de84:	0800ea32 	.word	0x0800ea32
 800de88:	0800ea36 	.word	0x0800ea36
 800de8c:	08009cf1 	.word	0x08009cf1
 800de90:	0800dc0f 	.word	0x0800dc0f

0800de94 <_read_r>:
 800de94:	b538      	push	{r3, r4, r5, lr}
 800de96:	4604      	mov	r4, r0
 800de98:	4608      	mov	r0, r1
 800de9a:	4611      	mov	r1, r2
 800de9c:	2200      	movs	r2, #0
 800de9e:	4d05      	ldr	r5, [pc, #20]	; (800deb4 <_read_r+0x20>)
 800dea0:	602a      	str	r2, [r5, #0]
 800dea2:	461a      	mov	r2, r3
 800dea4:	f7f4 f851 	bl	8001f4a <_read>
 800dea8:	1c43      	adds	r3, r0, #1
 800deaa:	d102      	bne.n	800deb2 <_read_r+0x1e>
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	b103      	cbz	r3, 800deb2 <_read_r+0x1e>
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	bd38      	pop	{r3, r4, r5, pc}
 800deb4:	2000332c 	.word	0x2000332c

0800deb8 <nan>:
 800deb8:	2000      	movs	r0, #0
 800deba:	4901      	ldr	r1, [pc, #4]	; (800dec0 <nan+0x8>)
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	7ff80000 	.word	0x7ff80000

0800dec4 <strncmp>:
 800dec4:	4603      	mov	r3, r0
 800dec6:	b510      	push	{r4, lr}
 800dec8:	b172      	cbz	r2, 800dee8 <strncmp+0x24>
 800deca:	3901      	subs	r1, #1
 800decc:	1884      	adds	r4, r0, r2
 800dece:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ded2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ded6:	4290      	cmp	r0, r2
 800ded8:	d101      	bne.n	800dede <strncmp+0x1a>
 800deda:	42a3      	cmp	r3, r4
 800dedc:	d101      	bne.n	800dee2 <strncmp+0x1e>
 800dede:	1a80      	subs	r0, r0, r2
 800dee0:	bd10      	pop	{r4, pc}
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d1f3      	bne.n	800dece <strncmp+0xa>
 800dee6:	e7fa      	b.n	800dede <strncmp+0x1a>
 800dee8:	4610      	mov	r0, r2
 800deea:	e7f9      	b.n	800dee0 <strncmp+0x1c>

0800deec <__swbuf_r>:
 800deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deee:	460e      	mov	r6, r1
 800def0:	4614      	mov	r4, r2
 800def2:	4605      	mov	r5, r0
 800def4:	b118      	cbz	r0, 800defe <__swbuf_r+0x12>
 800def6:	6983      	ldr	r3, [r0, #24]
 800def8:	b90b      	cbnz	r3, 800defe <__swbuf_r+0x12>
 800defa:	f7fb fceb 	bl	80098d4 <__sinit>
 800defe:	4b21      	ldr	r3, [pc, #132]	; (800df84 <__swbuf_r+0x98>)
 800df00:	429c      	cmp	r4, r3
 800df02:	d12b      	bne.n	800df5c <__swbuf_r+0x70>
 800df04:	686c      	ldr	r4, [r5, #4]
 800df06:	69a3      	ldr	r3, [r4, #24]
 800df08:	60a3      	str	r3, [r4, #8]
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	071a      	lsls	r2, r3, #28
 800df0e:	d52f      	bpl.n	800df70 <__swbuf_r+0x84>
 800df10:	6923      	ldr	r3, [r4, #16]
 800df12:	b36b      	cbz	r3, 800df70 <__swbuf_r+0x84>
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	6820      	ldr	r0, [r4, #0]
 800df18:	b2f6      	uxtb	r6, r6
 800df1a:	1ac0      	subs	r0, r0, r3
 800df1c:	6963      	ldr	r3, [r4, #20]
 800df1e:	4637      	mov	r7, r6
 800df20:	4283      	cmp	r3, r0
 800df22:	dc04      	bgt.n	800df2e <__swbuf_r+0x42>
 800df24:	4621      	mov	r1, r4
 800df26:	4628      	mov	r0, r5
 800df28:	f7fe fbee 	bl	800c708 <_fflush_r>
 800df2c:	bb30      	cbnz	r0, 800df7c <__swbuf_r+0x90>
 800df2e:	68a3      	ldr	r3, [r4, #8]
 800df30:	3001      	adds	r0, #1
 800df32:	3b01      	subs	r3, #1
 800df34:	60a3      	str	r3, [r4, #8]
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	6022      	str	r2, [r4, #0]
 800df3c:	701e      	strb	r6, [r3, #0]
 800df3e:	6963      	ldr	r3, [r4, #20]
 800df40:	4283      	cmp	r3, r0
 800df42:	d004      	beq.n	800df4e <__swbuf_r+0x62>
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	07db      	lsls	r3, r3, #31
 800df48:	d506      	bpl.n	800df58 <__swbuf_r+0x6c>
 800df4a:	2e0a      	cmp	r6, #10
 800df4c:	d104      	bne.n	800df58 <__swbuf_r+0x6c>
 800df4e:	4621      	mov	r1, r4
 800df50:	4628      	mov	r0, r5
 800df52:	f7fe fbd9 	bl	800c708 <_fflush_r>
 800df56:	b988      	cbnz	r0, 800df7c <__swbuf_r+0x90>
 800df58:	4638      	mov	r0, r7
 800df5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df5c:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <__swbuf_r+0x9c>)
 800df5e:	429c      	cmp	r4, r3
 800df60:	d101      	bne.n	800df66 <__swbuf_r+0x7a>
 800df62:	68ac      	ldr	r4, [r5, #8]
 800df64:	e7cf      	b.n	800df06 <__swbuf_r+0x1a>
 800df66:	4b09      	ldr	r3, [pc, #36]	; (800df8c <__swbuf_r+0xa0>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	bf08      	it	eq
 800df6c:	68ec      	ldreq	r4, [r5, #12]
 800df6e:	e7ca      	b.n	800df06 <__swbuf_r+0x1a>
 800df70:	4621      	mov	r1, r4
 800df72:	4628      	mov	r0, r5
 800df74:	f000 f81a 	bl	800dfac <__swsetup_r>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d0cb      	beq.n	800df14 <__swbuf_r+0x28>
 800df7c:	f04f 37ff 	mov.w	r7, #4294967295
 800df80:	e7ea      	b.n	800df58 <__swbuf_r+0x6c>
 800df82:	bf00      	nop
 800df84:	0800e560 	.word	0x0800e560
 800df88:	0800e580 	.word	0x0800e580
 800df8c:	0800e540 	.word	0x0800e540

0800df90 <__ascii_wctomb>:
 800df90:	4603      	mov	r3, r0
 800df92:	4608      	mov	r0, r1
 800df94:	b141      	cbz	r1, 800dfa8 <__ascii_wctomb+0x18>
 800df96:	2aff      	cmp	r2, #255	; 0xff
 800df98:	d904      	bls.n	800dfa4 <__ascii_wctomb+0x14>
 800df9a:	228a      	movs	r2, #138	; 0x8a
 800df9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa0:	601a      	str	r2, [r3, #0]
 800dfa2:	4770      	bx	lr
 800dfa4:	2001      	movs	r0, #1
 800dfa6:	700a      	strb	r2, [r1, #0]
 800dfa8:	4770      	bx	lr
	...

0800dfac <__swsetup_r>:
 800dfac:	4b32      	ldr	r3, [pc, #200]	; (800e078 <__swsetup_r+0xcc>)
 800dfae:	b570      	push	{r4, r5, r6, lr}
 800dfb0:	681d      	ldr	r5, [r3, #0]
 800dfb2:	4606      	mov	r6, r0
 800dfb4:	460c      	mov	r4, r1
 800dfb6:	b125      	cbz	r5, 800dfc2 <__swsetup_r+0x16>
 800dfb8:	69ab      	ldr	r3, [r5, #24]
 800dfba:	b913      	cbnz	r3, 800dfc2 <__swsetup_r+0x16>
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	f7fb fc89 	bl	80098d4 <__sinit>
 800dfc2:	4b2e      	ldr	r3, [pc, #184]	; (800e07c <__swsetup_r+0xd0>)
 800dfc4:	429c      	cmp	r4, r3
 800dfc6:	d10f      	bne.n	800dfe8 <__swsetup_r+0x3c>
 800dfc8:	686c      	ldr	r4, [r5, #4]
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfd0:	0719      	lsls	r1, r3, #28
 800dfd2:	d42c      	bmi.n	800e02e <__swsetup_r+0x82>
 800dfd4:	06dd      	lsls	r5, r3, #27
 800dfd6:	d411      	bmi.n	800dffc <__swsetup_r+0x50>
 800dfd8:	2309      	movs	r3, #9
 800dfda:	6033      	str	r3, [r6, #0]
 800dfdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe4:	81a3      	strh	r3, [r4, #12]
 800dfe6:	e03e      	b.n	800e066 <__swsetup_r+0xba>
 800dfe8:	4b25      	ldr	r3, [pc, #148]	; (800e080 <__swsetup_r+0xd4>)
 800dfea:	429c      	cmp	r4, r3
 800dfec:	d101      	bne.n	800dff2 <__swsetup_r+0x46>
 800dfee:	68ac      	ldr	r4, [r5, #8]
 800dff0:	e7eb      	b.n	800dfca <__swsetup_r+0x1e>
 800dff2:	4b24      	ldr	r3, [pc, #144]	; (800e084 <__swsetup_r+0xd8>)
 800dff4:	429c      	cmp	r4, r3
 800dff6:	bf08      	it	eq
 800dff8:	68ec      	ldreq	r4, [r5, #12]
 800dffa:	e7e6      	b.n	800dfca <__swsetup_r+0x1e>
 800dffc:	0758      	lsls	r0, r3, #29
 800dffe:	d512      	bpl.n	800e026 <__swsetup_r+0x7a>
 800e000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e002:	b141      	cbz	r1, 800e016 <__swsetup_r+0x6a>
 800e004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e008:	4299      	cmp	r1, r3
 800e00a:	d002      	beq.n	800e012 <__swsetup_r+0x66>
 800e00c:	4630      	mov	r0, r6
 800e00e:	f7ff fc45 	bl	800d89c <_free_r>
 800e012:	2300      	movs	r3, #0
 800e014:	6363      	str	r3, [r4, #52]	; 0x34
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e01c:	81a3      	strh	r3, [r4, #12]
 800e01e:	2300      	movs	r3, #0
 800e020:	6063      	str	r3, [r4, #4]
 800e022:	6923      	ldr	r3, [r4, #16]
 800e024:	6023      	str	r3, [r4, #0]
 800e026:	89a3      	ldrh	r3, [r4, #12]
 800e028:	f043 0308 	orr.w	r3, r3, #8
 800e02c:	81a3      	strh	r3, [r4, #12]
 800e02e:	6923      	ldr	r3, [r4, #16]
 800e030:	b94b      	cbnz	r3, 800e046 <__swsetup_r+0x9a>
 800e032:	89a3      	ldrh	r3, [r4, #12]
 800e034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e03c:	d003      	beq.n	800e046 <__swsetup_r+0x9a>
 800e03e:	4621      	mov	r1, r4
 800e040:	4630      	mov	r0, r6
 800e042:	f000 f84d 	bl	800e0e0 <__smakebuf_r>
 800e046:	89a0      	ldrh	r0, [r4, #12]
 800e048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e04c:	f010 0301 	ands.w	r3, r0, #1
 800e050:	d00a      	beq.n	800e068 <__swsetup_r+0xbc>
 800e052:	2300      	movs	r3, #0
 800e054:	60a3      	str	r3, [r4, #8]
 800e056:	6963      	ldr	r3, [r4, #20]
 800e058:	425b      	negs	r3, r3
 800e05a:	61a3      	str	r3, [r4, #24]
 800e05c:	6923      	ldr	r3, [r4, #16]
 800e05e:	b943      	cbnz	r3, 800e072 <__swsetup_r+0xc6>
 800e060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e064:	d1ba      	bne.n	800dfdc <__swsetup_r+0x30>
 800e066:	bd70      	pop	{r4, r5, r6, pc}
 800e068:	0781      	lsls	r1, r0, #30
 800e06a:	bf58      	it	pl
 800e06c:	6963      	ldrpl	r3, [r4, #20]
 800e06e:	60a3      	str	r3, [r4, #8]
 800e070:	e7f4      	b.n	800e05c <__swsetup_r+0xb0>
 800e072:	2000      	movs	r0, #0
 800e074:	e7f7      	b.n	800e066 <__swsetup_r+0xba>
 800e076:	bf00      	nop
 800e078:	20000034 	.word	0x20000034
 800e07c:	0800e560 	.word	0x0800e560
 800e080:	0800e580 	.word	0x0800e580
 800e084:	0800e540 	.word	0x0800e540

0800e088 <abort>:
 800e088:	2006      	movs	r0, #6
 800e08a:	b508      	push	{r3, lr}
 800e08c:	f000 f8da 	bl	800e244 <raise>
 800e090:	2001      	movs	r0, #1
 800e092:	f7f3 ff50 	bl	8001f36 <_exit>

0800e096 <__swhatbuf_r>:
 800e096:	b570      	push	{r4, r5, r6, lr}
 800e098:	460e      	mov	r6, r1
 800e09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e09e:	4614      	mov	r4, r2
 800e0a0:	2900      	cmp	r1, #0
 800e0a2:	461d      	mov	r5, r3
 800e0a4:	b096      	sub	sp, #88	; 0x58
 800e0a6:	da08      	bge.n	800e0ba <__swhatbuf_r+0x24>
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e0ae:	602a      	str	r2, [r5, #0]
 800e0b0:	061a      	lsls	r2, r3, #24
 800e0b2:	d410      	bmi.n	800e0d6 <__swhatbuf_r+0x40>
 800e0b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0b8:	e00e      	b.n	800e0d8 <__swhatbuf_r+0x42>
 800e0ba:	466a      	mov	r2, sp
 800e0bc:	f000 f8de 	bl	800e27c <_fstat_r>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	dbf1      	blt.n	800e0a8 <__swhatbuf_r+0x12>
 800e0c4:	9a01      	ldr	r2, [sp, #4]
 800e0c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0ce:	425a      	negs	r2, r3
 800e0d0:	415a      	adcs	r2, r3
 800e0d2:	602a      	str	r2, [r5, #0]
 800e0d4:	e7ee      	b.n	800e0b4 <__swhatbuf_r+0x1e>
 800e0d6:	2340      	movs	r3, #64	; 0x40
 800e0d8:	2000      	movs	r0, #0
 800e0da:	6023      	str	r3, [r4, #0]
 800e0dc:	b016      	add	sp, #88	; 0x58
 800e0de:	bd70      	pop	{r4, r5, r6, pc}

0800e0e0 <__smakebuf_r>:
 800e0e0:	898b      	ldrh	r3, [r1, #12]
 800e0e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0e4:	079d      	lsls	r5, r3, #30
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	460c      	mov	r4, r1
 800e0ea:	d507      	bpl.n	800e0fc <__smakebuf_r+0x1c>
 800e0ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0f0:	6023      	str	r3, [r4, #0]
 800e0f2:	6123      	str	r3, [r4, #16]
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	6163      	str	r3, [r4, #20]
 800e0f8:	b002      	add	sp, #8
 800e0fa:	bd70      	pop	{r4, r5, r6, pc}
 800e0fc:	466a      	mov	r2, sp
 800e0fe:	ab01      	add	r3, sp, #4
 800e100:	f7ff ffc9 	bl	800e096 <__swhatbuf_r>
 800e104:	9900      	ldr	r1, [sp, #0]
 800e106:	4605      	mov	r5, r0
 800e108:	4630      	mov	r0, r6
 800e10a:	f7fb fcdf 	bl	8009acc <_malloc_r>
 800e10e:	b948      	cbnz	r0, 800e124 <__smakebuf_r+0x44>
 800e110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e114:	059a      	lsls	r2, r3, #22
 800e116:	d4ef      	bmi.n	800e0f8 <__smakebuf_r+0x18>
 800e118:	f023 0303 	bic.w	r3, r3, #3
 800e11c:	f043 0302 	orr.w	r3, r3, #2
 800e120:	81a3      	strh	r3, [r4, #12]
 800e122:	e7e3      	b.n	800e0ec <__smakebuf_r+0xc>
 800e124:	4b0d      	ldr	r3, [pc, #52]	; (800e15c <__smakebuf_r+0x7c>)
 800e126:	62b3      	str	r3, [r6, #40]	; 0x28
 800e128:	89a3      	ldrh	r3, [r4, #12]
 800e12a:	6020      	str	r0, [r4, #0]
 800e12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e130:	81a3      	strh	r3, [r4, #12]
 800e132:	9b00      	ldr	r3, [sp, #0]
 800e134:	6120      	str	r0, [r4, #16]
 800e136:	6163      	str	r3, [r4, #20]
 800e138:	9b01      	ldr	r3, [sp, #4]
 800e13a:	b15b      	cbz	r3, 800e154 <__smakebuf_r+0x74>
 800e13c:	4630      	mov	r0, r6
 800e13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e142:	f000 f8ad 	bl	800e2a0 <_isatty_r>
 800e146:	b128      	cbz	r0, 800e154 <__smakebuf_r+0x74>
 800e148:	89a3      	ldrh	r3, [r4, #12]
 800e14a:	f023 0303 	bic.w	r3, r3, #3
 800e14e:	f043 0301 	orr.w	r3, r3, #1
 800e152:	81a3      	strh	r3, [r4, #12]
 800e154:	89a0      	ldrh	r0, [r4, #12]
 800e156:	4305      	orrs	r5, r0
 800e158:	81a5      	strh	r5, [r4, #12]
 800e15a:	e7cd      	b.n	800e0f8 <__smakebuf_r+0x18>
 800e15c:	0800986d 	.word	0x0800986d

0800e160 <memmove>:
 800e160:	4288      	cmp	r0, r1
 800e162:	b510      	push	{r4, lr}
 800e164:	eb01 0402 	add.w	r4, r1, r2
 800e168:	d902      	bls.n	800e170 <memmove+0x10>
 800e16a:	4284      	cmp	r4, r0
 800e16c:	4623      	mov	r3, r4
 800e16e:	d807      	bhi.n	800e180 <memmove+0x20>
 800e170:	1e43      	subs	r3, r0, #1
 800e172:	42a1      	cmp	r1, r4
 800e174:	d008      	beq.n	800e188 <memmove+0x28>
 800e176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e17e:	e7f8      	b.n	800e172 <memmove+0x12>
 800e180:	4601      	mov	r1, r0
 800e182:	4402      	add	r2, r0
 800e184:	428a      	cmp	r2, r1
 800e186:	d100      	bne.n	800e18a <memmove+0x2a>
 800e188:	bd10      	pop	{r4, pc}
 800e18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e192:	e7f7      	b.n	800e184 <memmove+0x24>

0800e194 <_realloc_r>:
 800e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e198:	4680      	mov	r8, r0
 800e19a:	4614      	mov	r4, r2
 800e19c:	460e      	mov	r6, r1
 800e19e:	b921      	cbnz	r1, 800e1aa <_realloc_r+0x16>
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a6:	f7fb bc91 	b.w	8009acc <_malloc_r>
 800e1aa:	b92a      	cbnz	r2, 800e1b8 <_realloc_r+0x24>
 800e1ac:	f7ff fb76 	bl	800d89c <_free_r>
 800e1b0:	4625      	mov	r5, r4
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b8:	f000 f882 	bl	800e2c0 <_malloc_usable_size_r>
 800e1bc:	4284      	cmp	r4, r0
 800e1be:	4607      	mov	r7, r0
 800e1c0:	d802      	bhi.n	800e1c8 <_realloc_r+0x34>
 800e1c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1c6:	d812      	bhi.n	800e1ee <_realloc_r+0x5a>
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	4640      	mov	r0, r8
 800e1cc:	f7fb fc7e 	bl	8009acc <_malloc_r>
 800e1d0:	4605      	mov	r5, r0
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d0ed      	beq.n	800e1b2 <_realloc_r+0x1e>
 800e1d6:	42bc      	cmp	r4, r7
 800e1d8:	4622      	mov	r2, r4
 800e1da:	4631      	mov	r1, r6
 800e1dc:	bf28      	it	cs
 800e1de:	463a      	movcs	r2, r7
 800e1e0:	f7fb fc3d 	bl	8009a5e <memcpy>
 800e1e4:	4631      	mov	r1, r6
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	f7ff fb58 	bl	800d89c <_free_r>
 800e1ec:	e7e1      	b.n	800e1b2 <_realloc_r+0x1e>
 800e1ee:	4635      	mov	r5, r6
 800e1f0:	e7df      	b.n	800e1b2 <_realloc_r+0x1e>

0800e1f2 <_raise_r>:
 800e1f2:	291f      	cmp	r1, #31
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	460d      	mov	r5, r1
 800e1fa:	d904      	bls.n	800e206 <_raise_r+0x14>
 800e1fc:	2316      	movs	r3, #22
 800e1fe:	6003      	str	r3, [r0, #0]
 800e200:	f04f 30ff 	mov.w	r0, #4294967295
 800e204:	bd38      	pop	{r3, r4, r5, pc}
 800e206:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e208:	b112      	cbz	r2, 800e210 <_raise_r+0x1e>
 800e20a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e20e:	b94b      	cbnz	r3, 800e224 <_raise_r+0x32>
 800e210:	4620      	mov	r0, r4
 800e212:	f000 f831 	bl	800e278 <_getpid_r>
 800e216:	462a      	mov	r2, r5
 800e218:	4601      	mov	r1, r0
 800e21a:	4620      	mov	r0, r4
 800e21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e220:	f000 b818 	b.w	800e254 <_kill_r>
 800e224:	2b01      	cmp	r3, #1
 800e226:	d00a      	beq.n	800e23e <_raise_r+0x4c>
 800e228:	1c59      	adds	r1, r3, #1
 800e22a:	d103      	bne.n	800e234 <_raise_r+0x42>
 800e22c:	2316      	movs	r3, #22
 800e22e:	6003      	str	r3, [r0, #0]
 800e230:	2001      	movs	r0, #1
 800e232:	e7e7      	b.n	800e204 <_raise_r+0x12>
 800e234:	2400      	movs	r4, #0
 800e236:	4628      	mov	r0, r5
 800e238:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e23c:	4798      	blx	r3
 800e23e:	2000      	movs	r0, #0
 800e240:	e7e0      	b.n	800e204 <_raise_r+0x12>
	...

0800e244 <raise>:
 800e244:	4b02      	ldr	r3, [pc, #8]	; (800e250 <raise+0xc>)
 800e246:	4601      	mov	r1, r0
 800e248:	6818      	ldr	r0, [r3, #0]
 800e24a:	f7ff bfd2 	b.w	800e1f2 <_raise_r>
 800e24e:	bf00      	nop
 800e250:	20000034 	.word	0x20000034

0800e254 <_kill_r>:
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	2300      	movs	r3, #0
 800e258:	4d06      	ldr	r5, [pc, #24]	; (800e274 <_kill_r+0x20>)
 800e25a:	4604      	mov	r4, r0
 800e25c:	4608      	mov	r0, r1
 800e25e:	4611      	mov	r1, r2
 800e260:	602b      	str	r3, [r5, #0]
 800e262:	f7f3 fe58 	bl	8001f16 <_kill>
 800e266:	1c43      	adds	r3, r0, #1
 800e268:	d102      	bne.n	800e270 <_kill_r+0x1c>
 800e26a:	682b      	ldr	r3, [r5, #0]
 800e26c:	b103      	cbz	r3, 800e270 <_kill_r+0x1c>
 800e26e:	6023      	str	r3, [r4, #0]
 800e270:	bd38      	pop	{r3, r4, r5, pc}
 800e272:	bf00      	nop
 800e274:	2000332c 	.word	0x2000332c

0800e278 <_getpid_r>:
 800e278:	f7f3 be46 	b.w	8001f08 <_getpid>

0800e27c <_fstat_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	2300      	movs	r3, #0
 800e280:	4d06      	ldr	r5, [pc, #24]	; (800e29c <_fstat_r+0x20>)
 800e282:	4604      	mov	r4, r0
 800e284:	4608      	mov	r0, r1
 800e286:	4611      	mov	r1, r2
 800e288:	602b      	str	r3, [r5, #0]
 800e28a:	f7f3 fea2 	bl	8001fd2 <_fstat>
 800e28e:	1c43      	adds	r3, r0, #1
 800e290:	d102      	bne.n	800e298 <_fstat_r+0x1c>
 800e292:	682b      	ldr	r3, [r5, #0]
 800e294:	b103      	cbz	r3, 800e298 <_fstat_r+0x1c>
 800e296:	6023      	str	r3, [r4, #0]
 800e298:	bd38      	pop	{r3, r4, r5, pc}
 800e29a:	bf00      	nop
 800e29c:	2000332c 	.word	0x2000332c

0800e2a0 <_isatty_r>:
 800e2a0:	b538      	push	{r3, r4, r5, lr}
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	4d05      	ldr	r5, [pc, #20]	; (800e2bc <_isatty_r+0x1c>)
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	4608      	mov	r0, r1
 800e2aa:	602b      	str	r3, [r5, #0]
 800e2ac:	f7f3 fea0 	bl	8001ff0 <_isatty>
 800e2b0:	1c43      	adds	r3, r0, #1
 800e2b2:	d102      	bne.n	800e2ba <_isatty_r+0x1a>
 800e2b4:	682b      	ldr	r3, [r5, #0]
 800e2b6:	b103      	cbz	r3, 800e2ba <_isatty_r+0x1a>
 800e2b8:	6023      	str	r3, [r4, #0]
 800e2ba:	bd38      	pop	{r3, r4, r5, pc}
 800e2bc:	2000332c 	.word	0x2000332c

0800e2c0 <_malloc_usable_size_r>:
 800e2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2c4:	1f18      	subs	r0, r3, #4
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	bfbc      	itt	lt
 800e2ca:	580b      	ldrlt	r3, [r1, r0]
 800e2cc:	18c0      	addlt	r0, r0, r3
 800e2ce:	4770      	bx	lr

0800e2d0 <_init>:
 800e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2d2:	bf00      	nop
 800e2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2d6:	bc08      	pop	{r3}
 800e2d8:	469e      	mov	lr, r3
 800e2da:	4770      	bx	lr

0800e2dc <_fini>:
 800e2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2de:	bf00      	nop
 800e2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2e2:	bc08      	pop	{r3}
 800e2e4:	469e      	mov	lr, r3
 800e2e6:	4770      	bx	lr

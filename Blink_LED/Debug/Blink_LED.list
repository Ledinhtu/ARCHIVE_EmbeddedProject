
Blink_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a924  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800aa38  0800aa38  0001aa38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b020  0800b020  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  0800b020  0800b020  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b020  0800b020  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b020  0800b020  0001b020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b024  0800b024  0001b024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800b028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000240  0800b268  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800b268  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123e0  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aac  00000000  00000000  00032649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  000350f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00036240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f7c  00000000  00000000  00037288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014762  00000000  00000000  00051204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec13  00000000  00000000  00065966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f9c  00000000  00000000  000f45cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000240 	.word	0x20000240
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa1c 	.word	0x0800aa1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000244 	.word	0x20000244
 800014c:	0800aa1c 	.word	0x0800aa1c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__gesf2>:
 8000d98:	f04f 3cff 	mov.w	ip, #4294967295
 8000d9c:	e006      	b.n	8000dac <__cmpsf2+0x4>
 8000d9e:	bf00      	nop

08000da0 <__lesf2>:
 8000da0:	f04f 0c01 	mov.w	ip, #1
 8000da4:	e002      	b.n	8000dac <__cmpsf2+0x4>
 8000da6:	bf00      	nop

08000da8 <__cmpsf2>:
 8000da8:	f04f 0c01 	mov.w	ip, #1
 8000dac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000db0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000db4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dbc:	bf18      	it	ne
 8000dbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc2:	d011      	beq.n	8000de8 <__cmpsf2+0x40>
 8000dc4:	b001      	add	sp, #4
 8000dc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dca:	bf18      	it	ne
 8000dcc:	ea90 0f01 	teqne	r0, r1
 8000dd0:	bf58      	it	pl
 8000dd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dd6:	bf88      	it	hi
 8000dd8:	17c8      	asrhi	r0, r1, #31
 8000dda:	bf38      	it	cc
 8000ddc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000de0:	bf18      	it	ne
 8000de2:	f040 0001 	orrne.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	d102      	bne.n	8000df4 <__cmpsf2+0x4c>
 8000dee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000df2:	d105      	bne.n	8000e00 <__cmpsf2+0x58>
 8000df4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000df8:	d1e4      	bne.n	8000dc4 <__cmpsf2+0x1c>
 8000dfa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dfe:	d0e1      	beq.n	8000dc4 <__cmpsf2+0x1c>
 8000e00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <__aeabi_cfrcmple>:
 8000e08:	4684      	mov	ip, r0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	4661      	mov	r1, ip
 8000e0e:	e7ff      	b.n	8000e10 <__aeabi_cfcmpeq>

08000e10 <__aeabi_cfcmpeq>:
 8000e10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e12:	f7ff ffc9 	bl	8000da8 <__cmpsf2>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	bf48      	it	mi
 8000e1a:	f110 0f00 	cmnmi.w	r0, #0
 8000e1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e20 <__aeabi_fcmpeq>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff fff4 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e28:	bf0c      	ite	eq
 8000e2a:	2001      	moveq	r0, #1
 8000e2c:	2000      	movne	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmplt>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffea 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e3c:	bf34      	ite	cc
 8000e3e:	2001      	movcc	r0, #1
 8000e40:	2000      	movcs	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmple>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffe0 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpge>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffd2 	bl	8000e08 <__aeabi_cfrcmple>
 8000e64:	bf94      	ite	ls
 8000e66:	2001      	movls	r0, #1
 8000e68:	2000      	movhi	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_fcmpgt>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff ffc8 	bl	8000e08 <__aeabi_cfrcmple>
 8000e78:	bf34      	ite	cc
 8000e7a:	2001      	movcc	r0, #1
 8000e7c:	2000      	movcs	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_d2lz>:
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	4605      	mov	r5, r0
 8000e88:	460c      	mov	r4, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	4628      	mov	r0, r5
 8000e90:	4621      	mov	r1, r4
 8000e92:	f7ff fd9d 	bl	80009d0 <__aeabi_dcmplt>
 8000e96:	b928      	cbnz	r0, 8000ea4 <__aeabi_d2lz+0x20>
 8000e98:	4628      	mov	r0, r5
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ea0:	f000 b80a 	b.w	8000eb8 <__aeabi_d2ulz>
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000eaa:	f000 f805 	bl	8000eb8 <__aeabi_d2ulz>
 8000eae:	4240      	negs	r0, r0
 8000eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eb4:	bd38      	pop	{r3, r4, r5, pc}
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_d2ulz>:
 8000eb8:	b5d0      	push	{r4, r6, r7, lr}
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <__aeabi_d2ulz+0x34>)
 8000ebe:	4606      	mov	r6, r0
 8000ec0:	460f      	mov	r7, r1
 8000ec2:	f7ff fb13 	bl	80004ec <__aeabi_dmul>
 8000ec6:	f7ff fde9 	bl	8000a9c <__aeabi_d2uiz>
 8000eca:	4604      	mov	r4, r0
 8000ecc:	f7ff fa94 	bl	80003f8 <__aeabi_ui2d>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <__aeabi_d2ulz+0x38>)
 8000ed4:	f7ff fb0a 	bl	80004ec <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4630      	mov	r0, r6
 8000ede:	4639      	mov	r1, r7
 8000ee0:	f7ff f94c 	bl	800017c <__aeabi_dsub>
 8000ee4:	f7ff fdda 	bl	8000a9c <__aeabi_d2uiz>
 8000ee8:	4621      	mov	r1, r4
 8000eea:	bdd0      	pop	{r4, r6, r7, pc}
 8000eec:	3df00000 	.word	0x3df00000
 8000ef0:	41f00000 	.word	0x41f00000

08000ef4 <HW_init>:
//char buff[RX_DATA_SIZE];
int16_t ret = 0;

uint32_t time = 0; //test time

void HW_init(int delay) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fdb0 	bl	8001a64 <HAL_Delay>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	Temp_levels[0] = DHT11_MIN_TEMPERATURE;
 8000f12:	4b53      	ldr	r3, [pc, #332]	; (8001060 <main+0x154>)
 8000f14:	22ec      	movs	r2, #236	; 0xec
 8000f16:	701a      	strb	r2, [r3, #0]
	Temp_levels[NUMBER_LEVELS] = DHT11_MAX_TEMPERATURE;
 8000f18:	4b51      	ldr	r3, [pc, #324]	; (8001060 <main+0x154>)
 8000f1a:	223c      	movs	r2, #60	; 0x3c
 8000f1c:	711a      	strb	r2, [r3, #4]

	RHumi_levels[0] = DHT11_MIN_RELATIVE_HUMIDITY;
 8000f1e:	4b51      	ldr	r3, [pc, #324]	; (8001064 <main+0x158>)
 8000f20:	2205      	movs	r2, #5
 8000f22:	701a      	strb	r2, [r3, #0]
	RHumi_levels[NUMBER_LEVELS] = DHT11_MAX_RELATIVE_HUMIDITY;
 8000f24:	4b4f      	ldr	r3, [pc, #316]	; (8001064 <main+0x158>)
 8000f26:	225f      	movs	r2, #95	; 0x5f
 8000f28:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f000 fd39 	bl	80019a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2e:	f000 f8bd 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f32:	f000 fa3b 	bl	80013ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000f36:	f000 fa1b 	bl	8001370 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f3a:	f000 f92b 	bl	8001194 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f3e:	f000 f8fb 	bl	8001138 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f42:	f000 f973 	bl	800122c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f46:	f000 f9e9 	bl	800131c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4846      	ldr	r0, [pc, #280]	; (8001068 <main+0x15c>)
 8000f4e:	f002 fc89 	bl	8003864 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)Rx_data, RX_DATA_SIZE);
 8000f52:	2232      	movs	r2, #50	; 0x32
 8000f54:	4945      	ldr	r1, [pc, #276]	; (800106c <main+0x160>)
 8000f56:	4846      	ldr	r0, [pc, #280]	; (8001070 <main+0x164>)
 8000f58:	f003 fa89 	bl	800446e <HAL_UART_Receive_DMA>

  DHT_Init(&DHT11, &htim2, GPIO_PORT_DHT11, GPIO_PIN_DHT11);
 8000f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f60:	4a44      	ldr	r2, [pc, #272]	; (8001074 <main+0x168>)
 8000f62:	4945      	ldr	r1, [pc, #276]	; (8001078 <main+0x16c>)
 8000f64:	4845      	ldr	r0, [pc, #276]	; (800107c <main+0x170>)
 8000f66:	f004 fa12 	bl	800538e <DHT_Init>
  lcd_init(&hlcd, &hi2c1, LCD_ADDR_DEFAULT);
 8000f6a:	2227      	movs	r2, #39	; 0x27
 8000f6c:	4944      	ldr	r1, [pc, #272]	; (8001080 <main+0x174>)
 8000f6e:	4845      	ldr	r0, [pc, #276]	; (8001084 <main+0x178>)
 8000f70:	f004 fd85 	bl	8005a7e <lcd_init>
  DC_Motor_Init(&MOTOR_1, &htim3,TIM_CHANNEL_1, MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin);
 8000f74:	2320      	movs	r3, #32
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	4b43      	ldr	r3, [pc, #268]	; (8001088 <main+0x17c>)
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	4b41      	ldr	r3, [pc, #260]	; (8001088 <main+0x17c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	4938      	ldr	r1, [pc, #224]	; (8001068 <main+0x15c>)
 8000f86:	4841      	ldr	r0, [pc, #260]	; (800108c <main+0x180>)
 8000f88:	f004 f828 	bl	8004fdc <DC_Motor_Init>
  HW_init(2000);
 8000f8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f90:	f7ff ffb0 	bl	8000ef4 <HW_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const uint32_t offset = uwTick;
 8000f94:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <main+0x184>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	607b      	str	r3, [r7, #4]
//	} else {
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
//	}
//	  HAL_Delay(150);

	if ((uwTick-offset)%P < p) {
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <main+0x184>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	f241 7270 	movw	r2, #6000	; 0x1770
 8000fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000faa:	fb01 f202 	mul.w	r2, r1, r2
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d229      	bcs.n	800100c <main+0x100>
		if ((uwTick-offset) % p == tk1[i_1 % n1] ) {
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <main+0x184>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000fc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fc8:	fb01 f202 	mul.w	r2, r1, r2
 8000fcc:	1a99      	subs	r1, r3, r2
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <main+0x188>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2209      	movs	r2, #9
 8000fd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8000fd8:	fb00 f202 	mul.w	r2, r0, r2
 8000fdc:	1a9b      	subs	r3, r3, r2
 8000fde:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <main+0x18c>)
 8000fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe4:	4299      	cmp	r1, r3
 8000fe6:	d1d8      	bne.n	8000f9a <main+0x8e>
			task_point_array_1[i_1 % n1]();
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <main+0x188>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2209      	movs	r2, #9
 8000fee:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ff2:	fb01 f202 	mul.w	r2, r1, r2
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <main+0x190>)
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	4798      	blx	r3
			i_1++;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <main+0x188>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	4a23      	ldr	r2, [pc, #140]	; (8001094 <main+0x188>)
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e7c6      	b.n	8000f9a <main+0x8e>
		}
	} else {
		if ((uwTick-offset) % p == tk2[i_2 % n2] ) {
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <main+0x184>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001018:	fbb3 f1f2 	udiv	r1, r3, r2
 800101c:	fb01 f202 	mul.w	r2, r1, r2
 8001020:	1a99      	subs	r1, r3, r2
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <main+0x194>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2206      	movs	r2, #6
 8001028:	fbb3 f0f2 	udiv	r0, r3, r2
 800102c:	fb00 f202 	mul.w	r2, r0, r2
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <main+0x198>)
 8001034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001038:	4299      	cmp	r1, r3
 800103a:	d1ae      	bne.n	8000f9a <main+0x8e>
			task_point_array_2[i_2 % n2]();
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <main+0x194>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2206      	movs	r2, #6
 8001042:	fbb3 f1f2 	udiv	r1, r3, r2
 8001046:	fb01 f202 	mul.w	r2, r1, r2
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <main+0x19c>)
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	4798      	blx	r3
			i_2++;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <main+0x194>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <main+0x194>)
 800105c:	6013      	str	r3, [r2, #0]
	if ((uwTick-offset)%P < p) {
 800105e:	e79c      	b.n	8000f9a <main+0x8e>
 8001060:	20000410 	.word	0x20000410
 8001064:	20000418 	.word	0x20000418
 8001068:	200002f8 	.word	0x200002f8
 800106c:	20000428 	.word	0x20000428
 8001070:	20000340 	.word	0x20000340
 8001074:	40011000 	.word	0x40011000
 8001078:	200002b0 	.word	0x200002b0
 800107c:	200003d4 	.word	0x200003d4
 8001080:	2000025c 	.word	0x2000025c
 8001084:	200003c8 	.word	0x200003c8
 8001088:	40010800 	.word	0x40010800
 800108c:	200003f4 	.word	0x200003f4
 8001090:	20000468 	.word	0x20000468
 8001094:	2000045c 	.word	0x2000045c
 8001098:	0800aae8 	.word	0x0800aae8
 800109c:	20000004 	.word	0x20000004
 80010a0:	20000460 	.word	0x20000460
 80010a4:	0800aafc 	.word	0x0800aafc
 80010a8:	20000028 	.word	0x20000028

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b090      	sub	sp, #64	; 0x40
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	2228      	movs	r2, #40	; 0x28
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 ffe8 	bl	8006090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e0:	2302      	movs	r3, #2
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0318 	add.w	r3, r7, #24
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fe83 	bl	8002e00 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001100:	f000 f9c0 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2302      	movs	r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001114:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f002 f8f0 	bl	8003304 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800112a:	f000 f9ab 	bl	8001484 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3740      	adds	r7, #64	; 0x40
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_I2C1_Init+0x50>)
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <MX_I2C1_Init+0x54>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_I2C1_Init+0x50>)
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_I2C1_Init+0x58>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_I2C1_Init+0x50>)
 8001156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_I2C1_Init+0x50>)
 8001176:	f001 f9f9 	bl	800256c <HAL_I2C_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001180:	f000 f980 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000025c 	.word	0x2000025c
 800118c:	40005400 	.word	0x40005400
 8001190:	000186a0 	.word	0x000186a0

08001194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_TIM2_Init+0x94>)
 80011b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_TIM2_Init+0x94>)
 80011ba:	2247      	movs	r2, #71	; 0x47
 80011bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_TIM2_Init+0x94>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_TIM2_Init+0x94>)
 80011c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_TIM2_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_TIM2_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d8:	4813      	ldr	r0, [pc, #76]	; (8001228 <MX_TIM2_Init+0x94>)
 80011da:	f002 fa2b 	bl	8003634 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011e4:	f000 f94e 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_TIM2_Init+0x94>)
 80011f6:	f002 fc95 	bl	8003b24 <HAL_TIM_ConfigClockSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001200:	f000 f940 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_TIM2_Init+0x94>)
 8001212:	f002 ffef 	bl	80041f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800121c:	f000 f932 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200002b0 	.word	0x200002b0

0800122c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	; 0x38
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <MX_TIM3_Init+0xe8>)
 800125e:	4a2e      	ldr	r2, [pc, #184]	; (8001318 <MX_TIM3_Init+0xec>)
 8001260:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <MX_TIM3_Init+0xe8>)
 8001264:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001268:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <MX_TIM3_Init+0xe8>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MX_TIM3_Init+0xe8>)
 8001272:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001276:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_TIM3_Init+0xe8>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <MX_TIM3_Init+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001284:	4823      	ldr	r0, [pc, #140]	; (8001314 <MX_TIM3_Init+0xe8>)
 8001286:	f002 f9d5 	bl	8003634 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001290:	f000 f8f8 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129e:	4619      	mov	r1, r3
 80012a0:	481c      	ldr	r0, [pc, #112]	; (8001314 <MX_TIM3_Init+0xe8>)
 80012a2:	f002 fc3f 	bl	8003b24 <HAL_TIM_ConfigClockSource>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012ac:	f000 f8ea 	bl	8001484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b0:	4818      	ldr	r0, [pc, #96]	; (8001314 <MX_TIM3_Init+0xe8>)
 80012b2:	f002 fa7f 	bl	80037b4 <HAL_TIM_PWM_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012bc:	f000 f8e2 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	; (8001314 <MX_TIM3_Init+0xe8>)
 80012d0:	f002 ff90 	bl	80041f4 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012da:	f000 f8d3 	bl	8001484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	; 0x60
 80012e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_TIM3_Init+0xe8>)
 80012f6:	f002 fb57 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001300:	f000 f8c0 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM3_Init+0xe8>)
 8001306:	f000 f975 	bl	80015f4 <HAL_TIM_MspPostInit>

}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	; 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200002f8 	.word	0x200002f8
 8001318:	40000400 	.word	0x40000400

0800131c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_USART2_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001354:	f002 ffac 	bl	80042b0 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800135e:	f000 f891 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000340 	.word	0x20000340
 800136c:	40004400 	.word	0x40004400

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_DMA_Init+0x38>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <MX_DMA_Init+0x38>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6153      	str	r3, [r2, #20]
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_DMA_Init+0x38>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2010      	movs	r0, #16
 8001394:	f000 fc61 	bl	8001c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001398:	2010      	movs	r0, #16
 800139a:	f000 fc7a 	bl	8001c92 <HAL_NVIC_EnableIRQ>

}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c0:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_GPIO_Init+0xcc>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <MX_GPIO_Init+0xcc>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <MX_GPIO_Init+0xcc>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <MX_GPIO_Init+0xcc>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <MX_GPIO_Init+0xcc>)
 80013de:	f043 0320 	orr.w	r3, r3, #32
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <MX_GPIO_Init+0xcc>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0320 	and.w	r3, r3, #32
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <MX_GPIO_Init+0xcc>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a20      	ldr	r2, [pc, #128]	; (8001478 <MX_GPIO_Init+0xcc>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_GPIO_Init+0xcc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_GPIO_Init+0xcc>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <MX_GPIO_Init+0xcc>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_GPIO_Init+0xcc>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blink_led_GPIO_Port, blink_led_Pin, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001426:	4815      	ldr	r0, [pc, #84]	; (800147c <MX_GPIO_Init+0xd0>)
 8001428:	f001 f887 	bl	800253a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2130      	movs	r1, #48	; 0x30
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <MX_GPIO_Init+0xd4>)
 8001432:	f001 f882 	bl	800253a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blink_led_Pin */
  GPIO_InitStruct.Pin = blink_led_Pin;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(blink_led_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <MX_GPIO_Init+0xd0>)
 8001450:	f000 fed8 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN1_Pin MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8001454:	2330      	movs	r3, #48	; 0x30
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_GPIO_Init+0xd4>)
 800146c:	f000 feca 	bl	8002204 <HAL_GPIO_Init>

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	40011000 	.word	0x40011000
 8001480:	40010800 	.word	0x40010800

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148c:	e7fe      	b.n	800148c <Error_Handler+0x8>
	...

08001490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_MspInit+0x5c>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_MspInit+0x5c>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_MspInit+0x5c>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x5c>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x5c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x5c>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_MspInit+0x60>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_MspInit+0x60>)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000

080014f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_I2C_MspInit+0x90>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d132      	bne.n	800157a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_I2C_MspInit+0x94>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_I2C_MspInit+0x94>)
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_I2C_MspInit+0x94>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001532:	2312      	movs	r3, #18
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <HAL_I2C_MspInit+0x98>)
 8001542:	f000 fe5f 	bl	8002204 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_I2C_MspInit+0x9c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
 800155c:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <HAL_I2C_MspInit+0x9c>)
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_I2C_MspInit+0x94>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_I2C_MspInit+0x94>)
 8001568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_I2C_MspInit+0x94>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40005400 	.word	0x40005400
 8001588:	40021000 	.word	0x40021000
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40010000 	.word	0x40010000

08001594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a4:	d10c      	bne.n	80015c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_TIM_Base_MspInit+0x58>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_TIM_Base_MspInit+0x58>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_TIM_Base_MspInit+0x58>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015be:	e010      	b.n	80015e2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x5c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10b      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_TIM_Base_MspInit+0x58>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_TIM_Base_MspInit+0x58>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_TIM_Base_MspInit+0x58>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40000400 	.word	0x40000400

080015f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <HAL_TIM_MspPostInit+0x58>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d117      	bne.n	8001644 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_TIM_MspPostInit+0x5c>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_TIM_MspPostInit+0x5c>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_TIM_MspPostInit+0x5c>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2302      	movs	r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4619      	mov	r1, r3
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_TIM_MspPostInit+0x60>)
 8001640:	f000 fde0 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40000400 	.word	0x40000400
 8001650:	40021000 	.word	0x40021000
 8001654:	40010800 	.word	0x40010800

08001658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a32      	ldr	r2, [pc, #200]	; (800173c <HAL_UART_MspInit+0xe4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d15d      	bne.n	8001734 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_UART_MspInit+0xe8>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	4a30      	ldr	r2, [pc, #192]	; (8001740 <HAL_UART_MspInit+0xe8>)
 800167e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001682:	61d3      	str	r3, [r2, #28]
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_UART_MspInit+0xe8>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_UART_MspInit+0xe8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a2a      	ldr	r2, [pc, #168]	; (8001740 <HAL_UART_MspInit+0xe8>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <HAL_UART_MspInit+0xe8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a8:	2304      	movs	r3, #4
 80016aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4619      	mov	r1, r3
 80016ba:	4822      	ldr	r0, [pc, #136]	; (8001744 <HAL_UART_MspInit+0xec>)
 80016bc:	f000 fda2 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016c0:	2308      	movs	r3, #8
 80016c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	481c      	ldr	r0, [pc, #112]	; (8001744 <HAL_UART_MspInit+0xec>)
 80016d4:	f000 fd96 	bl	8002204 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_UART_MspInit+0xf0>)
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <HAL_UART_MspInit+0xf4>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_UART_MspInit+0xf0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_UART_MspInit+0xf0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_UART_MspInit+0xf0>)
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_UART_MspInit+0xf0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_UART_MspInit+0xf0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_UART_MspInit+0xf0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_UART_MspInit+0xf0>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001708:	480f      	ldr	r0, [pc, #60]	; (8001748 <HAL_UART_MspInit+0xf0>)
 800170a:	f000 fadd 	bl	8001cc8 <HAL_DMA_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001714:	f7ff feb6 	bl	8001484 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_UART_MspInit+0xf0>)
 800171c:	639a      	str	r2, [r3, #56]	; 0x38
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_UART_MspInit+0xf0>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2102      	movs	r1, #2
 8001728:	2026      	movs	r0, #38	; 0x26
 800172a:	f000 fa96 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800172e:	2026      	movs	r0, #38	; 0x26
 8001730:	f000 faaf 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40004400 	.word	0x40004400
 8001740:	40021000 	.word	0x40021000
 8001744:	40010800 	.word	0x40010800
 8001748:	20000384 	.word	0x20000384
 800174c:	4002006c 	.word	0x4002006c

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001796:	f000 f949 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA1_Channel6_IRQHandler+0x10>)
 80017a6:	f000 fbf9 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000384 	.word	0x20000384

080017b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <USART2_IRQHandler+0x10>)
 80017ba:	f002 fee3 	bl	8004584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000340 	.word	0x20000340

080017c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <_kill>:

int _kill(int pid, int sig)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017e0:	f004 fc2c 	bl	800603c <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2216      	movs	r2, #22
 80017e8:	601a      	str	r2, [r3, #0]
	return -1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_exit>:

void _exit (int status)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffe7 	bl	80017d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001808:	e7fe      	b.n	8001808 <_exit+0x12>

0800180a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e00a      	b.n	8001832 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800181c:	f3af 8000 	nop.w
 8001820:	4601      	mov	r1, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	60ba      	str	r2, [r7, #8]
 8001828:	b2ca      	uxtb	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	dbf0      	blt.n	800181c <_read+0x12>
	}

return len;
 800183a:	687b      	ldr	r3, [r7, #4]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e009      	b.n	800186a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	60ba      	str	r2, [r7, #8]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbf1      	blt.n	8001856 <_write+0x12>
	}
	return len;
 8001872:	687b      	ldr	r3, [r7, #4]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_close>:

int _close(int file)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a2:	605a      	str	r2, [r3, #4]
	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <_isatty>:

int _isatty(int file)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <_sbrk+0x5c>)
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <_sbrk+0x60>)
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <_sbrk+0x64>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <_sbrk+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	429a      	cmp	r2, r3
 800190a:	d207      	bcs.n	800191c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800190c:	f004 fb96 	bl	800603c <__errno>
 8001910:	4603      	mov	r3, r0
 8001912:	220c      	movs	r2, #12
 8001914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	e009      	b.n	8001930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <_sbrk+0x64>)
 800192c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20005000 	.word	0x20005000
 800193c:	00000400 	.word	0x00000400
 8001940:	20000464 	.word	0x20000464
 8001944:	20000580 	.word	0x20000580

08001948 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001956:	490d      	ldr	r1, [pc, #52]	; (800198c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800196c:	4c0a      	ldr	r4, [pc, #40]	; (8001998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800197a:	f7ff ffe5 	bl	8001948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800197e:	f004 fb63 	bl	8006048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001982:	f7ff fac3 	bl	8000f0c <main>
  bx lr
 8001986:	4770      	bx	lr
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001990:	0800b028 	.word	0x0800b028
  ldr r2, =_sbss
 8001994:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001998:	2000057c 	.word	0x2000057c

0800199c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_2_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_Init+0x28>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x28>)
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 f947 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f808 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fd68 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f95f 	bl	8001cae <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 f927 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x5c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000040 	.word	0x20000040
 8001a24:	20000048 	.word	0x20000048
 8001a28:	20000044 	.word	0x20000044

08001a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x1c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x20>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <HAL_IncTick+0x20>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	20000048 	.word	0x20000048
 8001a4c:	20000468 	.word	0x20000468

08001a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <HAL_GetTick+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	20000468 	.word	0x20000468

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffe0 	bl	8001a50 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000048 	.word	0x20000048

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4906      	ldr	r1, [pc, #24]	; (8001b44 <__NVIC_EnableIRQ+0x34>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff90 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff2d 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff42 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff90 	bl	8001b9c <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5f 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff35 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa2 	bl	8001c00 <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e043      	b.n	8001d66 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_DMA_Init+0xa8>)
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_DMA_Init+0xac>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	009a      	lsls	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_DMA_Init+0xb0>)
 8001cfa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	bffdfff8 	.word	0xbffdfff8
 8001d74:	cccccccd 	.word	0xcccccccd
 8001d78:	40020000 	.word	0x40020000

08001d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_DMA_Start_IT+0x20>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e04a      	b.n	8001e32 <HAL_DMA_Start_IT+0xb6>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d13a      	bne.n	8001e24 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f9e8 	bl	80021a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 020e 	orr.w	r2, r2, #14
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e00f      	b.n	8001e12 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0204 	bic.w	r2, r2, #4
 8001e00:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 020a 	orr.w	r2, r2, #10
 8001e10:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e005      	b.n	8001e30 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d008      	beq.n	8001e62 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2204      	movs	r2, #4
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e020      	b.n	8001ea4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 020e 	bic.w	r2, r2, #14
 8001e70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d005      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e051      	b.n	8001f76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 020e 	bic.w	r2, r2, #14
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <HAL_DMA_Abort_IT+0xd0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d029      	beq.n	8001f50 <HAL_DMA_Abort_IT+0xa0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <HAL_DMA_Abort_IT+0xd4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d022      	beq.n	8001f4c <HAL_DMA_Abort_IT+0x9c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_DMA_Abort_IT+0xd8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d01a      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x96>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_DMA_Abort_IT+0xdc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d012      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x90>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_DMA_Abort_IT+0xe0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00a      	beq.n	8001f3a <HAL_DMA_Abort_IT+0x8a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_DMA_Abort_IT+0xe4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d102      	bne.n	8001f34 <HAL_DMA_Abort_IT+0x84>
 8001f2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f32:	e00e      	b.n	8001f52 <HAL_DMA_Abort_IT+0xa2>
 8001f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f38:	e00b      	b.n	8001f52 <HAL_DMA_Abort_IT+0xa2>
 8001f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f3e:	e008      	b.n	8001f52 <HAL_DMA_Abort_IT+0xa2>
 8001f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f44:	e005      	b.n	8001f52 <HAL_DMA_Abort_IT+0xa2>
 8001f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f4a:	e002      	b.n	8001f52 <HAL_DMA_Abort_IT+0xa2>
 8001f4c:	2310      	movs	r3, #16
 8001f4e:	e000      	b.n	8001f52 <HAL_DMA_Abort_IT+0xa2>
 8001f50:	2301      	movs	r3, #1
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_DMA_Abort_IT+0xe8>)
 8001f54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
    } 
  }
  return status;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40020008 	.word	0x40020008
 8001f84:	4002001c 	.word	0x4002001c
 8001f88:	40020030 	.word	0x40020030
 8001f8c:	40020044 	.word	0x40020044
 8001f90:	40020058 	.word	0x40020058
 8001f94:	4002006c 	.word	0x4002006c
 8001f98:	40020000 	.word	0x40020000

08001f9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	2204      	movs	r2, #4
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d04f      	beq.n	8002064 <HAL_DMA_IRQHandler+0xc8>
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04a      	beq.n	8002064 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0204 	bic.w	r2, r2, #4
 8001fea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a66      	ldr	r2, [pc, #408]	; (800218c <HAL_DMA_IRQHandler+0x1f0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d029      	beq.n	800204a <HAL_DMA_IRQHandler+0xae>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a65      	ldr	r2, [pc, #404]	; (8002190 <HAL_DMA_IRQHandler+0x1f4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d022      	beq.n	8002046 <HAL_DMA_IRQHandler+0xaa>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a63      	ldr	r2, [pc, #396]	; (8002194 <HAL_DMA_IRQHandler+0x1f8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01a      	beq.n	8002040 <HAL_DMA_IRQHandler+0xa4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a62      	ldr	r2, [pc, #392]	; (8002198 <HAL_DMA_IRQHandler+0x1fc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d012      	beq.n	800203a <HAL_DMA_IRQHandler+0x9e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a60      	ldr	r2, [pc, #384]	; (800219c <HAL_DMA_IRQHandler+0x200>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00a      	beq.n	8002034 <HAL_DMA_IRQHandler+0x98>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a5f      	ldr	r2, [pc, #380]	; (80021a0 <HAL_DMA_IRQHandler+0x204>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d102      	bne.n	800202e <HAL_DMA_IRQHandler+0x92>
 8002028:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800202c:	e00e      	b.n	800204c <HAL_DMA_IRQHandler+0xb0>
 800202e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002032:	e00b      	b.n	800204c <HAL_DMA_IRQHandler+0xb0>
 8002034:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002038:	e008      	b.n	800204c <HAL_DMA_IRQHandler+0xb0>
 800203a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800203e:	e005      	b.n	800204c <HAL_DMA_IRQHandler+0xb0>
 8002040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002044:	e002      	b.n	800204c <HAL_DMA_IRQHandler+0xb0>
 8002046:	2340      	movs	r3, #64	; 0x40
 8002048:	e000      	b.n	800204c <HAL_DMA_IRQHandler+0xb0>
 800204a:	2304      	movs	r3, #4
 800204c:	4a55      	ldr	r2, [pc, #340]	; (80021a4 <HAL_DMA_IRQHandler+0x208>)
 800204e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8094 	beq.w	8002182 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002062:	e08e      	b.n	8002182 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	2202      	movs	r2, #2
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d056      	beq.n	8002122 <HAL_DMA_IRQHandler+0x186>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d051      	beq.n	8002122 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10b      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 020a 	bic.w	r2, r2, #10
 800209a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a38      	ldr	r2, [pc, #224]	; (800218c <HAL_DMA_IRQHandler+0x1f0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d029      	beq.n	8002102 <HAL_DMA_IRQHandler+0x166>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a37      	ldr	r2, [pc, #220]	; (8002190 <HAL_DMA_IRQHandler+0x1f4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d022      	beq.n	80020fe <HAL_DMA_IRQHandler+0x162>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a35      	ldr	r2, [pc, #212]	; (8002194 <HAL_DMA_IRQHandler+0x1f8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01a      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x15c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a34      	ldr	r2, [pc, #208]	; (8002198 <HAL_DMA_IRQHandler+0x1fc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d012      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x156>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_DMA_IRQHandler+0x200>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00a      	beq.n	80020ec <HAL_DMA_IRQHandler+0x150>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a31      	ldr	r2, [pc, #196]	; (80021a0 <HAL_DMA_IRQHandler+0x204>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d102      	bne.n	80020e6 <HAL_DMA_IRQHandler+0x14a>
 80020e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020e4:	e00e      	b.n	8002104 <HAL_DMA_IRQHandler+0x168>
 80020e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ea:	e00b      	b.n	8002104 <HAL_DMA_IRQHandler+0x168>
 80020ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f0:	e008      	b.n	8002104 <HAL_DMA_IRQHandler+0x168>
 80020f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f6:	e005      	b.n	8002104 <HAL_DMA_IRQHandler+0x168>
 80020f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fc:	e002      	b.n	8002104 <HAL_DMA_IRQHandler+0x168>
 80020fe:	2320      	movs	r3, #32
 8002100:	e000      	b.n	8002104 <HAL_DMA_IRQHandler+0x168>
 8002102:	2302      	movs	r3, #2
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <HAL_DMA_IRQHandler+0x208>)
 8002106:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d034      	beq.n	8002182 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002120:	e02f      	b.n	8002182 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2208      	movs	r2, #8
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d028      	beq.n	8002184 <HAL_DMA_IRQHandler+0x1e8>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d023      	beq.n	8002184 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 020e 	bic.w	r2, r2, #14
 800214a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002154:	2101      	movs	r1, #1
 8002156:	fa01 f202 	lsl.w	r2, r1, r2
 800215a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
    }
  }
  return;
 8002182:	bf00      	nop
 8002184:	bf00      	nop
}
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40020008 	.word	0x40020008
 8002190:	4002001c 	.word	0x4002001c
 8002194:	40020030 	.word	0x40020030
 8002198:	40020044 	.word	0x40020044
 800219c:	40020058 	.word	0x40020058
 80021a0:	4002006c 	.word	0x4002006c
 80021a4:	40020000 	.word	0x40020000

080021a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d108      	bne.n	80021e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021e6:	e007      	b.n	80021f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	60da      	str	r2, [r3, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
	...

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b08b      	sub	sp, #44	; 0x2c
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002216:	e169      	b.n	80024ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002218:	2201      	movs	r2, #1
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 8158 	bne.w	80024e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a9a      	ldr	r2, [pc, #616]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d05e      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002240:	4a98      	ldr	r2, [pc, #608]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d875      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 8002246:	4a98      	ldr	r2, [pc, #608]	; (80024a8 <HAL_GPIO_Init+0x2a4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d058      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 800224c:	4a96      	ldr	r2, [pc, #600]	; (80024a8 <HAL_GPIO_Init+0x2a4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d86f      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 8002252:	4a96      	ldr	r2, [pc, #600]	; (80024ac <HAL_GPIO_Init+0x2a8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d052      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002258:	4a94      	ldr	r2, [pc, #592]	; (80024ac <HAL_GPIO_Init+0x2a8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d869      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 800225e:	4a94      	ldr	r2, [pc, #592]	; (80024b0 <HAL_GPIO_Init+0x2ac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d04c      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002264:	4a92      	ldr	r2, [pc, #584]	; (80024b0 <HAL_GPIO_Init+0x2ac>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d863      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 800226a:	4a92      	ldr	r2, [pc, #584]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d046      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002270:	4a90      	ldr	r2, [pc, #576]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d85d      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 8002276:	2b12      	cmp	r3, #18
 8002278:	d82a      	bhi.n	80022d0 <HAL_GPIO_Init+0xcc>
 800227a:	2b12      	cmp	r3, #18
 800227c:	d859      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 800227e:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <HAL_GPIO_Init+0x80>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	080022ff 	.word	0x080022ff
 8002288:	080022d9 	.word	0x080022d9
 800228c:	080022eb 	.word	0x080022eb
 8002290:	0800232d 	.word	0x0800232d
 8002294:	08002333 	.word	0x08002333
 8002298:	08002333 	.word	0x08002333
 800229c:	08002333 	.word	0x08002333
 80022a0:	08002333 	.word	0x08002333
 80022a4:	08002333 	.word	0x08002333
 80022a8:	08002333 	.word	0x08002333
 80022ac:	08002333 	.word	0x08002333
 80022b0:	08002333 	.word	0x08002333
 80022b4:	08002333 	.word	0x08002333
 80022b8:	08002333 	.word	0x08002333
 80022bc:	08002333 	.word	0x08002333
 80022c0:	08002333 	.word	0x08002333
 80022c4:	08002333 	.word	0x08002333
 80022c8:	080022e1 	.word	0x080022e1
 80022cc:	080022f5 	.word	0x080022f5
 80022d0:	4a79      	ldr	r2, [pc, #484]	; (80024b8 <HAL_GPIO_Init+0x2b4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022d6:	e02c      	b.n	8002332 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e029      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	3304      	adds	r3, #4
 80022e6:	623b      	str	r3, [r7, #32]
          break;
 80022e8:	e024      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	3308      	adds	r3, #8
 80022f0:	623b      	str	r3, [r7, #32]
          break;
 80022f2:	e01f      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	330c      	adds	r3, #12
 80022fa:	623b      	str	r3, [r7, #32]
          break;
 80022fc:	e01a      	b.n	8002334 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002306:	2304      	movs	r3, #4
 8002308:	623b      	str	r3, [r7, #32]
          break;
 800230a:	e013      	b.n	8002334 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	611a      	str	r2, [r3, #16]
          break;
 800231e:	e009      	b.n	8002334 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002320:	2308      	movs	r3, #8
 8002322:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	615a      	str	r2, [r3, #20]
          break;
 800232a:	e003      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x130>
          break;
 8002332:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2bff      	cmp	r3, #255	; 0xff
 8002338:	d801      	bhi.n	800233e <HAL_GPIO_Init+0x13a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	e001      	b.n	8002342 <HAL_GPIO_Init+0x13e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2bff      	cmp	r3, #255	; 0xff
 8002348:	d802      	bhi.n	8002350 <HAL_GPIO_Init+0x14c>
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x152>
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	3b08      	subs	r3, #8
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	210f      	movs	r1, #15
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	401a      	ands	r2, r3
 8002368:	6a39      	ldr	r1, [r7, #32]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	431a      	orrs	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80b1 	beq.w	80024e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a4c      	ldr	r2, [pc, #304]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800239c:	4a48      	ldr	r2, [pc, #288]	; (80024c0 <HAL_GPIO_Init+0x2bc>)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a40      	ldr	r2, [pc, #256]	; (80024c4 <HAL_GPIO_Init+0x2c0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <HAL_GPIO_Init+0x1ec>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <HAL_GPIO_Init+0x2c4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00d      	beq.n	80023ec <HAL_GPIO_Init+0x1e8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3e      	ldr	r2, [pc, #248]	; (80024cc <HAL_GPIO_Init+0x2c8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <HAL_GPIO_Init+0x1e4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3d      	ldr	r2, [pc, #244]	; (80024d0 <HAL_GPIO_Init+0x2cc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_GPIO_Init+0x1e0>
 80023e0:	2303      	movs	r3, #3
 80023e2:	e006      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e004      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023f0:	2300      	movs	r3, #0
 80023f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f4:	f002 0203 	and.w	r2, r2, #3
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	4093      	lsls	r3, r2
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002402:	492f      	ldr	r1, [pc, #188]	; (80024c0 <HAL_GPIO_Init+0x2bc>)
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	492c      	ldr	r1, [pc, #176]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	43db      	mvns	r3, r3
 8002432:	4928      	ldr	r1, [pc, #160]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002434:	4013      	ands	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4922      	ldr	r1, [pc, #136]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	43db      	mvns	r3, r3
 800245a:	491e      	ldr	r1, [pc, #120]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800245c:	4013      	ands	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4918      	ldr	r1, [pc, #96]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	43db      	mvns	r3, r3
 8002482:	4914      	ldr	r1, [pc, #80]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002484:	4013      	ands	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d021      	beq.n	80024d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	60cb      	str	r3, [r1, #12]
 80024a0:	e021      	b.n	80024e6 <HAL_GPIO_Init+0x2e2>
 80024a2:	bf00      	nop
 80024a4:	10320000 	.word	0x10320000
 80024a8:	10310000 	.word	0x10310000
 80024ac:	10220000 	.word	0x10220000
 80024b0:	10210000 	.word	0x10210000
 80024b4:	10120000 	.word	0x10120000
 80024b8:	10110000 	.word	0x10110000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40010800 	.word	0x40010800
 80024c8:	40010c00 	.word	0x40010c00
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40011400 	.word	0x40011400
 80024d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_GPIO_Init+0x304>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	43db      	mvns	r3, r3
 80024e0:	4909      	ldr	r1, [pc, #36]	; (8002508 <HAL_GPIO_Init+0x304>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	3301      	adds	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f47f ae8e 	bne.w	8002218 <HAL_GPIO_Init+0x14>
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	372c      	adds	r7, #44	; 0x2c
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e001      	b.n	800252e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	807b      	strh	r3, [r7, #2]
 8002546:	4613      	mov	r3, r2
 8002548:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800254a:	787b      	ldrb	r3, [r7, #1]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002556:	e003      	b.n	8002560 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	041a      	lsls	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	611a      	str	r2, [r3, #16]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
	...

0800256c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e12b      	b.n	80027d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe ffae 	bl	80014f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025d0:	f000 ffea 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 80025d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4a81      	ldr	r2, [pc, #516]	; (80027e0 <HAL_I2C_Init+0x274>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d807      	bhi.n	80025f0 <HAL_I2C_Init+0x84>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a80      	ldr	r2, [pc, #512]	; (80027e4 <HAL_I2C_Init+0x278>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	bf94      	ite	ls
 80025e8:	2301      	movls	r3, #1
 80025ea:	2300      	movhi	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e006      	b.n	80025fe <HAL_I2C_Init+0x92>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a7d      	ldr	r2, [pc, #500]	; (80027e8 <HAL_I2C_Init+0x27c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	bf94      	ite	ls
 80025f8:	2301      	movls	r3, #1
 80025fa:	2300      	movhi	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0e7      	b.n	80027d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4a78      	ldr	r2, [pc, #480]	; (80027ec <HAL_I2C_Init+0x280>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a6a      	ldr	r2, [pc, #424]	; (80027e0 <HAL_I2C_Init+0x274>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d802      	bhi.n	8002640 <HAL_I2C_Init+0xd4>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3301      	adds	r3, #1
 800263e:	e009      	b.n	8002654 <HAL_I2C_Init+0xe8>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	4a69      	ldr	r2, [pc, #420]	; (80027f0 <HAL_I2C_Init+0x284>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	099b      	lsrs	r3, r3, #6
 8002652:	3301      	adds	r3, #1
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	430b      	orrs	r3, r1
 800265a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002666:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	495c      	ldr	r1, [pc, #368]	; (80027e0 <HAL_I2C_Init+0x274>)
 8002670:	428b      	cmp	r3, r1
 8002672:	d819      	bhi.n	80026a8 <HAL_I2C_Init+0x13c>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1e59      	subs	r1, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002682:	1c59      	adds	r1, r3, #1
 8002684:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002688:	400b      	ands	r3, r1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_I2C_Init+0x138>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1e59      	subs	r1, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fbb1 f3f3 	udiv	r3, r1, r3
 800269c:	3301      	adds	r3, #1
 800269e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a2:	e051      	b.n	8002748 <HAL_I2C_Init+0x1dc>
 80026a4:	2304      	movs	r3, #4
 80026a6:	e04f      	b.n	8002748 <HAL_I2C_Init+0x1dc>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d111      	bne.n	80026d4 <HAL_I2C_Init+0x168>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e58      	subs	r0, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	440b      	add	r3, r1
 80026be:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e012      	b.n	80026fa <HAL_I2C_Init+0x18e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e58      	subs	r0, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	0099      	lsls	r1, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Init+0x196>
 80026fe:	2301      	movs	r3, #1
 8002700:	e022      	b.n	8002748 <HAL_I2C_Init+0x1dc>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10e      	bne.n	8002728 <HAL_I2C_Init+0x1bc>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1e58      	subs	r0, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6859      	ldr	r1, [r3, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	440b      	add	r3, r1
 8002718:	fbb0 f3f3 	udiv	r3, r0, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002726:	e00f      	b.n	8002748 <HAL_I2C_Init+0x1dc>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1e58      	subs	r0, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	0099      	lsls	r1, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	6809      	ldr	r1, [r1, #0]
 800274c:	4313      	orrs	r3, r2
 800274e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002776:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6911      	ldr	r1, [r2, #16]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	4311      	orrs	r1, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	430b      	orrs	r3, r1
 800278a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	000186a0 	.word	0x000186a0
 80027e4:	001e847f 	.word	0x001e847f
 80027e8:	003d08ff 	.word	0x003d08ff
 80027ec:	431bde83 	.word	0x431bde83
 80027f0:	10624dd3 	.word	0x10624dd3

080027f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	460b      	mov	r3, r1
 8002802:	817b      	strh	r3, [r7, #10]
 8002804:	4613      	mov	r3, r2
 8002806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff f922 	bl	8001a50 <HAL_GetTick>
 800280c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b20      	cmp	r3, #32
 8002818:	f040 80e0 	bne.w	80029dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2319      	movs	r3, #25
 8002822:	2201      	movs	r2, #1
 8002824:	4970      	ldr	r1, [pc, #448]	; (80029e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f964 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002832:	2302      	movs	r3, #2
 8002834:	e0d3      	b.n	80029de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_I2C_Master_Transmit+0x50>
 8002840:	2302      	movs	r3, #2
 8002842:	e0cc      	b.n	80029de <HAL_I2C_Master_Transmit+0x1ea>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d007      	beq.n	800286a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2221      	movs	r2, #33	; 0x21
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2210      	movs	r2, #16
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	893a      	ldrh	r2, [r7, #8]
 800289a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a50      	ldr	r2, [pc, #320]	; (80029ec <HAL_I2C_Master_Transmit+0x1f8>)
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028ac:	8979      	ldrh	r1, [r7, #10]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	6a3a      	ldr	r2, [r7, #32]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f89c 	bl	80029f0 <I2C_MasterRequestWrite>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e08d      	b.n	80029de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028d8:	e066      	b.n	80029a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	6a39      	ldr	r1, [r7, #32]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f9de 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00d      	beq.n	8002906 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d107      	bne.n	8002902 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e06b      	b.n	80029de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d11b      	bne.n	800297c <HAL_I2C_Master_Transmit+0x188>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d017      	beq.n	800297c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	6a39      	ldr	r1, [r7, #32]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f9ce 	bl	8002d22 <I2C_WaitOnBTFFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2b04      	cmp	r3, #4
 8002992:	d107      	bne.n	80029a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e01a      	b.n	80029de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d194      	bne.n	80028da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	00100002 	.word	0x00100002
 80029ec:	ffff0000 	.word	0xffff0000

080029f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	460b      	mov	r3, r1
 80029fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d006      	beq.n	8002a1a <I2C_MasterRequestWrite+0x2a>
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d003      	beq.n	8002a1a <I2C_MasterRequestWrite+0x2a>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a18:	d108      	bne.n	8002a2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	e00b      	b.n	8002a44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	2b12      	cmp	r3, #18
 8002a32:	d107      	bne.n	8002a44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f84f 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00d      	beq.n	8002a78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a6a:	d103      	bne.n	8002a74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e035      	b.n	8002ae4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a80:	d108      	bne.n	8002a94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a82:	897b      	ldrh	r3, [r7, #10]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a90:	611a      	str	r2, [r3, #16]
 8002a92:	e01b      	b.n	8002acc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a94:	897b      	ldrh	r3, [r7, #10]
 8002a96:	11db      	asrs	r3, r3, #7
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f003 0306 	and.w	r3, r3, #6
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f063 030f 	orn	r3, r3, #15
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <I2C_MasterRequestWrite+0xfc>)
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f875 	bl	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e010      	b.n	8002ae4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4907      	ldr	r1, [pc, #28]	; (8002af0 <I2C_MasterRequestWrite+0x100>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f865 	bl	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	00010008 	.word	0x00010008
 8002af0:	00010002 	.word	0x00010002

08002af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b04:	e025      	b.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d021      	beq.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0e:	f7fe ff9f 	bl	8001a50 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d302      	bcc.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d116      	bne.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e023      	b.n	8002b9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10d      	bne.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4013      	ands	r3, r2
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	e00c      	b.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4013      	ands	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf0c      	ite	eq
 8002b8a:	2301      	moveq	r3, #1
 8002b8c:	2300      	movne	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d0b6      	beq.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bb0:	e051      	b.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc0:	d123      	bne.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0204 	orr.w	r2, r3, #4
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e046      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d021      	beq.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c12:	f7fe ff1d 	bl	8001a50 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0220 	orr.w	r2, r3, #32
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e020      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10c      	bne.n	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	e00b      	b.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	43da      	mvns	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4013      	ands	r3, r2
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d18d      	bne.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cac:	e02d      	b.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f878 	bl	8002da4 <I2C_IsAcknowledgeFailed>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e02d      	b.n	8002d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d021      	beq.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fe fec3 	bl	8001a50 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d116      	bne.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e007      	b.n	8002d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	2b80      	cmp	r3, #128	; 0x80
 8002d16:	d1ca      	bne.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d2e:	e02d      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f837 	bl	8002da4 <I2C_IsAcknowledgeFailed>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e02d      	b.n	8002d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d021      	beq.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d48:	f7fe fe82 	bl	8001a50 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d302      	bcc.n	8002d5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e007      	b.n	8002d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d1ca      	bne.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dba:	d11b      	bne.n	8002df4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e272      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8087 	beq.w	8002f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d00c      	beq.n	8002e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e2c:	4b8f      	ldr	r3, [pc, #572]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d112      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5e>
 8002e38:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d10b      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d06c      	beq.n	8002f2c <HAL_RCC_OscConfig+0x12c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d168      	bne.n	8002f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e24c      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x76>
 8002e68:	4b80      	ldr	r3, [pc, #512]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a7f      	ldr	r2, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	e02e      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x98>
 8002e7e:	4b7b      	ldr	r3, [pc, #492]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7a      	ldr	r2, [pc, #488]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b78      	ldr	r3, [pc, #480]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a77      	ldr	r2, [pc, #476]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0xbc>
 8002ea2:	4b72      	ldr	r3, [pc, #456]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a71      	ldr	r2, [pc, #452]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a67      	ldr	r2, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe fdb8 	bl	8001a50 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fdb4 	bl	8001a50 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e200      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xe4>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fda4 	bl	8001a50 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fda0 	bl	8001a50 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1ec      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x10c>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f46:	4b49      	ldr	r3, [pc, #292]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x18c>
 8002f52:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c0      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4939      	ldr	r1, [pc, #228]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fd59 	bl	8001a50 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7fe fd55 	bl	8001a50 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a1      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4927      	ldr	r1, [pc, #156]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b26      	ldr	r3, [pc, #152]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fd38 	bl	8001a50 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fd34 	bl	8001a50 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e180      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03a      	beq.n	8003084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d019      	beq.n	800304a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe fd18 	bl	8001a50 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003024:	f7fe fd14 	bl	8001a50 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e160      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003042:	2001      	movs	r0, #1
 8003044:	f000 fad8 	bl	80035f8 <RCC_Delay>
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fe fcfe 	bl	8001a50 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003056:	e00f      	b.n	8003078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe fcfa 	bl	8001a50 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d908      	bls.n	8003078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e146      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	42420000 	.word	0x42420000
 8003074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	4b92      	ldr	r3, [pc, #584]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e9      	bne.n	8003058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a6 	beq.w	80031de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4a87      	ldr	r2, [pc, #540]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	61d3      	str	r3, [r2, #28]
 80030ae:	4b85      	ldr	r3, [pc, #532]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b7f      	ldr	r3, [pc, #508]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7e      	ldr	r2, [pc, #504]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7fe fcbb 	bl	8001a50 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fe fcb7 	bl	8001a50 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	; 0x64
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e103      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b75      	ldr	r3, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x312>
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	e02d      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x334>
 800311a:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a69      	ldr	r2, [pc, #420]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a66      	ldr	r2, [pc, #408]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	e01c      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_OscConfig+0x356>
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a60      	ldr	r2, [pc, #384]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e00b      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a5a      	ldr	r2, [pc, #360]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6213      	str	r3, [r2, #32]
 8003162:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d015      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe fc6b 	bl	8001a50 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fc67 	bl	8001a50 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0b1      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ee      	beq.n	800317e <HAL_RCC_OscConfig+0x37e>
 80031a0:	e014      	b.n	80031cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a2:	f7fe fc55 	bl	8001a50 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe fc51 	bl	8001a50 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e09b      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c0:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ee      	bne.n	80031aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8087 	beq.w	80032f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d061      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d146      	bne.n	800328a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fc:	4b33      	ldr	r3, [pc, #204]	; (80032cc <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe fc25 	bl	8001a50 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe fc21 	bl	8001a50 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e06d      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321c:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d108      	bne.n	8003244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4921      	ldr	r1, [pc, #132]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003244:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a19      	ldr	r1, [r3, #32]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	430b      	orrs	r3, r1
 8003256:	491b      	ldr	r1, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4cc>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe fbf5 	bl	8001a50 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fbf1 	bl	8001a50 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e03d      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x46a>
 8003288:	e035      	b.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_RCC_OscConfig+0x4cc>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fbde 	bl	8001a50 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fbda 	bl	8001a50 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e026      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x498>
 80032b6:	e01e      	b.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e019      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
 80032cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x500>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0d0      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d910      	bls.n	8003348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 0207 	bic.w	r2, r3, #7
 800332e:	4965      	ldr	r1, [pc, #404]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b8      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003360:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800336a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	494d      	ldr	r1, [pc, #308]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d040      	beq.n	8003424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d115      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e073      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06b      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033e2:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f023 0203 	bic.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4936      	ldr	r1, [pc, #216]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f4:	f7fe fb2c 	bl	8001a50 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7fe fb28 	bl	8001a50 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e053      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 020c 	and.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	429a      	cmp	r2, r3
 8003422:	d1eb      	bne.n	80033fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003424:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d210      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 0207 	bic.w	r2, r3, #7
 800343a:	4922      	ldr	r1, [pc, #136]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e032      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4916      	ldr	r1, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003492:	f000 f821 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490a      	ldr	r1, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x1cc>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1d0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fa8a 	bl	80019cc <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40022000 	.word	0x40022000
 80034c8:	40021000 	.word	0x40021000
 80034cc:	0800ab08 	.word	0x0800ab08
 80034d0:	20000040 	.word	0x20000040
 80034d4:	20000044 	.word	0x20000044

080034d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b490      	push	{r4, r7}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034de:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_RCC_GetSysClockFreq+0xac>)
 80034e0:	1d3c      	adds	r4, r7, #4
 80034e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034e8:	f240 2301 	movw	r3, #513	; 0x201
 80034ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b04      	cmp	r3, #4
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x40>
 8003512:	2b08      	cmp	r3, #8
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x46>
 8003516:	e02b      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_RCC_GetSysClockFreq+0xb4>)
 800351a:	623b      	str	r3, [r7, #32]
      break;
 800351c:	e02b      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3328      	adds	r3, #40	; 0x28
 8003528:	443b      	add	r3, r7
 800352a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800352e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb0>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	0c5b      	lsrs	r3, r3, #17
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	3328      	adds	r3, #40	; 0x28
 8003546:	443b      	add	r3, r7
 8003548:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800354c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	4a0e      	ldr	r2, [pc, #56]	; (800358c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003552:	fb03 f202 	mul.w	r2, r3, r2
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
 800355e:	e004      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	623b      	str	r3, [r7, #32]
      break;
 800356e:	e002      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003572:	623b      	str	r3, [r7, #32]
      break;
 8003574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003576:	6a3b      	ldr	r3, [r7, #32]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bc90      	pop	{r4, r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	0800aa38 	.word	0x0800aa38
 8003588:	40021000 	.word	0x40021000
 800358c:	007a1200 	.word	0x007a1200
 8003590:	003d0900 	.word	0x003d0900

08003594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003598:	4b02      	ldr	r3, [pc, #8]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	20000040 	.word	0x20000040

080035a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035ac:	f7ff fff2 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	0800ab18 	.word	0x0800ab18

080035d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d4:	f7ff ffde 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	0adb      	lsrs	r3, r3, #11
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	0800ab18 	.word	0x0800ab18

080035f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <RCC_Delay+0x34>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <RCC_Delay+0x38>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a5b      	lsrs	r3, r3, #9
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003614:	bf00      	nop
  }
  while (Delay --);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1e5a      	subs	r2, r3, #1
 800361a:	60fa      	str	r2, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f9      	bne.n	8003614 <RCC_Delay+0x1c>
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	20000040 	.word	0x20000040
 8003630:	10624dd3 	.word	0x10624dd3

08003634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e041      	b.n	80036ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd ff9a 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 fb1a 	bl	8003cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d001      	beq.n	80036ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e032      	b.n	8003752 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_TIM_Base_Start+0x88>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_TIM_Base_Start+0x48>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d009      	beq.n	800371c <HAL_TIM_Base_Start+0x48>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_TIM_Base_Start+0x8c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_TIM_Base_Start+0x48>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a13      	ldr	r2, [pc, #76]	; (8003764 <HAL_TIM_Base_Start+0x90>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d010      	beq.n	8003750 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	e007      	b.n	8003750 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800

08003768 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	f241 1311 	movw	r3, #4369	; 0x1111
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10f      	bne.n	80037a0 <HAL_TIM_Base_Stop+0x38>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	f240 4344 	movw	r3, #1092	; 0x444
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_Base_Stop+0x38>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e041      	b.n	800384a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f839 	bl	8003852 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 fa5a 	bl	8003cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_TIM_PWM_Start+0x24>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	bf14      	ite	ne
 8003880:	2301      	movne	r3, #1
 8003882:	2300      	moveq	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e022      	b.n	80038ce <HAL_TIM_PWM_Start+0x6a>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b04      	cmp	r3, #4
 800388c:	d109      	bne.n	80038a2 <HAL_TIM_PWM_Start+0x3e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	bf14      	ite	ne
 800389a:	2301      	movne	r3, #1
 800389c:	2300      	moveq	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	e015      	b.n	80038ce <HAL_TIM_PWM_Start+0x6a>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d109      	bne.n	80038bc <HAL_TIM_PWM_Start+0x58>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e008      	b.n	80038ce <HAL_TIM_PWM_Start+0x6a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e05e      	b.n	8003994 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x82>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e4:	e013      	b.n	800390e <HAL_TIM_PWM_Start+0xaa>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_PWM_Start+0x92>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f4:	e00b      	b.n	800390e <HAL_TIM_PWM_Start+0xaa>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d104      	bne.n	8003906 <HAL_TIM_PWM_Start+0xa2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003904:	e003      	b.n	800390e <HAL_TIM_PWM_Start+0xaa>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2201      	movs	r2, #1
 8003914:	6839      	ldr	r1, [r7, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fc48 	bl	80041ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_TIM_PWM_Start+0x138>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d107      	bne.n	8003936 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_TIM_PWM_Start+0x138>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00e      	beq.n	800395e <HAL_TIM_PWM_Start+0xfa>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d009      	beq.n	800395e <HAL_TIM_PWM_Start+0xfa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <HAL_TIM_PWM_Start+0x13c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d004      	beq.n	800395e <HAL_TIM_PWM_Start+0xfa>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <HAL_TIM_PWM_Start+0x140>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d111      	bne.n	8003982 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b06      	cmp	r3, #6
 800396e:	d010      	beq.n	8003992 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003980:	e007      	b.n	8003992 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800

080039a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0ac      	b.n	8003b1c <HAL_TIM_PWM_ConfigChannel+0x174>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	f200 809f 	bhi.w	8003b10 <HAL_TIM_PWM_ConfigChannel+0x168>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003b11 	.word	0x08003b11
 80039e0:	08003b11 	.word	0x08003b11
 80039e4:	08003b11 	.word	0x08003b11
 80039e8:	08003a4d 	.word	0x08003a4d
 80039ec:	08003b11 	.word	0x08003b11
 80039f0:	08003b11 	.word	0x08003b11
 80039f4:	08003b11 	.word	0x08003b11
 80039f8:	08003a8f 	.word	0x08003a8f
 80039fc:	08003b11 	.word	0x08003b11
 8003a00:	08003b11 	.word	0x08003b11
 8003a04:	08003b11 	.word	0x08003b11
 8003a08:	08003acf 	.word	0x08003acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f9ac 	bl	8003d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0208 	orr.w	r2, r2, #8
 8003a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	619a      	str	r2, [r3, #24]
      break;
 8003a4a:	e062      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f9f2 	bl	8003e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6999      	ldr	r1, [r3, #24]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	619a      	str	r2, [r3, #24]
      break;
 8003a8c:	e041      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fa3b 	bl	8003f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0208 	orr.w	r2, r2, #8
 8003aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0204 	bic.w	r2, r2, #4
 8003ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69d9      	ldr	r1, [r3, #28]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	61da      	str	r2, [r3, #28]
      break;
 8003acc:	e021      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fa85 	bl	8003fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69d9      	ldr	r1, [r3, #28]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	021a      	lsls	r2, r3, #8
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	61da      	str	r2, [r3, #28]
      break;
 8003b0e:	e000      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_TIM_ConfigClockSource+0x18>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e0b3      	b.n	8003ca4 <HAL_TIM_ConfigClockSource+0x180>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b74:	d03e      	beq.n	8003bf4 <HAL_TIM_ConfigClockSource+0xd0>
 8003b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7a:	f200 8087 	bhi.w	8003c8c <HAL_TIM_ConfigClockSource+0x168>
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b82:	f000 8085 	beq.w	8003c90 <HAL_TIM_ConfigClockSource+0x16c>
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	d87f      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x168>
 8003b8c:	2b70      	cmp	r3, #112	; 0x70
 8003b8e:	d01a      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xa2>
 8003b90:	2b70      	cmp	r3, #112	; 0x70
 8003b92:	d87b      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x168>
 8003b94:	2b60      	cmp	r3, #96	; 0x60
 8003b96:	d050      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x116>
 8003b98:	2b60      	cmp	r3, #96	; 0x60
 8003b9a:	d877      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x168>
 8003b9c:	2b50      	cmp	r3, #80	; 0x50
 8003b9e:	d03c      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0xf6>
 8003ba0:	2b50      	cmp	r3, #80	; 0x50
 8003ba2:	d873      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x168>
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d058      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0x136>
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d86f      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x168>
 8003bac:	2b30      	cmp	r3, #48	; 0x30
 8003bae:	d064      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x156>
 8003bb0:	2b30      	cmp	r3, #48	; 0x30
 8003bb2:	d86b      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x168>
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d060      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x156>
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d867      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x168>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d05c      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x156>
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d05a      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003bc4:	e062      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f000 faca 	bl	800416e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003be8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	609a      	str	r2, [r3, #8]
      break;
 8003bf2:	e04e      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6899      	ldr	r1, [r3, #8]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f000 fab3 	bl	800416e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c16:	609a      	str	r2, [r3, #8]
      break;
 8003c18:	e03b      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	461a      	mov	r2, r3
 8003c28:	f000 fa2a 	bl	8004080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2150      	movs	r1, #80	; 0x50
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fa81 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 8003c38:	e02b      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6859      	ldr	r1, [r3, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f000 fa48 	bl	80040dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2160      	movs	r1, #96	; 0x60
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fa71 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 8003c58:	e01b      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 fa0a 	bl	8004080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2140      	movs	r1, #64	; 0x40
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fa61 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 8003c78:	e00b      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f000 fa58 	bl	800413a <TIM_ITRx_SetConfig>
        break;
 8003c8a:	e002      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c8c:	bf00      	nop
 8003c8e:	e000      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <TIM_Base_SetConfig+0xb8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00b      	beq.n	8003cdc <TIM_Base_SetConfig+0x30>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cca:	d007      	beq.n	8003cdc <TIM_Base_SetConfig+0x30>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a26      	ldr	r2, [pc, #152]	; (8003d68 <TIM_Base_SetConfig+0xbc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_Base_SetConfig+0x30>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a25      	ldr	r2, [pc, #148]	; (8003d6c <TIM_Base_SetConfig+0xc0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d108      	bne.n	8003cee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <TIM_Base_SetConfig+0xb8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <TIM_Base_SetConfig+0x62>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfc:	d007      	beq.n	8003d0e <TIM_Base_SetConfig+0x62>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <TIM_Base_SetConfig+0xbc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <TIM_Base_SetConfig+0x62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <TIM_Base_SetConfig+0xc0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d108      	bne.n	8003d20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <TIM_Base_SetConfig+0xb8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d103      	bne.n	8003d54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	615a      	str	r2, [r3, #20]
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000800 	.word	0x40000800

08003d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0201 	bic.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 0302 	bic.w	r3, r3, #2
 8003db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <TIM_OC1_SetConfig+0xc8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10c      	bne.n	8003de6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0308 	bic.w	r3, r3, #8
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <TIM_OC1_SetConfig+0xc8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d111      	bne.n	8003e12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	621a      	str	r2, [r3, #32]
}
 8003e2c:	bf00      	nop
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40012c00 	.word	0x40012c00

08003e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0210 	bic.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 0320 	bic.w	r3, r3, #32
 8003e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <TIM_OC2_SetConfig+0xd0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d10d      	bne.n	8003eb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <TIM_OC2_SetConfig+0xd0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d113      	bne.n	8003ee8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ece:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40012c00 	.word	0x40012c00

08003f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <TIM_OC3_SetConfig+0xd0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10d      	bne.n	8003f8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a14      	ldr	r2, [pc, #80]	; (8003fe0 <TIM_OC3_SetConfig+0xd0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d113      	bne.n	8003fba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40012c00 	.word	0x40012c00

08003fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800402e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	031b      	lsls	r3, r3, #12
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a0f      	ldr	r2, [pc, #60]	; (800407c <TIM_OC4_SetConfig+0x98>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d109      	bne.n	8004058 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	019b      	lsls	r3, r3, #6
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00

08004080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f023 030a 	bic.w	r3, r3, #10
 80040bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f023 0210 	bic.w	r2, r3, #16
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004106:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	031b      	lsls	r3, r3, #12
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004118:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	621a      	str	r2, [r3, #32]
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	f043 0307 	orr.w	r3, r3, #7
 800415c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800416e:	b480      	push	{r7}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004188:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	021a      	lsls	r2, r3, #8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	431a      	orrs	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	609a      	str	r2, [r3, #8]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2201      	movs	r2, #1
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a1a      	ldr	r2, [r3, #32]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	401a      	ands	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1a      	ldr	r2, [r3, #32]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004208:	2302      	movs	r3, #2
 800420a:	e046      	b.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a16      	ldr	r2, [pc, #88]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d009      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10c      	bne.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	4313      	orrs	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800

080042b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e03f      	b.n	8004342 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fd f9be 	bl	8001658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	; 0x24
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fde3 	bl	8004ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b08a      	sub	sp, #40	; 0x28
 800434e:	af02      	add	r7, sp, #8
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b20      	cmp	r3, #32
 8004368:	d17c      	bne.n	8004464 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_UART_Transmit+0x2c>
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e075      	b.n	8004466 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_UART_Transmit+0x3e>
 8004384:	2302      	movs	r3, #2
 8004386:	e06e      	b.n	8004466 <HAL_UART_Transmit+0x11c>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2221      	movs	r2, #33	; 0x21
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800439e:	f7fd fb57 	bl	8001a50 <HAL_GetTick>
 80043a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b8:	d108      	bne.n	80043cc <HAL_UART_Transmit+0x82>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d104      	bne.n	80043cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e003      	b.n	80043d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043dc:	e02a      	b.n	8004434 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fb54 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e036      	b.n	8004466 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800440c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	3302      	adds	r3, #2
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	e007      	b.n	8004426 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	3301      	adds	r3, #1
 8004424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1cf      	bne.n	80043de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	2140      	movs	r1, #64	; 0x40
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fb24 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e006      	b.n	8004466 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	e000      	b.n	8004466 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
  }
}
 8004466:	4618      	mov	r0, r3
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	4613      	mov	r3, r2
 800447a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b20      	cmp	r3, #32
 8004486:	d11d      	bne.n	80044c4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_UART_Receive_DMA+0x26>
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e016      	b.n	80044c6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Receive_DMA+0x38>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e00f      	b.n	80044c6 <HAL_UART_Receive_DMA+0x58>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	461a      	mov	r2, r3
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fb36 	bl	8004b2c <UART_Start_Receive_DMA>
 80044c0:	4603      	mov	r3, r0
 80044c2:	e000      	b.n	80044c6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
  }
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b21      	cmp	r3, #33	; 0x21
 80044fa:	d116      	bne.n	800452a <HAL_UART_DMAStop+0x5c>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d013      	beq.n	800452a <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004510:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fc8b 	bl	8001e3a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fb65 	bl	8004bf4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b22      	cmp	r3, #34	; 0x22
 800454a:	d116      	bne.n	800457a <HAL_UART_DMAStop+0xac>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d013      	beq.n	800457a <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004560:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd fc63 	bl	8001e3a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fb52 	bl	8004c1e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10d      	bne.n	80045d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_UART_IRQHandler+0x52>
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fbcc 	bl	8004d6c <UART_Receive_IT>
      return;
 80045d4:	e17b      	b.n	80048ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80b1 	beq.w	8004740 <HAL_UART_IRQHandler+0x1bc>
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <HAL_UART_IRQHandler+0x70>
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80a6 	beq.w	8004740 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_UART_IRQHandler+0x90>
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f043 0201 	orr.w	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_UART_IRQHandler+0xb0>
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	f043 0202 	orr.w	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_UART_IRQHandler+0xd0>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f043 0204 	orr.w	r2, r3, #4
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00f      	beq.n	800467e <HAL_UART_IRQHandler+0xfa>
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_UART_IRQHandler+0xee>
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f043 0208 	orr.w	r2, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 811e 	beq.w	80048c4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <HAL_UART_IRQHandler+0x11e>
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fb65 	bl	8004d6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d102      	bne.n	80046ca <HAL_UART_IRQHandler+0x146>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d031      	beq.n	800472e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 faa7 	bl	8004c1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d023      	beq.n	8004726 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d013      	beq.n	800471e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	4a76      	ldr	r2, [pc, #472]	; (80048d4 <HAL_UART_IRQHandler+0x350>)
 80046fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd fbd4 	bl	8001eb0 <HAL_DMA_Abort_IT>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d016      	beq.n	800473c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004718:	4610      	mov	r0, r2
 800471a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	e00e      	b.n	800473c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f8f5 	bl	800490e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	e00a      	b.n	800473c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8f1 	bl	800490e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e006      	b.n	800473c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8ed 	bl	800490e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800473a:	e0c3      	b.n	80048c4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473c:	bf00      	nop
    return;
 800473e:	e0c1      	b.n	80048c4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	2b01      	cmp	r3, #1
 8004746:	f040 80a1 	bne.w	800488c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 809b 	beq.w	800488c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8095 	beq.w	800488c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d04e      	beq.n	8004824 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004790:	8a3b      	ldrh	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 8098 	beq.w	80048c8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800479c:	8a3a      	ldrh	r2, [r7, #16]
 800479e:	429a      	cmp	r2, r3
 80047a0:	f080 8092 	bcs.w	80048c8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8a3a      	ldrh	r2, [r7, #16]
 80047a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d02b      	beq.n	800480c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0210 	bic.w	r2, r2, #16
 8004800:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd fb17 	bl	8001e3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004814:	b29b      	uxth	r3, r3
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	b29b      	uxth	r3, r3
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f87f 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004822:	e051      	b.n	80048c8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800482c:	b29b      	uxth	r3, r3
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d047      	beq.n	80048cc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800483c:	8a7b      	ldrh	r3, [r7, #18]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d044      	beq.n	80048cc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004850:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0210 	bic.w	r2, r2, #16
 800487e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004880:	8a7b      	ldrh	r3, [r7, #18]
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f84b 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800488a:	e01f      	b.n	80048cc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_UART_IRQHandler+0x324>
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f9fc 	bl	8004c9e <UART_Transmit_IT>
    return;
 80048a6:	e012      	b.n	80048ce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00d      	beq.n	80048ce <HAL_UART_IRQHandler+0x34a>
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fa3d 	bl	8004d3c <UART_EndTransmit_IT>
    return;
 80048c2:	e004      	b.n	80048ce <HAL_UART_IRQHandler+0x34a>
    return;
 80048c4:	bf00      	nop
 80048c6:	e002      	b.n	80048ce <HAL_UART_IRQHandler+0x34a>
      return;
 80048c8:	bf00      	nop
 80048ca:	e000      	b.n	80048ce <HAL_UART_IRQHandler+0x34a>
      return;
 80048cc:	bf00      	nop
  }
}
 80048ce:	3728      	adds	r7, #40	; 0x28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	08004c77 	.word	0x08004c77

080048d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d12a      	bne.n	80049a8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004966:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004986:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	2b01      	cmp	r3, #1
 8004996:	d107      	bne.n	80049a8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0210 	bic.w	r2, r2, #16
 80049a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d106      	bne.n	80049be <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049b4:	4619      	mov	r1, r3
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff ffb2 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049bc:	e002      	b.n	80049c4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff ff93 	bl	80048ea <HAL_UART_RxCpltCallback>
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d108      	bne.n	80049f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4619      	mov	r1, r3
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff ff97 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049f2:	e002      	b.n	80049fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff ff81 	bl	80048fc <HAL_UART_RxHalfCpltCallback>
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b21      	cmp	r3, #33	; 0x21
 8004a34:	d108      	bne.n	8004a48 <UART_DMAError+0x46>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a42:	68b8      	ldr	r0, [r7, #8]
 8004a44:	f000 f8d6 	bl	8004bf4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b22      	cmp	r3, #34	; 0x22
 8004a68:	d108      	bne.n	8004a7c <UART_DMAError+0x7a>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2200      	movs	r2, #0
 8004a74:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a76:	68b8      	ldr	r0, [r7, #8]
 8004a78:	f000 f8d1 	bl	8004c1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f043 0210 	orr.w	r2, r3, #16
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a88:	68b8      	ldr	r0, [r7, #8]
 8004a8a:	f7ff ff40 	bl	800490e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa6:	e02c      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d028      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ab6:	f7fc ffcb 	bl	8001a50 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d21d      	bcs.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ad4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0201 	bic.w	r2, r2, #1
 8004ae4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e00f      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d0c3      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2222      	movs	r2, #34	; 0x22
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	4a23      	ldr	r2, [pc, #140]	; (8004be8 <UART_Start_Receive_DMA+0xbc>)
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	4a22      	ldr	r2, [pc, #136]	; (8004bec <UART_Start_Receive_DMA+0xc0>)
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <UART_Start_Receive_DMA+0xc4>)
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	2200      	movs	r2, #0
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b74:	f107 0308 	add.w	r3, r7, #8
 8004b78:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4619      	mov	r1, r3
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	f7fd f8f6 	bl	8001d7c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bbc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695a      	ldr	r2, [r3, #20]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bdc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08004937 	.word	0x08004937
 8004bec:	080049cd 	.word	0x080049cd
 8004bf0:	08004a03 	.word	0x08004a03

08004bf4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c0a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c34:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0210 	bic.w	r2, r2, #16
 8004c5c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fe3c 	bl	800490e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b21      	cmp	r3, #33	; 0x21
 8004cb0:	d13e      	bne.n	8004d30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cba:	d114      	bne.n	8004ce6 <UART_Transmit_IT+0x48>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d110      	bne.n	8004ce6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	1c9a      	adds	r2, r3, #2
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	621a      	str	r2, [r3, #32]
 8004ce4:	e008      	b.n	8004cf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6211      	str	r1, [r2, #32]
 8004cf0:	781a      	ldrb	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	4619      	mov	r1, r3
 8004d06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10f      	bne.n	8004d2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff fdbb 	bl	80048d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b22      	cmp	r3, #34	; 0x22
 8004d7e:	f040 8099 	bne.w	8004eb4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8a:	d117      	bne.n	8004dbc <UART_Receive_IT+0x50>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d113      	bne.n	8004dbc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	1c9a      	adds	r2, r3, #2
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	629a      	str	r2, [r3, #40]	; 0x28
 8004dba:	e026      	b.n	8004e0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d007      	beq.n	8004de0 <UART_Receive_IT+0x74>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <UART_Receive_IT+0x82>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e008      	b.n	8004e00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4619      	mov	r1, r3
 8004e18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d148      	bne.n	8004eb0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0220 	bic.w	r2, r2, #32
 8004e2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d123      	bne.n	8004ea6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0210 	bic.w	r2, r2, #16
 8004e72:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d10a      	bne.n	8004e98 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fd3e 	bl	8004920 <HAL_UARTEx_RxEventCallback>
 8004ea4:	e002      	b.n	8004eac <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fd1f 	bl	80048ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e002      	b.n	8004eb6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e000      	b.n	8004eb6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
  }
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004efa:	f023 030c 	bic.w	r3, r3, #12
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	430b      	orrs	r3, r1
 8004f06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <UART_SetConfig+0x114>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d103      	bne.n	8004f30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7fe fb52 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	e002      	b.n	8004f36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f30:	f7fe fb3a 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004f34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009a      	lsls	r2, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <UART_SetConfig+0x118>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	0119      	lsls	r1, r3, #4
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009a      	lsls	r2, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <UART_SetConfig+0x118>)
 8004f6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2064      	movs	r0, #100	; 0x64
 8004f76:	fb00 f303 	mul.w	r3, r0, r3
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	3332      	adds	r3, #50	; 0x32
 8004f80:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <UART_SetConfig+0x118>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f8c:	4419      	add	r1, r3
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009a      	lsls	r2, r3, #2
 8004f98:	441a      	add	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <UART_SetConfig+0x118>)
 8004fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2064      	movs	r0, #100	; 0x64
 8004fae:	fb00 f303 	mul.w	r3, r0, r3
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	3332      	adds	r3, #50	; 0x32
 8004fb8:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <UART_SetConfig+0x118>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	f003 020f 	and.w	r2, r3, #15
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	440a      	add	r2, r1
 8004fca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	51eb851f 	.word	0x51eb851f

08004fdc <DC_Motor_Init>:
#include "dc_motor.h"

void DC_Motor_Init(DC_Motor_HandleTypeDef* MOTOR, TIM_HandleTypeDef* Timer, uint32_t TIMChanel, GPIO_TypeDef* Port_IN1, uint16_t Pin_IN1, GPIO_TypeDef* Port_IN2,uint16_t Pin_IN2) {
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
	MOTOR->Timer = Timer;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	605a      	str	r2, [r3, #4]
	MOTOR->TIMChanel = TIMChanel;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	609a      	str	r2, [r3, #8]
	MOTOR->Pin_IN1 = Pin_IN1;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8b3a      	ldrh	r2, [r7, #24]
 8004ffa:	819a      	strh	r2, [r3, #12]
	MOTOR->Port_IN1 = Port_IN1;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	611a      	str	r2, [r3, #16]
	MOTOR->Pin_IN2 = Pin_IN2;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8c3a      	ldrh	r2, [r7, #32]
 8005006:	829a      	strh	r2, [r3, #20]
	MOTOR->Port_IN2 = Port_IN2;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	619a      	str	r2, [r3, #24]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <TIM_DelayUs>:
  * 		the source of time base.
  * @param  Delay: specifies the delay time length, in microseconds.
  * @retval None
  */
void TIM_DelayUs(TIM_HandleTypeDef *htim, uint16_t Delay)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2200      	movs	r2, #0
 800502a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fe fb51 	bl	80036d4 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(htim) < Delay);
 8005032:	bf00      	nop
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800503a:	887b      	ldrh	r3, [r7, #2]
 800503c:	429a      	cmp	r2, r3
 800503e:	d3f9      	bcc.n	8005034 <TIM_DelayUs+0x1c>
	HAL_TIM_Base_Stop(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fe fb91 	bl	8003768 <HAL_TIM_Base_Stop>

}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <TIM_DelayMs>:
  * 		the source of time base.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void TIM_DelayMs(TIM_HandleTypeDef *htim, uint16_t Delay)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	807b      	strh	r3, [r7, #2]
	while(Delay--)
 800505a:	e004      	b.n	8005066 <TIM_DelayMs+0x18>
	{
//		__HAL_TIM_SET_COUNTER(htim, 0);
//		HAL_TIM_Base_Start(htim);
//		while(__HAL_TIM_GET_COUNTER(htim) < 1000);
		TIM_DelayUs(htim, 1000);
 800505c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ffd9 	bl	8005018 <TIM_DelayUs>
	while(Delay--)
 8005066:	887b      	ldrh	r3, [r7, #2]
 8005068:	1e5a      	subs	r2, r3, #1
 800506a:	807a      	strh	r2, [r7, #2]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1f5      	bne.n	800505c <TIM_DelayMs+0xe>
	}
//	HAL_TIM_Base_Stop(htim);
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <DHT_DelayUs>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains the configuration information for the specified DHT sensor.
  * @param  Time: specifies the delay time length, in microseconds.
  * @retval None
  */
static void DHT_DelayUs(DHT_HandleTypeDef* DHT, uint16_t Time)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	807b      	strh	r3, [r7, #2]
	TIM_DelayUs(DHT->Timer, Time);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	887a      	ldrh	r2, [r7, #2]
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ffc2 	bl	8005018 <TIM_DelayUs>
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <DHT_DelayMs>:
  * 		the configuration information for the specified DHT sensor.
  * @param  Time: specifies the delay time length, in miliseconds.
  * @retval None
  */
static void DHT_DelayMs(DHT_HandleTypeDef* DHT, uint16_t Time)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]
	TIM_DelayMs(DHT->Timer, Time);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	887a      	ldrh	r2, [r7, #2]
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff ffcc 	bl	800504e <TIM_DelayMs>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <DHT_SetPinOut>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @retval None
  */
static void DHT_SetPinOut(DHT_HandleTypeDef* DHT)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c8:	f107 0318 	add.w	r3, r7, #24
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	60da      	str	r2, [r3, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80050d6:	4b26      	ldr	r3, [pc, #152]	; (8005170 <DHT_SetPinOut+0xb0>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	4a25      	ldr	r2, [pc, #148]	; (8005170 <DHT_SetPinOut+0xb0>)
 80050dc:	f043 0304 	orr.w	r3, r3, #4
 80050e0:	6193      	str	r3, [r2, #24]
 80050e2:	4b23      	ldr	r3, [pc, #140]	; (8005170 <DHT_SetPinOut+0xb0>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <DHT_SetPinOut+0xb0>)
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <DHT_SetPinOut+0xb0>)
 80050f4:	f043 0308 	orr.w	r3, r3, #8
 80050f8:	6193      	str	r3, [r2, #24]
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <DHT_SetPinOut+0xb0>)
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <DHT_SetPinOut+0xb0>)
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	4a19      	ldr	r2, [pc, #100]	; (8005170 <DHT_SetPinOut+0xb0>)
 800510c:	f043 0310 	orr.w	r3, r3, #16
 8005110:	6193      	str	r3, [r2, #24]
 8005112:	4b17      	ldr	r3, [pc, #92]	; (8005170 <DHT_SetPinOut+0xb0>)
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800511e:	4b14      	ldr	r3, [pc, #80]	; (8005170 <DHT_SetPinOut+0xb0>)
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	4a13      	ldr	r2, [pc, #76]	; (8005170 <DHT_SetPinOut+0xb0>)
 8005124:	f043 0320 	orr.w	r3, r3, #32
 8005128:	6193      	str	r3, [r2, #24]
 800512a:	4b11      	ldr	r3, [pc, #68]	; (8005170 <DHT_SetPinOut+0xb0>)
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_WritePin(DHT->Port, DHT->Pin, GPIO_PIN_SET);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68d8      	ldr	r0, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	891b      	ldrh	r3, [r3, #8]
 800513e:	2201      	movs	r2, #1
 8005140:	4619      	mov	r1, r3
 8005142:	f7fd f9fa 	bl	800253a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DHT->Pin;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	891b      	ldrh	r3, [r3, #8]
 800514a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800514c:	2311      	movs	r3, #17
 800514e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	2300      	movs	r3, #0
 8005152:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005154:	2302      	movs	r3, #2
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f107 0218 	add.w	r2, r7, #24
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd f84e 	bl	8002204 <HAL_GPIO_Init>
}
 8005168:	bf00      	nop
 800516a:	3728      	adds	r7, #40	; 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000

08005174 <DHT_SetPinIn>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @retval None
  */
static void DHT_SetPinIn(DHT_HandleTypeDef* DHT)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800517c:	f107 0308 	add.w	r3, r7, #8
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	891b      	ldrh	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f107 0208 	add.w	r2, r7, #8
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fd f82e 	bl	8002204 <HAL_GPIO_Init>
}
 80051a8:	bf00      	nop
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <DHT_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
static void DHT_WritePin(DHT_HandleTypeDef* DHT, GPIO_PinState PinState)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->Port, DHT->Pin, PinState);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68d8      	ldr	r0, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	891b      	ldrh	r3, [r3, #8]
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	4619      	mov	r1, r3
 80051c8:	f7fd f9b7 	bl	800253a <HAL_GPIO_WritePin>
}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <DHT_ReadPin>:
  * 		the configuration information for the specified DHT sensor.
  *
  * @retval The input port pin value.
  */
static GPIO_PinState DHT_ReadPin(DHT_HandleTypeDef* DHT)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	GPIO_PinState PinState;
	PinState =  HAL_GPIO_ReadPin(DHT->Port, DHT->Pin);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	891b      	ldrh	r3, [r3, #8]
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f7fd f990 	bl	800250c <HAL_GPIO_ReadPin>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]
	return PinState;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <DHT_AwaitPinState>:
  * 			DHT_OK: read the expected port pin value on sensor pin.
  * 			DHT_ERR_TIMEOUT: timeout but not read the expected port pin value on sensor pin.
  */
static dht_err_t DHT_AwaitPinState(DHT_HandleTypeDef* DHT, uint32_t timeout,
									GPIO_PinState expected_pin_state, uint32_t* duration)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b086      	sub	sp, #24
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	4613      	mov	r3, r2
 8005208:	71fb      	strb	r3, [r7, #7]
	DHT_SetPinIn(DHT);
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7ff ffb2 	bl	8005174 <DHT_SetPinIn>
    for (uint32_t i = 0; i < timeout; i += DHT_TIMER_INTERVAL)
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e016      	b.n	8005244 <DHT_AwaitPinState+0x4a>
    {
        // need to wait at least a single interval to prevent reading a jitter
    	DHT_DelayUs(DHT, DHT_TIMER_INTERVAL);
 8005216:	2102      	movs	r1, #2
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff ff2e 	bl	800507a <DHT_DelayUs>
        if (DHT_ReadPin(DHT) == expected_pin_state)
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff ffd8 	bl	80051d4 <DHT_ReadPin>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	4293      	cmp	r3, r2
 800522c:	d107      	bne.n	800523e <DHT_AwaitPinState+0x44>
        {
        	if(duration)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <DHT_AwaitPinState+0x40>
        		*duration = i;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	601a      	str	r2, [r3, #0]
            return DHT_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	e008      	b.n	8005250 <DHT_AwaitPinState+0x56>
    for (uint32_t i = 0; i < timeout; i += DHT_TIMER_INTERVAL)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	3302      	adds	r3, #2
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	429a      	cmp	r2, r3
 800524a:	d3e4      	bcc.n	8005216 <DHT_AwaitPinState+0x1c>
        }
    }

    return DHT_ERR_TIMEOUT;
 800524c:	f240 1301 	movw	r3, #257	; 0x101
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <DHT_FetchData>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @param  data[DHT_DATA_BYTES]: Pointer to a uint8_t array.
  * @retval DHT status
  */
static dht_err_t DHT_FetchData(DHT_HandleTypeDef* DHT, uint8_t data[DHT_DATA_BYTES]) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
	uint32_t low_duration;
	uint32_t high_duration;

	DHT_SetPinOut(DHT);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff ff2c 	bl	80050c0 <DHT_SetPinOut>
	DHT_WritePin(DHT, GPIO_PIN_RESET);
 8005268:	2100      	movs	r1, #0
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff ffa0 	bl	80051b0 <DHT_WritePin>
	DHT_DelayMs(DHT, Tbe);
 8005270:	2114      	movs	r1, #20
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff ff12 	bl	800509c <DHT_DelayMs>
	DHT_WritePin(DHT, GPIO_PIN_SET);
 8005278:	2101      	movs	r1, #1
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff ff98 	bl	80051b0 <DHT_WritePin>

	int ret = DHT_AwaitPinState(DHT, Tgo, GPIO_PIN_RESET, NULL);
 8005280:	2300      	movs	r3, #0
 8005282:	2200      	movs	r2, #0
 8005284:	2123      	movs	r1, #35	; 0x23
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff ffb7 	bl	80051fa <DHT_AwaitPinState>
 800528c:	4603      	mov	r3, r0
 800528e:	61bb      	str	r3, [r7, #24]
	if(ret) {
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <DHT_FetchData+0x44>
		return DHT_ERR_PHASE_B;
 8005296:	f240 1303 	movw	r3, #259	; 0x103
 800529a:	e074      	b.n	8005386 <DHT_FetchData+0x12e>
	}


	ret = DHT_AwaitPinState(DHT, Trel, GPIO_PIN_SET, NULL);
 800529c:	2300      	movs	r3, #0
 800529e:	2201      	movs	r2, #1
 80052a0:	2158      	movs	r1, #88	; 0x58
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff ffa9 	bl	80051fa <DHT_AwaitPinState>
 80052a8:	4603      	mov	r3, r0
 80052aa:	61bb      	str	r3, [r7, #24]
	if(ret) {
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <DHT_FetchData+0x60>
		return DHT_ERR_PHASE_C;
 80052b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80052b6:	e066      	b.n	8005386 <DHT_FetchData+0x12e>
	}

	ret = DHT_AwaitPinState(DHT, Treh, GPIO_PIN_RESET, NULL);
 80052b8:	2300      	movs	r3, #0
 80052ba:	2200      	movs	r2, #0
 80052bc:	215c      	movs	r1, #92	; 0x5c
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff ff9b 	bl	80051fa <DHT_AwaitPinState>
 80052c4:	4603      	mov	r3, r0
 80052c6:	61bb      	str	r3, [r7, #24]
	if(ret) {
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <DHT_FetchData+0x7c>
		return DHT_ERR_PHASE_D;
 80052ce:	f240 1305 	movw	r3, #261	; 0x105
 80052d2:	e058      	b.n	8005386 <DHT_FetchData+0x12e>
	}

	for (int i = 0; i < DHT_DATA_BITS; ++i) {
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	e051      	b.n	800537e <DHT_FetchData+0x126>
		ret = DHT_AwaitPinState(DHT, T_LOW, GPIO_PIN_SET, &low_duration);
 80052da:	f107 0310 	add.w	r3, r7, #16
 80052de:	2201      	movs	r2, #1
 80052e0:	213a      	movs	r1, #58	; 0x3a
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff ff89 	bl	80051fa <DHT_AwaitPinState>
 80052e8:	4603      	mov	r3, r0
 80052ea:	61bb      	str	r3, [r7, #24]
		if (ret) {
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <DHT_FetchData+0xa0>
			return DHT_ERR_LBIT_TIMEOUT;
 80052f2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80052f6:	e046      	b.n	8005386 <DHT_FetchData+0x12e>
		}
		ret = DHT_AwaitPinState(DHT, TH1, GPIO_PIN_RESET, &high_duration);
 80052f8:	f107 030c 	add.w	r3, r7, #12
 80052fc:	2200      	movs	r2, #0
 80052fe:	214a      	movs	r1, #74	; 0x4a
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff ff7a 	bl	80051fa <DHT_AwaitPinState>
 8005306:	4603      	mov	r3, r0
 8005308:	61bb      	str	r3, [r7, #24]
		if (ret) {
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <DHT_FetchData+0xbe>
			return DHT_ERR_HBIT_TIMEOUT;
 8005310:	f240 1307 	movw	r3, #263	; 0x107
 8005314:	e037      	b.n	8005386 <DHT_FetchData+0x12e>
		}

		uint8_t byte = i / 8;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2b00      	cmp	r3, #0
 800531a:	da00      	bge.n	800531e <DHT_FetchData+0xc6>
 800531c:	3307      	adds	r3, #7
 800531e:	10db      	asrs	r3, r3, #3
 8005320:	75fb      	strb	r3, [r7, #23]
		uint8_t bit = i % 8;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	425a      	negs	r2, r3
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	f002 0207 	and.w	r2, r2, #7
 800532e:	bf58      	it	pl
 8005330:	4253      	negpl	r3, r2
 8005332:	75bb      	strb	r3, [r7, #22]
		if (!bit) {
 8005334:	7dbb      	ldrb	r3, [r7, #22]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <DHT_FetchData+0xec>
		     data[byte] = 0;
 800533a:	7dfb      	ldrb	r3, [r7, #23]
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	4413      	add	r3, r2
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
		}
		data[byte] |= (high_duration > low_duration) << (7 - bit);
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	4413      	add	r3, r2
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	b25a      	sxtb	r2, r3
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4299      	cmp	r1, r3
 8005354:	bf8c      	ite	hi
 8005356:	2301      	movhi	r3, #1
 8005358:	2300      	movls	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	7dbb      	ldrb	r3, [r7, #22]
 8005360:	f1c3 0307 	rsb	r3, r3, #7
 8005364:	fa01 f303 	lsl.w	r3, r1, r3
 8005368:	b25b      	sxtb	r3, r3
 800536a:	4313      	orrs	r3, r2
 800536c:	b259      	sxtb	r1, r3
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	4413      	add	r3, r2
 8005374:	b2ca      	uxtb	r2, r1
 8005376:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < DHT_DATA_BITS; ++i) {
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3301      	adds	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	2b27      	cmp	r3, #39	; 0x27
 8005382:	ddaa      	ble.n	80052da <DHT_FetchData+0x82>
	}

	return DHT_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <DHT_Init>:
  * @param  DHT_Pin: GPIO_PIN_xx that is specified for DHT sensor pin.
  * 		DHT sensor pin.
  * @retval None
  */
void DHT_Init(DHT_HandleTypeDef* DHT, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DHT_Port, uint16_t DHT_Pin)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	807b      	strh	r3, [r7, #2]
	DHT->Error = DHT_OK;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	801a      	strh	r2, [r3, #0]
	DHT->Port = DHT_Port;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	60da      	str	r2, [r3, #12]
	DHT->Pin = DHT_Pin;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	811a      	strh	r2, [r3, #8]
	DHT->Timer = Timer;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	605a      	str	r2, [r3, #4]
	DHT_SetPinOut(DHT);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fe83 	bl	80050c0 <DHT_SetPinOut>

}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <DHT_ReadTempHum>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @retval DHT status
  */
dht_err_t DHT_ReadTempHum(DHT_HandleTypeDef* DHT)
{
 80053c4:	b5b0      	push	{r4, r5, r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	uint8_t data[DHT_DATA_BYTES] = {0};
 80053cc:	2300      	movs	r3, #0
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	2300      	movs	r3, #0
 80053d2:	733b      	strb	r3, [r7, #12]

	DHT_SetPinOut(DHT);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff fe73 	bl	80050c0 <DHT_SetPinOut>
	DHT_WritePin(DHT, GPIO_PIN_SET);
 80053da:	2101      	movs	r1, #1
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff fee7 	bl	80051b0 <DHT_WritePin>

	int ret = DHT_FetchData(DHT, data);
 80053e2:	f107 0308 	add.w	r3, r7, #8
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff ff35 	bl	8005258 <DHT_FetchData>
 80053ee:	4603      	mov	r3, r0
 80053f0:	613b      	str	r3, [r7, #16]
	if(ret) {
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <DHT_ReadTempHum+0x42>
		DHT->Error = ret;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	801a      	strh	r2, [r3, #0]
		return ret;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	b29b      	uxth	r3, r3
 8005404:	e073      	b.n	80054ee <DHT_ReadTempHum+0x12a>
	}

	for (int i = 0; i < DHT_DATA_BYTES; i++) {
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e00d      	b.n	8005428 <DHT_ReadTempHum+0x64>
		DHT->raw_data[i] = data[i];
 800540c:	f107 0208 	add.w	r2, r7, #8
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4413      	add	r3, r2
 8005414:	7819      	ldrb	r1, [r3, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4413      	add	r3, r2
 800541c:	3310      	adds	r3, #16
 800541e:	460a      	mov	r2, r1
 8005420:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < DHT_DATA_BYTES; i++) {
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b04      	cmp	r3, #4
 800542c:	ddee      	ble.n	800540c <DHT_ReadTempHum+0x48>

	}

	if(data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 800542e:	7b3b      	ldrb	r3, [r7, #12]
 8005430:	461a      	mov	r2, r3
 8005432:	7a3b      	ldrb	r3, [r7, #8]
 8005434:	4619      	mov	r1, r3
 8005436:	7a7b      	ldrb	r3, [r7, #9]
 8005438:	440b      	add	r3, r1
 800543a:	7ab9      	ldrb	r1, [r7, #10]
 800543c:	440b      	add	r3, r1
 800543e:	7af9      	ldrb	r1, [r7, #11]
 8005440:	440b      	add	r3, r1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	429a      	cmp	r2, r3
 8005446:	d006      	beq.n	8005456 <DHT_ReadTempHum+0x92>
		DHT->Error = DHT_ERR_INVALID_CRC;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800544e:	801a      	strh	r2, [r3, #0]
		return DHT_ERR_INVALID_CRC;
 8005450:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005454:	e04b      	b.n	80054ee <DHT_ReadTempHum+0x12a>
	}

	DHT->Temp = data[2] + (data[3]&0x7F)/10.0;
 8005456:	7abb      	ldrb	r3, [r7, #10]
 8005458:	4618      	mov	r0, r3
 800545a:	f7fa ffdd 	bl	8000418 <__aeabi_i2d>
 800545e:	4604      	mov	r4, r0
 8005460:	460d      	mov	r5, r1
 8005462:	7afb      	ldrb	r3, [r7, #11]
 8005464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005468:	4618      	mov	r0, r3
 800546a:	f7fa ffd5 	bl	8000418 <__aeabi_i2d>
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	4b21      	ldr	r3, [pc, #132]	; (80054f8 <DHT_ReadTempHum+0x134>)
 8005474:	f7fb f964 	bl	8000740 <__aeabi_ddiv>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4620      	mov	r0, r4
 800547e:	4629      	mov	r1, r5
 8005480:	f7fa fe7e 	bl	8000180 <__adddf3>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4610      	mov	r0, r2
 800548a:	4619      	mov	r1, r3
 800548c:	f7fb fb26 	bl	8000adc <__aeabi_d2f>
 8005490:	4602      	mov	r2, r0
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	619a      	str	r2, [r3, #24]
	if(data[3]&0x80) {
 8005496:	7afb      	ldrb	r3, [r7, #11]
 8005498:	b25b      	sxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	da05      	bge.n	80054aa <DHT_ReadTempHum+0xe6>
		DHT->Temp = - DHT->Temp;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	619a      	str	r2, [r3, #24]
	}
	DHT->Humi = data[0] + data[1]/10.0;
 80054aa:	7a3b      	ldrb	r3, [r7, #8]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fa ffb3 	bl	8000418 <__aeabi_i2d>
 80054b2:	4604      	mov	r4, r0
 80054b4:	460d      	mov	r5, r1
 80054b6:	7a7b      	ldrb	r3, [r7, #9]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fa ffad 	bl	8000418 <__aeabi_i2d>
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <DHT_ReadTempHum+0x134>)
 80054c4:	f7fb f93c 	bl	8000740 <__aeabi_ddiv>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4620      	mov	r0, r4
 80054ce:	4629      	mov	r1, r5
 80054d0:	f7fa fe56 	bl	8000180 <__adddf3>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	f7fb fafe 	bl	8000adc <__aeabi_d2f>
 80054e0:	4602      	mov	r2, r0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	61da      	str	r2, [r3, #28]

	DHT->Error = DHT_OK;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	801a      	strh	r2, [r3, #0]
	return DHT_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bdb0      	pop	{r4, r5, r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40240000 	.word	0x40240000

080054fc <Check_Request>:
//		}
//	}
//	return HANDLE_OK;
//}

handle_err_t Check_Request(char* Rx_data) {
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < RX_DATA_SIZE; i++) {
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]
 8005508:	e00f      	b.n	800552a <Check_Request+0x2e>
		if(Rx_data[i] == '\n') {
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4413      	add	r3, r2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b0a      	cmp	r3, #10
 8005514:	d106      	bne.n	8005524 <Check_Request+0x28>
			Rx_data[i] = '\0';
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	4413      	add	r3, r2
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
			return HANDLE_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e007      	b.n	8005534 <Check_Request+0x38>
	for (uint8_t i = 0; i < RX_DATA_SIZE; i++) {
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	3301      	adds	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b31      	cmp	r3, #49	; 0x31
 800552e:	d9ec      	bls.n	800550a <Check_Request+0xe>
		}
	}
	return HANDLE_RX_UART_NOT_FOUND_CMD;
 8005530:	f240 1301 	movw	r3, #257	; 0x101
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr
	...

08005540 <Get_Arg>:

handle_err_t Get_Arg(char* Rx_data) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, (uint8_t *)Rx_data, strlen((char *)Rx_data),50); // test
	uint16_t ret;
	arg_num = 0;
 8005548:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <Get_Arg+0x94>)
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
	char * pch;
	pch = strtok(Rx_data, " ");
 800554e:	4922      	ldr	r1, [pc, #136]	; (80055d8 <Get_Arg+0x98>)
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f002 fa4f 	bl	80079f4 <strtok>
 8005556:	60f8      	str	r0, [r7, #12]
	while((pch != NULL) && (strcmp(pch, " ")) ) {
 8005558:	e015      	b.n	8005586 <Get_Arg+0x46>
		strcpy( (char *)argv[arg_num++], pch);
 800555a:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <Get_Arg+0x94>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	b2d1      	uxtb	r1, r2
 8005562:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <Get_Arg+0x94>)
 8005564:	7011      	strb	r1, [r2, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <Get_Arg+0x9c>)
 8005572:	4413      	add	r3, r2
 8005574:	68f9      	ldr	r1, [r7, #12]
 8005576:	4618      	mov	r0, r3
 8005578:	f001 fc24 	bl	8006dc4 <strcpy>
		pch = strtok(NULL, " ");
 800557c:	4916      	ldr	r1, [pc, #88]	; (80055d8 <Get_Arg+0x98>)
 800557e:	2000      	movs	r0, #0
 8005580:	f002 fa38 	bl	80079f4 <strtok>
 8005584:	60f8      	str	r0, [r7, #12]
	while((pch != NULL) && (strcmp(pch, " ")) ) {
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d006      	beq.n	800559a <Get_Arg+0x5a>
 800558c:	4912      	ldr	r1, [pc, #72]	; (80055d8 <Get_Arg+0x98>)
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7fa fdde 	bl	8000150 <strcmp>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1df      	bne.n	800555a <Get_Arg+0x1a>
	}

	ret = HAL_UART_DMAStop(&huart2);
 800559a:	4811      	ldr	r0, [pc, #68]	; (80055e0 <Get_Arg+0xa0>)
 800559c:	f7fe ff97 	bl	80044ce <HAL_UART_DMAStop>
 80055a0:	4603      	mov	r3, r0
 80055a2:	817b      	strh	r3, [r7, #10]
	if (ret) {return HANDLE_ERR_UART_DMA;}
 80055a4:	897b      	ldrh	r3, [r7, #10]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <Get_Arg+0x70>
 80055aa:	f44f 7381 	mov.w	r3, #258	; 0x102
 80055ae:	e00d      	b.n	80055cc <Get_Arg+0x8c>

	ret = HAL_UART_Receive_DMA(&huart2, (uint8_t *) Rx_data, RX_DATA_SIZE);
 80055b0:	2232      	movs	r2, #50	; 0x32
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	480a      	ldr	r0, [pc, #40]	; (80055e0 <Get_Arg+0xa0>)
 80055b6:	f7fe ff5a 	bl	800446e <HAL_UART_Receive_DMA>
 80055ba:	4603      	mov	r3, r0
 80055bc:	817b      	strh	r3, [r7, #10]
	if (ret) {return HANDLE_ERR_UART_DMA;}
 80055be:	897b      	ldrh	r3, [r7, #10]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <Get_Arg+0x8a>
 80055c4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80055c8:	e000      	b.n	80055cc <Get_Arg+0x8c>
//	for (int var = 0; var < arg_num; ++var) {
//		HAL_UART_Transmit(&huart2, (uint8_t *)argv[var], strlen((char *)argv[var]),50);
//		HAL_UART_Transmit(&huart2, "\n",1,50); // test
//	}

	return HANDLE_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000534 	.word	0x20000534
 80055d8:	0800aa58 	.word	0x0800aa58
 80055dc:	2000046c 	.word	0x2000046c
 80055e0:	20000340 	.word	0x20000340

080055e4 <Handle_Request>:

handle_err_t Handle_Request() {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit(&huart2, "hello\n",7,50); // test
	for (uint8_t i = 0; i < REQUEST_COMMAND_NUMBERS; ++i) {
 80055ea:	2300      	movs	r3, #0
 80055ec:	71fb      	strb	r3, [r7, #7]
 80055ee:	e012      	b.n	8005616 <Handle_Request+0x32>
//		HAL_UART_Transmit(&huart2,(uint8_t* )req_cmds[i], strlen(req_cmds[i]), 30 );
//		HAL_UART_Transmit(&huart2,argv[0], strlen((char *)argv[0]), 30 );
//		HAL_UART_Transmit(&huart2, "hello\n",7,50); // test
		if ( !strcmp((char *)argv[0], req_cmds[i]) ) {
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	4a0d      	ldr	r2, [pc, #52]	; (8005628 <Handle_Request+0x44>)
 80055f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f8:	4619      	mov	r1, r3
 80055fa:	480c      	ldr	r0, [pc, #48]	; (800562c <Handle_Request+0x48>)
 80055fc:	f7fa fda8 	bl	8000150 <strcmp>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <Handle_Request+0x2c>
//			HAL_UART_Transmit(&huart2,(uint8_t* )req_cmds[i], strlen(req_cmds[i]), 30 );
			handle_func[i]();
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	4a09      	ldr	r2, [pc, #36]	; (8005630 <Handle_Request+0x4c>)
 800560a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560e:	4798      	blx	r3
	for (uint8_t i = 0; i < REQUEST_COMMAND_NUMBERS; ++i) {
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	3301      	adds	r3, #1
 8005614:	71fb      	strb	r3, [r7, #7]
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d9e9      	bls.n	80055f0 <Handle_Request+0xc>
		}
	}

	return HANDLE_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2000004c 	.word	0x2000004c
 800562c:	2000046c 	.word	0x2000046c
 8005630:	2000005c 	.word	0x2000005c

08005634 <Handle_SetMode>:



handle_err_t Handle_SetMode(){
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
	if (arg_num < 2) {
 800563a:	4b12      	ldr	r3, [pc, #72]	; (8005684 <Handle_SetMode+0x50>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d802      	bhi.n	8005648 <Handle_SetMode+0x14>
		return HANDLE_ERR_TOO_FEW_ARG;
 8005642:	f240 1303 	movw	r3, #259	; 0x103
 8005646:	e018      	b.n	800567a <Handle_SetMode+0x46>
	}
	if (arg_num > 2) {
 8005648:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <Handle_SetMode+0x50>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d902      	bls.n	8005656 <Handle_SetMode+0x22>
		return HANDLE_ERR_TOO_MUCH_ARG;
 8005650:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005654:	e011      	b.n	800567a <Handle_SetMode+0x46>
	}
	uint8_t para = atoi((char *)argv[1]);
 8005656:	480c      	ldr	r0, [pc, #48]	; (8005688 <Handle_SetMode+0x54>)
 8005658:	f000 fcec 	bl	8006034 <atoi>
 800565c:	4603      	mov	r3, r0
 800565e:	71fb      	strb	r3, [r7, #7]
//		sprintf(buffer, " para: %d\n", para);
//		HAL_UART_Transmit(&huart2,(uint8_t* )buffer, strlen(buffer), 300 );
	if(para > 0 && para < 5) {
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d007      	beq.n	8005676 <Handle_SetMode+0x42>
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d804      	bhi.n	8005676 <Handle_SetMode+0x42>
		controll_mode = para;
 800566c:	4a07      	ldr	r2, [pc, #28]	; (800568c <Handle_SetMode+0x58>)
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	7013      	strb	r3, [r2, #0]
//		sprintf(buffer, " Set mode: %d\n", controll_mode);
//		HAL_UART_Transmit(&huart2,(uint8_t* )buffer, strlen(buffer), 300 );
		return HANDLE_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e001      	b.n	800567a <Handle_SetMode+0x46>
	}
	return HANDLE_ERR_INVALID_ARG;
 8005676:	f240 1305 	movw	r3, #261	; 0x105

}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000534 	.word	0x20000534
 8005688:	20000480 	.word	0x20000480
 800568c:	20000000 	.word	0x20000000

08005690 <Handle_SetTempLevel>:
handle_err_t Handle_SetTempLevel(){
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
	if (arg_num < 2*NUMBER_LEVELS) {
 8005696:	4b32      	ldr	r3, [pc, #200]	; (8005760 <Handle_SetTempLevel+0xd0>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b07      	cmp	r3, #7
 800569c:	d802      	bhi.n	80056a4 <Handle_SetTempLevel+0x14>
		return HANDLE_ERR_TOO_FEW_ARG;
 800569e:	f240 1303 	movw	r3, #259	; 0x103
 80056a2:	e058      	b.n	8005756 <Handle_SetTempLevel+0xc6>
		}
	if (arg_num > 2*NUMBER_LEVELS) {
 80056a4:	4b2e      	ldr	r3, [pc, #184]	; (8005760 <Handle_SetTempLevel+0xd0>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d902      	bls.n	80056b2 <Handle_SetTempLevel+0x22>
		return HANDLE_ERR_TOO_MUCH_ARG;
 80056ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80056b0:	e051      	b.n	8005756 <Handle_SetTempLevel+0xc6>
	}
	uint8_t para;
	int i = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	607b      	str	r3, [r7, #4]
	for (i = 1; i < arg_num/2; ++i) {
 80056b6:	2301      	movs	r3, #1
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	e01c      	b.n	80056f6 <Handle_SetTempLevel+0x66>
		para = atoi((char *)argv[i]);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4a27      	ldr	r2, [pc, #156]	; (8005764 <Handle_SetTempLevel+0xd4>)
 80056c8:	4413      	add	r3, r2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fcb2 	bl	8006034 <atoi>
 80056d0:	4603      	mov	r3, r0
 80056d2:	70fb      	strb	r3, [r7, #3]
		if(para >= DHT11_MIN_TEMPERATURE && para <= DHT11_MAX_TEMPERATURE) {
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	2b3c      	cmp	r3, #60	; 0x3c
 80056d8:	d807      	bhi.n	80056ea <Handle_SetTempLevel+0x5a>
			Temp_levels[i] = para;
 80056da:	f997 1003 	ldrsb.w	r1, [r7, #3]
 80056de:	4a22      	ldr	r2, [pc, #136]	; (8005768 <Handle_SetTempLevel+0xd8>)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	460a      	mov	r2, r1
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	e002      	b.n	80056f0 <Handle_SetTempLevel+0x60>
		}
		else {
			return HANDLE_ERR_INVALID_ARG;
 80056ea:	f240 1305 	movw	r3, #261	; 0x105
 80056ee:	e032      	b.n	8005756 <Handle_SetTempLevel+0xc6>
	for (i = 1; i < arg_num/2; ++i) {
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3301      	adds	r3, #1
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <Handle_SetTempLevel+0xd0>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4293      	cmp	r3, r2
 8005704:	dbda      	blt.n	80056bc <Handle_SetTempLevel+0x2c>
		}
	}
	for (; i < arg_num; ++i) {
 8005706:	e01f      	b.n	8005748 <Handle_SetTempLevel+0xb8>
		para = atoi((char *)argv[i]);
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4a14      	ldr	r2, [pc, #80]	; (8005764 <Handle_SetTempLevel+0xd4>)
 8005714:	4413      	add	r3, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fc8c 	bl	8006034 <atoi>
 800571c:	4603      	mov	r3, r0
 800571e:	70fb      	strb	r3, [r7, #3]
		if(para >= 0 && para <= 100) {
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	2b64      	cmp	r3, #100	; 0x64
 8005724:	d80a      	bhi.n	800573c <Handle_SetTempLevel+0xac>
			Speed_Temp_mode[i-arg_num/2] = para;
 8005726:	4b0e      	ldr	r3, [pc, #56]	; (8005760 <Handle_SetTempLevel+0xd0>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	b2db      	uxtb	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	490d      	ldr	r1, [pc, #52]	; (800576c <Handle_SetTempLevel+0xdc>)
 8005736:	78fa      	ldrb	r2, [r7, #3]
 8005738:	54ca      	strb	r2, [r1, r3]
 800573a:	e002      	b.n	8005742 <Handle_SetTempLevel+0xb2>
		}
		else {
			return HANDLE_ERR_INVALID_ARG;
 800573c:	f240 1305 	movw	r3, #261	; 0x105
 8005740:	e009      	b.n	8005756 <Handle_SetTempLevel+0xc6>
	for (; i < arg_num; ++i) {
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3301      	adds	r3, #1
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <Handle_SetTempLevel+0xd0>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4293      	cmp	r3, r2
 8005752:	dbd9      	blt.n	8005708 <Handle_SetTempLevel+0x78>
		}
	}

	return HANDLE_OK;
 8005754:	2300      	movs	r3, #0


}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000534 	.word	0x20000534
 8005764:	2000046c 	.word	0x2000046c
 8005768:	20000410 	.word	0x20000410
 800576c:	20000420 	.word	0x20000420

08005770 <Handle_SetHumiLevel>:
handle_err_t Handle_SetHumiLevel(){
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
	if (arg_num < 2*NUMBER_LEVELS) {
 8005776:	4b32      	ldr	r3, [pc, #200]	; (8005840 <Handle_SetHumiLevel+0xd0>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b07      	cmp	r3, #7
 800577c:	d802      	bhi.n	8005784 <Handle_SetHumiLevel+0x14>
			return HANDLE_ERR_TOO_FEW_ARG;
 800577e:	f240 1303 	movw	r3, #259	; 0x103
 8005782:	e059      	b.n	8005838 <Handle_SetHumiLevel+0xc8>
			}
		if (arg_num > 2*NUMBER_LEVELS) {
 8005784:	4b2e      	ldr	r3, [pc, #184]	; (8005840 <Handle_SetHumiLevel+0xd0>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b08      	cmp	r3, #8
 800578a:	d902      	bls.n	8005792 <Handle_SetHumiLevel+0x22>
			return HANDLE_ERR_TOO_MUCH_ARG;
 800578c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005790:	e052      	b.n	8005838 <Handle_SetHumiLevel+0xc8>
		}
		uint8_t para;
		int i = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	607b      	str	r3, [r7, #4]
		for (i = 1; i < arg_num/2; ++i) {
 8005796:	2301      	movs	r3, #1
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	e01d      	b.n	80057d8 <Handle_SetHumiLevel+0x68>
			para = atoi((char *)argv[i]);
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4a27      	ldr	r2, [pc, #156]	; (8005844 <Handle_SetHumiLevel+0xd4>)
 80057a8:	4413      	add	r3, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fc42 	bl	8006034 <atoi>
 80057b0:	4603      	mov	r3, r0
 80057b2:	70fb      	strb	r3, [r7, #3]
			if(para >= DHT11_MIN_RELATIVE_HUMIDITY && para <= DHT11_MAX_RELATIVE_HUMIDITY) {
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d90b      	bls.n	80057d2 <Handle_SetHumiLevel+0x62>
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	2b5f      	cmp	r3, #95	; 0x5f
 80057be:	d808      	bhi.n	80057d2 <Handle_SetHumiLevel+0x62>
				RHumi_levels[i] = para;
 80057c0:	4a21      	ldr	r2, [pc, #132]	; (8005848 <Handle_SetHumiLevel+0xd8>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4413      	add	r3, r2
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	701a      	strb	r2, [r3, #0]
		for (i = 1; i < arg_num/2; ++i) {
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3301      	adds	r3, #1
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	e002      	b.n	80057d8 <Handle_SetHumiLevel+0x68>
			}
			else {
				return HANDLE_ERR_INVALID_ARG;
 80057d2:	f240 1305 	movw	r3, #261	; 0x105
 80057d6:	e02f      	b.n	8005838 <Handle_SetHumiLevel+0xc8>
		for (i = 1; i < arg_num/2; ++i) {
 80057d8:	4b19      	ldr	r3, [pc, #100]	; (8005840 <Handle_SetHumiLevel+0xd0>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4293      	cmp	r3, r2
 80057e6:	dbd9      	blt.n	800579c <Handle_SetHumiLevel+0x2c>
			}
		}
		for (; i < arg_num; ++i) {
 80057e8:	e01f      	b.n	800582a <Handle_SetHumiLevel+0xba>
			para = atoi((char *)argv[i]);
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4a13      	ldr	r2, [pc, #76]	; (8005844 <Handle_SetHumiLevel+0xd4>)
 80057f6:	4413      	add	r3, r2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fc1b 	bl	8006034 <atoi>
 80057fe:	4603      	mov	r3, r0
 8005800:	70fb      	strb	r3, [r7, #3]
			if(para >= 0 && para <= 100) {
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	2b64      	cmp	r3, #100	; 0x64
 8005806:	d80a      	bhi.n	800581e <Handle_SetHumiLevel+0xae>
				Speed_RHumi_mode[i-arg_num/2] = para;
 8005808:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <Handle_SetHumiLevel+0xd0>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	490d      	ldr	r1, [pc, #52]	; (800584c <Handle_SetHumiLevel+0xdc>)
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	54ca      	strb	r2, [r1, r3]
 800581c:	e002      	b.n	8005824 <Handle_SetHumiLevel+0xb4>
			}
			else {
				return HANDLE_ERR_INVALID_ARG;
 800581e:	f240 1305 	movw	r3, #261	; 0x105
 8005822:	e009      	b.n	8005838 <Handle_SetHumiLevel+0xc8>
		for (; i < arg_num; ++i) {
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3301      	adds	r3, #1
 8005828:	607b      	str	r3, [r7, #4]
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <Handle_SetHumiLevel+0xd0>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4293      	cmp	r3, r2
 8005834:	dbd9      	blt.n	80057ea <Handle_SetHumiLevel+0x7a>
			}
		}

		return HANDLE_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20000534 	.word	0x20000534
 8005844:	2000046c 	.word	0x2000046c
 8005848:	20000418 	.word	0x20000418
 800584c:	20000424 	.word	0x20000424

08005850 <Handle_SetMotorSpeed>:
handle_err_t Handle_SetMotorSpeed(){
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
	if (arg_num < 2) {
 8005856:	4b10      	ldr	r3, [pc, #64]	; (8005898 <Handle_SetMotorSpeed+0x48>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d802      	bhi.n	8005864 <Handle_SetMotorSpeed+0x14>
		return HANDLE_ERR_TOO_FEW_ARG;
 800585e:	f240 1303 	movw	r3, #259	; 0x103
 8005862:	e015      	b.n	8005890 <Handle_SetMotorSpeed+0x40>
		}
	if (arg_num > 2) {
 8005864:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <Handle_SetMotorSpeed+0x48>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d902      	bls.n	8005872 <Handle_SetMotorSpeed+0x22>
		return HANDLE_ERR_TOO_MUCH_ARG;
 800586c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005870:	e00e      	b.n	8005890 <Handle_SetMotorSpeed+0x40>
	}
	uint8_t para = atoi((char *)argv[1]);
 8005872:	480a      	ldr	r0, [pc, #40]	; (800589c <Handle_SetMotorSpeed+0x4c>)
 8005874:	f000 fbde 	bl	8006034 <atoi>
 8005878:	4603      	mov	r3, r0
 800587a:	71fb      	strb	r3, [r7, #7]
	if(para >= 0 && para <= 100) {
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	2b64      	cmp	r3, #100	; 0x64
 8005880:	d804      	bhi.n	800588c <Handle_SetMotorSpeed+0x3c>
		MOTOR_1.setSpeed = para;
 8005882:	4a07      	ldr	r2, [pc, #28]	; (80058a0 <Handle_SetMotorSpeed+0x50>)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	7053      	strb	r3, [r2, #1]
//				sprintf(buffer, " Set speed: %d\n", MOTOR_1.setSpeed);
//				HAL_UART_Transmit(&huart2,(uint8_t* )buffer, strlen(buffer), 300 );
		return HANDLE_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e001      	b.n	8005890 <Handle_SetMotorSpeed+0x40>
	}
	return HANDLE_ERR_INVALID_ARG;
 800588c:	f240 1305 	movw	r3, #261	; 0x105
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000534 	.word	0x20000534
 800589c:	20000480 	.word	0x20000480
 80058a0:	200003f4 	.word	0x200003f4

080058a4 <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	f023 030f 	bic.w	r3, r3, #15
 80058b6:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	7a5a      	ldrb	r2, [r3, #9]
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7a5a      	ldrb	r2, [r3, #9]
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	7a5a      	ldrb	r2, [r3, #9]
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	f043 0304 	orr.w	r3, r3, #4
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	7a5a      	ldrb	r2, [r3, #9]
 80058f2:	7bbb      	ldrb	r3, [r7, #14]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6858      	ldr	r0, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b299      	uxth	r1, r3
 8005904:	f107 0208 	add.w	r2, r7, #8
 8005908:	2364      	movs	r3, #100	; 0x64
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2304      	movs	r3, #4
 800590e:	f7fc ff71 	bl	80027f4 <HAL_I2C_Master_Transmit>
}
 8005912:	bf00      	nop
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af02      	add	r7, sp, #8
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	f023 030f 	bic.w	r3, r3, #15
 800592c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	7a5a      	ldrb	r2, [r3, #9]
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	4313      	orrs	r3, r2
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f043 0305 	orr.w	r3, r3, #5
 8005942:	b2db      	uxtb	r3, r3
 8005944:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	7a5a      	ldrb	r2, [r3, #9]
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	4313      	orrs	r3, r2
 800594e:	b2db      	uxtb	r3, r3
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	b2db      	uxtb	r3, r3
 8005956:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	7a5a      	ldrb	r2, [r3, #9]
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	4313      	orrs	r3, r2
 8005960:	b2db      	uxtb	r3, r3
 8005962:	f043 0305 	orr.w	r3, r3, #5
 8005966:	b2db      	uxtb	r3, r3
 8005968:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	7a5a      	ldrb	r2, [r3, #9]
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	4313      	orrs	r3, r2
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6858      	ldr	r0, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	b299      	uxth	r1, r3
 8005986:	f107 0208 	add.w	r2, r7, #8
 800598a:	2364      	movs	r3, #100	; 0x64
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	2304      	movs	r3, #4
 8005990:	f7fc ff30 	bl	80027f4 <HAL_I2C_Master_Transmit>
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <lcd_set_cursor>:
	lcd->Backlightval = LCD_NOBACKLIGHT;
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
 80059a8:	4613      	mov	r3, r2
 80059aa:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <lcd_set_cursor+0x40>)
 80059ae:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	3310      	adds	r3, #16
 80059b4:	443b      	add	r3, r7
 80059b6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80059ba:	78bb      	ldrb	r3, [r7, #2]
 80059bc:	4413      	add	r3, r2
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	b25b      	sxtb	r3, r3
 80059c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059c6:	b25b      	sxtb	r3, r3
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ff69 	bl	80058a4 <lcd_send_cmd>
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	54144000 	.word	0x54144000

080059e0 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	7a1b      	ldrb	r3, [r3, #8]
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7a1b      	ldrb	r3, [r3, #8]
 80059fa:	f043 0308 	orr.w	r3, r3, #8
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff ff4e 	bl	80058a4 <lcd_send_cmd>
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 8005a10:	b40e      	push	{r1, r2, r3}
 8005a12:	b590      	push	{r4, r7, lr}
 8005a14:	b08a      	sub	sp, #40	; 0x28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 8005a1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a1e:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 8005a20:	f107 0310 	add.w	r3, r7, #16
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f002 f8dd 	bl	8007be8 <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a34:	e00e      	b.n	8005a54 <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 8005a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a3a:	3328      	adds	r3, #40	; 0x28
 8005a3c:	443b      	add	r3, r7
 8005a3e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff ff68 	bl	800591a <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8005a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a4e:	3301      	adds	r3, #1
 8005a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a54:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8005a58:	f107 0310 	add.w	r3, r7, #16
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fa fb81 	bl	8000164 <strlen>
 8005a62:	4603      	mov	r3, r0
 8005a64:	429c      	cmp	r4, r3
 8005a66:	d203      	bcs.n	8005a70 <lcd_printf+0x60>
 8005a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a6c:	2b0f      	cmp	r3, #15
 8005a6e:	d9e2      	bls.n	8005a36 <lcd_printf+0x26>
  }
}
 8005a70:	bf00      	nop
 8005a72:	3728      	adds	r7, #40	; 0x28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005a7a:	b003      	add	sp, #12
 8005a7c:	4770      	bx	lr

08005a7e <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	7a1b      	ldrb	r3, [r3, #8]
 8005aa0:	f043 0304 	orr.w	r3, r3, #4
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 8005aaa:	2133      	movs	r1, #51	; 0x33
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff fef9 	bl	80058a4 <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 8005ab2:	2132      	movs	r1, #50	; 0x32
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff fef5 	bl	80058a4 <lcd_send_cmd>
	HAL_Delay(5);
 8005aba:	2005      	movs	r0, #5
 8005abc:	f7fb ffd2 	bl	8001a64 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff feee 	bl	80058a4 <lcd_send_cmd>
	HAL_Delay(5);
 8005ac8:	2005      	movs	r0, #5
 8005aca:	f7fb ffcb 	bl	8001a64 <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 8005ace:	210c      	movs	r1, #12
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff fee7 	bl	80058a4 <lcd_send_cmd>
	HAL_Delay(5);
 8005ad6:	2005      	movs	r0, #5
 8005ad8:	f7fb ffc4 	bl	8001a64 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 8005adc:	2102      	movs	r1, #2
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff fee0 	bl	80058a4 <lcd_send_cmd>
	HAL_Delay(5);
 8005ae4:	2005      	movs	r0, #5
 8005ae6:	f7fb ffbd 	bl	8001a64 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f7ff fed9 	bl	80058a4 <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff ff74 	bl	80059e0 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2208      	movs	r2, #8
 8005afc:	725a      	strb	r2, [r3, #9]
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <TASK_1>:
static char buff[TX_DATA_SIZE];
static uint32_t time = 0; // test
extern TIM_HandleTypeDef htim2; // test

/** read DHT11 */
void TASK_1(){
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
	DHT_ReadTempHum(&DHT11);
 8005b0c:	4802      	ldr	r0, [pc, #8]	; (8005b18 <TASK_1+0x10>)
 8005b0e:	f7ff fc59 	bl	80053c4 <DHT_ReadTempHum>
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200003d4 	.word	0x200003d4

08005b1c <TASK_2>:

/** handle RX uart */
void TASK_2(){
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start(&htim2); // test
	uint16_t ret = Check_Request(Rx_data);
 8005b22:	480c      	ldr	r0, [pc, #48]	; (8005b54 <TASK_2+0x38>)
 8005b24:	f7ff fcea 	bl	80054fc <Check_Request>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	80fb      	strh	r3, [r7, #6]
	if(!ret) {
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <TASK_2+0x20>
		ret = Get_Arg(Rx_data);
 8005b32:	4808      	ldr	r0, [pc, #32]	; (8005b54 <TASK_2+0x38>)
 8005b34:	f7ff fd04 	bl	8005540 <Get_Arg>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	80fb      	strh	r3, [r7, #6]
	}
	if(!ret) {
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <TASK_2+0x2e>
		ret = Handle_Request();
 8005b42:	f7ff fd4f 	bl	80055e4 <Handle_Request>
 8005b46:	4603      	mov	r3, r0
 8005b48:	80fb      	strh	r3, [r7, #6]
	}

//	HAL_TIM_Base_Stop(&htim2);
//		sprintf(buff, "Timre task 2 : %ld us\n", htim2.Instance->CNT); // test
//		HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), TX_UART_TIMEOUT ); // test
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000428 	.word	0x20000428

08005b58 <TASK_3>:

/** TX uart */
void TASK_3(){
 8005b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af04      	add	r7, sp, #16
//	sprintf(buff, "Speed %d\nDHT_status 0x%#03x\n", MOTOR_1.speed, DHT11.Error);
//	sprintf(buff, "Speed %d\nDHT_status %d\n", MOTOR_1.speed, DHT11.Error);
//	sprintf(buff, "DHT status %d\n", DHT11.Error);
//	sprintf(buff, "Speed %d\nDHT_status 0x%#03x\n", MOTOR_1.speed, DHT11.Error);

	if(DHT11.Error) {
 8005b5e:	4b1b      	ldr	r3, [pc, #108]	; (8005bcc <TASK_3+0x74>)
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <TASK_3+0x22>
		sprintf(buff, "Speed %d\nDHT_status 0x%#03x\n\n", MOTOR_1.speed, DHT11.Error);
 8005b66:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <TASK_3+0x78>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <TASK_3+0x74>)
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	4918      	ldr	r1, [pc, #96]	; (8005bd4 <TASK_3+0x7c>)
 8005b72:	4819      	ldr	r0, [pc, #100]	; (8005bd8 <TASK_3+0x80>)
 8005b74:	f001 f906 	bl	8006d84 <siprintf>
 8005b78:	e019      	b.n	8005bae <TASK_3+0x56>
	} else {
//		sprintf(buff, "Speed %d\nDHT_status %d\nTemp %.2f\nHumi %.2f\n\n", MOTOR_1.speed, DHT11.Error, DHT11.Temp, DHT11.Humi);
		sprintf(buff, "DHT_status %d\nTemp %.2f\nHumi %.2f\n\n", DHT11.Error, DHT11.Temp, DHT11.Humi);
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <TASK_3+0x74>)
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	461e      	mov	r6, r3
 8005b80:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <TASK_3+0x74>)
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fa fc59 	bl	800043c <__aeabi_f2d>
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	460d      	mov	r5, r1
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <TASK_3+0x74>)
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fa fc52 	bl	800043c <__aeabi_f2d>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ba0:	e9cd 4500 	strd	r4, r5, [sp]
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	490d      	ldr	r1, [pc, #52]	; (8005bdc <TASK_3+0x84>)
 8005ba8:	480b      	ldr	r0, [pc, #44]	; (8005bd8 <TASK_3+0x80>)
 8005baa:	f001 f8eb 	bl	8006d84 <siprintf>
	}
	HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), TX_UART_TIMEOUT );
 8005bae:	480a      	ldr	r0, [pc, #40]	; (8005bd8 <TASK_3+0x80>)
 8005bb0:	f7fa fad8 	bl	8000164 <strlen>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	2332      	movs	r3, #50	; 0x32
 8005bba:	4907      	ldr	r1, [pc, #28]	; (8005bd8 <TASK_3+0x80>)
 8005bbc:	4808      	ldr	r0, [pc, #32]	; (8005be0 <TASK_3+0x88>)
 8005bbe:	f7fe fbc4 	bl	800434a <HAL_UART_Transmit>

//	sprintf(buff, "Speed %d\n", MOTOR_1.speed);
//	HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), TX_UART_TIMEOUT );

}
 8005bc2:	bf00      	nop
 8005bc4:	3704      	adds	r7, #4
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	200003d4 	.word	0x200003d4
 8005bd0:	200003f4 	.word	0x200003f4
 8005bd4:	0800aa5c 	.word	0x0800aa5c
 8005bd8:	20000538 	.word	0x20000538
 8005bdc:	0800aa7c 	.word	0x0800aa7c
 8005be0:	20000340 	.word	0x20000340

08005be4 <TASK_4>:

/** display LCD temperature & relative humidity of DHT11*/
void TASK_4(){
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af02      	add	r7, sp, #8

	if(DHT11.Error) {
 8005bea:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <TASK_4+0x80>)
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d013      	beq.n	8005c1a <TASK_4+0x36>
//		lcd_clear_display(&hlcd);
		lcd_set_cursor(&hlcd, 0, 0);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	481c      	ldr	r0, [pc, #112]	; (8005c68 <TASK_4+0x84>)
 8005bf8:	f7ff fed0 	bl	800599c <lcd_set_cursor>
		lcd_printf(&hlcd, "Temp : __.__ %cC ",(char)223);
 8005bfc:	22df      	movs	r2, #223	; 0xdf
 8005bfe:	491b      	ldr	r1, [pc, #108]	; (8005c6c <TASK_4+0x88>)
 8005c00:	4819      	ldr	r0, [pc, #100]	; (8005c68 <TASK_4+0x84>)
 8005c02:	f7ff ff05 	bl	8005a10 <lcd_printf>
		lcd_set_cursor(&hlcd, 1,0);
 8005c06:	2200      	movs	r2, #0
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4817      	ldr	r0, [pc, #92]	; (8005c68 <TASK_4+0x84>)
 8005c0c:	f7ff fec6 	bl	800599c <lcd_set_cursor>
		lcd_printf(&hlcd, "Humi : __.__ %%");
 8005c10:	4917      	ldr	r1, [pc, #92]	; (8005c70 <TASK_4+0x8c>)
 8005c12:	4815      	ldr	r0, [pc, #84]	; (8005c68 <TASK_4+0x84>)
 8005c14:	f7ff fefc 	bl	8005a10 <lcd_printf>
		lcd_set_cursor(&hlcd, 1,0);
		lcd_printf(&hlcd, "Humi : %.2f %%", DHT11.Humi );

	}

}
 8005c18:	e021      	b.n	8005c5e <TASK_4+0x7a>
		lcd_set_cursor(&hlcd, 0, 0);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4812      	ldr	r0, [pc, #72]	; (8005c68 <TASK_4+0x84>)
 8005c20:	f7ff febc 	bl	800599c <lcd_set_cursor>
		lcd_printf(&hlcd, "Temp : %.2f %cC ", DHT11.Temp, (char)223);
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <TASK_4+0x80>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fa fc07 	bl	800043c <__aeabi_f2d>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	21df      	movs	r1, #223	; 0xdf
 8005c34:	9100      	str	r1, [sp, #0]
 8005c36:	490f      	ldr	r1, [pc, #60]	; (8005c74 <TASK_4+0x90>)
 8005c38:	480b      	ldr	r0, [pc, #44]	; (8005c68 <TASK_4+0x84>)
 8005c3a:	f7ff fee9 	bl	8005a10 <lcd_printf>
		lcd_set_cursor(&hlcd, 1,0);
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2101      	movs	r1, #1
 8005c42:	4809      	ldr	r0, [pc, #36]	; (8005c68 <TASK_4+0x84>)
 8005c44:	f7ff feaa 	bl	800599c <lcd_set_cursor>
		lcd_printf(&hlcd, "Humi : %.2f %%", DHT11.Humi );
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <TASK_4+0x80>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fbf5 	bl	800043c <__aeabi_f2d>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4908      	ldr	r1, [pc, #32]	; (8005c78 <TASK_4+0x94>)
 8005c58:	4803      	ldr	r0, [pc, #12]	; (8005c68 <TASK_4+0x84>)
 8005c5a:	f7ff fed9 	bl	8005a10 <lcd_printf>
}
 8005c5e:	bf00      	nop
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	200003d4 	.word	0x200003d4
 8005c68:	200003c8 	.word	0x200003c8
 8005c6c:	0800aaa0 	.word	0x0800aaa0
 8005c70:	0800aab4 	.word	0x0800aab4
 8005c74:	0800aac4 	.word	0x0800aac4
 8005c78:	0800aad8 	.word	0x0800aad8

08005c7c <TASK_5>:

/** Control speed motor*/
void TASK_5(){
 8005c7c:	b590      	push	{r4, r7, lr}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start(&htim2); // test
	switch (controll_mode) {
 8005c82:	4b98      	ldr	r3, [pc, #608]	; (8005ee4 <TASK_5+0x268>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	f200 81b9 	bhi.w	8006000 <TASK_5+0x384>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <TASK_5+0x18>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005dcd 	.word	0x08005dcd
 8005c9c:	08005f17 	.word	0x08005f17
 8005ca0:	08005fdf 	.word	0x08005fdf
		case TEMPERATURE_MODE:
			HAL_GPIO_WritePin(MOTOR_1.Port_IN1, MOTOR_1.Pin_IN1, GPIO_PIN_RESET);
 8005ca4:	4b90      	ldr	r3, [pc, #576]	; (8005ee8 <TASK_5+0x26c>)
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	4a8f      	ldr	r2, [pc, #572]	; (8005ee8 <TASK_5+0x26c>)
 8005caa:	8991      	ldrh	r1, [r2, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fc fc43 	bl	800253a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_1.Port_IN2, MOTOR_1.Pin_IN2, GPIO_PIN_SET);
 8005cb4:	4b8c      	ldr	r3, [pc, #560]	; (8005ee8 <TASK_5+0x26c>)
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	4a8b      	ldr	r2, [pc, #556]	; (8005ee8 <TASK_5+0x26c>)
 8005cba:	8a91      	ldrh	r1, [r2, #20]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fc fc3b 	bl	800253a <HAL_GPIO_WritePin>
			for (uint8_t i = 0; i < NUMBER_LEVELS; i++) {
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	71fb      	strb	r3, [r7, #7]
 8005cc8:	e07b      	b.n	8005dc2 <TASK_5+0x146>
//				mul = DHT11.Temp;
				if (DHT11.Temp >= Temp_levels[i] && DHT11.Temp <= Temp_levels[i+1]){
 8005cca:	4b88      	ldr	r3, [pc, #544]	; (8005eec <TASK_5+0x270>)
 8005ccc:	699c      	ldr	r4, [r3, #24]
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	4a87      	ldr	r2, [pc, #540]	; (8005ef0 <TASK_5+0x274>)
 8005cd2:	56d3      	ldrsb	r3, [r2, r3]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fb f80b 	bl	8000cf0 <__aeabi_i2f>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f7fb f8bc 	bl	8000e5c <__aeabi_fcmpge>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d068      	beq.n	8005dbc <TASK_5+0x140>
 8005cea:	4b80      	ldr	r3, [pc, #512]	; (8005eec <TASK_5+0x270>)
 8005cec:	699c      	ldr	r4, [r3, #24]
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	4a7f      	ldr	r2, [pc, #508]	; (8005ef0 <TASK_5+0x274>)
 8005cf4:	56d3      	ldrsb	r3, [r2, r3]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fa fffa 	bl	8000cf0 <__aeabi_i2f>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	4619      	mov	r1, r3
 8005d00:	4620      	mov	r0, r4
 8005d02:	f7fb f8a1 	bl	8000e48 <__aeabi_fcmple>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d057      	beq.n	8005dbc <TASK_5+0x140>
//					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, 900);
//					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, Speed_Temp_mode[i]* MOTOR_1.Timer->Instance->ARR/100);

					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, Speed_Temp_mode[i]* MOTOR_1.Timer->Instance->ARR/100);
 8005d0c:	4b76      	ldr	r3, [pc, #472]	; (8005ee8 <TASK_5+0x26c>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d112      	bne.n	8005d3a <TASK_5+0xbe>
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	4a77      	ldr	r2, [pc, #476]	; (8005ef4 <TASK_5+0x278>)
 8005d18:	5cd3      	ldrb	r3, [r2, r3]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4b72      	ldr	r3, [pc, #456]	; (8005ee8 <TASK_5+0x26c>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	fb03 f202 	mul.w	r2, r3, r2
 8005d28:	4b6f      	ldr	r3, [pc, #444]	; (8005ee8 <TASK_5+0x26c>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4972      	ldr	r1, [pc, #456]	; (8005ef8 <TASK_5+0x27c>)
 8005d30:	fba1 1202 	umull	r1, r2, r1, r2
 8005d34:	0952      	lsrs	r2, r2, #5
 8005d36:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8005d38:	e047      	b.n	8005dca <TASK_5+0x14e>
					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, Speed_Temp_mode[i]* MOTOR_1.Timer->Instance->ARR/100);
 8005d3a:	4b6b      	ldr	r3, [pc, #428]	; (8005ee8 <TASK_5+0x26c>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d112      	bne.n	8005d68 <TASK_5+0xec>
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	4a6b      	ldr	r2, [pc, #428]	; (8005ef4 <TASK_5+0x278>)
 8005d46:	5cd3      	ldrb	r3, [r2, r3]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4b67      	ldr	r3, [pc, #412]	; (8005ee8 <TASK_5+0x26c>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
 8005d56:	4a64      	ldr	r2, [pc, #400]	; (8005ee8 <TASK_5+0x26c>)
 8005d58:	6852      	ldr	r2, [r2, #4]
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	4966      	ldr	r1, [pc, #408]	; (8005ef8 <TASK_5+0x27c>)
 8005d5e:	fba1 1303 	umull	r1, r3, r1, r3
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	6393      	str	r3, [r2, #56]	; 0x38
					break;
 8005d66:	e030      	b.n	8005dca <TASK_5+0x14e>
					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, Speed_Temp_mode[i]* MOTOR_1.Timer->Instance->ARR/100);
 8005d68:	4b5f      	ldr	r3, [pc, #380]	; (8005ee8 <TASK_5+0x26c>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d112      	bne.n	8005d96 <TASK_5+0x11a>
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	4a60      	ldr	r2, [pc, #384]	; (8005ef4 <TASK_5+0x278>)
 8005d74:	5cd3      	ldrb	r3, [r2, r3]
 8005d76:	461a      	mov	r2, r3
 8005d78:	4b5b      	ldr	r3, [pc, #364]	; (8005ee8 <TASK_5+0x26c>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	4a58      	ldr	r2, [pc, #352]	; (8005ee8 <TASK_5+0x26c>)
 8005d86:	6852      	ldr	r2, [r2, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	495b      	ldr	r1, [pc, #364]	; (8005ef8 <TASK_5+0x27c>)
 8005d8c:	fba1 1303 	umull	r1, r3, r1, r3
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	63d3      	str	r3, [r2, #60]	; 0x3c
					break;
 8005d94:	e019      	b.n	8005dca <TASK_5+0x14e>
					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, Speed_Temp_mode[i]* MOTOR_1.Timer->Instance->ARR/100);
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	4a56      	ldr	r2, [pc, #344]	; (8005ef4 <TASK_5+0x278>)
 8005d9a:	5cd3      	ldrb	r3, [r2, r3]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4b52      	ldr	r3, [pc, #328]	; (8005ee8 <TASK_5+0x26c>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	4a4f      	ldr	r2, [pc, #316]	; (8005ee8 <TASK_5+0x26c>)
 8005dac:	6852      	ldr	r2, [r2, #4]
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	4951      	ldr	r1, [pc, #324]	; (8005ef8 <TASK_5+0x27c>)
 8005db2:	fba1 1303 	umull	r1, r3, r1, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	6413      	str	r3, [r2, #64]	; 0x40
					break;
 8005dba:	e006      	b.n	8005dca <TASK_5+0x14e>
			for (uint8_t i = 0; i < NUMBER_LEVELS; i++) {
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	71fb      	strb	r3, [r7, #7]
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d980      	bls.n	8005cca <TASK_5+0x4e>
				}

			}
			break;
 8005dc8:	e12b      	b.n	8006022 <TASK_5+0x3a6>
 8005dca:	e12a      	b.n	8006022 <TASK_5+0x3a6>
		case HUMIDITY_MODE:
			HAL_GPIO_WritePin(MOTOR_1.Port_IN1, MOTOR_1.Pin_IN1, GPIO_PIN_RESET);
 8005dcc:	4b46      	ldr	r3, [pc, #280]	; (8005ee8 <TASK_5+0x26c>)
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	4a45      	ldr	r2, [pc, #276]	; (8005ee8 <TASK_5+0x26c>)
 8005dd2:	8991      	ldrh	r1, [r2, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc fbaf 	bl	800253a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_1.Port_IN2, MOTOR_1.Pin_IN2, GPIO_PIN_SET);
 8005ddc:	4b42      	ldr	r3, [pc, #264]	; (8005ee8 <TASK_5+0x26c>)
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	4a41      	ldr	r2, [pc, #260]	; (8005ee8 <TASK_5+0x26c>)
 8005de2:	8a91      	ldrh	r1, [r2, #20]
 8005de4:	2201      	movs	r2, #1
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fc fba7 	bl	800253a <HAL_GPIO_WritePin>
			for (uint8_t i = 0; i < NUMBER_LEVELS; ++i) {
 8005dec:	2300      	movs	r3, #0
 8005dee:	71bb      	strb	r3, [r7, #6]
 8005df0:	e08b      	b.n	8005f0a <TASK_5+0x28e>
				if (DHT11.Humi >= RHumi_levels[i] && DHT11.Humi <= RHumi_levels[i+1]){
 8005df2:	4b3e      	ldr	r3, [pc, #248]	; (8005eec <TASK_5+0x270>)
 8005df4:	69dc      	ldr	r4, [r3, #28]
 8005df6:	79bb      	ldrb	r3, [r7, #6]
 8005df8:	4a40      	ldr	r2, [pc, #256]	; (8005efc <TASK_5+0x280>)
 8005dfa:	5cd3      	ldrb	r3, [r2, r3]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fa ff77 	bl	8000cf0 <__aeabi_i2f>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4619      	mov	r1, r3
 8005e06:	4620      	mov	r0, r4
 8005e08:	f7fb f828 	bl	8000e5c <__aeabi_fcmpge>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d078      	beq.n	8005f04 <TASK_5+0x288>
 8005e12:	4b36      	ldr	r3, [pc, #216]	; (8005eec <TASK_5+0x270>)
 8005e14:	69dc      	ldr	r4, [r3, #28]
 8005e16:	79bb      	ldrb	r3, [r7, #6]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	4a38      	ldr	r2, [pc, #224]	; (8005efc <TASK_5+0x280>)
 8005e1c:	5cd3      	ldrb	r3, [r2, r3]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fa ff66 	bl	8000cf0 <__aeabi_i2f>
 8005e24:	4603      	mov	r3, r0
 8005e26:	4619      	mov	r1, r3
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7fb f80d 	bl	8000e48 <__aeabi_fcmple>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d067      	beq.n	8005f04 <TASK_5+0x288>
					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, Speed_RHumi_mode[i]* MOTOR_1.Timer->Instance->ARR/100);
 8005e34:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <TASK_5+0x26c>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d112      	bne.n	8005e62 <TASK_5+0x1e6>
 8005e3c:	79bb      	ldrb	r3, [r7, #6]
 8005e3e:	4a30      	ldr	r2, [pc, #192]	; (8005f00 <TASK_5+0x284>)
 8005e40:	5cd3      	ldrb	r3, [r2, r3]
 8005e42:	461a      	mov	r2, r3
 8005e44:	4b28      	ldr	r3, [pc, #160]	; (8005ee8 <TASK_5+0x26c>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	fb03 f202 	mul.w	r2, r3, r2
 8005e50:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <TASK_5+0x26c>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4928      	ldr	r1, [pc, #160]	; (8005ef8 <TASK_5+0x27c>)
 8005e58:	fba1 1202 	umull	r1, r2, r1, r2
 8005e5c:	0952      	lsrs	r2, r2, #5
 8005e5e:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8005e60:	e058      	b.n	8005f14 <TASK_5+0x298>
					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, Speed_RHumi_mode[i]* MOTOR_1.Timer->Instance->ARR/100);
 8005e62:	4b21      	ldr	r3, [pc, #132]	; (8005ee8 <TASK_5+0x26c>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d112      	bne.n	8005e90 <TASK_5+0x214>
 8005e6a:	79bb      	ldrb	r3, [r7, #6]
 8005e6c:	4a24      	ldr	r2, [pc, #144]	; (8005f00 <TASK_5+0x284>)
 8005e6e:	5cd3      	ldrb	r3, [r2, r3]
 8005e70:	461a      	mov	r2, r3
 8005e72:	4b1d      	ldr	r3, [pc, #116]	; (8005ee8 <TASK_5+0x26c>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <TASK_5+0x26c>)
 8005e80:	6852      	ldr	r2, [r2, #4]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	491c      	ldr	r1, [pc, #112]	; (8005ef8 <TASK_5+0x27c>)
 8005e86:	fba1 1303 	umull	r1, r3, r1, r3
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	6393      	str	r3, [r2, #56]	; 0x38
					break;
 8005e8e:	e041      	b.n	8005f14 <TASK_5+0x298>
					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, Speed_RHumi_mode[i]* MOTOR_1.Timer->Instance->ARR/100);
 8005e90:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <TASK_5+0x26c>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d112      	bne.n	8005ebe <TASK_5+0x242>
 8005e98:	79bb      	ldrb	r3, [r7, #6]
 8005e9a:	4a19      	ldr	r2, [pc, #100]	; (8005f00 <TASK_5+0x284>)
 8005e9c:	5cd3      	ldrb	r3, [r2, r3]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <TASK_5+0x26c>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	fb02 f303 	mul.w	r3, r2, r3
 8005eac:	4a0e      	ldr	r2, [pc, #56]	; (8005ee8 <TASK_5+0x26c>)
 8005eae:	6852      	ldr	r2, [r2, #4]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	4911      	ldr	r1, [pc, #68]	; (8005ef8 <TASK_5+0x27c>)
 8005eb4:	fba1 1303 	umull	r1, r3, r1, r3
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	63d3      	str	r3, [r2, #60]	; 0x3c
					break;
 8005ebc:	e02a      	b.n	8005f14 <TASK_5+0x298>
					__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, Speed_RHumi_mode[i]* MOTOR_1.Timer->Instance->ARR/100);
 8005ebe:	79bb      	ldrb	r3, [r7, #6]
 8005ec0:	4a0f      	ldr	r2, [pc, #60]	; (8005f00 <TASK_5+0x284>)
 8005ec2:	5cd3      	ldrb	r3, [r2, r3]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <TASK_5+0x26c>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
 8005ed2:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <TASK_5+0x26c>)
 8005ed4:	6852      	ldr	r2, [r2, #4]
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	4907      	ldr	r1, [pc, #28]	; (8005ef8 <TASK_5+0x27c>)
 8005eda:	fba1 1303 	umull	r1, r3, r1, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	6413      	str	r3, [r2, #64]	; 0x40
					break;
 8005ee2:	e017      	b.n	8005f14 <TASK_5+0x298>
 8005ee4:	20000000 	.word	0x20000000
 8005ee8:	200003f4 	.word	0x200003f4
 8005eec:	200003d4 	.word	0x200003d4
 8005ef0:	20000410 	.word	0x20000410
 8005ef4:	20000420 	.word	0x20000420
 8005ef8:	51eb851f 	.word	0x51eb851f
 8005efc:	20000418 	.word	0x20000418
 8005f00:	20000424 	.word	0x20000424
			for (uint8_t i = 0; i < NUMBER_LEVELS; ++i) {
 8005f04:	79bb      	ldrb	r3, [r7, #6]
 8005f06:	3301      	adds	r3, #1
 8005f08:	71bb      	strb	r3, [r7, #6]
 8005f0a:	79bb      	ldrb	r3, [r7, #6]
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	f67f af70 	bls.w	8005df2 <TASK_5+0x176>
				}
			}
			break;
 8005f12:	e086      	b.n	8006022 <TASK_5+0x3a6>
 8005f14:	e085      	b.n	8006022 <TASK_5+0x3a6>
		case MANUAL_MODE:
//			__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, (int)MOTOR_1.setSpeed*MOTOR_1.Timer->Instance->ARR/100);
//			__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, 900);

			HAL_GPIO_WritePin(MOTOR_1.Port_IN1, MOTOR_1.Pin_IN1, GPIO_PIN_RESET);
 8005f16:	4b45      	ldr	r3, [pc, #276]	; (800602c <TASK_5+0x3b0>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	4a44      	ldr	r2, [pc, #272]	; (800602c <TASK_5+0x3b0>)
 8005f1c:	8991      	ldrh	r1, [r2, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fc fb0a 	bl	800253a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_1.Port_IN2, MOTOR_1.Pin_IN2, GPIO_PIN_SET);
 8005f26:	4b41      	ldr	r3, [pc, #260]	; (800602c <TASK_5+0x3b0>)
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	4a40      	ldr	r2, [pc, #256]	; (800602c <TASK_5+0x3b0>)
 8005f2c:	8a91      	ldrh	r1, [r2, #20]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fc fb02 	bl	800253a <HAL_GPIO_WritePin>

			__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, (int)MOTOR_1.setSpeed*MOTOR_1.Timer->Instance->ARR/100);
 8005f36:	4b3d      	ldr	r3, [pc, #244]	; (800602c <TASK_5+0x3b0>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d111      	bne.n	8005f62 <TASK_5+0x2e6>
 8005f3e:	4b3b      	ldr	r3, [pc, #236]	; (800602c <TASK_5+0x3b0>)
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	461a      	mov	r2, r3
 8005f44:	4b39      	ldr	r3, [pc, #228]	; (800602c <TASK_5+0x3b0>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	fb03 f202 	mul.w	r2, r3, r2
 8005f50:	4b36      	ldr	r3, [pc, #216]	; (800602c <TASK_5+0x3b0>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4936      	ldr	r1, [pc, #216]	; (8006030 <TASK_5+0x3b4>)
 8005f58:	fba1 1202 	umull	r1, r2, r1, r2
 8005f5c:	0952      	lsrs	r2, r2, #5
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8005f60:	e05f      	b.n	8006022 <TASK_5+0x3a6>
			__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, (int)MOTOR_1.setSpeed*MOTOR_1.Timer->Instance->ARR/100);
 8005f62:	4b32      	ldr	r3, [pc, #200]	; (800602c <TASK_5+0x3b0>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d111      	bne.n	8005f8e <TASK_5+0x312>
 8005f6a:	4b30      	ldr	r3, [pc, #192]	; (800602c <TASK_5+0x3b0>)
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4b2e      	ldr	r3, [pc, #184]	; (800602c <TASK_5+0x3b0>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	fb02 f303 	mul.w	r3, r2, r3
 8005f7c:	4a2b      	ldr	r2, [pc, #172]	; (800602c <TASK_5+0x3b0>)
 8005f7e:	6852      	ldr	r2, [r2, #4]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	492b      	ldr	r1, [pc, #172]	; (8006030 <TASK_5+0x3b4>)
 8005f84:	fba1 1303 	umull	r1, r3, r1, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8005f8c:	e049      	b.n	8006022 <TASK_5+0x3a6>
			__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, (int)MOTOR_1.setSpeed*MOTOR_1.Timer->Instance->ARR/100);
 8005f8e:	4b27      	ldr	r3, [pc, #156]	; (800602c <TASK_5+0x3b0>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	d111      	bne.n	8005fba <TASK_5+0x33e>
 8005f96:	4b25      	ldr	r3, [pc, #148]	; (800602c <TASK_5+0x3b0>)
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4b23      	ldr	r3, [pc, #140]	; (800602c <TASK_5+0x3b0>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	4a20      	ldr	r2, [pc, #128]	; (800602c <TASK_5+0x3b0>)
 8005faa:	6852      	ldr	r2, [r2, #4]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	4920      	ldr	r1, [pc, #128]	; (8006030 <TASK_5+0x3b4>)
 8005fb0:	fba1 1303 	umull	r1, r3, r1, r3
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8005fb8:	e033      	b.n	8006022 <TASK_5+0x3a6>
			__HAL_TIM_SetCompare(MOTOR_1.Timer,MOTOR_1.TIMChanel, (int)MOTOR_1.setSpeed*MOTOR_1.Timer->Instance->ARR/100);
 8005fba:	4b1c      	ldr	r3, [pc, #112]	; (800602c <TASK_5+0x3b0>)
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4b1a      	ldr	r3, [pc, #104]	; (800602c <TASK_5+0x3b0>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	fb02 f303 	mul.w	r3, r2, r3
 8005fcc:	4a17      	ldr	r2, [pc, #92]	; (800602c <TASK_5+0x3b0>)
 8005fce:	6852      	ldr	r2, [r2, #4]
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	4917      	ldr	r1, [pc, #92]	; (8006030 <TASK_5+0x3b4>)
 8005fd4:	fba1 1303 	umull	r1, r3, r1, r3
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8005fdc:	e021      	b.n	8006022 <TASK_5+0x3a6>
		case MOTOR_STOP_MODE:
			HAL_GPIO_WritePin(MOTOR_1.Port_IN1, MOTOR_1.Pin_IN1, GPIO_PIN_RESET);
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <TASK_5+0x3b0>)
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	4a12      	ldr	r2, [pc, #72]	; (800602c <TASK_5+0x3b0>)
 8005fe4:	8991      	ldrh	r1, [r2, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fc faa6 	bl	800253a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_1.Port_IN2, MOTOR_1.Pin_IN2, GPIO_PIN_RESET);
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <TASK_5+0x3b0>)
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	4a0e      	ldr	r2, [pc, #56]	; (800602c <TASK_5+0x3b0>)
 8005ff4:	8a91      	ldrh	r1, [r2, #20]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fc fa9e 	bl	800253a <HAL_GPIO_WritePin>
			break;
 8005ffe:	e010      	b.n	8006022 <TASK_5+0x3a6>
		default:
			HAL_GPIO_WritePin(MOTOR_1.Port_IN1, MOTOR_1.Pin_IN1, GPIO_PIN_RESET);
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <TASK_5+0x3b0>)
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	4a09      	ldr	r2, [pc, #36]	; (800602c <TASK_5+0x3b0>)
 8006006:	8991      	ldrh	r1, [r2, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f7fc fa95 	bl	800253a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_1.Port_IN2, MOTOR_1.Pin_IN2, GPIO_PIN_RESET);
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <TASK_5+0x3b0>)
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	4a05      	ldr	r2, [pc, #20]	; (800602c <TASK_5+0x3b0>)
 8006016:	8a91      	ldrh	r1, [r2, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	4618      	mov	r0, r3
 800601c:	f7fc fa8d 	bl	800253a <HAL_GPIO_WritePin>
			break;
 8006020:	bf00      	nop

//	HAL_TIM_Base_Stop(&htim2);
//	sprintf(buff, "Timre task 5 : %ld us\n", htim2.Instance->CNT); // test
//	HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), TX_UART_TIMEOUT ); // test

}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	bd90      	pop	{r4, r7, pc}
 800602a:	bf00      	nop
 800602c:	200003f4 	.word	0x200003f4
 8006030:	51eb851f 	.word	0x51eb851f

08006034 <atoi>:
 8006034:	220a      	movs	r2, #10
 8006036:	2100      	movs	r1, #0
 8006038:	f001 bdb6 	b.w	8007ba8 <strtol>

0800603c <__errno>:
 800603c:	4b01      	ldr	r3, [pc, #4]	; (8006044 <__errno+0x8>)
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	2000006c 	.word	0x2000006c

08006048 <__libc_init_array>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	2600      	movs	r6, #0
 800604c:	4d0c      	ldr	r5, [pc, #48]	; (8006080 <__libc_init_array+0x38>)
 800604e:	4c0d      	ldr	r4, [pc, #52]	; (8006084 <__libc_init_array+0x3c>)
 8006050:	1b64      	subs	r4, r4, r5
 8006052:	10a4      	asrs	r4, r4, #2
 8006054:	42a6      	cmp	r6, r4
 8006056:	d109      	bne.n	800606c <__libc_init_array+0x24>
 8006058:	f004 fce0 	bl	800aa1c <_init>
 800605c:	2600      	movs	r6, #0
 800605e:	4d0a      	ldr	r5, [pc, #40]	; (8006088 <__libc_init_array+0x40>)
 8006060:	4c0a      	ldr	r4, [pc, #40]	; (800608c <__libc_init_array+0x44>)
 8006062:	1b64      	subs	r4, r4, r5
 8006064:	10a4      	asrs	r4, r4, #2
 8006066:	42a6      	cmp	r6, r4
 8006068:	d105      	bne.n	8006076 <__libc_init_array+0x2e>
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006070:	4798      	blx	r3
 8006072:	3601      	adds	r6, #1
 8006074:	e7ee      	b.n	8006054 <__libc_init_array+0xc>
 8006076:	f855 3b04 	ldr.w	r3, [r5], #4
 800607a:	4798      	blx	r3
 800607c:	3601      	adds	r6, #1
 800607e:	e7f2      	b.n	8006066 <__libc_init_array+0x1e>
 8006080:	0800b020 	.word	0x0800b020
 8006084:	0800b020 	.word	0x0800b020
 8006088:	0800b020 	.word	0x0800b020
 800608c:	0800b024 	.word	0x0800b024

08006090 <memset>:
 8006090:	4603      	mov	r3, r0
 8006092:	4402      	add	r2, r0
 8006094:	4293      	cmp	r3, r2
 8006096:	d100      	bne.n	800609a <memset+0xa>
 8006098:	4770      	bx	lr
 800609a:	f803 1b01 	strb.w	r1, [r3], #1
 800609e:	e7f9      	b.n	8006094 <memset+0x4>

080060a0 <__cvt>:
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a6:	461f      	mov	r7, r3
 80060a8:	bfbb      	ittet	lt
 80060aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	461f      	movlt	r7, r3
 80060b0:	2300      	movge	r3, #0
 80060b2:	232d      	movlt	r3, #45	; 0x2d
 80060b4:	b088      	sub	sp, #32
 80060b6:	4614      	mov	r4, r2
 80060b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80060bc:	7013      	strb	r3, [r2, #0]
 80060be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80060c4:	f023 0820 	bic.w	r8, r3, #32
 80060c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060cc:	d005      	beq.n	80060da <__cvt+0x3a>
 80060ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060d2:	d100      	bne.n	80060d6 <__cvt+0x36>
 80060d4:	3501      	adds	r5, #1
 80060d6:	2302      	movs	r3, #2
 80060d8:	e000      	b.n	80060dc <__cvt+0x3c>
 80060da:	2303      	movs	r3, #3
 80060dc:	aa07      	add	r2, sp, #28
 80060de:	9204      	str	r2, [sp, #16]
 80060e0:	aa06      	add	r2, sp, #24
 80060e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80060e6:	e9cd 3500 	strd	r3, r5, [sp]
 80060ea:	4622      	mov	r2, r4
 80060ec:	463b      	mov	r3, r7
 80060ee:	f001 fe2f 	bl	8007d50 <_dtoa_r>
 80060f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060f6:	4606      	mov	r6, r0
 80060f8:	d102      	bne.n	8006100 <__cvt+0x60>
 80060fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060fc:	07db      	lsls	r3, r3, #31
 80060fe:	d522      	bpl.n	8006146 <__cvt+0xa6>
 8006100:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006104:	eb06 0905 	add.w	r9, r6, r5
 8006108:	d110      	bne.n	800612c <__cvt+0x8c>
 800610a:	7833      	ldrb	r3, [r6, #0]
 800610c:	2b30      	cmp	r3, #48	; 0x30
 800610e:	d10a      	bne.n	8006126 <__cvt+0x86>
 8006110:	2200      	movs	r2, #0
 8006112:	2300      	movs	r3, #0
 8006114:	4620      	mov	r0, r4
 8006116:	4639      	mov	r1, r7
 8006118:	f7fa fc50 	bl	80009bc <__aeabi_dcmpeq>
 800611c:	b918      	cbnz	r0, 8006126 <__cvt+0x86>
 800611e:	f1c5 0501 	rsb	r5, r5, #1
 8006122:	f8ca 5000 	str.w	r5, [sl]
 8006126:	f8da 3000 	ldr.w	r3, [sl]
 800612a:	4499      	add	r9, r3
 800612c:	2200      	movs	r2, #0
 800612e:	2300      	movs	r3, #0
 8006130:	4620      	mov	r0, r4
 8006132:	4639      	mov	r1, r7
 8006134:	f7fa fc42 	bl	80009bc <__aeabi_dcmpeq>
 8006138:	b108      	cbz	r0, 800613e <__cvt+0x9e>
 800613a:	f8cd 901c 	str.w	r9, [sp, #28]
 800613e:	2230      	movs	r2, #48	; 0x30
 8006140:	9b07      	ldr	r3, [sp, #28]
 8006142:	454b      	cmp	r3, r9
 8006144:	d307      	bcc.n	8006156 <__cvt+0xb6>
 8006146:	4630      	mov	r0, r6
 8006148:	9b07      	ldr	r3, [sp, #28]
 800614a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800614c:	1b9b      	subs	r3, r3, r6
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	b008      	add	sp, #32
 8006152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006156:	1c59      	adds	r1, r3, #1
 8006158:	9107      	str	r1, [sp, #28]
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e7f0      	b.n	8006140 <__cvt+0xa0>

0800615e <__exponent>:
 800615e:	4603      	mov	r3, r0
 8006160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006162:	2900      	cmp	r1, #0
 8006164:	f803 2b02 	strb.w	r2, [r3], #2
 8006168:	bfb6      	itet	lt
 800616a:	222d      	movlt	r2, #45	; 0x2d
 800616c:	222b      	movge	r2, #43	; 0x2b
 800616e:	4249      	neglt	r1, r1
 8006170:	2909      	cmp	r1, #9
 8006172:	7042      	strb	r2, [r0, #1]
 8006174:	dd2b      	ble.n	80061ce <__exponent+0x70>
 8006176:	f10d 0407 	add.w	r4, sp, #7
 800617a:	46a4      	mov	ip, r4
 800617c:	270a      	movs	r7, #10
 800617e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006182:	460a      	mov	r2, r1
 8006184:	46a6      	mov	lr, r4
 8006186:	fb07 1516 	mls	r5, r7, r6, r1
 800618a:	2a63      	cmp	r2, #99	; 0x63
 800618c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006190:	4631      	mov	r1, r6
 8006192:	f104 34ff 	add.w	r4, r4, #4294967295
 8006196:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800619a:	dcf0      	bgt.n	800617e <__exponent+0x20>
 800619c:	3130      	adds	r1, #48	; 0x30
 800619e:	f1ae 0502 	sub.w	r5, lr, #2
 80061a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80061a6:	4629      	mov	r1, r5
 80061a8:	1c44      	adds	r4, r0, #1
 80061aa:	4561      	cmp	r1, ip
 80061ac:	d30a      	bcc.n	80061c4 <__exponent+0x66>
 80061ae:	f10d 0209 	add.w	r2, sp, #9
 80061b2:	eba2 020e 	sub.w	r2, r2, lr
 80061b6:	4565      	cmp	r5, ip
 80061b8:	bf88      	it	hi
 80061ba:	2200      	movhi	r2, #0
 80061bc:	4413      	add	r3, r2
 80061be:	1a18      	subs	r0, r3, r0
 80061c0:	b003      	add	sp, #12
 80061c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80061cc:	e7ed      	b.n	80061aa <__exponent+0x4c>
 80061ce:	2330      	movs	r3, #48	; 0x30
 80061d0:	3130      	adds	r1, #48	; 0x30
 80061d2:	7083      	strb	r3, [r0, #2]
 80061d4:	70c1      	strb	r1, [r0, #3]
 80061d6:	1d03      	adds	r3, r0, #4
 80061d8:	e7f1      	b.n	80061be <__exponent+0x60>
	...

080061dc <_printf_float>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	b091      	sub	sp, #68	; 0x44
 80061e2:	460c      	mov	r4, r1
 80061e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80061e8:	4616      	mov	r6, r2
 80061ea:	461f      	mov	r7, r3
 80061ec:	4605      	mov	r5, r0
 80061ee:	f002 ff15 	bl	800901c <_localeconv_r>
 80061f2:	6803      	ldr	r3, [r0, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	9309      	str	r3, [sp, #36]	; 0x24
 80061f8:	f7f9 ffb4 	bl	8000164 <strlen>
 80061fc:	2300      	movs	r3, #0
 80061fe:	930e      	str	r3, [sp, #56]	; 0x38
 8006200:	f8d8 3000 	ldr.w	r3, [r8]
 8006204:	900a      	str	r0, [sp, #40]	; 0x28
 8006206:	3307      	adds	r3, #7
 8006208:	f023 0307 	bic.w	r3, r3, #7
 800620c:	f103 0208 	add.w	r2, r3, #8
 8006210:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006214:	f8d4 b000 	ldr.w	fp, [r4]
 8006218:	f8c8 2000 	str.w	r2, [r8]
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006224:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006228:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800622c:	930b      	str	r3, [sp, #44]	; 0x2c
 800622e:	f04f 32ff 	mov.w	r2, #4294967295
 8006232:	4640      	mov	r0, r8
 8006234:	4b9c      	ldr	r3, [pc, #624]	; (80064a8 <_printf_float+0x2cc>)
 8006236:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006238:	f7fa fbf2 	bl	8000a20 <__aeabi_dcmpun>
 800623c:	bb70      	cbnz	r0, 800629c <_printf_float+0xc0>
 800623e:	f04f 32ff 	mov.w	r2, #4294967295
 8006242:	4640      	mov	r0, r8
 8006244:	4b98      	ldr	r3, [pc, #608]	; (80064a8 <_printf_float+0x2cc>)
 8006246:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006248:	f7fa fbcc 	bl	80009e4 <__aeabi_dcmple>
 800624c:	bb30      	cbnz	r0, 800629c <_printf_float+0xc0>
 800624e:	2200      	movs	r2, #0
 8006250:	2300      	movs	r3, #0
 8006252:	4640      	mov	r0, r8
 8006254:	4651      	mov	r1, sl
 8006256:	f7fa fbbb 	bl	80009d0 <__aeabi_dcmplt>
 800625a:	b110      	cbz	r0, 8006262 <_printf_float+0x86>
 800625c:	232d      	movs	r3, #45	; 0x2d
 800625e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006262:	4b92      	ldr	r3, [pc, #584]	; (80064ac <_printf_float+0x2d0>)
 8006264:	4892      	ldr	r0, [pc, #584]	; (80064b0 <_printf_float+0x2d4>)
 8006266:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800626a:	bf94      	ite	ls
 800626c:	4698      	movls	r8, r3
 800626e:	4680      	movhi	r8, r0
 8006270:	2303      	movs	r3, #3
 8006272:	f04f 0a00 	mov.w	sl, #0
 8006276:	6123      	str	r3, [r4, #16]
 8006278:	f02b 0304 	bic.w	r3, fp, #4
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	4633      	mov	r3, r6
 8006280:	4621      	mov	r1, r4
 8006282:	4628      	mov	r0, r5
 8006284:	9700      	str	r7, [sp, #0]
 8006286:	aa0f      	add	r2, sp, #60	; 0x3c
 8006288:	f000 f9d4 	bl	8006634 <_printf_common>
 800628c:	3001      	adds	r0, #1
 800628e:	f040 8090 	bne.w	80063b2 <_printf_float+0x1d6>
 8006292:	f04f 30ff 	mov.w	r0, #4294967295
 8006296:	b011      	add	sp, #68	; 0x44
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	4642      	mov	r2, r8
 800629e:	4653      	mov	r3, sl
 80062a0:	4640      	mov	r0, r8
 80062a2:	4651      	mov	r1, sl
 80062a4:	f7fa fbbc 	bl	8000a20 <__aeabi_dcmpun>
 80062a8:	b148      	cbz	r0, 80062be <_printf_float+0xe2>
 80062aa:	f1ba 0f00 	cmp.w	sl, #0
 80062ae:	bfb8      	it	lt
 80062b0:	232d      	movlt	r3, #45	; 0x2d
 80062b2:	4880      	ldr	r0, [pc, #512]	; (80064b4 <_printf_float+0x2d8>)
 80062b4:	bfb8      	it	lt
 80062b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062ba:	4b7f      	ldr	r3, [pc, #508]	; (80064b8 <_printf_float+0x2dc>)
 80062bc:	e7d3      	b.n	8006266 <_printf_float+0x8a>
 80062be:	6863      	ldr	r3, [r4, #4]
 80062c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	d142      	bne.n	800634e <_printf_float+0x172>
 80062c8:	2306      	movs	r3, #6
 80062ca:	6063      	str	r3, [r4, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	9206      	str	r2, [sp, #24]
 80062d0:	aa0e      	add	r2, sp, #56	; 0x38
 80062d2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80062d6:	aa0d      	add	r2, sp, #52	; 0x34
 80062d8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80062dc:	9203      	str	r2, [sp, #12]
 80062de:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80062e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	4642      	mov	r2, r8
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	4628      	mov	r0, r5
 80062f0:	4653      	mov	r3, sl
 80062f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80062f4:	f7ff fed4 	bl	80060a0 <__cvt>
 80062f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062fa:	4680      	mov	r8, r0
 80062fc:	2947      	cmp	r1, #71	; 0x47
 80062fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006300:	d108      	bne.n	8006314 <_printf_float+0x138>
 8006302:	1cc8      	adds	r0, r1, #3
 8006304:	db02      	blt.n	800630c <_printf_float+0x130>
 8006306:	6863      	ldr	r3, [r4, #4]
 8006308:	4299      	cmp	r1, r3
 800630a:	dd40      	ble.n	800638e <_printf_float+0x1b2>
 800630c:	f1a9 0902 	sub.w	r9, r9, #2
 8006310:	fa5f f989 	uxtb.w	r9, r9
 8006314:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006318:	d81f      	bhi.n	800635a <_printf_float+0x17e>
 800631a:	464a      	mov	r2, r9
 800631c:	3901      	subs	r1, #1
 800631e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006322:	910d      	str	r1, [sp, #52]	; 0x34
 8006324:	f7ff ff1b 	bl	800615e <__exponent>
 8006328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800632a:	4682      	mov	sl, r0
 800632c:	1813      	adds	r3, r2, r0
 800632e:	2a01      	cmp	r2, #1
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	dc02      	bgt.n	800633a <_printf_float+0x15e>
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	07d2      	lsls	r2, r2, #31
 8006338:	d501      	bpl.n	800633e <_printf_float+0x162>
 800633a:	3301      	adds	r3, #1
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006342:	2b00      	cmp	r3, #0
 8006344:	d09b      	beq.n	800627e <_printf_float+0xa2>
 8006346:	232d      	movs	r3, #45	; 0x2d
 8006348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800634c:	e797      	b.n	800627e <_printf_float+0xa2>
 800634e:	2947      	cmp	r1, #71	; 0x47
 8006350:	d1bc      	bne.n	80062cc <_printf_float+0xf0>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1ba      	bne.n	80062cc <_printf_float+0xf0>
 8006356:	2301      	movs	r3, #1
 8006358:	e7b7      	b.n	80062ca <_printf_float+0xee>
 800635a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800635e:	d118      	bne.n	8006392 <_printf_float+0x1b6>
 8006360:	2900      	cmp	r1, #0
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	dd0b      	ble.n	800637e <_printf_float+0x1a2>
 8006366:	6121      	str	r1, [r4, #16]
 8006368:	b913      	cbnz	r3, 8006370 <_printf_float+0x194>
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	07d0      	lsls	r0, r2, #31
 800636e:	d502      	bpl.n	8006376 <_printf_float+0x19a>
 8006370:	3301      	adds	r3, #1
 8006372:	440b      	add	r3, r1
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	f04f 0a00 	mov.w	sl, #0
 800637a:	65a1      	str	r1, [r4, #88]	; 0x58
 800637c:	e7df      	b.n	800633e <_printf_float+0x162>
 800637e:	b913      	cbnz	r3, 8006386 <_printf_float+0x1aa>
 8006380:	6822      	ldr	r2, [r4, #0]
 8006382:	07d2      	lsls	r2, r2, #31
 8006384:	d501      	bpl.n	800638a <_printf_float+0x1ae>
 8006386:	3302      	adds	r3, #2
 8006388:	e7f4      	b.n	8006374 <_printf_float+0x198>
 800638a:	2301      	movs	r3, #1
 800638c:	e7f2      	b.n	8006374 <_printf_float+0x198>
 800638e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006394:	4299      	cmp	r1, r3
 8006396:	db05      	blt.n	80063a4 <_printf_float+0x1c8>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	6121      	str	r1, [r4, #16]
 800639c:	07d8      	lsls	r0, r3, #31
 800639e:	d5ea      	bpl.n	8006376 <_printf_float+0x19a>
 80063a0:	1c4b      	adds	r3, r1, #1
 80063a2:	e7e7      	b.n	8006374 <_printf_float+0x198>
 80063a4:	2900      	cmp	r1, #0
 80063a6:	bfcc      	ite	gt
 80063a8:	2201      	movgt	r2, #1
 80063aa:	f1c1 0202 	rsble	r2, r1, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	e7e0      	b.n	8006374 <_printf_float+0x198>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	055a      	lsls	r2, r3, #21
 80063b6:	d407      	bmi.n	80063c8 <_printf_float+0x1ec>
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	4642      	mov	r2, r8
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	d12b      	bne.n	800641e <_printf_float+0x242>
 80063c6:	e764      	b.n	8006292 <_printf_float+0xb6>
 80063c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063cc:	f240 80dd 	bls.w	800658a <_printf_float+0x3ae>
 80063d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063d4:	2200      	movs	r2, #0
 80063d6:	2300      	movs	r3, #0
 80063d8:	f7fa faf0 	bl	80009bc <__aeabi_dcmpeq>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d033      	beq.n	8006448 <_printf_float+0x26c>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	4a35      	ldr	r2, [pc, #212]	; (80064bc <_printf_float+0x2e0>)
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f af51 	beq.w	8006292 <_printf_float+0xb6>
 80063f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063f4:	429a      	cmp	r2, r3
 80063f6:	db02      	blt.n	80063fe <_printf_float+0x222>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07d8      	lsls	r0, r3, #31
 80063fc:	d50f      	bpl.n	800641e <_printf_float+0x242>
 80063fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f af42 	beq.w	8006292 <_printf_float+0xb6>
 800640e:	f04f 0800 	mov.w	r8, #0
 8006412:	f104 091a 	add.w	r9, r4, #26
 8006416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006418:	3b01      	subs	r3, #1
 800641a:	4543      	cmp	r3, r8
 800641c:	dc09      	bgt.n	8006432 <_printf_float+0x256>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	079b      	lsls	r3, r3, #30
 8006422:	f100 8102 	bmi.w	800662a <_printf_float+0x44e>
 8006426:	68e0      	ldr	r0, [r4, #12]
 8006428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800642a:	4298      	cmp	r0, r3
 800642c:	bfb8      	it	lt
 800642e:	4618      	movlt	r0, r3
 8006430:	e731      	b.n	8006296 <_printf_float+0xba>
 8006432:	2301      	movs	r3, #1
 8006434:	464a      	mov	r2, r9
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f af28 	beq.w	8006292 <_printf_float+0xb6>
 8006442:	f108 0801 	add.w	r8, r8, #1
 8006446:	e7e6      	b.n	8006416 <_printf_float+0x23a>
 8006448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800644a:	2b00      	cmp	r3, #0
 800644c:	dc38      	bgt.n	80064c0 <_printf_float+0x2e4>
 800644e:	2301      	movs	r3, #1
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <_printf_float+0x2e0>)
 8006456:	47b8      	blx	r7
 8006458:	3001      	adds	r0, #1
 800645a:	f43f af1a 	beq.w	8006292 <_printf_float+0xb6>
 800645e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006462:	4313      	orrs	r3, r2
 8006464:	d102      	bne.n	800646c <_printf_float+0x290>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	07d9      	lsls	r1, r3, #31
 800646a:	d5d8      	bpl.n	800641e <_printf_float+0x242>
 800646c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	f43f af0b 	beq.w	8006292 <_printf_float+0xb6>
 800647c:	f04f 0900 	mov.w	r9, #0
 8006480:	f104 0a1a 	add.w	sl, r4, #26
 8006484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006486:	425b      	negs	r3, r3
 8006488:	454b      	cmp	r3, r9
 800648a:	dc01      	bgt.n	8006490 <_printf_float+0x2b4>
 800648c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800648e:	e794      	b.n	80063ba <_printf_float+0x1de>
 8006490:	2301      	movs	r3, #1
 8006492:	4652      	mov	r2, sl
 8006494:	4631      	mov	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	f43f aef9 	beq.w	8006292 <_printf_float+0xb6>
 80064a0:	f109 0901 	add.w	r9, r9, #1
 80064a4:	e7ee      	b.n	8006484 <_printf_float+0x2a8>
 80064a6:	bf00      	nop
 80064a8:	7fefffff 	.word	0x7fefffff
 80064ac:	0800ab24 	.word	0x0800ab24
 80064b0:	0800ab28 	.word	0x0800ab28
 80064b4:	0800ab30 	.word	0x0800ab30
 80064b8:	0800ab2c 	.word	0x0800ab2c
 80064bc:	0800ab34 	.word	0x0800ab34
 80064c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064c4:	429a      	cmp	r2, r3
 80064c6:	bfa8      	it	ge
 80064c8:	461a      	movge	r2, r3
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	4691      	mov	r9, r2
 80064ce:	dc37      	bgt.n	8006540 <_printf_float+0x364>
 80064d0:	f04f 0b00 	mov.w	fp, #0
 80064d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064d8:	f104 021a 	add.w	r2, r4, #26
 80064dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80064e0:	ebaa 0309 	sub.w	r3, sl, r9
 80064e4:	455b      	cmp	r3, fp
 80064e6:	dc33      	bgt.n	8006550 <_printf_float+0x374>
 80064e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064ec:	429a      	cmp	r2, r3
 80064ee:	db3b      	blt.n	8006568 <_printf_float+0x38c>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	07da      	lsls	r2, r3, #31
 80064f4:	d438      	bmi.n	8006568 <_printf_float+0x38c>
 80064f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064fa:	eba3 020a 	sub.w	r2, r3, sl
 80064fe:	eba3 0901 	sub.w	r9, r3, r1
 8006502:	4591      	cmp	r9, r2
 8006504:	bfa8      	it	ge
 8006506:	4691      	movge	r9, r2
 8006508:	f1b9 0f00 	cmp.w	r9, #0
 800650c:	dc34      	bgt.n	8006578 <_printf_float+0x39c>
 800650e:	f04f 0800 	mov.w	r8, #0
 8006512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006516:	f104 0a1a 	add.w	sl, r4, #26
 800651a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	eba3 0309 	sub.w	r3, r3, r9
 8006524:	4543      	cmp	r3, r8
 8006526:	f77f af7a 	ble.w	800641e <_printf_float+0x242>
 800652a:	2301      	movs	r3, #1
 800652c:	4652      	mov	r2, sl
 800652e:	4631      	mov	r1, r6
 8006530:	4628      	mov	r0, r5
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	f43f aeac 	beq.w	8006292 <_printf_float+0xb6>
 800653a:	f108 0801 	add.w	r8, r8, #1
 800653e:	e7ec      	b.n	800651a <_printf_float+0x33e>
 8006540:	4613      	mov	r3, r2
 8006542:	4631      	mov	r1, r6
 8006544:	4642      	mov	r2, r8
 8006546:	4628      	mov	r0, r5
 8006548:	47b8      	blx	r7
 800654a:	3001      	adds	r0, #1
 800654c:	d1c0      	bne.n	80064d0 <_printf_float+0x2f4>
 800654e:	e6a0      	b.n	8006292 <_printf_float+0xb6>
 8006550:	2301      	movs	r3, #1
 8006552:	4631      	mov	r1, r6
 8006554:	4628      	mov	r0, r5
 8006556:	920b      	str	r2, [sp, #44]	; 0x2c
 8006558:	47b8      	blx	r7
 800655a:	3001      	adds	r0, #1
 800655c:	f43f ae99 	beq.w	8006292 <_printf_float+0xb6>
 8006560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006562:	f10b 0b01 	add.w	fp, fp, #1
 8006566:	e7b9      	b.n	80064dc <_printf_float+0x300>
 8006568:	4631      	mov	r1, r6
 800656a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800656e:	4628      	mov	r0, r5
 8006570:	47b8      	blx	r7
 8006572:	3001      	adds	r0, #1
 8006574:	d1bf      	bne.n	80064f6 <_printf_float+0x31a>
 8006576:	e68c      	b.n	8006292 <_printf_float+0xb6>
 8006578:	464b      	mov	r3, r9
 800657a:	4631      	mov	r1, r6
 800657c:	4628      	mov	r0, r5
 800657e:	eb08 020a 	add.w	r2, r8, sl
 8006582:	47b8      	blx	r7
 8006584:	3001      	adds	r0, #1
 8006586:	d1c2      	bne.n	800650e <_printf_float+0x332>
 8006588:	e683      	b.n	8006292 <_printf_float+0xb6>
 800658a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800658c:	2a01      	cmp	r2, #1
 800658e:	dc01      	bgt.n	8006594 <_printf_float+0x3b8>
 8006590:	07db      	lsls	r3, r3, #31
 8006592:	d537      	bpl.n	8006604 <_printf_float+0x428>
 8006594:	2301      	movs	r3, #1
 8006596:	4642      	mov	r2, r8
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	f43f ae77 	beq.w	8006292 <_printf_float+0xb6>
 80065a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a8:	4631      	mov	r1, r6
 80065aa:	4628      	mov	r0, r5
 80065ac:	47b8      	blx	r7
 80065ae:	3001      	adds	r0, #1
 80065b0:	f43f ae6f 	beq.w	8006292 <_printf_float+0xb6>
 80065b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065b8:	2200      	movs	r2, #0
 80065ba:	2300      	movs	r3, #0
 80065bc:	f7fa f9fe 	bl	80009bc <__aeabi_dcmpeq>
 80065c0:	b9d8      	cbnz	r0, 80065fa <_printf_float+0x41e>
 80065c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c4:	f108 0201 	add.w	r2, r8, #1
 80065c8:	3b01      	subs	r3, #1
 80065ca:	4631      	mov	r1, r6
 80065cc:	4628      	mov	r0, r5
 80065ce:	47b8      	blx	r7
 80065d0:	3001      	adds	r0, #1
 80065d2:	d10e      	bne.n	80065f2 <_printf_float+0x416>
 80065d4:	e65d      	b.n	8006292 <_printf_float+0xb6>
 80065d6:	2301      	movs	r3, #1
 80065d8:	464a      	mov	r2, r9
 80065da:	4631      	mov	r1, r6
 80065dc:	4628      	mov	r0, r5
 80065de:	47b8      	blx	r7
 80065e0:	3001      	adds	r0, #1
 80065e2:	f43f ae56 	beq.w	8006292 <_printf_float+0xb6>
 80065e6:	f108 0801 	add.w	r8, r8, #1
 80065ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ec:	3b01      	subs	r3, #1
 80065ee:	4543      	cmp	r3, r8
 80065f0:	dcf1      	bgt.n	80065d6 <_printf_float+0x3fa>
 80065f2:	4653      	mov	r3, sl
 80065f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065f8:	e6e0      	b.n	80063bc <_printf_float+0x1e0>
 80065fa:	f04f 0800 	mov.w	r8, #0
 80065fe:	f104 091a 	add.w	r9, r4, #26
 8006602:	e7f2      	b.n	80065ea <_printf_float+0x40e>
 8006604:	2301      	movs	r3, #1
 8006606:	4642      	mov	r2, r8
 8006608:	e7df      	b.n	80065ca <_printf_float+0x3ee>
 800660a:	2301      	movs	r3, #1
 800660c:	464a      	mov	r2, r9
 800660e:	4631      	mov	r1, r6
 8006610:	4628      	mov	r0, r5
 8006612:	47b8      	blx	r7
 8006614:	3001      	adds	r0, #1
 8006616:	f43f ae3c 	beq.w	8006292 <_printf_float+0xb6>
 800661a:	f108 0801 	add.w	r8, r8, #1
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006622:	1a5b      	subs	r3, r3, r1
 8006624:	4543      	cmp	r3, r8
 8006626:	dcf0      	bgt.n	800660a <_printf_float+0x42e>
 8006628:	e6fd      	b.n	8006426 <_printf_float+0x24a>
 800662a:	f04f 0800 	mov.w	r8, #0
 800662e:	f104 0919 	add.w	r9, r4, #25
 8006632:	e7f4      	b.n	800661e <_printf_float+0x442>

08006634 <_printf_common>:
 8006634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006638:	4616      	mov	r6, r2
 800663a:	4699      	mov	r9, r3
 800663c:	688a      	ldr	r2, [r1, #8]
 800663e:	690b      	ldr	r3, [r1, #16]
 8006640:	4607      	mov	r7, r0
 8006642:	4293      	cmp	r3, r2
 8006644:	bfb8      	it	lt
 8006646:	4613      	movlt	r3, r2
 8006648:	6033      	str	r3, [r6, #0]
 800664a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800664e:	460c      	mov	r4, r1
 8006650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006654:	b10a      	cbz	r2, 800665a <_printf_common+0x26>
 8006656:	3301      	adds	r3, #1
 8006658:	6033      	str	r3, [r6, #0]
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	0699      	lsls	r1, r3, #26
 800665e:	bf42      	ittt	mi
 8006660:	6833      	ldrmi	r3, [r6, #0]
 8006662:	3302      	addmi	r3, #2
 8006664:	6033      	strmi	r3, [r6, #0]
 8006666:	6825      	ldr	r5, [r4, #0]
 8006668:	f015 0506 	ands.w	r5, r5, #6
 800666c:	d106      	bne.n	800667c <_printf_common+0x48>
 800666e:	f104 0a19 	add.w	sl, r4, #25
 8006672:	68e3      	ldr	r3, [r4, #12]
 8006674:	6832      	ldr	r2, [r6, #0]
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	42ab      	cmp	r3, r5
 800667a:	dc28      	bgt.n	80066ce <_printf_common+0x9a>
 800667c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006680:	1e13      	subs	r3, r2, #0
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	bf18      	it	ne
 8006686:	2301      	movne	r3, #1
 8006688:	0692      	lsls	r2, r2, #26
 800668a:	d42d      	bmi.n	80066e8 <_printf_common+0xb4>
 800668c:	4649      	mov	r1, r9
 800668e:	4638      	mov	r0, r7
 8006690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006694:	47c0      	blx	r8
 8006696:	3001      	adds	r0, #1
 8006698:	d020      	beq.n	80066dc <_printf_common+0xa8>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	68e5      	ldr	r5, [r4, #12]
 800669e:	f003 0306 	and.w	r3, r3, #6
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	bf18      	it	ne
 80066a6:	2500      	movne	r5, #0
 80066a8:	6832      	ldr	r2, [r6, #0]
 80066aa:	f04f 0600 	mov.w	r6, #0
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	bf08      	it	eq
 80066b2:	1aad      	subeq	r5, r5, r2
 80066b4:	6922      	ldr	r2, [r4, #16]
 80066b6:	bf08      	it	eq
 80066b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066bc:	4293      	cmp	r3, r2
 80066be:	bfc4      	itt	gt
 80066c0:	1a9b      	subgt	r3, r3, r2
 80066c2:	18ed      	addgt	r5, r5, r3
 80066c4:	341a      	adds	r4, #26
 80066c6:	42b5      	cmp	r5, r6
 80066c8:	d11a      	bne.n	8006700 <_printf_common+0xcc>
 80066ca:	2000      	movs	r0, #0
 80066cc:	e008      	b.n	80066e0 <_printf_common+0xac>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4652      	mov	r2, sl
 80066d2:	4649      	mov	r1, r9
 80066d4:	4638      	mov	r0, r7
 80066d6:	47c0      	blx	r8
 80066d8:	3001      	adds	r0, #1
 80066da:	d103      	bne.n	80066e4 <_printf_common+0xb0>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e4:	3501      	adds	r5, #1
 80066e6:	e7c4      	b.n	8006672 <_printf_common+0x3e>
 80066e8:	2030      	movs	r0, #48	; 0x30
 80066ea:	18e1      	adds	r1, r4, r3
 80066ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066f6:	4422      	add	r2, r4
 80066f8:	3302      	adds	r3, #2
 80066fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066fe:	e7c5      	b.n	800668c <_printf_common+0x58>
 8006700:	2301      	movs	r3, #1
 8006702:	4622      	mov	r2, r4
 8006704:	4649      	mov	r1, r9
 8006706:	4638      	mov	r0, r7
 8006708:	47c0      	blx	r8
 800670a:	3001      	adds	r0, #1
 800670c:	d0e6      	beq.n	80066dc <_printf_common+0xa8>
 800670e:	3601      	adds	r6, #1
 8006710:	e7d9      	b.n	80066c6 <_printf_common+0x92>
	...

08006714 <_printf_i>:
 8006714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	7e0f      	ldrb	r7, [r1, #24]
 800671a:	4691      	mov	r9, r2
 800671c:	2f78      	cmp	r7, #120	; 0x78
 800671e:	4680      	mov	r8, r0
 8006720:	460c      	mov	r4, r1
 8006722:	469a      	mov	sl, r3
 8006724:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800672a:	d807      	bhi.n	800673c <_printf_i+0x28>
 800672c:	2f62      	cmp	r7, #98	; 0x62
 800672e:	d80a      	bhi.n	8006746 <_printf_i+0x32>
 8006730:	2f00      	cmp	r7, #0
 8006732:	f000 80d9 	beq.w	80068e8 <_printf_i+0x1d4>
 8006736:	2f58      	cmp	r7, #88	; 0x58
 8006738:	f000 80a4 	beq.w	8006884 <_printf_i+0x170>
 800673c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006744:	e03a      	b.n	80067bc <_printf_i+0xa8>
 8006746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800674a:	2b15      	cmp	r3, #21
 800674c:	d8f6      	bhi.n	800673c <_printf_i+0x28>
 800674e:	a101      	add	r1, pc, #4	; (adr r1, 8006754 <_printf_i+0x40>)
 8006750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006754:	080067ad 	.word	0x080067ad
 8006758:	080067c1 	.word	0x080067c1
 800675c:	0800673d 	.word	0x0800673d
 8006760:	0800673d 	.word	0x0800673d
 8006764:	0800673d 	.word	0x0800673d
 8006768:	0800673d 	.word	0x0800673d
 800676c:	080067c1 	.word	0x080067c1
 8006770:	0800673d 	.word	0x0800673d
 8006774:	0800673d 	.word	0x0800673d
 8006778:	0800673d 	.word	0x0800673d
 800677c:	0800673d 	.word	0x0800673d
 8006780:	080068cf 	.word	0x080068cf
 8006784:	080067f1 	.word	0x080067f1
 8006788:	080068b1 	.word	0x080068b1
 800678c:	0800673d 	.word	0x0800673d
 8006790:	0800673d 	.word	0x0800673d
 8006794:	080068f1 	.word	0x080068f1
 8006798:	0800673d 	.word	0x0800673d
 800679c:	080067f1 	.word	0x080067f1
 80067a0:	0800673d 	.word	0x0800673d
 80067a4:	0800673d 	.word	0x0800673d
 80067a8:	080068b9 	.word	0x080068b9
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	1d1a      	adds	r2, r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	602a      	str	r2, [r5, #0]
 80067b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067bc:	2301      	movs	r3, #1
 80067be:	e0a4      	b.n	800690a <_printf_i+0x1f6>
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	6829      	ldr	r1, [r5, #0]
 80067c4:	0606      	lsls	r6, r0, #24
 80067c6:	f101 0304 	add.w	r3, r1, #4
 80067ca:	d50a      	bpl.n	80067e2 <_printf_i+0xce>
 80067cc:	680e      	ldr	r6, [r1, #0]
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	2e00      	cmp	r6, #0
 80067d2:	da03      	bge.n	80067dc <_printf_i+0xc8>
 80067d4:	232d      	movs	r3, #45	; 0x2d
 80067d6:	4276      	negs	r6, r6
 80067d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067dc:	230a      	movs	r3, #10
 80067de:	485e      	ldr	r0, [pc, #376]	; (8006958 <_printf_i+0x244>)
 80067e0:	e019      	b.n	8006816 <_printf_i+0x102>
 80067e2:	680e      	ldr	r6, [r1, #0]
 80067e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	bf18      	it	ne
 80067ec:	b236      	sxthne	r6, r6
 80067ee:	e7ef      	b.n	80067d0 <_printf_i+0xbc>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	6820      	ldr	r0, [r4, #0]
 80067f4:	1d19      	adds	r1, r3, #4
 80067f6:	6029      	str	r1, [r5, #0]
 80067f8:	0601      	lsls	r1, r0, #24
 80067fa:	d501      	bpl.n	8006800 <_printf_i+0xec>
 80067fc:	681e      	ldr	r6, [r3, #0]
 80067fe:	e002      	b.n	8006806 <_printf_i+0xf2>
 8006800:	0646      	lsls	r6, r0, #25
 8006802:	d5fb      	bpl.n	80067fc <_printf_i+0xe8>
 8006804:	881e      	ldrh	r6, [r3, #0]
 8006806:	2f6f      	cmp	r7, #111	; 0x6f
 8006808:	bf0c      	ite	eq
 800680a:	2308      	moveq	r3, #8
 800680c:	230a      	movne	r3, #10
 800680e:	4852      	ldr	r0, [pc, #328]	; (8006958 <_printf_i+0x244>)
 8006810:	2100      	movs	r1, #0
 8006812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006816:	6865      	ldr	r5, [r4, #4]
 8006818:	2d00      	cmp	r5, #0
 800681a:	bfa8      	it	ge
 800681c:	6821      	ldrge	r1, [r4, #0]
 800681e:	60a5      	str	r5, [r4, #8]
 8006820:	bfa4      	itt	ge
 8006822:	f021 0104 	bicge.w	r1, r1, #4
 8006826:	6021      	strge	r1, [r4, #0]
 8006828:	b90e      	cbnz	r6, 800682e <_printf_i+0x11a>
 800682a:	2d00      	cmp	r5, #0
 800682c:	d04d      	beq.n	80068ca <_printf_i+0x1b6>
 800682e:	4615      	mov	r5, r2
 8006830:	fbb6 f1f3 	udiv	r1, r6, r3
 8006834:	fb03 6711 	mls	r7, r3, r1, r6
 8006838:	5dc7      	ldrb	r7, [r0, r7]
 800683a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800683e:	4637      	mov	r7, r6
 8006840:	42bb      	cmp	r3, r7
 8006842:	460e      	mov	r6, r1
 8006844:	d9f4      	bls.n	8006830 <_printf_i+0x11c>
 8006846:	2b08      	cmp	r3, #8
 8006848:	d10b      	bne.n	8006862 <_printf_i+0x14e>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	07de      	lsls	r6, r3, #31
 800684e:	d508      	bpl.n	8006862 <_printf_i+0x14e>
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	6861      	ldr	r1, [r4, #4]
 8006854:	4299      	cmp	r1, r3
 8006856:	bfde      	ittt	le
 8006858:	2330      	movle	r3, #48	; 0x30
 800685a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800685e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006862:	1b52      	subs	r2, r2, r5
 8006864:	6122      	str	r2, [r4, #16]
 8006866:	464b      	mov	r3, r9
 8006868:	4621      	mov	r1, r4
 800686a:	4640      	mov	r0, r8
 800686c:	f8cd a000 	str.w	sl, [sp]
 8006870:	aa03      	add	r2, sp, #12
 8006872:	f7ff fedf 	bl	8006634 <_printf_common>
 8006876:	3001      	adds	r0, #1
 8006878:	d14c      	bne.n	8006914 <_printf_i+0x200>
 800687a:	f04f 30ff 	mov.w	r0, #4294967295
 800687e:	b004      	add	sp, #16
 8006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006884:	4834      	ldr	r0, [pc, #208]	; (8006958 <_printf_i+0x244>)
 8006886:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800688a:	6829      	ldr	r1, [r5, #0]
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006892:	6029      	str	r1, [r5, #0]
 8006894:	061d      	lsls	r5, r3, #24
 8006896:	d514      	bpl.n	80068c2 <_printf_i+0x1ae>
 8006898:	07df      	lsls	r7, r3, #31
 800689a:	bf44      	itt	mi
 800689c:	f043 0320 	orrmi.w	r3, r3, #32
 80068a0:	6023      	strmi	r3, [r4, #0]
 80068a2:	b91e      	cbnz	r6, 80068ac <_printf_i+0x198>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	2310      	movs	r3, #16
 80068ae:	e7af      	b.n	8006810 <_printf_i+0xfc>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	f043 0320 	orr.w	r3, r3, #32
 80068b6:	6023      	str	r3, [r4, #0]
 80068b8:	2378      	movs	r3, #120	; 0x78
 80068ba:	4828      	ldr	r0, [pc, #160]	; (800695c <_printf_i+0x248>)
 80068bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068c0:	e7e3      	b.n	800688a <_printf_i+0x176>
 80068c2:	0659      	lsls	r1, r3, #25
 80068c4:	bf48      	it	mi
 80068c6:	b2b6      	uxthmi	r6, r6
 80068c8:	e7e6      	b.n	8006898 <_printf_i+0x184>
 80068ca:	4615      	mov	r5, r2
 80068cc:	e7bb      	b.n	8006846 <_printf_i+0x132>
 80068ce:	682b      	ldr	r3, [r5, #0]
 80068d0:	6826      	ldr	r6, [r4, #0]
 80068d2:	1d18      	adds	r0, r3, #4
 80068d4:	6961      	ldr	r1, [r4, #20]
 80068d6:	6028      	str	r0, [r5, #0]
 80068d8:	0635      	lsls	r5, r6, #24
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	d501      	bpl.n	80068e2 <_printf_i+0x1ce>
 80068de:	6019      	str	r1, [r3, #0]
 80068e0:	e002      	b.n	80068e8 <_printf_i+0x1d4>
 80068e2:	0670      	lsls	r0, r6, #25
 80068e4:	d5fb      	bpl.n	80068de <_printf_i+0x1ca>
 80068e6:	8019      	strh	r1, [r3, #0]
 80068e8:	2300      	movs	r3, #0
 80068ea:	4615      	mov	r5, r2
 80068ec:	6123      	str	r3, [r4, #16]
 80068ee:	e7ba      	b.n	8006866 <_printf_i+0x152>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	2100      	movs	r1, #0
 80068f4:	1d1a      	adds	r2, r3, #4
 80068f6:	602a      	str	r2, [r5, #0]
 80068f8:	681d      	ldr	r5, [r3, #0]
 80068fa:	6862      	ldr	r2, [r4, #4]
 80068fc:	4628      	mov	r0, r5
 80068fe:	f002 fbab 	bl	8009058 <memchr>
 8006902:	b108      	cbz	r0, 8006908 <_printf_i+0x1f4>
 8006904:	1b40      	subs	r0, r0, r5
 8006906:	6060      	str	r0, [r4, #4]
 8006908:	6863      	ldr	r3, [r4, #4]
 800690a:	6123      	str	r3, [r4, #16]
 800690c:	2300      	movs	r3, #0
 800690e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006912:	e7a8      	b.n	8006866 <_printf_i+0x152>
 8006914:	462a      	mov	r2, r5
 8006916:	4649      	mov	r1, r9
 8006918:	4640      	mov	r0, r8
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	47d0      	blx	sl
 800691e:	3001      	adds	r0, #1
 8006920:	d0ab      	beq.n	800687a <_printf_i+0x166>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	079b      	lsls	r3, r3, #30
 8006926:	d413      	bmi.n	8006950 <_printf_i+0x23c>
 8006928:	68e0      	ldr	r0, [r4, #12]
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	4298      	cmp	r0, r3
 800692e:	bfb8      	it	lt
 8006930:	4618      	movlt	r0, r3
 8006932:	e7a4      	b.n	800687e <_printf_i+0x16a>
 8006934:	2301      	movs	r3, #1
 8006936:	4632      	mov	r2, r6
 8006938:	4649      	mov	r1, r9
 800693a:	4640      	mov	r0, r8
 800693c:	47d0      	blx	sl
 800693e:	3001      	adds	r0, #1
 8006940:	d09b      	beq.n	800687a <_printf_i+0x166>
 8006942:	3501      	adds	r5, #1
 8006944:	68e3      	ldr	r3, [r4, #12]
 8006946:	9903      	ldr	r1, [sp, #12]
 8006948:	1a5b      	subs	r3, r3, r1
 800694a:	42ab      	cmp	r3, r5
 800694c:	dcf2      	bgt.n	8006934 <_printf_i+0x220>
 800694e:	e7eb      	b.n	8006928 <_printf_i+0x214>
 8006950:	2500      	movs	r5, #0
 8006952:	f104 0619 	add.w	r6, r4, #25
 8006956:	e7f5      	b.n	8006944 <_printf_i+0x230>
 8006958:	0800ab36 	.word	0x0800ab36
 800695c:	0800ab47 	.word	0x0800ab47

08006960 <_scanf_float>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	b087      	sub	sp, #28
 8006966:	9303      	str	r3, [sp, #12]
 8006968:	688b      	ldr	r3, [r1, #8]
 800696a:	4617      	mov	r7, r2
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006972:	bf85      	ittet	hi
 8006974:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006978:	195b      	addhi	r3, r3, r5
 800697a:	2300      	movls	r3, #0
 800697c:	9302      	strhi	r3, [sp, #8]
 800697e:	bf88      	it	hi
 8006980:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006984:	468b      	mov	fp, r1
 8006986:	f04f 0500 	mov.w	r5, #0
 800698a:	bf8c      	ite	hi
 800698c:	608b      	strhi	r3, [r1, #8]
 800698e:	9302      	strls	r3, [sp, #8]
 8006990:	680b      	ldr	r3, [r1, #0]
 8006992:	4680      	mov	r8, r0
 8006994:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006998:	f84b 3b1c 	str.w	r3, [fp], #28
 800699c:	460c      	mov	r4, r1
 800699e:	465e      	mov	r6, fp
 80069a0:	46aa      	mov	sl, r5
 80069a2:	46a9      	mov	r9, r5
 80069a4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80069a8:	9501      	str	r5, [sp, #4]
 80069aa:	68a2      	ldr	r2, [r4, #8]
 80069ac:	b152      	cbz	r2, 80069c4 <_scanf_float+0x64>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b4e      	cmp	r3, #78	; 0x4e
 80069b4:	d864      	bhi.n	8006a80 <_scanf_float+0x120>
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d83c      	bhi.n	8006a34 <_scanf_float+0xd4>
 80069ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80069be:	b2c8      	uxtb	r0, r1
 80069c0:	280e      	cmp	r0, #14
 80069c2:	d93a      	bls.n	8006a3a <_scanf_float+0xda>
 80069c4:	f1b9 0f00 	cmp.w	r9, #0
 80069c8:	d003      	beq.n	80069d2 <_scanf_float+0x72>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069d6:	f1ba 0f01 	cmp.w	sl, #1
 80069da:	f200 8113 	bhi.w	8006c04 <_scanf_float+0x2a4>
 80069de:	455e      	cmp	r6, fp
 80069e0:	f200 8105 	bhi.w	8006bee <_scanf_float+0x28e>
 80069e4:	2501      	movs	r5, #1
 80069e6:	4628      	mov	r0, r5
 80069e8:	b007      	add	sp, #28
 80069ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80069f2:	2a0d      	cmp	r2, #13
 80069f4:	d8e6      	bhi.n	80069c4 <_scanf_float+0x64>
 80069f6:	a101      	add	r1, pc, #4	; (adr r1, 80069fc <_scanf_float+0x9c>)
 80069f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069fc:	08006b3b 	.word	0x08006b3b
 8006a00:	080069c5 	.word	0x080069c5
 8006a04:	080069c5 	.word	0x080069c5
 8006a08:	080069c5 	.word	0x080069c5
 8006a0c:	08006b9b 	.word	0x08006b9b
 8006a10:	08006b73 	.word	0x08006b73
 8006a14:	080069c5 	.word	0x080069c5
 8006a18:	080069c5 	.word	0x080069c5
 8006a1c:	08006b49 	.word	0x08006b49
 8006a20:	080069c5 	.word	0x080069c5
 8006a24:	080069c5 	.word	0x080069c5
 8006a28:	080069c5 	.word	0x080069c5
 8006a2c:	080069c5 	.word	0x080069c5
 8006a30:	08006b01 	.word	0x08006b01
 8006a34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a38:	e7db      	b.n	80069f2 <_scanf_float+0x92>
 8006a3a:	290e      	cmp	r1, #14
 8006a3c:	d8c2      	bhi.n	80069c4 <_scanf_float+0x64>
 8006a3e:	a001      	add	r0, pc, #4	; (adr r0, 8006a44 <_scanf_float+0xe4>)
 8006a40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a44:	08006af3 	.word	0x08006af3
 8006a48:	080069c5 	.word	0x080069c5
 8006a4c:	08006af3 	.word	0x08006af3
 8006a50:	08006b87 	.word	0x08006b87
 8006a54:	080069c5 	.word	0x080069c5
 8006a58:	08006aa1 	.word	0x08006aa1
 8006a5c:	08006add 	.word	0x08006add
 8006a60:	08006add 	.word	0x08006add
 8006a64:	08006add 	.word	0x08006add
 8006a68:	08006add 	.word	0x08006add
 8006a6c:	08006add 	.word	0x08006add
 8006a70:	08006add 	.word	0x08006add
 8006a74:	08006add 	.word	0x08006add
 8006a78:	08006add 	.word	0x08006add
 8006a7c:	08006add 	.word	0x08006add
 8006a80:	2b6e      	cmp	r3, #110	; 0x6e
 8006a82:	d809      	bhi.n	8006a98 <_scanf_float+0x138>
 8006a84:	2b60      	cmp	r3, #96	; 0x60
 8006a86:	d8b2      	bhi.n	80069ee <_scanf_float+0x8e>
 8006a88:	2b54      	cmp	r3, #84	; 0x54
 8006a8a:	d077      	beq.n	8006b7c <_scanf_float+0x21c>
 8006a8c:	2b59      	cmp	r3, #89	; 0x59
 8006a8e:	d199      	bne.n	80069c4 <_scanf_float+0x64>
 8006a90:	2d07      	cmp	r5, #7
 8006a92:	d197      	bne.n	80069c4 <_scanf_float+0x64>
 8006a94:	2508      	movs	r5, #8
 8006a96:	e029      	b.n	8006aec <_scanf_float+0x18c>
 8006a98:	2b74      	cmp	r3, #116	; 0x74
 8006a9a:	d06f      	beq.n	8006b7c <_scanf_float+0x21c>
 8006a9c:	2b79      	cmp	r3, #121	; 0x79
 8006a9e:	e7f6      	b.n	8006a8e <_scanf_float+0x12e>
 8006aa0:	6821      	ldr	r1, [r4, #0]
 8006aa2:	05c8      	lsls	r0, r1, #23
 8006aa4:	d51a      	bpl.n	8006adc <_scanf_float+0x17c>
 8006aa6:	9b02      	ldr	r3, [sp, #8]
 8006aa8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006aac:	6021      	str	r1, [r4, #0]
 8006aae:	f109 0901 	add.w	r9, r9, #1
 8006ab2:	b11b      	cbz	r3, 8006abc <_scanf_float+0x15c>
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	3201      	adds	r2, #1
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	60a2      	str	r2, [r4, #8]
 8006abc:	68a3      	ldr	r3, [r4, #8]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	60a3      	str	r3, [r4, #8]
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	f340 8084 	ble.w	8006bdc <_scanf_float+0x27c>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	e766      	b.n	80069aa <_scanf_float+0x4a>
 8006adc:	eb1a 0f05 	cmn.w	sl, r5
 8006ae0:	f47f af70 	bne.w	80069c4 <_scanf_float+0x64>
 8006ae4:	6822      	ldr	r2, [r4, #0]
 8006ae6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006aea:	6022      	str	r2, [r4, #0]
 8006aec:	f806 3b01 	strb.w	r3, [r6], #1
 8006af0:	e7e4      	b.n	8006abc <_scanf_float+0x15c>
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	0610      	lsls	r0, r2, #24
 8006af6:	f57f af65 	bpl.w	80069c4 <_scanf_float+0x64>
 8006afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006afe:	e7f4      	b.n	8006aea <_scanf_float+0x18a>
 8006b00:	f1ba 0f00 	cmp.w	sl, #0
 8006b04:	d10e      	bne.n	8006b24 <_scanf_float+0x1c4>
 8006b06:	f1b9 0f00 	cmp.w	r9, #0
 8006b0a:	d10e      	bne.n	8006b2a <_scanf_float+0x1ca>
 8006b0c:	6822      	ldr	r2, [r4, #0]
 8006b0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b16:	d108      	bne.n	8006b2a <_scanf_float+0x1ca>
 8006b18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b1c:	f04f 0a01 	mov.w	sl, #1
 8006b20:	6022      	str	r2, [r4, #0]
 8006b22:	e7e3      	b.n	8006aec <_scanf_float+0x18c>
 8006b24:	f1ba 0f02 	cmp.w	sl, #2
 8006b28:	d055      	beq.n	8006bd6 <_scanf_float+0x276>
 8006b2a:	2d01      	cmp	r5, #1
 8006b2c:	d002      	beq.n	8006b34 <_scanf_float+0x1d4>
 8006b2e:	2d04      	cmp	r5, #4
 8006b30:	f47f af48 	bne.w	80069c4 <_scanf_float+0x64>
 8006b34:	3501      	adds	r5, #1
 8006b36:	b2ed      	uxtb	r5, r5
 8006b38:	e7d8      	b.n	8006aec <_scanf_float+0x18c>
 8006b3a:	f1ba 0f01 	cmp.w	sl, #1
 8006b3e:	f47f af41 	bne.w	80069c4 <_scanf_float+0x64>
 8006b42:	f04f 0a02 	mov.w	sl, #2
 8006b46:	e7d1      	b.n	8006aec <_scanf_float+0x18c>
 8006b48:	b97d      	cbnz	r5, 8006b6a <_scanf_float+0x20a>
 8006b4a:	f1b9 0f00 	cmp.w	r9, #0
 8006b4e:	f47f af3c 	bne.w	80069ca <_scanf_float+0x6a>
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b5c:	f47f af39 	bne.w	80069d2 <_scanf_float+0x72>
 8006b60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b64:	2501      	movs	r5, #1
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	e7c0      	b.n	8006aec <_scanf_float+0x18c>
 8006b6a:	2d03      	cmp	r5, #3
 8006b6c:	d0e2      	beq.n	8006b34 <_scanf_float+0x1d4>
 8006b6e:	2d05      	cmp	r5, #5
 8006b70:	e7de      	b.n	8006b30 <_scanf_float+0x1d0>
 8006b72:	2d02      	cmp	r5, #2
 8006b74:	f47f af26 	bne.w	80069c4 <_scanf_float+0x64>
 8006b78:	2503      	movs	r5, #3
 8006b7a:	e7b7      	b.n	8006aec <_scanf_float+0x18c>
 8006b7c:	2d06      	cmp	r5, #6
 8006b7e:	f47f af21 	bne.w	80069c4 <_scanf_float+0x64>
 8006b82:	2507      	movs	r5, #7
 8006b84:	e7b2      	b.n	8006aec <_scanf_float+0x18c>
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	0591      	lsls	r1, r2, #22
 8006b8a:	f57f af1b 	bpl.w	80069c4 <_scanf_float+0x64>
 8006b8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b92:	6022      	str	r2, [r4, #0]
 8006b94:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b98:	e7a8      	b.n	8006aec <_scanf_float+0x18c>
 8006b9a:	6822      	ldr	r2, [r4, #0]
 8006b9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ba0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ba4:	d006      	beq.n	8006bb4 <_scanf_float+0x254>
 8006ba6:	0550      	lsls	r0, r2, #21
 8006ba8:	f57f af0c 	bpl.w	80069c4 <_scanf_float+0x64>
 8006bac:	f1b9 0f00 	cmp.w	r9, #0
 8006bb0:	f43f af0f 	beq.w	80069d2 <_scanf_float+0x72>
 8006bb4:	0591      	lsls	r1, r2, #22
 8006bb6:	bf58      	it	pl
 8006bb8:	9901      	ldrpl	r1, [sp, #4]
 8006bba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bbe:	bf58      	it	pl
 8006bc0:	eba9 0101 	subpl.w	r1, r9, r1
 8006bc4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006bc8:	f04f 0900 	mov.w	r9, #0
 8006bcc:	bf58      	it	pl
 8006bce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006bd2:	6022      	str	r2, [r4, #0]
 8006bd4:	e78a      	b.n	8006aec <_scanf_float+0x18c>
 8006bd6:	f04f 0a03 	mov.w	sl, #3
 8006bda:	e787      	b.n	8006aec <_scanf_float+0x18c>
 8006bdc:	4639      	mov	r1, r7
 8006bde:	4640      	mov	r0, r8
 8006be0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006be4:	4798      	blx	r3
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f43f aedf 	beq.w	80069aa <_scanf_float+0x4a>
 8006bec:	e6ea      	b.n	80069c4 <_scanf_float+0x64>
 8006bee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bf2:	463a      	mov	r2, r7
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bfa:	4798      	blx	r3
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	6123      	str	r3, [r4, #16]
 8006c02:	e6ec      	b.n	80069de <_scanf_float+0x7e>
 8006c04:	1e6b      	subs	r3, r5, #1
 8006c06:	2b06      	cmp	r3, #6
 8006c08:	d825      	bhi.n	8006c56 <_scanf_float+0x2f6>
 8006c0a:	2d02      	cmp	r5, #2
 8006c0c:	d836      	bhi.n	8006c7c <_scanf_float+0x31c>
 8006c0e:	455e      	cmp	r6, fp
 8006c10:	f67f aee8 	bls.w	80069e4 <_scanf_float+0x84>
 8006c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c18:	463a      	mov	r2, r7
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c20:	4798      	blx	r3
 8006c22:	6923      	ldr	r3, [r4, #16]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	6123      	str	r3, [r4, #16]
 8006c28:	e7f1      	b.n	8006c0e <_scanf_float+0x2ae>
 8006c2a:	9802      	ldr	r0, [sp, #8]
 8006c2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c34:	463a      	mov	r2, r7
 8006c36:	9002      	str	r0, [sp, #8]
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4798      	blx	r3
 8006c3c:	6923      	ldr	r3, [r4, #16]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c46:	fa5f fa8a 	uxtb.w	sl, sl
 8006c4a:	f1ba 0f02 	cmp.w	sl, #2
 8006c4e:	d1ec      	bne.n	8006c2a <_scanf_float+0x2ca>
 8006c50:	3d03      	subs	r5, #3
 8006c52:	b2ed      	uxtb	r5, r5
 8006c54:	1b76      	subs	r6, r6, r5
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	05da      	lsls	r2, r3, #23
 8006c5a:	d52f      	bpl.n	8006cbc <_scanf_float+0x35c>
 8006c5c:	055b      	lsls	r3, r3, #21
 8006c5e:	d510      	bpl.n	8006c82 <_scanf_float+0x322>
 8006c60:	455e      	cmp	r6, fp
 8006c62:	f67f aebf 	bls.w	80069e4 <_scanf_float+0x84>
 8006c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c72:	4798      	blx	r3
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	6123      	str	r3, [r4, #16]
 8006c7a:	e7f1      	b.n	8006c60 <_scanf_float+0x300>
 8006c7c:	46aa      	mov	sl, r5
 8006c7e:	9602      	str	r6, [sp, #8]
 8006c80:	e7df      	b.n	8006c42 <_scanf_float+0x2e2>
 8006c82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c86:	6923      	ldr	r3, [r4, #16]
 8006c88:	2965      	cmp	r1, #101	; 0x65
 8006c8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	d00c      	beq.n	8006cb0 <_scanf_float+0x350>
 8006c96:	2945      	cmp	r1, #69	; 0x45
 8006c98:	d00a      	beq.n	8006cb0 <_scanf_float+0x350>
 8006c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4798      	blx	r3
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	1eb5      	subs	r5, r6, #2
 8006cae:	6123      	str	r3, [r4, #16]
 8006cb0:	463a      	mov	r2, r7
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cb8:	4798      	blx	r3
 8006cba:	462e      	mov	r6, r5
 8006cbc:	6825      	ldr	r5, [r4, #0]
 8006cbe:	f015 0510 	ands.w	r5, r5, #16
 8006cc2:	d155      	bne.n	8006d70 <_scanf_float+0x410>
 8006cc4:	7035      	strb	r5, [r6, #0]
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd0:	d11b      	bne.n	8006d0a <_scanf_float+0x3aa>
 8006cd2:	9b01      	ldr	r3, [sp, #4]
 8006cd4:	454b      	cmp	r3, r9
 8006cd6:	eba3 0209 	sub.w	r2, r3, r9
 8006cda:	d123      	bne.n	8006d24 <_scanf_float+0x3c4>
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4659      	mov	r1, fp
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	f000 fe81 	bl	80079e8 <_strtod_r>
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	f012 0f02 	tst.w	r2, #2
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	d021      	beq.n	8006d3a <_scanf_float+0x3da>
 8006cf6:	1d1a      	adds	r2, r3, #4
 8006cf8:	9903      	ldr	r1, [sp, #12]
 8006cfa:	600a      	str	r2, [r1, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	e9c3 6700 	strd	r6, r7, [r3]
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60e3      	str	r3, [r4, #12]
 8006d08:	e66d      	b.n	80069e6 <_scanf_float+0x86>
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0e5      	beq.n	8006cdc <_scanf_float+0x37c>
 8006d10:	9905      	ldr	r1, [sp, #20]
 8006d12:	230a      	movs	r3, #10
 8006d14:	462a      	mov	r2, r5
 8006d16:	4640      	mov	r0, r8
 8006d18:	3101      	adds	r1, #1
 8006d1a:	f000 ff43 	bl	8007ba4 <_strtol_r>
 8006d1e:	9b04      	ldr	r3, [sp, #16]
 8006d20:	9e05      	ldr	r6, [sp, #20]
 8006d22:	1ac2      	subs	r2, r0, r3
 8006d24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d28:	429e      	cmp	r6, r3
 8006d2a:	bf28      	it	cs
 8006d2c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d30:	4630      	mov	r0, r6
 8006d32:	4910      	ldr	r1, [pc, #64]	; (8006d74 <_scanf_float+0x414>)
 8006d34:	f000 f826 	bl	8006d84 <siprintf>
 8006d38:	e7d0      	b.n	8006cdc <_scanf_float+0x37c>
 8006d3a:	f012 0f04 	tst.w	r2, #4
 8006d3e:	f103 0204 	add.w	r2, r3, #4
 8006d42:	d1d9      	bne.n	8006cf8 <_scanf_float+0x398>
 8006d44:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006d48:	f8cc 2000 	str.w	r2, [ip]
 8006d4c:	f8d3 8000 	ldr.w	r8, [r3]
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	f7f9 fe64 	bl	8000a20 <__aeabi_dcmpun>
 8006d58:	b128      	cbz	r0, 8006d66 <_scanf_float+0x406>
 8006d5a:	4807      	ldr	r0, [pc, #28]	; (8006d78 <_scanf_float+0x418>)
 8006d5c:	f000 f80e 	bl	8006d7c <nanf>
 8006d60:	f8c8 0000 	str.w	r0, [r8]
 8006d64:	e7cd      	b.n	8006d02 <_scanf_float+0x3a2>
 8006d66:	4630      	mov	r0, r6
 8006d68:	4639      	mov	r1, r7
 8006d6a:	f7f9 feb7 	bl	8000adc <__aeabi_d2f>
 8006d6e:	e7f7      	b.n	8006d60 <_scanf_float+0x400>
 8006d70:	2500      	movs	r5, #0
 8006d72:	e638      	b.n	80069e6 <_scanf_float+0x86>
 8006d74:	0800ab58 	.word	0x0800ab58
 8006d78:	0800ac5f 	.word	0x0800ac5f

08006d7c <nanf>:
 8006d7c:	4800      	ldr	r0, [pc, #0]	; (8006d80 <nanf+0x4>)
 8006d7e:	4770      	bx	lr
 8006d80:	7fc00000 	.word	0x7fc00000

08006d84 <siprintf>:
 8006d84:	b40e      	push	{r1, r2, r3}
 8006d86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d8a:	b500      	push	{lr}
 8006d8c:	b09c      	sub	sp, #112	; 0x70
 8006d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d90:	9002      	str	r0, [sp, #8]
 8006d92:	9006      	str	r0, [sp, #24]
 8006d94:	9107      	str	r1, [sp, #28]
 8006d96:	9104      	str	r1, [sp, #16]
 8006d98:	4808      	ldr	r0, [pc, #32]	; (8006dbc <siprintf+0x38>)
 8006d9a:	4909      	ldr	r1, [pc, #36]	; (8006dc0 <siprintf+0x3c>)
 8006d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da0:	9105      	str	r1, [sp, #20]
 8006da2:	6800      	ldr	r0, [r0, #0]
 8006da4:	a902      	add	r1, sp, #8
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	f002 ff76 	bl	8009c98 <_svfiprintf_r>
 8006dac:	2200      	movs	r2, #0
 8006dae:	9b02      	ldr	r3, [sp, #8]
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	b01c      	add	sp, #112	; 0x70
 8006db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db8:	b003      	add	sp, #12
 8006dba:	4770      	bx	lr
 8006dbc:	2000006c 	.word	0x2000006c
 8006dc0:	ffff0208 	.word	0xffff0208

08006dc4 <strcpy>:
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dca:	f803 2b01 	strb.w	r2, [r3], #1
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	d1f9      	bne.n	8006dc6 <strcpy+0x2>
 8006dd2:	4770      	bx	lr

08006dd4 <sulp>:
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	460f      	mov	r7, r1
 8006dda:	4690      	mov	r8, r2
 8006ddc:	f002 fcc8 	bl	8009770 <__ulp>
 8006de0:	4604      	mov	r4, r0
 8006de2:	460d      	mov	r5, r1
 8006de4:	f1b8 0f00 	cmp.w	r8, #0
 8006de8:	d011      	beq.n	8006e0e <sulp+0x3a>
 8006dea:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006dee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dd0b      	ble.n	8006e0e <sulp+0x3a>
 8006df6:	2400      	movs	r4, #0
 8006df8:	051b      	lsls	r3, r3, #20
 8006dfa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006dfe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e02:	4622      	mov	r2, r4
 8006e04:	462b      	mov	r3, r5
 8006e06:	f7f9 fb71 	bl	80004ec <__aeabi_dmul>
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	4620      	mov	r0, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006e18 <_strtod_l>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	469b      	mov	fp, r3
 8006e1e:	2300      	movs	r3, #0
 8006e20:	b09f      	sub	sp, #124	; 0x7c
 8006e22:	931a      	str	r3, [sp, #104]	; 0x68
 8006e24:	4b9e      	ldr	r3, [pc, #632]	; (80070a0 <_strtod_l+0x288>)
 8006e26:	4682      	mov	sl, r0
 8006e28:	681f      	ldr	r7, [r3, #0]
 8006e2a:	460e      	mov	r6, r1
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	9215      	str	r2, [sp, #84]	; 0x54
 8006e30:	f7f9 f998 	bl	8000164 <strlen>
 8006e34:	f04f 0800 	mov.w	r8, #0
 8006e38:	4604      	mov	r4, r0
 8006e3a:	f04f 0900 	mov.w	r9, #0
 8006e3e:	9619      	str	r6, [sp, #100]	; 0x64
 8006e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	2a2b      	cmp	r2, #43	; 0x2b
 8006e46:	d04c      	beq.n	8006ee2 <_strtod_l+0xca>
 8006e48:	d83a      	bhi.n	8006ec0 <_strtod_l+0xa8>
 8006e4a:	2a0d      	cmp	r2, #13
 8006e4c:	d833      	bhi.n	8006eb6 <_strtod_l+0x9e>
 8006e4e:	2a08      	cmp	r2, #8
 8006e50:	d833      	bhi.n	8006eba <_strtod_l+0xa2>
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	d03d      	beq.n	8006ed2 <_strtod_l+0xba>
 8006e56:	2300      	movs	r3, #0
 8006e58:	930a      	str	r3, [sp, #40]	; 0x28
 8006e5a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006e5c:	782b      	ldrb	r3, [r5, #0]
 8006e5e:	2b30      	cmp	r3, #48	; 0x30
 8006e60:	f040 80aa 	bne.w	8006fb8 <_strtod_l+0x1a0>
 8006e64:	786b      	ldrb	r3, [r5, #1]
 8006e66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e6a:	2b58      	cmp	r3, #88	; 0x58
 8006e6c:	d166      	bne.n	8006f3c <_strtod_l+0x124>
 8006e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e70:	4650      	mov	r0, sl
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	ab1a      	add	r3, sp, #104	; 0x68
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4a8a      	ldr	r2, [pc, #552]	; (80070a4 <_strtod_l+0x28c>)
 8006e7a:	f8cd b008 	str.w	fp, [sp, #8]
 8006e7e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006e80:	a919      	add	r1, sp, #100	; 0x64
 8006e82:	f001 fdcd 	bl	8008a20 <__gethex>
 8006e86:	f010 0607 	ands.w	r6, r0, #7
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	d005      	beq.n	8006e9a <_strtod_l+0x82>
 8006e8e:	2e06      	cmp	r6, #6
 8006e90:	d129      	bne.n	8006ee6 <_strtod_l+0xce>
 8006e92:	2300      	movs	r3, #0
 8006e94:	3501      	adds	r5, #1
 8006e96:	9519      	str	r5, [sp, #100]	; 0x64
 8006e98:	930a      	str	r3, [sp, #40]	; 0x28
 8006e9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 858a 	bne.w	80079b6 <_strtod_l+0xb9e>
 8006ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea4:	b1d3      	cbz	r3, 8006edc <_strtod_l+0xc4>
 8006ea6:	4642      	mov	r2, r8
 8006ea8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006eac:	4610      	mov	r0, r2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	b01f      	add	sp, #124	; 0x7c
 8006eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb6:	2a20      	cmp	r2, #32
 8006eb8:	d1cd      	bne.n	8006e56 <_strtod_l+0x3e>
 8006eba:	3301      	adds	r3, #1
 8006ebc:	9319      	str	r3, [sp, #100]	; 0x64
 8006ebe:	e7bf      	b.n	8006e40 <_strtod_l+0x28>
 8006ec0:	2a2d      	cmp	r2, #45	; 0x2d
 8006ec2:	d1c8      	bne.n	8006e56 <_strtod_l+0x3e>
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	9219      	str	r2, [sp, #100]	; 0x64
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1c3      	bne.n	8006e5a <_strtod_l+0x42>
 8006ed2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ed4:	9619      	str	r6, [sp, #100]	; 0x64
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f040 856b 	bne.w	80079b2 <_strtod_l+0xb9a>
 8006edc:	4642      	mov	r2, r8
 8006ede:	464b      	mov	r3, r9
 8006ee0:	e7e4      	b.n	8006eac <_strtod_l+0x94>
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	e7ef      	b.n	8006ec6 <_strtod_l+0xae>
 8006ee6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ee8:	b13a      	cbz	r2, 8006efa <_strtod_l+0xe2>
 8006eea:	2135      	movs	r1, #53	; 0x35
 8006eec:	a81c      	add	r0, sp, #112	; 0x70
 8006eee:	f002 fd43 	bl	8009978 <__copybits>
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ef6:	f002 f90b 	bl	8009110 <_Bfree>
 8006efa:	3e01      	subs	r6, #1
 8006efc:	2e04      	cmp	r6, #4
 8006efe:	d806      	bhi.n	8006f0e <_strtod_l+0xf6>
 8006f00:	e8df f006 	tbb	[pc, r6]
 8006f04:	1714030a 	.word	0x1714030a
 8006f08:	0a          	.byte	0x0a
 8006f09:	00          	.byte	0x00
 8006f0a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006f0e:	0721      	lsls	r1, r4, #28
 8006f10:	d5c3      	bpl.n	8006e9a <_strtod_l+0x82>
 8006f12:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006f16:	e7c0      	b.n	8006e9a <_strtod_l+0x82>
 8006f18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006f1a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006f1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f26:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006f2a:	e7f0      	b.n	8006f0e <_strtod_l+0xf6>
 8006f2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80070a8 <_strtod_l+0x290>
 8006f30:	e7ed      	b.n	8006f0e <_strtod_l+0xf6>
 8006f32:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006f36:	f04f 38ff 	mov.w	r8, #4294967295
 8006f3a:	e7e8      	b.n	8006f0e <_strtod_l+0xf6>
 8006f3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	9219      	str	r2, [sp, #100]	; 0x64
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	2b30      	cmp	r3, #48	; 0x30
 8006f46:	d0f9      	beq.n	8006f3c <_strtod_l+0x124>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0a6      	beq.n	8006e9a <_strtod_l+0x82>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	9307      	str	r3, [sp, #28]
 8006f50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f52:	220a      	movs	r2, #10
 8006f54:	9308      	str	r3, [sp, #32]
 8006f56:	2300      	movs	r3, #0
 8006f58:	469b      	mov	fp, r3
 8006f5a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006f5e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006f60:	7805      	ldrb	r5, [r0, #0]
 8006f62:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006f66:	b2d9      	uxtb	r1, r3
 8006f68:	2909      	cmp	r1, #9
 8006f6a:	d927      	bls.n	8006fbc <_strtod_l+0x1a4>
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	4639      	mov	r1, r7
 8006f70:	f003 f900 	bl	800a174 <strncmp>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d033      	beq.n	8006fe0 <_strtod_l+0x1c8>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	465c      	mov	r4, fp
 8006f7e:	4603      	mov	r3, r0
 8006f80:	9004      	str	r0, [sp, #16]
 8006f82:	2a65      	cmp	r2, #101	; 0x65
 8006f84:	d001      	beq.n	8006f8a <_strtod_l+0x172>
 8006f86:	2a45      	cmp	r2, #69	; 0x45
 8006f88:	d114      	bne.n	8006fb4 <_strtod_l+0x19c>
 8006f8a:	b91c      	cbnz	r4, 8006f94 <_strtod_l+0x17c>
 8006f8c:	9a07      	ldr	r2, [sp, #28]
 8006f8e:	4302      	orrs	r2, r0
 8006f90:	d09f      	beq.n	8006ed2 <_strtod_l+0xba>
 8006f92:	2400      	movs	r4, #0
 8006f94:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f96:	1c72      	adds	r2, r6, #1
 8006f98:	9219      	str	r2, [sp, #100]	; 0x64
 8006f9a:	7872      	ldrb	r2, [r6, #1]
 8006f9c:	2a2b      	cmp	r2, #43	; 0x2b
 8006f9e:	d079      	beq.n	8007094 <_strtod_l+0x27c>
 8006fa0:	2a2d      	cmp	r2, #45	; 0x2d
 8006fa2:	f000 8083 	beq.w	80070ac <_strtod_l+0x294>
 8006fa6:	2700      	movs	r7, #0
 8006fa8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fac:	2909      	cmp	r1, #9
 8006fae:	f240 8083 	bls.w	80070b8 <_strtod_l+0x2a0>
 8006fb2:	9619      	str	r6, [sp, #100]	; 0x64
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	e09f      	b.n	80070f8 <_strtod_l+0x2e0>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e7c8      	b.n	8006f4e <_strtod_l+0x136>
 8006fbc:	f1bb 0f08 	cmp.w	fp, #8
 8006fc0:	bfd5      	itete	le
 8006fc2:	9906      	ldrle	r1, [sp, #24]
 8006fc4:	9905      	ldrgt	r1, [sp, #20]
 8006fc6:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fca:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006fce:	f100 0001 	add.w	r0, r0, #1
 8006fd2:	bfd4      	ite	le
 8006fd4:	9306      	strle	r3, [sp, #24]
 8006fd6:	9305      	strgt	r3, [sp, #20]
 8006fd8:	f10b 0b01 	add.w	fp, fp, #1
 8006fdc:	9019      	str	r0, [sp, #100]	; 0x64
 8006fde:	e7be      	b.n	8006f5e <_strtod_l+0x146>
 8006fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fe2:	191a      	adds	r2, r3, r4
 8006fe4:	9219      	str	r2, [sp, #100]	; 0x64
 8006fe6:	5d1a      	ldrb	r2, [r3, r4]
 8006fe8:	f1bb 0f00 	cmp.w	fp, #0
 8006fec:	d036      	beq.n	800705c <_strtod_l+0x244>
 8006fee:	465c      	mov	r4, fp
 8006ff0:	9004      	str	r0, [sp, #16]
 8006ff2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d912      	bls.n	8007020 <_strtod_l+0x208>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e7c1      	b.n	8006f82 <_strtod_l+0x16a>
 8006ffe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007000:	3001      	adds	r0, #1
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	9219      	str	r2, [sp, #100]	; 0x64
 8007006:	785a      	ldrb	r2, [r3, #1]
 8007008:	2a30      	cmp	r2, #48	; 0x30
 800700a:	d0f8      	beq.n	8006ffe <_strtod_l+0x1e6>
 800700c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007010:	2b08      	cmp	r3, #8
 8007012:	f200 84d5 	bhi.w	80079c0 <_strtod_l+0xba8>
 8007016:	9004      	str	r0, [sp, #16]
 8007018:	2000      	movs	r0, #0
 800701a:	4604      	mov	r4, r0
 800701c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800701e:	9308      	str	r3, [sp, #32]
 8007020:	3a30      	subs	r2, #48	; 0x30
 8007022:	f100 0301 	add.w	r3, r0, #1
 8007026:	d013      	beq.n	8007050 <_strtod_l+0x238>
 8007028:	9904      	ldr	r1, [sp, #16]
 800702a:	1905      	adds	r5, r0, r4
 800702c:	4419      	add	r1, r3
 800702e:	9104      	str	r1, [sp, #16]
 8007030:	4623      	mov	r3, r4
 8007032:	210a      	movs	r1, #10
 8007034:	42ab      	cmp	r3, r5
 8007036:	d113      	bne.n	8007060 <_strtod_l+0x248>
 8007038:	1823      	adds	r3, r4, r0
 800703a:	2b08      	cmp	r3, #8
 800703c:	f104 0401 	add.w	r4, r4, #1
 8007040:	4404      	add	r4, r0
 8007042:	dc1b      	bgt.n	800707c <_strtod_l+0x264>
 8007044:	230a      	movs	r3, #10
 8007046:	9906      	ldr	r1, [sp, #24]
 8007048:	fb03 2301 	mla	r3, r3, r1, r2
 800704c:	9306      	str	r3, [sp, #24]
 800704e:	2300      	movs	r3, #0
 8007050:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007052:	4618      	mov	r0, r3
 8007054:	1c51      	adds	r1, r2, #1
 8007056:	9119      	str	r1, [sp, #100]	; 0x64
 8007058:	7852      	ldrb	r2, [r2, #1]
 800705a:	e7ca      	b.n	8006ff2 <_strtod_l+0x1da>
 800705c:	4658      	mov	r0, fp
 800705e:	e7d3      	b.n	8007008 <_strtod_l+0x1f0>
 8007060:	2b08      	cmp	r3, #8
 8007062:	dc04      	bgt.n	800706e <_strtod_l+0x256>
 8007064:	9f06      	ldr	r7, [sp, #24]
 8007066:	434f      	muls	r7, r1
 8007068:	9706      	str	r7, [sp, #24]
 800706a:	3301      	adds	r3, #1
 800706c:	e7e2      	b.n	8007034 <_strtod_l+0x21c>
 800706e:	1c5f      	adds	r7, r3, #1
 8007070:	2f10      	cmp	r7, #16
 8007072:	bfde      	ittt	le
 8007074:	9f05      	ldrle	r7, [sp, #20]
 8007076:	434f      	mulle	r7, r1
 8007078:	9705      	strle	r7, [sp, #20]
 800707a:	e7f6      	b.n	800706a <_strtod_l+0x252>
 800707c:	2c10      	cmp	r4, #16
 800707e:	bfdf      	itttt	le
 8007080:	230a      	movle	r3, #10
 8007082:	9905      	ldrle	r1, [sp, #20]
 8007084:	fb03 2301 	mlale	r3, r3, r1, r2
 8007088:	9305      	strle	r3, [sp, #20]
 800708a:	e7e0      	b.n	800704e <_strtod_l+0x236>
 800708c:	2300      	movs	r3, #0
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	2301      	movs	r3, #1
 8007092:	e77b      	b.n	8006f8c <_strtod_l+0x174>
 8007094:	2700      	movs	r7, #0
 8007096:	1cb2      	adds	r2, r6, #2
 8007098:	9219      	str	r2, [sp, #100]	; 0x64
 800709a:	78b2      	ldrb	r2, [r6, #2]
 800709c:	e784      	b.n	8006fa8 <_strtod_l+0x190>
 800709e:	bf00      	nop
 80070a0:	0800ae40 	.word	0x0800ae40
 80070a4:	0800ab60 	.word	0x0800ab60
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	2701      	movs	r7, #1
 80070ae:	e7f2      	b.n	8007096 <_strtod_l+0x27e>
 80070b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070b2:	1c51      	adds	r1, r2, #1
 80070b4:	9119      	str	r1, [sp, #100]	; 0x64
 80070b6:	7852      	ldrb	r2, [r2, #1]
 80070b8:	2a30      	cmp	r2, #48	; 0x30
 80070ba:	d0f9      	beq.n	80070b0 <_strtod_l+0x298>
 80070bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80070c0:	2908      	cmp	r1, #8
 80070c2:	f63f af77 	bhi.w	8006fb4 <_strtod_l+0x19c>
 80070c6:	f04f 0e0a 	mov.w	lr, #10
 80070ca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80070ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070d0:	9209      	str	r2, [sp, #36]	; 0x24
 80070d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070d4:	1c51      	adds	r1, r2, #1
 80070d6:	9119      	str	r1, [sp, #100]	; 0x64
 80070d8:	7852      	ldrb	r2, [r2, #1]
 80070da:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80070de:	2d09      	cmp	r5, #9
 80070e0:	d935      	bls.n	800714e <_strtod_l+0x336>
 80070e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80070e4:	1b49      	subs	r1, r1, r5
 80070e6:	2908      	cmp	r1, #8
 80070e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80070ec:	dc02      	bgt.n	80070f4 <_strtod_l+0x2dc>
 80070ee:	4565      	cmp	r5, ip
 80070f0:	bfa8      	it	ge
 80070f2:	4665      	movge	r5, ip
 80070f4:	b107      	cbz	r7, 80070f8 <_strtod_l+0x2e0>
 80070f6:	426d      	negs	r5, r5
 80070f8:	2c00      	cmp	r4, #0
 80070fa:	d14c      	bne.n	8007196 <_strtod_l+0x37e>
 80070fc:	9907      	ldr	r1, [sp, #28]
 80070fe:	4301      	orrs	r1, r0
 8007100:	f47f aecb 	bne.w	8006e9a <_strtod_l+0x82>
 8007104:	2b00      	cmp	r3, #0
 8007106:	f47f aee4 	bne.w	8006ed2 <_strtod_l+0xba>
 800710a:	2a69      	cmp	r2, #105	; 0x69
 800710c:	d026      	beq.n	800715c <_strtod_l+0x344>
 800710e:	dc23      	bgt.n	8007158 <_strtod_l+0x340>
 8007110:	2a49      	cmp	r2, #73	; 0x49
 8007112:	d023      	beq.n	800715c <_strtod_l+0x344>
 8007114:	2a4e      	cmp	r2, #78	; 0x4e
 8007116:	f47f aedc 	bne.w	8006ed2 <_strtod_l+0xba>
 800711a:	499d      	ldr	r1, [pc, #628]	; (8007390 <_strtod_l+0x578>)
 800711c:	a819      	add	r0, sp, #100	; 0x64
 800711e:	f001 fecd 	bl	8008ebc <__match>
 8007122:	2800      	cmp	r0, #0
 8007124:	f43f aed5 	beq.w	8006ed2 <_strtod_l+0xba>
 8007128:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b28      	cmp	r3, #40	; 0x28
 800712e:	d12c      	bne.n	800718a <_strtod_l+0x372>
 8007130:	4998      	ldr	r1, [pc, #608]	; (8007394 <_strtod_l+0x57c>)
 8007132:	aa1c      	add	r2, sp, #112	; 0x70
 8007134:	a819      	add	r0, sp, #100	; 0x64
 8007136:	f001 fed5 	bl	8008ee4 <__hexnan>
 800713a:	2805      	cmp	r0, #5
 800713c:	d125      	bne.n	800718a <_strtod_l+0x372>
 800713e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007140:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007144:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007148:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800714c:	e6a5      	b.n	8006e9a <_strtod_l+0x82>
 800714e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007152:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007156:	e7bc      	b.n	80070d2 <_strtod_l+0x2ba>
 8007158:	2a6e      	cmp	r2, #110	; 0x6e
 800715a:	e7dc      	b.n	8007116 <_strtod_l+0x2fe>
 800715c:	498e      	ldr	r1, [pc, #568]	; (8007398 <_strtod_l+0x580>)
 800715e:	a819      	add	r0, sp, #100	; 0x64
 8007160:	f001 feac 	bl	8008ebc <__match>
 8007164:	2800      	cmp	r0, #0
 8007166:	f43f aeb4 	beq.w	8006ed2 <_strtod_l+0xba>
 800716a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800716c:	498b      	ldr	r1, [pc, #556]	; (800739c <_strtod_l+0x584>)
 800716e:	3b01      	subs	r3, #1
 8007170:	a819      	add	r0, sp, #100	; 0x64
 8007172:	9319      	str	r3, [sp, #100]	; 0x64
 8007174:	f001 fea2 	bl	8008ebc <__match>
 8007178:	b910      	cbnz	r0, 8007180 <_strtod_l+0x368>
 800717a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800717c:	3301      	adds	r3, #1
 800717e:	9319      	str	r3, [sp, #100]	; 0x64
 8007180:	f04f 0800 	mov.w	r8, #0
 8007184:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80073a0 <_strtod_l+0x588>
 8007188:	e687      	b.n	8006e9a <_strtod_l+0x82>
 800718a:	4886      	ldr	r0, [pc, #536]	; (80073a4 <_strtod_l+0x58c>)
 800718c:	f002 ffdc 	bl	800a148 <nan>
 8007190:	4680      	mov	r8, r0
 8007192:	4689      	mov	r9, r1
 8007194:	e681      	b.n	8006e9a <_strtod_l+0x82>
 8007196:	9b04      	ldr	r3, [sp, #16]
 8007198:	f1bb 0f00 	cmp.w	fp, #0
 800719c:	bf08      	it	eq
 800719e:	46a3      	moveq	fp, r4
 80071a0:	1aeb      	subs	r3, r5, r3
 80071a2:	2c10      	cmp	r4, #16
 80071a4:	9806      	ldr	r0, [sp, #24]
 80071a6:	4626      	mov	r6, r4
 80071a8:	9307      	str	r3, [sp, #28]
 80071aa:	bfa8      	it	ge
 80071ac:	2610      	movge	r6, #16
 80071ae:	f7f9 f923 	bl	80003f8 <__aeabi_ui2d>
 80071b2:	2c09      	cmp	r4, #9
 80071b4:	4680      	mov	r8, r0
 80071b6:	4689      	mov	r9, r1
 80071b8:	dd13      	ble.n	80071e2 <_strtod_l+0x3ca>
 80071ba:	4b7b      	ldr	r3, [pc, #492]	; (80073a8 <_strtod_l+0x590>)
 80071bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80071c4:	f7f9 f992 	bl	80004ec <__aeabi_dmul>
 80071c8:	4680      	mov	r8, r0
 80071ca:	9805      	ldr	r0, [sp, #20]
 80071cc:	4689      	mov	r9, r1
 80071ce:	f7f9 f913 	bl	80003f8 <__aeabi_ui2d>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4640      	mov	r0, r8
 80071d8:	4649      	mov	r1, r9
 80071da:	f7f8 ffd1 	bl	8000180 <__adddf3>
 80071de:	4680      	mov	r8, r0
 80071e0:	4689      	mov	r9, r1
 80071e2:	2c0f      	cmp	r4, #15
 80071e4:	dc36      	bgt.n	8007254 <_strtod_l+0x43c>
 80071e6:	9b07      	ldr	r3, [sp, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f43f ae56 	beq.w	8006e9a <_strtod_l+0x82>
 80071ee:	dd22      	ble.n	8007236 <_strtod_l+0x41e>
 80071f0:	2b16      	cmp	r3, #22
 80071f2:	dc09      	bgt.n	8007208 <_strtod_l+0x3f0>
 80071f4:	496c      	ldr	r1, [pc, #432]	; (80073a8 <_strtod_l+0x590>)
 80071f6:	4642      	mov	r2, r8
 80071f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071fc:	464b      	mov	r3, r9
 80071fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007202:	f7f9 f973 	bl	80004ec <__aeabi_dmul>
 8007206:	e7c3      	b.n	8007190 <_strtod_l+0x378>
 8007208:	9a07      	ldr	r2, [sp, #28]
 800720a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800720e:	4293      	cmp	r3, r2
 8007210:	db20      	blt.n	8007254 <_strtod_l+0x43c>
 8007212:	4d65      	ldr	r5, [pc, #404]	; (80073a8 <_strtod_l+0x590>)
 8007214:	f1c4 040f 	rsb	r4, r4, #15
 8007218:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800721c:	4642      	mov	r2, r8
 800721e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007222:	464b      	mov	r3, r9
 8007224:	f7f9 f962 	bl	80004ec <__aeabi_dmul>
 8007228:	9b07      	ldr	r3, [sp, #28]
 800722a:	1b1c      	subs	r4, r3, r4
 800722c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007230:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007234:	e7e5      	b.n	8007202 <_strtod_l+0x3ea>
 8007236:	9b07      	ldr	r3, [sp, #28]
 8007238:	3316      	adds	r3, #22
 800723a:	db0b      	blt.n	8007254 <_strtod_l+0x43c>
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	4640      	mov	r0, r8
 8007240:	1b5d      	subs	r5, r3, r5
 8007242:	4b59      	ldr	r3, [pc, #356]	; (80073a8 <_strtod_l+0x590>)
 8007244:	4649      	mov	r1, r9
 8007246:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800724a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800724e:	f7f9 fa77 	bl	8000740 <__aeabi_ddiv>
 8007252:	e79d      	b.n	8007190 <_strtod_l+0x378>
 8007254:	9b07      	ldr	r3, [sp, #28]
 8007256:	1ba6      	subs	r6, r4, r6
 8007258:	441e      	add	r6, r3
 800725a:	2e00      	cmp	r6, #0
 800725c:	dd74      	ble.n	8007348 <_strtod_l+0x530>
 800725e:	f016 030f 	ands.w	r3, r6, #15
 8007262:	d00a      	beq.n	800727a <_strtod_l+0x462>
 8007264:	4950      	ldr	r1, [pc, #320]	; (80073a8 <_strtod_l+0x590>)
 8007266:	4642      	mov	r2, r8
 8007268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800726c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007270:	464b      	mov	r3, r9
 8007272:	f7f9 f93b 	bl	80004ec <__aeabi_dmul>
 8007276:	4680      	mov	r8, r0
 8007278:	4689      	mov	r9, r1
 800727a:	f036 060f 	bics.w	r6, r6, #15
 800727e:	d052      	beq.n	8007326 <_strtod_l+0x50e>
 8007280:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007284:	dd27      	ble.n	80072d6 <_strtod_l+0x4be>
 8007286:	f04f 0b00 	mov.w	fp, #0
 800728a:	f8cd b010 	str.w	fp, [sp, #16]
 800728e:	f8cd b020 	str.w	fp, [sp, #32]
 8007292:	f8cd b018 	str.w	fp, [sp, #24]
 8007296:	2322      	movs	r3, #34	; 0x22
 8007298:	f04f 0800 	mov.w	r8, #0
 800729c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80073a0 <_strtod_l+0x588>
 80072a0:	f8ca 3000 	str.w	r3, [sl]
 80072a4:	9b08      	ldr	r3, [sp, #32]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f43f adf7 	beq.w	8006e9a <_strtod_l+0x82>
 80072ac:	4650      	mov	r0, sl
 80072ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072b0:	f001 ff2e 	bl	8009110 <_Bfree>
 80072b4:	4650      	mov	r0, sl
 80072b6:	9906      	ldr	r1, [sp, #24]
 80072b8:	f001 ff2a 	bl	8009110 <_Bfree>
 80072bc:	4650      	mov	r0, sl
 80072be:	9904      	ldr	r1, [sp, #16]
 80072c0:	f001 ff26 	bl	8009110 <_Bfree>
 80072c4:	4650      	mov	r0, sl
 80072c6:	9908      	ldr	r1, [sp, #32]
 80072c8:	f001 ff22 	bl	8009110 <_Bfree>
 80072cc:	4659      	mov	r1, fp
 80072ce:	4650      	mov	r0, sl
 80072d0:	f001 ff1e 	bl	8009110 <_Bfree>
 80072d4:	e5e1      	b.n	8006e9a <_strtod_l+0x82>
 80072d6:	4b35      	ldr	r3, [pc, #212]	; (80073ac <_strtod_l+0x594>)
 80072d8:	4640      	mov	r0, r8
 80072da:	9305      	str	r3, [sp, #20]
 80072dc:	2300      	movs	r3, #0
 80072de:	4649      	mov	r1, r9
 80072e0:	461f      	mov	r7, r3
 80072e2:	1136      	asrs	r6, r6, #4
 80072e4:	2e01      	cmp	r6, #1
 80072e6:	dc21      	bgt.n	800732c <_strtod_l+0x514>
 80072e8:	b10b      	cbz	r3, 80072ee <_strtod_l+0x4d6>
 80072ea:	4680      	mov	r8, r0
 80072ec:	4689      	mov	r9, r1
 80072ee:	4b2f      	ldr	r3, [pc, #188]	; (80073ac <_strtod_l+0x594>)
 80072f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80072f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80072f8:	4642      	mov	r2, r8
 80072fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072fe:	464b      	mov	r3, r9
 8007300:	f7f9 f8f4 	bl	80004ec <__aeabi_dmul>
 8007304:	4b26      	ldr	r3, [pc, #152]	; (80073a0 <_strtod_l+0x588>)
 8007306:	460a      	mov	r2, r1
 8007308:	400b      	ands	r3, r1
 800730a:	4929      	ldr	r1, [pc, #164]	; (80073b0 <_strtod_l+0x598>)
 800730c:	4680      	mov	r8, r0
 800730e:	428b      	cmp	r3, r1
 8007310:	d8b9      	bhi.n	8007286 <_strtod_l+0x46e>
 8007312:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007316:	428b      	cmp	r3, r1
 8007318:	bf86      	itte	hi
 800731a:	f04f 38ff 	movhi.w	r8, #4294967295
 800731e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80073b4 <_strtod_l+0x59c>
 8007322:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007326:	2300      	movs	r3, #0
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	e07f      	b.n	800742c <_strtod_l+0x614>
 800732c:	07f2      	lsls	r2, r6, #31
 800732e:	d505      	bpl.n	800733c <_strtod_l+0x524>
 8007330:	9b05      	ldr	r3, [sp, #20]
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f9 f8d9 	bl	80004ec <__aeabi_dmul>
 800733a:	2301      	movs	r3, #1
 800733c:	9a05      	ldr	r2, [sp, #20]
 800733e:	3701      	adds	r7, #1
 8007340:	3208      	adds	r2, #8
 8007342:	1076      	asrs	r6, r6, #1
 8007344:	9205      	str	r2, [sp, #20]
 8007346:	e7cd      	b.n	80072e4 <_strtod_l+0x4cc>
 8007348:	d0ed      	beq.n	8007326 <_strtod_l+0x50e>
 800734a:	4276      	negs	r6, r6
 800734c:	f016 020f 	ands.w	r2, r6, #15
 8007350:	d00a      	beq.n	8007368 <_strtod_l+0x550>
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <_strtod_l+0x590>)
 8007354:	4640      	mov	r0, r8
 8007356:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800735a:	4649      	mov	r1, r9
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f7f9 f9ee 	bl	8000740 <__aeabi_ddiv>
 8007364:	4680      	mov	r8, r0
 8007366:	4689      	mov	r9, r1
 8007368:	1136      	asrs	r6, r6, #4
 800736a:	d0dc      	beq.n	8007326 <_strtod_l+0x50e>
 800736c:	2e1f      	cmp	r6, #31
 800736e:	dd23      	ble.n	80073b8 <_strtod_l+0x5a0>
 8007370:	f04f 0b00 	mov.w	fp, #0
 8007374:	f8cd b010 	str.w	fp, [sp, #16]
 8007378:	f8cd b020 	str.w	fp, [sp, #32]
 800737c:	f8cd b018 	str.w	fp, [sp, #24]
 8007380:	2322      	movs	r3, #34	; 0x22
 8007382:	f04f 0800 	mov.w	r8, #0
 8007386:	f04f 0900 	mov.w	r9, #0
 800738a:	f8ca 3000 	str.w	r3, [sl]
 800738e:	e789      	b.n	80072a4 <_strtod_l+0x48c>
 8007390:	0800ab31 	.word	0x0800ab31
 8007394:	0800ab74 	.word	0x0800ab74
 8007398:	0800ab29 	.word	0x0800ab29
 800739c:	0800ad64 	.word	0x0800ad64
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	0800ac5f 	.word	0x0800ac5f
 80073a8:	0800aed8 	.word	0x0800aed8
 80073ac:	0800aeb0 	.word	0x0800aeb0
 80073b0:	7ca00000 	.word	0x7ca00000
 80073b4:	7fefffff 	.word	0x7fefffff
 80073b8:	f016 0310 	ands.w	r3, r6, #16
 80073bc:	bf18      	it	ne
 80073be:	236a      	movne	r3, #106	; 0x6a
 80073c0:	4640      	mov	r0, r8
 80073c2:	9305      	str	r3, [sp, #20]
 80073c4:	4649      	mov	r1, r9
 80073c6:	2300      	movs	r3, #0
 80073c8:	4fb0      	ldr	r7, [pc, #704]	; (800768c <_strtod_l+0x874>)
 80073ca:	07f2      	lsls	r2, r6, #31
 80073cc:	d504      	bpl.n	80073d8 <_strtod_l+0x5c0>
 80073ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d2:	f7f9 f88b 	bl	80004ec <__aeabi_dmul>
 80073d6:	2301      	movs	r3, #1
 80073d8:	1076      	asrs	r6, r6, #1
 80073da:	f107 0708 	add.w	r7, r7, #8
 80073de:	d1f4      	bne.n	80073ca <_strtod_l+0x5b2>
 80073e0:	b10b      	cbz	r3, 80073e6 <_strtod_l+0x5ce>
 80073e2:	4680      	mov	r8, r0
 80073e4:	4689      	mov	r9, r1
 80073e6:	9b05      	ldr	r3, [sp, #20]
 80073e8:	b1c3      	cbz	r3, 800741c <_strtod_l+0x604>
 80073ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80073ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	4649      	mov	r1, r9
 80073f6:	dd11      	ble.n	800741c <_strtod_l+0x604>
 80073f8:	2b1f      	cmp	r3, #31
 80073fa:	f340 8127 	ble.w	800764c <_strtod_l+0x834>
 80073fe:	2b34      	cmp	r3, #52	; 0x34
 8007400:	bfd8      	it	le
 8007402:	f04f 33ff 	movle.w	r3, #4294967295
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	bfcf      	iteee	gt
 800740c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007410:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007414:	fa03 f202 	lslle.w	r2, r3, r2
 8007418:	ea02 0901 	andle.w	r9, r2, r1
 800741c:	2200      	movs	r2, #0
 800741e:	2300      	movs	r3, #0
 8007420:	4640      	mov	r0, r8
 8007422:	4649      	mov	r1, r9
 8007424:	f7f9 faca 	bl	80009bc <__aeabi_dcmpeq>
 8007428:	2800      	cmp	r0, #0
 800742a:	d1a1      	bne.n	8007370 <_strtod_l+0x558>
 800742c:	9b06      	ldr	r3, [sp, #24]
 800742e:	465a      	mov	r2, fp
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	4650      	mov	r0, sl
 8007434:	4623      	mov	r3, r4
 8007436:	9908      	ldr	r1, [sp, #32]
 8007438:	f001 fed2 	bl	80091e0 <__s2b>
 800743c:	9008      	str	r0, [sp, #32]
 800743e:	2800      	cmp	r0, #0
 8007440:	f43f af21 	beq.w	8007286 <_strtod_l+0x46e>
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	f04f 0b00 	mov.w	fp, #0
 800744a:	1b5d      	subs	r5, r3, r5
 800744c:	9b07      	ldr	r3, [sp, #28]
 800744e:	f8cd b010 	str.w	fp, [sp, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	bfb4      	ite	lt
 8007456:	462b      	movlt	r3, r5
 8007458:	2300      	movge	r3, #0
 800745a:	930e      	str	r3, [sp, #56]	; 0x38
 800745c:	9b07      	ldr	r3, [sp, #28]
 800745e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007462:	9314      	str	r3, [sp, #80]	; 0x50
 8007464:	9b08      	ldr	r3, [sp, #32]
 8007466:	4650      	mov	r0, sl
 8007468:	6859      	ldr	r1, [r3, #4]
 800746a:	f001 fe11 	bl	8009090 <_Balloc>
 800746e:	9006      	str	r0, [sp, #24]
 8007470:	2800      	cmp	r0, #0
 8007472:	f43f af10 	beq.w	8007296 <_strtod_l+0x47e>
 8007476:	9b08      	ldr	r3, [sp, #32]
 8007478:	300c      	adds	r0, #12
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	f103 010c 	add.w	r1, r3, #12
 8007480:	3202      	adds	r2, #2
 8007482:	0092      	lsls	r2, r2, #2
 8007484:	f001 fdf6 	bl	8009074 <memcpy>
 8007488:	ab1c      	add	r3, sp, #112	; 0x70
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	ab1b      	add	r3, sp, #108	; 0x6c
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	4642      	mov	r2, r8
 8007492:	464b      	mov	r3, r9
 8007494:	4650      	mov	r0, sl
 8007496:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800749a:	f002 f9e3 	bl	8009864 <__d2b>
 800749e:	901a      	str	r0, [sp, #104]	; 0x68
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f43f aef8 	beq.w	8007296 <_strtod_l+0x47e>
 80074a6:	2101      	movs	r1, #1
 80074a8:	4650      	mov	r0, sl
 80074aa:	f001 ff31 	bl	8009310 <__i2b>
 80074ae:	4603      	mov	r3, r0
 80074b0:	9004      	str	r0, [sp, #16]
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f43f aeef 	beq.w	8007296 <_strtod_l+0x47e>
 80074b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80074ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80074bc:	2d00      	cmp	r5, #0
 80074be:	bfab      	itete	ge
 80074c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80074c2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80074c4:	18ee      	addge	r6, r5, r3
 80074c6:	1b5c      	sublt	r4, r3, r5
 80074c8:	9b05      	ldr	r3, [sp, #20]
 80074ca:	bfa8      	it	ge
 80074cc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80074ce:	eba5 0503 	sub.w	r5, r5, r3
 80074d2:	4415      	add	r5, r2
 80074d4:	4b6e      	ldr	r3, [pc, #440]	; (8007690 <_strtod_l+0x878>)
 80074d6:	f105 35ff 	add.w	r5, r5, #4294967295
 80074da:	bfb8      	it	lt
 80074dc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80074de:	429d      	cmp	r5, r3
 80074e0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074e4:	f280 80c4 	bge.w	8007670 <_strtod_l+0x858>
 80074e8:	1b5b      	subs	r3, r3, r5
 80074ea:	2b1f      	cmp	r3, #31
 80074ec:	f04f 0701 	mov.w	r7, #1
 80074f0:	eba2 0203 	sub.w	r2, r2, r3
 80074f4:	f300 80b1 	bgt.w	800765a <_strtod_l+0x842>
 80074f8:	2500      	movs	r5, #0
 80074fa:	fa07 f303 	lsl.w	r3, r7, r3
 80074fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007500:	18b7      	adds	r7, r6, r2
 8007502:	9b05      	ldr	r3, [sp, #20]
 8007504:	42be      	cmp	r6, r7
 8007506:	4414      	add	r4, r2
 8007508:	441c      	add	r4, r3
 800750a:	4633      	mov	r3, r6
 800750c:	bfa8      	it	ge
 800750e:	463b      	movge	r3, r7
 8007510:	42a3      	cmp	r3, r4
 8007512:	bfa8      	it	ge
 8007514:	4623      	movge	r3, r4
 8007516:	2b00      	cmp	r3, #0
 8007518:	bfc2      	ittt	gt
 800751a:	1aff      	subgt	r7, r7, r3
 800751c:	1ae4      	subgt	r4, r4, r3
 800751e:	1af6      	subgt	r6, r6, r3
 8007520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007522:	2b00      	cmp	r3, #0
 8007524:	dd17      	ble.n	8007556 <_strtod_l+0x73e>
 8007526:	461a      	mov	r2, r3
 8007528:	4650      	mov	r0, sl
 800752a:	9904      	ldr	r1, [sp, #16]
 800752c:	f001 ffae 	bl	800948c <__pow5mult>
 8007530:	9004      	str	r0, [sp, #16]
 8007532:	2800      	cmp	r0, #0
 8007534:	f43f aeaf 	beq.w	8007296 <_strtod_l+0x47e>
 8007538:	4601      	mov	r1, r0
 800753a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800753c:	4650      	mov	r0, sl
 800753e:	f001 fefd 	bl	800933c <__multiply>
 8007542:	9009      	str	r0, [sp, #36]	; 0x24
 8007544:	2800      	cmp	r0, #0
 8007546:	f43f aea6 	beq.w	8007296 <_strtod_l+0x47e>
 800754a:	4650      	mov	r0, sl
 800754c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800754e:	f001 fddf 	bl	8009110 <_Bfree>
 8007552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007554:	931a      	str	r3, [sp, #104]	; 0x68
 8007556:	2f00      	cmp	r7, #0
 8007558:	f300 808e 	bgt.w	8007678 <_strtod_l+0x860>
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	dd08      	ble.n	8007574 <_strtod_l+0x75c>
 8007562:	4650      	mov	r0, sl
 8007564:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007566:	9906      	ldr	r1, [sp, #24]
 8007568:	f001 ff90 	bl	800948c <__pow5mult>
 800756c:	9006      	str	r0, [sp, #24]
 800756e:	2800      	cmp	r0, #0
 8007570:	f43f ae91 	beq.w	8007296 <_strtod_l+0x47e>
 8007574:	2c00      	cmp	r4, #0
 8007576:	dd08      	ble.n	800758a <_strtod_l+0x772>
 8007578:	4622      	mov	r2, r4
 800757a:	4650      	mov	r0, sl
 800757c:	9906      	ldr	r1, [sp, #24]
 800757e:	f001 ffdf 	bl	8009540 <__lshift>
 8007582:	9006      	str	r0, [sp, #24]
 8007584:	2800      	cmp	r0, #0
 8007586:	f43f ae86 	beq.w	8007296 <_strtod_l+0x47e>
 800758a:	2e00      	cmp	r6, #0
 800758c:	dd08      	ble.n	80075a0 <_strtod_l+0x788>
 800758e:	4632      	mov	r2, r6
 8007590:	4650      	mov	r0, sl
 8007592:	9904      	ldr	r1, [sp, #16]
 8007594:	f001 ffd4 	bl	8009540 <__lshift>
 8007598:	9004      	str	r0, [sp, #16]
 800759a:	2800      	cmp	r0, #0
 800759c:	f43f ae7b 	beq.w	8007296 <_strtod_l+0x47e>
 80075a0:	4650      	mov	r0, sl
 80075a2:	9a06      	ldr	r2, [sp, #24]
 80075a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075a6:	f002 f857 	bl	8009658 <__mdiff>
 80075aa:	4683      	mov	fp, r0
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f43f ae72 	beq.w	8007296 <_strtod_l+0x47e>
 80075b2:	2400      	movs	r4, #0
 80075b4:	68c3      	ldr	r3, [r0, #12]
 80075b6:	9904      	ldr	r1, [sp, #16]
 80075b8:	60c4      	str	r4, [r0, #12]
 80075ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80075bc:	f002 f830 	bl	8009620 <__mcmp>
 80075c0:	42a0      	cmp	r0, r4
 80075c2:	da6b      	bge.n	800769c <_strtod_l+0x884>
 80075c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c6:	ea53 0308 	orrs.w	r3, r3, r8
 80075ca:	f040 8091 	bne.w	80076f0 <_strtod_l+0x8d8>
 80075ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 808c 	bne.w	80076f0 <_strtod_l+0x8d8>
 80075d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075dc:	0d1b      	lsrs	r3, r3, #20
 80075de:	051b      	lsls	r3, r3, #20
 80075e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80075e4:	f240 8084 	bls.w	80076f0 <_strtod_l+0x8d8>
 80075e8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80075ec:	b91b      	cbnz	r3, 80075f6 <_strtod_l+0x7de>
 80075ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	dd7c      	ble.n	80076f0 <_strtod_l+0x8d8>
 80075f6:	4659      	mov	r1, fp
 80075f8:	2201      	movs	r2, #1
 80075fa:	4650      	mov	r0, sl
 80075fc:	f001 ffa0 	bl	8009540 <__lshift>
 8007600:	9904      	ldr	r1, [sp, #16]
 8007602:	4683      	mov	fp, r0
 8007604:	f002 f80c 	bl	8009620 <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	dd71      	ble.n	80076f0 <_strtod_l+0x8d8>
 800760c:	9905      	ldr	r1, [sp, #20]
 800760e:	464b      	mov	r3, r9
 8007610:	4a20      	ldr	r2, [pc, #128]	; (8007694 <_strtod_l+0x87c>)
 8007612:	2900      	cmp	r1, #0
 8007614:	f000 808c 	beq.w	8007730 <_strtod_l+0x918>
 8007618:	ea02 0109 	and.w	r1, r2, r9
 800761c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007620:	f300 8086 	bgt.w	8007730 <_strtod_l+0x918>
 8007624:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007628:	f77f aeaa 	ble.w	8007380 <_strtod_l+0x568>
 800762c:	4640      	mov	r0, r8
 800762e:	4649      	mov	r1, r9
 8007630:	4b19      	ldr	r3, [pc, #100]	; (8007698 <_strtod_l+0x880>)
 8007632:	2200      	movs	r2, #0
 8007634:	f7f8 ff5a 	bl	80004ec <__aeabi_dmul>
 8007638:	460b      	mov	r3, r1
 800763a:	4303      	orrs	r3, r0
 800763c:	bf08      	it	eq
 800763e:	2322      	moveq	r3, #34	; 0x22
 8007640:	4680      	mov	r8, r0
 8007642:	4689      	mov	r9, r1
 8007644:	bf08      	it	eq
 8007646:	f8ca 3000 	streq.w	r3, [sl]
 800764a:	e62f      	b.n	80072ac <_strtod_l+0x494>
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	fa02 f303 	lsl.w	r3, r2, r3
 8007654:	ea03 0808 	and.w	r8, r3, r8
 8007658:	e6e0      	b.n	800741c <_strtod_l+0x604>
 800765a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800765e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007662:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007666:	35e2      	adds	r5, #226	; 0xe2
 8007668:	fa07 f505 	lsl.w	r5, r7, r5
 800766c:	970f      	str	r7, [sp, #60]	; 0x3c
 800766e:	e747      	b.n	8007500 <_strtod_l+0x6e8>
 8007670:	2301      	movs	r3, #1
 8007672:	2500      	movs	r5, #0
 8007674:	930f      	str	r3, [sp, #60]	; 0x3c
 8007676:	e743      	b.n	8007500 <_strtod_l+0x6e8>
 8007678:	463a      	mov	r2, r7
 800767a:	4650      	mov	r0, sl
 800767c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800767e:	f001 ff5f 	bl	8009540 <__lshift>
 8007682:	901a      	str	r0, [sp, #104]	; 0x68
 8007684:	2800      	cmp	r0, #0
 8007686:	f47f af69 	bne.w	800755c <_strtod_l+0x744>
 800768a:	e604      	b.n	8007296 <_strtod_l+0x47e>
 800768c:	0800ab88 	.word	0x0800ab88
 8007690:	fffffc02 	.word	0xfffffc02
 8007694:	7ff00000 	.word	0x7ff00000
 8007698:	39500000 	.word	0x39500000
 800769c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80076a0:	d165      	bne.n	800776e <_strtod_l+0x956>
 80076a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076a8:	b35a      	cbz	r2, 8007702 <_strtod_l+0x8ea>
 80076aa:	4a99      	ldr	r2, [pc, #612]	; (8007910 <_strtod_l+0xaf8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d12b      	bne.n	8007708 <_strtod_l+0x8f0>
 80076b0:	9b05      	ldr	r3, [sp, #20]
 80076b2:	4641      	mov	r1, r8
 80076b4:	b303      	cbz	r3, 80076f8 <_strtod_l+0x8e0>
 80076b6:	464a      	mov	r2, r9
 80076b8:	4b96      	ldr	r3, [pc, #600]	; (8007914 <_strtod_l+0xafc>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	d81b      	bhi.n	80076fe <_strtod_l+0x8e6>
 80076c6:	0d1b      	lsrs	r3, r3, #20
 80076c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076cc:	fa02 f303 	lsl.w	r3, r2, r3
 80076d0:	4299      	cmp	r1, r3
 80076d2:	d119      	bne.n	8007708 <_strtod_l+0x8f0>
 80076d4:	4b90      	ldr	r3, [pc, #576]	; (8007918 <_strtod_l+0xb00>)
 80076d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d8:	429a      	cmp	r2, r3
 80076da:	d102      	bne.n	80076e2 <_strtod_l+0x8ca>
 80076dc:	3101      	adds	r1, #1
 80076de:	f43f adda 	beq.w	8007296 <_strtod_l+0x47e>
 80076e2:	f04f 0800 	mov.w	r8, #0
 80076e6:	4b8b      	ldr	r3, [pc, #556]	; (8007914 <_strtod_l+0xafc>)
 80076e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076ea:	401a      	ands	r2, r3
 80076ec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80076f0:	9b05      	ldr	r3, [sp, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d19a      	bne.n	800762c <_strtod_l+0x814>
 80076f6:	e5d9      	b.n	80072ac <_strtod_l+0x494>
 80076f8:	f04f 33ff 	mov.w	r3, #4294967295
 80076fc:	e7e8      	b.n	80076d0 <_strtod_l+0x8b8>
 80076fe:	4613      	mov	r3, r2
 8007700:	e7e6      	b.n	80076d0 <_strtod_l+0x8b8>
 8007702:	ea53 0308 	orrs.w	r3, r3, r8
 8007706:	d081      	beq.n	800760c <_strtod_l+0x7f4>
 8007708:	b1e5      	cbz	r5, 8007744 <_strtod_l+0x92c>
 800770a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770c:	421d      	tst	r5, r3
 800770e:	d0ef      	beq.n	80076f0 <_strtod_l+0x8d8>
 8007710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007712:	4640      	mov	r0, r8
 8007714:	4649      	mov	r1, r9
 8007716:	9a05      	ldr	r2, [sp, #20]
 8007718:	b1c3      	cbz	r3, 800774c <_strtod_l+0x934>
 800771a:	f7ff fb5b 	bl	8006dd4 <sulp>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007726:	f7f8 fd2b 	bl	8000180 <__adddf3>
 800772a:	4680      	mov	r8, r0
 800772c:	4689      	mov	r9, r1
 800772e:	e7df      	b.n	80076f0 <_strtod_l+0x8d8>
 8007730:	4013      	ands	r3, r2
 8007732:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007736:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800773a:	f04f 38ff 	mov.w	r8, #4294967295
 800773e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007742:	e7d5      	b.n	80076f0 <_strtod_l+0x8d8>
 8007744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007746:	ea13 0f08 	tst.w	r3, r8
 800774a:	e7e0      	b.n	800770e <_strtod_l+0x8f6>
 800774c:	f7ff fb42 	bl	8006dd4 <sulp>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007758:	f7f8 fd10 	bl	800017c <__aeabi_dsub>
 800775c:	2200      	movs	r2, #0
 800775e:	2300      	movs	r3, #0
 8007760:	4680      	mov	r8, r0
 8007762:	4689      	mov	r9, r1
 8007764:	f7f9 f92a 	bl	80009bc <__aeabi_dcmpeq>
 8007768:	2800      	cmp	r0, #0
 800776a:	d0c1      	beq.n	80076f0 <_strtod_l+0x8d8>
 800776c:	e608      	b.n	8007380 <_strtod_l+0x568>
 800776e:	4658      	mov	r0, fp
 8007770:	9904      	ldr	r1, [sp, #16]
 8007772:	f002 f8d3 	bl	800991c <__ratio>
 8007776:	2200      	movs	r2, #0
 8007778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800777c:	4606      	mov	r6, r0
 800777e:	460f      	mov	r7, r1
 8007780:	f7f9 f930 	bl	80009e4 <__aeabi_dcmple>
 8007784:	2800      	cmp	r0, #0
 8007786:	d070      	beq.n	800786a <_strtod_l+0xa52>
 8007788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d042      	beq.n	8007814 <_strtod_l+0x9fc>
 800778e:	2600      	movs	r6, #0
 8007790:	4f62      	ldr	r7, [pc, #392]	; (800791c <_strtod_l+0xb04>)
 8007792:	4d62      	ldr	r5, [pc, #392]	; (800791c <_strtod_l+0xb04>)
 8007794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800779a:	0d1b      	lsrs	r3, r3, #20
 800779c:	051b      	lsls	r3, r3, #20
 800779e:	930f      	str	r3, [sp, #60]	; 0x3c
 80077a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a2:	4b5f      	ldr	r3, [pc, #380]	; (8007920 <_strtod_l+0xb08>)
 80077a4:	429a      	cmp	r2, r3
 80077a6:	f040 80c3 	bne.w	8007930 <_strtod_l+0xb18>
 80077aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ac:	4640      	mov	r0, r8
 80077ae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80077b2:	4649      	mov	r1, r9
 80077b4:	f001 ffdc 	bl	8009770 <__ulp>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4630      	mov	r0, r6
 80077be:	4639      	mov	r1, r7
 80077c0:	f7f8 fe94 	bl	80004ec <__aeabi_dmul>
 80077c4:	4642      	mov	r2, r8
 80077c6:	464b      	mov	r3, r9
 80077c8:	f7f8 fcda 	bl	8000180 <__adddf3>
 80077cc:	460b      	mov	r3, r1
 80077ce:	4951      	ldr	r1, [pc, #324]	; (8007914 <_strtod_l+0xafc>)
 80077d0:	4a54      	ldr	r2, [pc, #336]	; (8007924 <_strtod_l+0xb0c>)
 80077d2:	4019      	ands	r1, r3
 80077d4:	4291      	cmp	r1, r2
 80077d6:	4680      	mov	r8, r0
 80077d8:	d95d      	bls.n	8007896 <_strtod_l+0xa7e>
 80077da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077dc:	4b4e      	ldr	r3, [pc, #312]	; (8007918 <_strtod_l+0xb00>)
 80077de:	429a      	cmp	r2, r3
 80077e0:	d103      	bne.n	80077ea <_strtod_l+0x9d2>
 80077e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077e4:	3301      	adds	r3, #1
 80077e6:	f43f ad56 	beq.w	8007296 <_strtod_l+0x47e>
 80077ea:	f04f 38ff 	mov.w	r8, #4294967295
 80077ee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007918 <_strtod_l+0xb00>
 80077f2:	4650      	mov	r0, sl
 80077f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077f6:	f001 fc8b 	bl	8009110 <_Bfree>
 80077fa:	4650      	mov	r0, sl
 80077fc:	9906      	ldr	r1, [sp, #24]
 80077fe:	f001 fc87 	bl	8009110 <_Bfree>
 8007802:	4650      	mov	r0, sl
 8007804:	9904      	ldr	r1, [sp, #16]
 8007806:	f001 fc83 	bl	8009110 <_Bfree>
 800780a:	4659      	mov	r1, fp
 800780c:	4650      	mov	r0, sl
 800780e:	f001 fc7f 	bl	8009110 <_Bfree>
 8007812:	e627      	b.n	8007464 <_strtod_l+0x64c>
 8007814:	f1b8 0f00 	cmp.w	r8, #0
 8007818:	d119      	bne.n	800784e <_strtod_l+0xa36>
 800781a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007820:	b9e3      	cbnz	r3, 800785c <_strtod_l+0xa44>
 8007822:	2200      	movs	r2, #0
 8007824:	4630      	mov	r0, r6
 8007826:	4639      	mov	r1, r7
 8007828:	4b3c      	ldr	r3, [pc, #240]	; (800791c <_strtod_l+0xb04>)
 800782a:	f7f9 f8d1 	bl	80009d0 <__aeabi_dcmplt>
 800782e:	b9c8      	cbnz	r0, 8007864 <_strtod_l+0xa4c>
 8007830:	2200      	movs	r2, #0
 8007832:	4630      	mov	r0, r6
 8007834:	4639      	mov	r1, r7
 8007836:	4b3c      	ldr	r3, [pc, #240]	; (8007928 <_strtod_l+0xb10>)
 8007838:	f7f8 fe58 	bl	80004ec <__aeabi_dmul>
 800783c:	4604      	mov	r4, r0
 800783e:	460d      	mov	r5, r1
 8007840:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007844:	9416      	str	r4, [sp, #88]	; 0x58
 8007846:	9317      	str	r3, [sp, #92]	; 0x5c
 8007848:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800784c:	e7a2      	b.n	8007794 <_strtod_l+0x97c>
 800784e:	f1b8 0f01 	cmp.w	r8, #1
 8007852:	d103      	bne.n	800785c <_strtod_l+0xa44>
 8007854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007856:	2b00      	cmp	r3, #0
 8007858:	f43f ad92 	beq.w	8007380 <_strtod_l+0x568>
 800785c:	2600      	movs	r6, #0
 800785e:	2400      	movs	r4, #0
 8007860:	4f32      	ldr	r7, [pc, #200]	; (800792c <_strtod_l+0xb14>)
 8007862:	e796      	b.n	8007792 <_strtod_l+0x97a>
 8007864:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007866:	4d30      	ldr	r5, [pc, #192]	; (8007928 <_strtod_l+0xb10>)
 8007868:	e7ea      	b.n	8007840 <_strtod_l+0xa28>
 800786a:	4b2f      	ldr	r3, [pc, #188]	; (8007928 <_strtod_l+0xb10>)
 800786c:	2200      	movs	r2, #0
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	f7f8 fe3b 	bl	80004ec <__aeabi_dmul>
 8007876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007878:	4604      	mov	r4, r0
 800787a:	460d      	mov	r5, r1
 800787c:	b933      	cbnz	r3, 800788c <_strtod_l+0xa74>
 800787e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007882:	9010      	str	r0, [sp, #64]	; 0x40
 8007884:	9311      	str	r3, [sp, #68]	; 0x44
 8007886:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800788a:	e783      	b.n	8007794 <_strtod_l+0x97c>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007894:	e7f7      	b.n	8007886 <_strtod_l+0xa6e>
 8007896:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800789a:	9b05      	ldr	r3, [sp, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1a8      	bne.n	80077f2 <_strtod_l+0x9da>
 80078a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078a6:	0d1b      	lsrs	r3, r3, #20
 80078a8:	051b      	lsls	r3, r3, #20
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d1a1      	bne.n	80077f2 <_strtod_l+0x9da>
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f9 fae7 	bl	8000e84 <__aeabi_d2lz>
 80078b6:	f7f8 fdeb 	bl	8000490 <__aeabi_l2d>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4620      	mov	r0, r4
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f8 fc5b 	bl	800017c <__aeabi_dsub>
 80078c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078cc:	ea43 0308 	orr.w	r3, r3, r8
 80078d0:	4313      	orrs	r3, r2
 80078d2:	4604      	mov	r4, r0
 80078d4:	460d      	mov	r5, r1
 80078d6:	d066      	beq.n	80079a6 <_strtod_l+0xb8e>
 80078d8:	a309      	add	r3, pc, #36	; (adr r3, 8007900 <_strtod_l+0xae8>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f9 f877 	bl	80009d0 <__aeabi_dcmplt>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	f47f ace2 	bne.w	80072ac <_strtod_l+0x494>
 80078e8:	a307      	add	r3, pc, #28	; (adr r3, 8007908 <_strtod_l+0xaf0>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f9 f88b 	bl	8000a0c <__aeabi_dcmpgt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f43f af7b 	beq.w	80077f2 <_strtod_l+0x9da>
 80078fc:	e4d6      	b.n	80072ac <_strtod_l+0x494>
 80078fe:	bf00      	nop
 8007900:	94a03595 	.word	0x94a03595
 8007904:	3fdfffff 	.word	0x3fdfffff
 8007908:	35afe535 	.word	0x35afe535
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	000fffff 	.word	0x000fffff
 8007914:	7ff00000 	.word	0x7ff00000
 8007918:	7fefffff 	.word	0x7fefffff
 800791c:	3ff00000 	.word	0x3ff00000
 8007920:	7fe00000 	.word	0x7fe00000
 8007924:	7c9fffff 	.word	0x7c9fffff
 8007928:	3fe00000 	.word	0x3fe00000
 800792c:	bff00000 	.word	0xbff00000
 8007930:	9b05      	ldr	r3, [sp, #20]
 8007932:	b313      	cbz	r3, 800797a <_strtod_l+0xb62>
 8007934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007936:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800793a:	d81e      	bhi.n	800797a <_strtod_l+0xb62>
 800793c:	a326      	add	r3, pc, #152	; (adr r3, 80079d8 <_strtod_l+0xbc0>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	4620      	mov	r0, r4
 8007944:	4629      	mov	r1, r5
 8007946:	f7f9 f84d 	bl	80009e4 <__aeabi_dcmple>
 800794a:	b190      	cbz	r0, 8007972 <_strtod_l+0xb5a>
 800794c:	4629      	mov	r1, r5
 800794e:	4620      	mov	r0, r4
 8007950:	f7f9 f8a4 	bl	8000a9c <__aeabi_d2uiz>
 8007954:	2801      	cmp	r0, #1
 8007956:	bf38      	it	cc
 8007958:	2001      	movcc	r0, #1
 800795a:	f7f8 fd4d 	bl	80003f8 <__aeabi_ui2d>
 800795e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007960:	4604      	mov	r4, r0
 8007962:	460d      	mov	r5, r1
 8007964:	b9d3      	cbnz	r3, 800799c <_strtod_l+0xb84>
 8007966:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800796a:	9012      	str	r0, [sp, #72]	; 0x48
 800796c:	9313      	str	r3, [sp, #76]	; 0x4c
 800796e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007972:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007974:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007978:	1a9f      	subs	r7, r3, r2
 800797a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800797e:	f001 fef7 	bl	8009770 <__ulp>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4630      	mov	r0, r6
 8007988:	4639      	mov	r1, r7
 800798a:	f7f8 fdaf 	bl	80004ec <__aeabi_dmul>
 800798e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007992:	f7f8 fbf5 	bl	8000180 <__adddf3>
 8007996:	4680      	mov	r8, r0
 8007998:	4689      	mov	r9, r1
 800799a:	e77e      	b.n	800789a <_strtod_l+0xa82>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80079a4:	e7e3      	b.n	800796e <_strtod_l+0xb56>
 80079a6:	a30e      	add	r3, pc, #56	; (adr r3, 80079e0 <_strtod_l+0xbc8>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f7f9 f810 	bl	80009d0 <__aeabi_dcmplt>
 80079b0:	e7a1      	b.n	80078f6 <_strtod_l+0xade>
 80079b2:	2300      	movs	r3, #0
 80079b4:	930a      	str	r3, [sp, #40]	; 0x28
 80079b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	f7ff ba71 	b.w	8006ea2 <_strtod_l+0x8a>
 80079c0:	2a65      	cmp	r2, #101	; 0x65
 80079c2:	f43f ab63 	beq.w	800708c <_strtod_l+0x274>
 80079c6:	2a45      	cmp	r2, #69	; 0x45
 80079c8:	f43f ab60 	beq.w	800708c <_strtod_l+0x274>
 80079cc:	2301      	movs	r3, #1
 80079ce:	f7ff bb95 	b.w	80070fc <_strtod_l+0x2e4>
 80079d2:	bf00      	nop
 80079d4:	f3af 8000 	nop.w
 80079d8:	ffc00000 	.word	0xffc00000
 80079dc:	41dfffff 	.word	0x41dfffff
 80079e0:	94a03595 	.word	0x94a03595
 80079e4:	3fcfffff 	.word	0x3fcfffff

080079e8 <_strtod_r>:
 80079e8:	4b01      	ldr	r3, [pc, #4]	; (80079f0 <_strtod_r+0x8>)
 80079ea:	f7ff ba15 	b.w	8006e18 <_strtod_l>
 80079ee:	bf00      	nop
 80079f0:	200000d4 	.word	0x200000d4

080079f4 <strtok>:
 80079f4:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <strtok+0x5c>)
 80079f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	681f      	ldr	r7, [r3, #0]
 80079fc:	4605      	mov	r5, r0
 80079fe:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007a00:	460e      	mov	r6, r1
 8007a02:	b9ec      	cbnz	r4, 8007a40 <strtok+0x4c>
 8007a04:	2050      	movs	r0, #80	; 0x50
 8007a06:	f001 fb0d 	bl	8009024 <malloc>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	65b8      	str	r0, [r7, #88]	; 0x58
 8007a0e:	b920      	cbnz	r0, 8007a1a <strtok+0x26>
 8007a10:	2157      	movs	r1, #87	; 0x57
 8007a12:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <strtok+0x60>)
 8007a14:	4810      	ldr	r0, [pc, #64]	; (8007a58 <strtok+0x64>)
 8007a16:	f000 f8f1 	bl	8007bfc <__assert_func>
 8007a1a:	e9c0 4400 	strd	r4, r4, [r0]
 8007a1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007a22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007a26:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007a2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007a2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007a32:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007a36:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007a3a:	6184      	str	r4, [r0, #24]
 8007a3c:	7704      	strb	r4, [r0, #28]
 8007a3e:	6244      	str	r4, [r0, #36]	; 0x24
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a46:	2301      	movs	r3, #1
 8007a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4c:	f000 b806 	b.w	8007a5c <__strtok_r>
 8007a50:	2000006c 	.word	0x2000006c
 8007a54:	0800abb0 	.word	0x0800abb0
 8007a58:	0800abc7 	.word	0x0800abc7

08007a5c <__strtok_r>:
 8007a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a5e:	b908      	cbnz	r0, 8007a64 <__strtok_r+0x8>
 8007a60:	6810      	ldr	r0, [r2, #0]
 8007a62:	b188      	cbz	r0, 8007a88 <__strtok_r+0x2c>
 8007a64:	4604      	mov	r4, r0
 8007a66:	460f      	mov	r7, r1
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007a6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007a72:	b91e      	cbnz	r6, 8007a7c <__strtok_r+0x20>
 8007a74:	b965      	cbnz	r5, 8007a90 <__strtok_r+0x34>
 8007a76:	4628      	mov	r0, r5
 8007a78:	6015      	str	r5, [r2, #0]
 8007a7a:	e005      	b.n	8007a88 <__strtok_r+0x2c>
 8007a7c:	42b5      	cmp	r5, r6
 8007a7e:	d1f6      	bne.n	8007a6e <__strtok_r+0x12>
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f0      	bne.n	8007a66 <__strtok_r+0xa>
 8007a84:	6014      	str	r4, [r2, #0]
 8007a86:	7003      	strb	r3, [r0, #0]
 8007a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a8a:	461c      	mov	r4, r3
 8007a8c:	e00c      	b.n	8007aa8 <__strtok_r+0x4c>
 8007a8e:	b915      	cbnz	r5, 8007a96 <__strtok_r+0x3a>
 8007a90:	460e      	mov	r6, r1
 8007a92:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a96:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007a9a:	42ab      	cmp	r3, r5
 8007a9c:	d1f7      	bne.n	8007a8e <__strtok_r+0x32>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0f3      	beq.n	8007a8a <__strtok_r+0x2e>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007aa8:	6014      	str	r4, [r2, #0]
 8007aaa:	e7ed      	b.n	8007a88 <__strtok_r+0x2c>

08007aac <_strtol_l.constprop.0>:
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	d001      	beq.n	8007aba <_strtol_l.constprop.0+0xe>
 8007ab6:	2b24      	cmp	r3, #36	; 0x24
 8007ab8:	d906      	bls.n	8007ac8 <_strtol_l.constprop.0+0x1c>
 8007aba:	f7fe fabf 	bl	800603c <__errno>
 8007abe:	2316      	movs	r3, #22
 8007ac0:	6003      	str	r3, [r0, #0]
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac8:	460d      	mov	r5, r1
 8007aca:	4f35      	ldr	r7, [pc, #212]	; (8007ba0 <_strtol_l.constprop.0+0xf4>)
 8007acc:	4628      	mov	r0, r5
 8007ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ad2:	5de6      	ldrb	r6, [r4, r7]
 8007ad4:	f016 0608 	ands.w	r6, r6, #8
 8007ad8:	d1f8      	bne.n	8007acc <_strtol_l.constprop.0+0x20>
 8007ada:	2c2d      	cmp	r4, #45	; 0x2d
 8007adc:	d12f      	bne.n	8007b3e <_strtol_l.constprop.0+0x92>
 8007ade:	2601      	movs	r6, #1
 8007ae0:	782c      	ldrb	r4, [r5, #0]
 8007ae2:	1c85      	adds	r5, r0, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d057      	beq.n	8007b98 <_strtol_l.constprop.0+0xec>
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d109      	bne.n	8007b00 <_strtol_l.constprop.0+0x54>
 8007aec:	2c30      	cmp	r4, #48	; 0x30
 8007aee:	d107      	bne.n	8007b00 <_strtol_l.constprop.0+0x54>
 8007af0:	7828      	ldrb	r0, [r5, #0]
 8007af2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007af6:	2858      	cmp	r0, #88	; 0x58
 8007af8:	d149      	bne.n	8007b8e <_strtol_l.constprop.0+0xe2>
 8007afa:	2310      	movs	r3, #16
 8007afc:	786c      	ldrb	r4, [r5, #1]
 8007afe:	3502      	adds	r5, #2
 8007b00:	2700      	movs	r7, #0
 8007b02:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007b06:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007b0a:	fbbe f9f3 	udiv	r9, lr, r3
 8007b0e:	4638      	mov	r0, r7
 8007b10:	fb03 ea19 	mls	sl, r3, r9, lr
 8007b14:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007b18:	f1bc 0f09 	cmp.w	ip, #9
 8007b1c:	d814      	bhi.n	8007b48 <_strtol_l.constprop.0+0x9c>
 8007b1e:	4664      	mov	r4, ip
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	dd22      	ble.n	8007b6a <_strtol_l.constprop.0+0xbe>
 8007b24:	2f00      	cmp	r7, #0
 8007b26:	db1d      	blt.n	8007b64 <_strtol_l.constprop.0+0xb8>
 8007b28:	4581      	cmp	r9, r0
 8007b2a:	d31b      	bcc.n	8007b64 <_strtol_l.constprop.0+0xb8>
 8007b2c:	d101      	bne.n	8007b32 <_strtol_l.constprop.0+0x86>
 8007b2e:	45a2      	cmp	sl, r4
 8007b30:	db18      	blt.n	8007b64 <_strtol_l.constprop.0+0xb8>
 8007b32:	2701      	movs	r7, #1
 8007b34:	fb00 4003 	mla	r0, r0, r3, r4
 8007b38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b3c:	e7ea      	b.n	8007b14 <_strtol_l.constprop.0+0x68>
 8007b3e:	2c2b      	cmp	r4, #43	; 0x2b
 8007b40:	bf04      	itt	eq
 8007b42:	782c      	ldrbeq	r4, [r5, #0]
 8007b44:	1c85      	addeq	r5, r0, #2
 8007b46:	e7cd      	b.n	8007ae4 <_strtol_l.constprop.0+0x38>
 8007b48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007b4c:	f1bc 0f19 	cmp.w	ip, #25
 8007b50:	d801      	bhi.n	8007b56 <_strtol_l.constprop.0+0xaa>
 8007b52:	3c37      	subs	r4, #55	; 0x37
 8007b54:	e7e4      	b.n	8007b20 <_strtol_l.constprop.0+0x74>
 8007b56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007b5a:	f1bc 0f19 	cmp.w	ip, #25
 8007b5e:	d804      	bhi.n	8007b6a <_strtol_l.constprop.0+0xbe>
 8007b60:	3c57      	subs	r4, #87	; 0x57
 8007b62:	e7dd      	b.n	8007b20 <_strtol_l.constprop.0+0x74>
 8007b64:	f04f 37ff 	mov.w	r7, #4294967295
 8007b68:	e7e6      	b.n	8007b38 <_strtol_l.constprop.0+0x8c>
 8007b6a:	2f00      	cmp	r7, #0
 8007b6c:	da07      	bge.n	8007b7e <_strtol_l.constprop.0+0xd2>
 8007b6e:	2322      	movs	r3, #34	; 0x22
 8007b70:	4670      	mov	r0, lr
 8007b72:	f8c8 3000 	str.w	r3, [r8]
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	d0a4      	beq.n	8007ac4 <_strtol_l.constprop.0+0x18>
 8007b7a:	1e69      	subs	r1, r5, #1
 8007b7c:	e005      	b.n	8007b8a <_strtol_l.constprop.0+0xde>
 8007b7e:	b106      	cbz	r6, 8007b82 <_strtol_l.constprop.0+0xd6>
 8007b80:	4240      	negs	r0, r0
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	d09e      	beq.n	8007ac4 <_strtol_l.constprop.0+0x18>
 8007b86:	2f00      	cmp	r7, #0
 8007b88:	d1f7      	bne.n	8007b7a <_strtol_l.constprop.0+0xce>
 8007b8a:	6011      	str	r1, [r2, #0]
 8007b8c:	e79a      	b.n	8007ac4 <_strtol_l.constprop.0+0x18>
 8007b8e:	2430      	movs	r4, #48	; 0x30
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1b5      	bne.n	8007b00 <_strtol_l.constprop.0+0x54>
 8007b94:	2308      	movs	r3, #8
 8007b96:	e7b3      	b.n	8007b00 <_strtol_l.constprop.0+0x54>
 8007b98:	2c30      	cmp	r4, #48	; 0x30
 8007b9a:	d0a9      	beq.n	8007af0 <_strtol_l.constprop.0+0x44>
 8007b9c:	230a      	movs	r3, #10
 8007b9e:	e7af      	b.n	8007b00 <_strtol_l.constprop.0+0x54>
 8007ba0:	0800ac61 	.word	0x0800ac61

08007ba4 <_strtol_r>:
 8007ba4:	f7ff bf82 	b.w	8007aac <_strtol_l.constprop.0>

08007ba8 <strtol>:
 8007ba8:	4613      	mov	r3, r2
 8007baa:	460a      	mov	r2, r1
 8007bac:	4601      	mov	r1, r0
 8007bae:	4802      	ldr	r0, [pc, #8]	; (8007bb8 <strtol+0x10>)
 8007bb0:	6800      	ldr	r0, [r0, #0]
 8007bb2:	f7ff bf7b 	b.w	8007aac <_strtol_l.constprop.0>
 8007bb6:	bf00      	nop
 8007bb8:	2000006c 	.word	0x2000006c

08007bbc <_vsiprintf_r>:
 8007bbc:	b500      	push	{lr}
 8007bbe:	b09b      	sub	sp, #108	; 0x6c
 8007bc0:	9100      	str	r1, [sp, #0]
 8007bc2:	9104      	str	r1, [sp, #16]
 8007bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bc8:	9105      	str	r1, [sp, #20]
 8007bca:	9102      	str	r1, [sp, #8]
 8007bcc:	4905      	ldr	r1, [pc, #20]	; (8007be4 <_vsiprintf_r+0x28>)
 8007bce:	9103      	str	r1, [sp, #12]
 8007bd0:	4669      	mov	r1, sp
 8007bd2:	f002 f861 	bl	8009c98 <_svfiprintf_r>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	9b00      	ldr	r3, [sp, #0]
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	b01b      	add	sp, #108	; 0x6c
 8007bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8007be2:	bf00      	nop
 8007be4:	ffff0208 	.word	0xffff0208

08007be8 <vsiprintf>:
 8007be8:	4613      	mov	r3, r2
 8007bea:	460a      	mov	r2, r1
 8007bec:	4601      	mov	r1, r0
 8007bee:	4802      	ldr	r0, [pc, #8]	; (8007bf8 <vsiprintf+0x10>)
 8007bf0:	6800      	ldr	r0, [r0, #0]
 8007bf2:	f7ff bfe3 	b.w	8007bbc <_vsiprintf_r>
 8007bf6:	bf00      	nop
 8007bf8:	2000006c 	.word	0x2000006c

08007bfc <__assert_func>:
 8007bfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bfe:	4614      	mov	r4, r2
 8007c00:	461a      	mov	r2, r3
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <__assert_func+0x2c>)
 8007c04:	4605      	mov	r5, r0
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68d8      	ldr	r0, [r3, #12]
 8007c0a:	b14c      	cbz	r4, 8007c20 <__assert_func+0x24>
 8007c0c:	4b07      	ldr	r3, [pc, #28]	; (8007c2c <__assert_func+0x30>)
 8007c0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c12:	9100      	str	r1, [sp, #0]
 8007c14:	462b      	mov	r3, r5
 8007c16:	4906      	ldr	r1, [pc, #24]	; (8007c30 <__assert_func+0x34>)
 8007c18:	f000 fe88 	bl	800892c <fiprintf>
 8007c1c:	f002 fb8c 	bl	800a338 <abort>
 8007c20:	4b04      	ldr	r3, [pc, #16]	; (8007c34 <__assert_func+0x38>)
 8007c22:	461c      	mov	r4, r3
 8007c24:	e7f3      	b.n	8007c0e <__assert_func+0x12>
 8007c26:	bf00      	nop
 8007c28:	2000006c 	.word	0x2000006c
 8007c2c:	0800ac24 	.word	0x0800ac24
 8007c30:	0800ac31 	.word	0x0800ac31
 8007c34:	0800ac5f 	.word	0x0800ac5f

08007c38 <quorem>:
 8007c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	6903      	ldr	r3, [r0, #16]
 8007c3e:	690c      	ldr	r4, [r1, #16]
 8007c40:	4607      	mov	r7, r0
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	f2c0 8082 	blt.w	8007d4c <quorem+0x114>
 8007c48:	3c01      	subs	r4, #1
 8007c4a:	f100 0514 	add.w	r5, r0, #20
 8007c4e:	f101 0814 	add.w	r8, r1, #20
 8007c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c60:	3301      	adds	r3, #1
 8007c62:	429a      	cmp	r2, r3
 8007c64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c70:	d331      	bcc.n	8007cd6 <quorem+0x9e>
 8007c72:	f04f 0e00 	mov.w	lr, #0
 8007c76:	4640      	mov	r0, r8
 8007c78:	46ac      	mov	ip, r5
 8007c7a:	46f2      	mov	sl, lr
 8007c7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c80:	b293      	uxth	r3, r2
 8007c82:	fb06 e303 	mla	r3, r6, r3, lr
 8007c86:	0c12      	lsrs	r2, r2, #16
 8007c88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	fb06 e202 	mla	r2, r6, r2, lr
 8007c92:	ebaa 0303 	sub.w	r3, sl, r3
 8007c96:	f8dc a000 	ldr.w	sl, [ip]
 8007c9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c9e:	fa1f fa8a 	uxth.w	sl, sl
 8007ca2:	4453      	add	r3, sl
 8007ca4:	f8dc a000 	ldr.w	sl, [ip]
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007cae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cb8:	4581      	cmp	r9, r0
 8007cba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cbe:	f84c 3b04 	str.w	r3, [ip], #4
 8007cc2:	d2db      	bcs.n	8007c7c <quorem+0x44>
 8007cc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cc8:	b92b      	cbnz	r3, 8007cd6 <quorem+0x9e>
 8007cca:	9b01      	ldr	r3, [sp, #4]
 8007ccc:	3b04      	subs	r3, #4
 8007cce:	429d      	cmp	r5, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	d32f      	bcc.n	8007d34 <quorem+0xfc>
 8007cd4:	613c      	str	r4, [r7, #16]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f001 fca2 	bl	8009620 <__mcmp>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	db25      	blt.n	8007d2c <quorem+0xf4>
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f04f 0c00 	mov.w	ip, #0
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	f858 1b04 	ldr.w	r1, [r8], #4
 8007cec:	f8d0 e000 	ldr.w	lr, [r0]
 8007cf0:	b28b      	uxth	r3, r1
 8007cf2:	ebac 0303 	sub.w	r3, ip, r3
 8007cf6:	fa1f f28e 	uxth.w	r2, lr
 8007cfa:	4413      	add	r3, r2
 8007cfc:	0c0a      	lsrs	r2, r1, #16
 8007cfe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d0c:	45c1      	cmp	r9, r8
 8007d0e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d12:	f840 3b04 	str.w	r3, [r0], #4
 8007d16:	d2e7      	bcs.n	8007ce8 <quorem+0xb0>
 8007d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d20:	b922      	cbnz	r2, 8007d2c <quorem+0xf4>
 8007d22:	3b04      	subs	r3, #4
 8007d24:	429d      	cmp	r5, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	d30a      	bcc.n	8007d40 <quorem+0x108>
 8007d2a:	613c      	str	r4, [r7, #16]
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	b003      	add	sp, #12
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	3b04      	subs	r3, #4
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	d1cb      	bne.n	8007cd4 <quorem+0x9c>
 8007d3c:	3c01      	subs	r4, #1
 8007d3e:	e7c6      	b.n	8007cce <quorem+0x96>
 8007d40:	6812      	ldr	r2, [r2, #0]
 8007d42:	3b04      	subs	r3, #4
 8007d44:	2a00      	cmp	r2, #0
 8007d46:	d1f0      	bne.n	8007d2a <quorem+0xf2>
 8007d48:	3c01      	subs	r4, #1
 8007d4a:	e7eb      	b.n	8007d24 <quorem+0xec>
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	e7ee      	b.n	8007d2e <quorem+0xf6>

08007d50 <_dtoa_r>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	4616      	mov	r6, r2
 8007d56:	461f      	mov	r7, r3
 8007d58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007d5a:	b099      	sub	sp, #100	; 0x64
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007d66:	b974      	cbnz	r4, 8007d86 <_dtoa_r+0x36>
 8007d68:	2010      	movs	r0, #16
 8007d6a:	f001 f95b 	bl	8009024 <malloc>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	6268      	str	r0, [r5, #36]	; 0x24
 8007d72:	b920      	cbnz	r0, 8007d7e <_dtoa_r+0x2e>
 8007d74:	21ea      	movs	r1, #234	; 0xea
 8007d76:	4ba8      	ldr	r3, [pc, #672]	; (8008018 <_dtoa_r+0x2c8>)
 8007d78:	48a8      	ldr	r0, [pc, #672]	; (800801c <_dtoa_r+0x2cc>)
 8007d7a:	f7ff ff3f 	bl	8007bfc <__assert_func>
 8007d7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d82:	6004      	str	r4, [r0, #0]
 8007d84:	60c4      	str	r4, [r0, #12]
 8007d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d88:	6819      	ldr	r1, [r3, #0]
 8007d8a:	b151      	cbz	r1, 8007da2 <_dtoa_r+0x52>
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4093      	lsls	r3, r2
 8007d92:	604a      	str	r2, [r1, #4]
 8007d94:	608b      	str	r3, [r1, #8]
 8007d96:	4628      	mov	r0, r5
 8007d98:	f001 f9ba 	bl	8009110 <_Bfree>
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	1e3b      	subs	r3, r7, #0
 8007da4:	bfaf      	iteee	ge
 8007da6:	2300      	movge	r3, #0
 8007da8:	2201      	movlt	r2, #1
 8007daa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007dae:	9305      	strlt	r3, [sp, #20]
 8007db0:	bfa8      	it	ge
 8007db2:	f8c8 3000 	strge.w	r3, [r8]
 8007db6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007dba:	4b99      	ldr	r3, [pc, #612]	; (8008020 <_dtoa_r+0x2d0>)
 8007dbc:	bfb8      	it	lt
 8007dbe:	f8c8 2000 	strlt.w	r2, [r8]
 8007dc2:	ea33 0309 	bics.w	r3, r3, r9
 8007dc6:	d119      	bne.n	8007dfc <_dtoa_r+0xac>
 8007dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dd4:	4333      	orrs	r3, r6
 8007dd6:	f000 857f 	beq.w	80088d8 <_dtoa_r+0xb88>
 8007dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ddc:	b953      	cbnz	r3, 8007df4 <_dtoa_r+0xa4>
 8007dde:	4b91      	ldr	r3, [pc, #580]	; (8008024 <_dtoa_r+0x2d4>)
 8007de0:	e022      	b.n	8007e28 <_dtoa_r+0xd8>
 8007de2:	4b91      	ldr	r3, [pc, #580]	; (8008028 <_dtoa_r+0x2d8>)
 8007de4:	9303      	str	r3, [sp, #12]
 8007de6:	3308      	adds	r3, #8
 8007de8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	9803      	ldr	r0, [sp, #12]
 8007dee:	b019      	add	sp, #100	; 0x64
 8007df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df4:	4b8b      	ldr	r3, [pc, #556]	; (8008024 <_dtoa_r+0x2d4>)
 8007df6:	9303      	str	r3, [sp, #12]
 8007df8:	3303      	adds	r3, #3
 8007dfa:	e7f5      	b.n	8007de8 <_dtoa_r+0x98>
 8007dfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f7f8 fdd6 	bl	80009bc <__aeabi_dcmpeq>
 8007e10:	4680      	mov	r8, r0
 8007e12:	b158      	cbz	r0, 8007e2c <_dtoa_r+0xdc>
 8007e14:	2301      	movs	r3, #1
 8007e16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8558 	beq.w	80088d2 <_dtoa_r+0xb82>
 8007e22:	4882      	ldr	r0, [pc, #520]	; (800802c <_dtoa_r+0x2dc>)
 8007e24:	6018      	str	r0, [r3, #0]
 8007e26:	1e43      	subs	r3, r0, #1
 8007e28:	9303      	str	r3, [sp, #12]
 8007e2a:	e7df      	b.n	8007dec <_dtoa_r+0x9c>
 8007e2c:	ab16      	add	r3, sp, #88	; 0x58
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	ab17      	add	r3, sp, #92	; 0x5c
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4628      	mov	r0, r5
 8007e36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e3a:	f001 fd13 	bl	8009864 <__d2b>
 8007e3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e42:	4683      	mov	fp, r0
 8007e44:	2c00      	cmp	r4, #0
 8007e46:	d07f      	beq.n	8007f48 <_dtoa_r+0x1f8>
 8007e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007e5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007e5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007e62:	2200      	movs	r2, #0
 8007e64:	4b72      	ldr	r3, [pc, #456]	; (8008030 <_dtoa_r+0x2e0>)
 8007e66:	f7f8 f989 	bl	800017c <__aeabi_dsub>
 8007e6a:	a365      	add	r3, pc, #404	; (adr r3, 8008000 <_dtoa_r+0x2b0>)
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f7f8 fb3c 	bl	80004ec <__aeabi_dmul>
 8007e74:	a364      	add	r3, pc, #400	; (adr r3, 8008008 <_dtoa_r+0x2b8>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f7f8 f981 	bl	8000180 <__adddf3>
 8007e7e:	4606      	mov	r6, r0
 8007e80:	4620      	mov	r0, r4
 8007e82:	460f      	mov	r7, r1
 8007e84:	f7f8 fac8 	bl	8000418 <__aeabi_i2d>
 8007e88:	a361      	add	r3, pc, #388	; (adr r3, 8008010 <_dtoa_r+0x2c0>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fb2d 	bl	80004ec <__aeabi_dmul>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 f971 	bl	8000180 <__adddf3>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	f7f8 fdd3 	bl	8000a4c <__aeabi_d2iz>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4630      	mov	r0, r6
 8007eae:	4639      	mov	r1, r7
 8007eb0:	f7f8 fd8e 	bl	80009d0 <__aeabi_dcmplt>
 8007eb4:	b148      	cbz	r0, 8007eca <_dtoa_r+0x17a>
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f7f8 faae 	bl	8000418 <__aeabi_i2d>
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	f7f8 fd7c 	bl	80009bc <__aeabi_dcmpeq>
 8007ec4:	b908      	cbnz	r0, 8007eca <_dtoa_r+0x17a>
 8007ec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eca:	f1ba 0f16 	cmp.w	sl, #22
 8007ece:	d858      	bhi.n	8007f82 <_dtoa_r+0x232>
 8007ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ed4:	4b57      	ldr	r3, [pc, #348]	; (8008034 <_dtoa_r+0x2e4>)
 8007ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 fd77 	bl	80009d0 <__aeabi_dcmplt>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d04f      	beq.n	8007f86 <_dtoa_r+0x236>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ef0:	1b1c      	subs	r4, r3, r4
 8007ef2:	1e63      	subs	r3, r4, #1
 8007ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef6:	bf49      	itett	mi
 8007ef8:	f1c4 0301 	rsbmi	r3, r4, #1
 8007efc:	2300      	movpl	r3, #0
 8007efe:	9306      	strmi	r3, [sp, #24]
 8007f00:	2300      	movmi	r3, #0
 8007f02:	bf54      	ite	pl
 8007f04:	9306      	strpl	r3, [sp, #24]
 8007f06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007f08:	f1ba 0f00 	cmp.w	sl, #0
 8007f0c:	db3d      	blt.n	8007f8a <_dtoa_r+0x23a>
 8007f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f14:	4453      	add	r3, sl
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	2300      	movs	r3, #0
 8007f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f1e:	2b09      	cmp	r3, #9
 8007f20:	f200 808c 	bhi.w	800803c <_dtoa_r+0x2ec>
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	bfc4      	itt	gt
 8007f28:	3b04      	subgt	r3, #4
 8007f2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f2e:	bfc8      	it	gt
 8007f30:	2400      	movgt	r4, #0
 8007f32:	f1a3 0302 	sub.w	r3, r3, #2
 8007f36:	bfd8      	it	le
 8007f38:	2401      	movle	r4, #1
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	f200 808a 	bhi.w	8008054 <_dtoa_r+0x304>
 8007f40:	e8df f003 	tbb	[pc, r3]
 8007f44:	5b4d4f2d 	.word	0x5b4d4f2d
 8007f48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007f4c:	441c      	add	r4, r3
 8007f4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	bfc3      	ittte	gt
 8007f56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007f5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f62:	f1c3 0320 	rsble	r3, r3, #32
 8007f66:	bfc6      	itte	gt
 8007f68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f6c:	4318      	orrgt	r0, r3
 8007f6e:	fa06 f003 	lslle.w	r0, r6, r3
 8007f72:	f7f8 fa41 	bl	80003f8 <__aeabi_ui2d>
 8007f76:	2301      	movs	r3, #1
 8007f78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007f7c:	3c01      	subs	r4, #1
 8007f7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f80:	e76f      	b.n	8007e62 <_dtoa_r+0x112>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e7b2      	b.n	8007eec <_dtoa_r+0x19c>
 8007f86:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f88:	e7b1      	b.n	8007eee <_dtoa_r+0x19e>
 8007f8a:	9b06      	ldr	r3, [sp, #24]
 8007f8c:	eba3 030a 	sub.w	r3, r3, sl
 8007f90:	9306      	str	r3, [sp, #24]
 8007f92:	f1ca 0300 	rsb	r3, sl, #0
 8007f96:	930a      	str	r3, [sp, #40]	; 0x28
 8007f98:	2300      	movs	r3, #0
 8007f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f9c:	e7be      	b.n	8007f1c <_dtoa_r+0x1cc>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dc58      	bgt.n	800805a <_dtoa_r+0x30a>
 8007fa8:	f04f 0901 	mov.w	r9, #1
 8007fac:	464b      	mov	r3, r9
 8007fae:	f8cd 9020 	str.w	r9, [sp, #32]
 8007fb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007fba:	6042      	str	r2, [r0, #4]
 8007fbc:	2204      	movs	r2, #4
 8007fbe:	f102 0614 	add.w	r6, r2, #20
 8007fc2:	429e      	cmp	r6, r3
 8007fc4:	6841      	ldr	r1, [r0, #4]
 8007fc6:	d94e      	bls.n	8008066 <_dtoa_r+0x316>
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f001 f861 	bl	8009090 <_Balloc>
 8007fce:	9003      	str	r0, [sp, #12]
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d14c      	bne.n	800806e <_dtoa_r+0x31e>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fda:	4b17      	ldr	r3, [pc, #92]	; (8008038 <_dtoa_r+0x2e8>)
 8007fdc:	e6cc      	b.n	8007d78 <_dtoa_r+0x28>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e7de      	b.n	8007fa0 <_dtoa_r+0x250>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fe8:	eb0a 0903 	add.w	r9, sl, r3
 8007fec:	f109 0301 	add.w	r3, r9, #1
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	9308      	str	r3, [sp, #32]
 8007ff4:	bfb8      	it	lt
 8007ff6:	2301      	movlt	r3, #1
 8007ff8:	e7dd      	b.n	8007fb6 <_dtoa_r+0x266>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e7f2      	b.n	8007fe4 <_dtoa_r+0x294>
 8007ffe:	bf00      	nop
 8008000:	636f4361 	.word	0x636f4361
 8008004:	3fd287a7 	.word	0x3fd287a7
 8008008:	8b60c8b3 	.word	0x8b60c8b3
 800800c:	3fc68a28 	.word	0x3fc68a28
 8008010:	509f79fb 	.word	0x509f79fb
 8008014:	3fd34413 	.word	0x3fd34413
 8008018:	0800abb0 	.word	0x0800abb0
 800801c:	0800ad6e 	.word	0x0800ad6e
 8008020:	7ff00000 	.word	0x7ff00000
 8008024:	0800ad6a 	.word	0x0800ad6a
 8008028:	0800ad61 	.word	0x0800ad61
 800802c:	0800ab35 	.word	0x0800ab35
 8008030:	3ff80000 	.word	0x3ff80000
 8008034:	0800aed8 	.word	0x0800aed8
 8008038:	0800adc9 	.word	0x0800adc9
 800803c:	2401      	movs	r4, #1
 800803e:	2300      	movs	r3, #0
 8008040:	940b      	str	r4, [sp, #44]	; 0x2c
 8008042:	9322      	str	r3, [sp, #136]	; 0x88
 8008044:	f04f 39ff 	mov.w	r9, #4294967295
 8008048:	2200      	movs	r2, #0
 800804a:	2312      	movs	r3, #18
 800804c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008050:	9223      	str	r2, [sp, #140]	; 0x8c
 8008052:	e7b0      	b.n	8007fb6 <_dtoa_r+0x266>
 8008054:	2301      	movs	r3, #1
 8008056:	930b      	str	r3, [sp, #44]	; 0x2c
 8008058:	e7f4      	b.n	8008044 <_dtoa_r+0x2f4>
 800805a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800805e:	464b      	mov	r3, r9
 8008060:	f8cd 9020 	str.w	r9, [sp, #32]
 8008064:	e7a7      	b.n	8007fb6 <_dtoa_r+0x266>
 8008066:	3101      	adds	r1, #1
 8008068:	6041      	str	r1, [r0, #4]
 800806a:	0052      	lsls	r2, r2, #1
 800806c:	e7a7      	b.n	8007fbe <_dtoa_r+0x26e>
 800806e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008070:	9a03      	ldr	r2, [sp, #12]
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	9b08      	ldr	r3, [sp, #32]
 8008076:	2b0e      	cmp	r3, #14
 8008078:	f200 80a8 	bhi.w	80081cc <_dtoa_r+0x47c>
 800807c:	2c00      	cmp	r4, #0
 800807e:	f000 80a5 	beq.w	80081cc <_dtoa_r+0x47c>
 8008082:	f1ba 0f00 	cmp.w	sl, #0
 8008086:	dd34      	ble.n	80080f2 <_dtoa_r+0x3a2>
 8008088:	4a9a      	ldr	r2, [pc, #616]	; (80082f4 <_dtoa_r+0x5a4>)
 800808a:	f00a 030f 	and.w	r3, sl, #15
 800808e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008092:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800809a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800809e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80080a2:	d016      	beq.n	80080d2 <_dtoa_r+0x382>
 80080a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080a8:	4b93      	ldr	r3, [pc, #588]	; (80082f8 <_dtoa_r+0x5a8>)
 80080aa:	2703      	movs	r7, #3
 80080ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080b0:	f7f8 fb46 	bl	8000740 <__aeabi_ddiv>
 80080b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080b8:	f004 040f 	and.w	r4, r4, #15
 80080bc:	4e8e      	ldr	r6, [pc, #568]	; (80082f8 <_dtoa_r+0x5a8>)
 80080be:	b954      	cbnz	r4, 80080d6 <_dtoa_r+0x386>
 80080c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080c8:	f7f8 fb3a 	bl	8000740 <__aeabi_ddiv>
 80080cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080d0:	e029      	b.n	8008126 <_dtoa_r+0x3d6>
 80080d2:	2702      	movs	r7, #2
 80080d4:	e7f2      	b.n	80080bc <_dtoa_r+0x36c>
 80080d6:	07e1      	lsls	r1, r4, #31
 80080d8:	d508      	bpl.n	80080ec <_dtoa_r+0x39c>
 80080da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080e2:	f7f8 fa03 	bl	80004ec <__aeabi_dmul>
 80080e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080ea:	3701      	adds	r7, #1
 80080ec:	1064      	asrs	r4, r4, #1
 80080ee:	3608      	adds	r6, #8
 80080f0:	e7e5      	b.n	80080be <_dtoa_r+0x36e>
 80080f2:	f000 80a5 	beq.w	8008240 <_dtoa_r+0x4f0>
 80080f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080fa:	f1ca 0400 	rsb	r4, sl, #0
 80080fe:	4b7d      	ldr	r3, [pc, #500]	; (80082f4 <_dtoa_r+0x5a4>)
 8008100:	f004 020f 	and.w	r2, r4, #15
 8008104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f9ee 	bl	80004ec <__aeabi_dmul>
 8008110:	2702      	movs	r7, #2
 8008112:	2300      	movs	r3, #0
 8008114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008118:	4e77      	ldr	r6, [pc, #476]	; (80082f8 <_dtoa_r+0x5a8>)
 800811a:	1124      	asrs	r4, r4, #4
 800811c:	2c00      	cmp	r4, #0
 800811e:	f040 8084 	bne.w	800822a <_dtoa_r+0x4da>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1d2      	bne.n	80080cc <_dtoa_r+0x37c>
 8008126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 808b 	beq.w	8008244 <_dtoa_r+0x4f4>
 800812e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800813a:	2200      	movs	r2, #0
 800813c:	4b6f      	ldr	r3, [pc, #444]	; (80082fc <_dtoa_r+0x5ac>)
 800813e:	f7f8 fc47 	bl	80009d0 <__aeabi_dcmplt>
 8008142:	2800      	cmp	r0, #0
 8008144:	d07e      	beq.n	8008244 <_dtoa_r+0x4f4>
 8008146:	9b08      	ldr	r3, [sp, #32]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d07b      	beq.n	8008244 <_dtoa_r+0x4f4>
 800814c:	f1b9 0f00 	cmp.w	r9, #0
 8008150:	dd38      	ble.n	80081c4 <_dtoa_r+0x474>
 8008152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008156:	2200      	movs	r2, #0
 8008158:	4b69      	ldr	r3, [pc, #420]	; (8008300 <_dtoa_r+0x5b0>)
 800815a:	f7f8 f9c7 	bl	80004ec <__aeabi_dmul>
 800815e:	464c      	mov	r4, r9
 8008160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008164:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008168:	3701      	adds	r7, #1
 800816a:	4638      	mov	r0, r7
 800816c:	f7f8 f954 	bl	8000418 <__aeabi_i2d>
 8008170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008174:	f7f8 f9ba 	bl	80004ec <__aeabi_dmul>
 8008178:	2200      	movs	r2, #0
 800817a:	4b62      	ldr	r3, [pc, #392]	; (8008304 <_dtoa_r+0x5b4>)
 800817c:	f7f8 f800 	bl	8000180 <__adddf3>
 8008180:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008184:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008188:	9611      	str	r6, [sp, #68]	; 0x44
 800818a:	2c00      	cmp	r4, #0
 800818c:	d15d      	bne.n	800824a <_dtoa_r+0x4fa>
 800818e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	4b5c      	ldr	r3, [pc, #368]	; (8008308 <_dtoa_r+0x5b8>)
 8008196:	f7f7 fff1 	bl	800017c <__aeabi_dsub>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081a2:	4633      	mov	r3, r6
 80081a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081a6:	f7f8 fc31 	bl	8000a0c <__aeabi_dcmpgt>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	f040 829c 	bne.w	80086e8 <_dtoa_r+0x998>
 80081b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80081ba:	f7f8 fc09 	bl	80009d0 <__aeabi_dcmplt>
 80081be:	2800      	cmp	r0, #0
 80081c0:	f040 8290 	bne.w	80086e4 <_dtoa_r+0x994>
 80081c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80081c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f2c0 8152 	blt.w	8008478 <_dtoa_r+0x728>
 80081d4:	f1ba 0f0e 	cmp.w	sl, #14
 80081d8:	f300 814e 	bgt.w	8008478 <_dtoa_r+0x728>
 80081dc:	4b45      	ldr	r3, [pc, #276]	; (80082f4 <_dtoa_r+0x5a4>)
 80081de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80081ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f280 80db 	bge.w	80083a8 <_dtoa_r+0x658>
 80081f2:	9b08      	ldr	r3, [sp, #32]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f300 80d7 	bgt.w	80083a8 <_dtoa_r+0x658>
 80081fa:	f040 8272 	bne.w	80086e2 <_dtoa_r+0x992>
 80081fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008202:	2200      	movs	r2, #0
 8008204:	4b40      	ldr	r3, [pc, #256]	; (8008308 <_dtoa_r+0x5b8>)
 8008206:	f7f8 f971 	bl	80004ec <__aeabi_dmul>
 800820a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800820e:	f7f8 fbf3 	bl	80009f8 <__aeabi_dcmpge>
 8008212:	9c08      	ldr	r4, [sp, #32]
 8008214:	4626      	mov	r6, r4
 8008216:	2800      	cmp	r0, #0
 8008218:	f040 8248 	bne.w	80086ac <_dtoa_r+0x95c>
 800821c:	2331      	movs	r3, #49	; 0x31
 800821e:	9f03      	ldr	r7, [sp, #12]
 8008220:	f10a 0a01 	add.w	sl, sl, #1
 8008224:	f807 3b01 	strb.w	r3, [r7], #1
 8008228:	e244      	b.n	80086b4 <_dtoa_r+0x964>
 800822a:	07e2      	lsls	r2, r4, #31
 800822c:	d505      	bpl.n	800823a <_dtoa_r+0x4ea>
 800822e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008232:	f7f8 f95b 	bl	80004ec <__aeabi_dmul>
 8008236:	2301      	movs	r3, #1
 8008238:	3701      	adds	r7, #1
 800823a:	1064      	asrs	r4, r4, #1
 800823c:	3608      	adds	r6, #8
 800823e:	e76d      	b.n	800811c <_dtoa_r+0x3cc>
 8008240:	2702      	movs	r7, #2
 8008242:	e770      	b.n	8008126 <_dtoa_r+0x3d6>
 8008244:	46d0      	mov	r8, sl
 8008246:	9c08      	ldr	r4, [sp, #32]
 8008248:	e78f      	b.n	800816a <_dtoa_r+0x41a>
 800824a:	9903      	ldr	r1, [sp, #12]
 800824c:	4b29      	ldr	r3, [pc, #164]	; (80082f4 <_dtoa_r+0x5a4>)
 800824e:	4421      	add	r1, r4
 8008250:	9112      	str	r1, [sp, #72]	; 0x48
 8008252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008258:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800825c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008260:	2900      	cmp	r1, #0
 8008262:	d055      	beq.n	8008310 <_dtoa_r+0x5c0>
 8008264:	2000      	movs	r0, #0
 8008266:	4929      	ldr	r1, [pc, #164]	; (800830c <_dtoa_r+0x5bc>)
 8008268:	f7f8 fa6a 	bl	8000740 <__aeabi_ddiv>
 800826c:	463b      	mov	r3, r7
 800826e:	4632      	mov	r2, r6
 8008270:	f7f7 ff84 	bl	800017c <__aeabi_dsub>
 8008274:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008278:	9f03      	ldr	r7, [sp, #12]
 800827a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800827e:	f7f8 fbe5 	bl	8000a4c <__aeabi_d2iz>
 8008282:	4604      	mov	r4, r0
 8008284:	f7f8 f8c8 	bl	8000418 <__aeabi_i2d>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008290:	f7f7 ff74 	bl	800017c <__aeabi_dsub>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	3430      	adds	r4, #48	; 0x30
 800829a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800829e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082a2:	f807 4b01 	strb.w	r4, [r7], #1
 80082a6:	f7f8 fb93 	bl	80009d0 <__aeabi_dcmplt>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d174      	bne.n	8008398 <_dtoa_r+0x648>
 80082ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b2:	2000      	movs	r0, #0
 80082b4:	4911      	ldr	r1, [pc, #68]	; (80082fc <_dtoa_r+0x5ac>)
 80082b6:	f7f7 ff61 	bl	800017c <__aeabi_dsub>
 80082ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082be:	f7f8 fb87 	bl	80009d0 <__aeabi_dcmplt>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f040 80b7 	bne.w	8008436 <_dtoa_r+0x6e6>
 80082c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ca:	429f      	cmp	r7, r3
 80082cc:	f43f af7a 	beq.w	80081c4 <_dtoa_r+0x474>
 80082d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082d4:	2200      	movs	r2, #0
 80082d6:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <_dtoa_r+0x5b0>)
 80082d8:	f7f8 f908 	bl	80004ec <__aeabi_dmul>
 80082dc:	2200      	movs	r2, #0
 80082de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <_dtoa_r+0x5b0>)
 80082e8:	f7f8 f900 	bl	80004ec <__aeabi_dmul>
 80082ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082f0:	e7c3      	b.n	800827a <_dtoa_r+0x52a>
 80082f2:	bf00      	nop
 80082f4:	0800aed8 	.word	0x0800aed8
 80082f8:	0800aeb0 	.word	0x0800aeb0
 80082fc:	3ff00000 	.word	0x3ff00000
 8008300:	40240000 	.word	0x40240000
 8008304:	401c0000 	.word	0x401c0000
 8008308:	40140000 	.word	0x40140000
 800830c:	3fe00000 	.word	0x3fe00000
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	f7f8 f8ea 	bl	80004ec <__aeabi_dmul>
 8008318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800831a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800831e:	9c03      	ldr	r4, [sp, #12]
 8008320:	9314      	str	r3, [sp, #80]	; 0x50
 8008322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008326:	f7f8 fb91 	bl	8000a4c <__aeabi_d2iz>
 800832a:	9015      	str	r0, [sp, #84]	; 0x54
 800832c:	f7f8 f874 	bl	8000418 <__aeabi_i2d>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008338:	f7f7 ff20 	bl	800017c <__aeabi_dsub>
 800833c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800833e:	4606      	mov	r6, r0
 8008340:	3330      	adds	r3, #48	; 0x30
 8008342:	f804 3b01 	strb.w	r3, [r4], #1
 8008346:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008348:	460f      	mov	r7, r1
 800834a:	429c      	cmp	r4, r3
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	d124      	bne.n	800839c <_dtoa_r+0x64c>
 8008352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008356:	4bb0      	ldr	r3, [pc, #704]	; (8008618 <_dtoa_r+0x8c8>)
 8008358:	f7f7 ff12 	bl	8000180 <__adddf3>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4630      	mov	r0, r6
 8008362:	4639      	mov	r1, r7
 8008364:	f7f8 fb52 	bl	8000a0c <__aeabi_dcmpgt>
 8008368:	2800      	cmp	r0, #0
 800836a:	d163      	bne.n	8008434 <_dtoa_r+0x6e4>
 800836c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008370:	2000      	movs	r0, #0
 8008372:	49a9      	ldr	r1, [pc, #676]	; (8008618 <_dtoa_r+0x8c8>)
 8008374:	f7f7 ff02 	bl	800017c <__aeabi_dsub>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4630      	mov	r0, r6
 800837e:	4639      	mov	r1, r7
 8008380:	f7f8 fb26 	bl	80009d0 <__aeabi_dcmplt>
 8008384:	2800      	cmp	r0, #0
 8008386:	f43f af1d 	beq.w	80081c4 <_dtoa_r+0x474>
 800838a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800838c:	1e7b      	subs	r3, r7, #1
 800838e:	9314      	str	r3, [sp, #80]	; 0x50
 8008390:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008394:	2b30      	cmp	r3, #48	; 0x30
 8008396:	d0f8      	beq.n	800838a <_dtoa_r+0x63a>
 8008398:	46c2      	mov	sl, r8
 800839a:	e03b      	b.n	8008414 <_dtoa_r+0x6c4>
 800839c:	4b9f      	ldr	r3, [pc, #636]	; (800861c <_dtoa_r+0x8cc>)
 800839e:	f7f8 f8a5 	bl	80004ec <__aeabi_dmul>
 80083a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083a6:	e7bc      	b.n	8008322 <_dtoa_r+0x5d2>
 80083a8:	9f03      	ldr	r7, [sp, #12]
 80083aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80083ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083b2:	4640      	mov	r0, r8
 80083b4:	4649      	mov	r1, r9
 80083b6:	f7f8 f9c3 	bl	8000740 <__aeabi_ddiv>
 80083ba:	f7f8 fb47 	bl	8000a4c <__aeabi_d2iz>
 80083be:	4604      	mov	r4, r0
 80083c0:	f7f8 f82a 	bl	8000418 <__aeabi_i2d>
 80083c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083c8:	f7f8 f890 	bl	80004ec <__aeabi_dmul>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	4640      	mov	r0, r8
 80083d2:	4649      	mov	r1, r9
 80083d4:	f7f7 fed2 	bl	800017c <__aeabi_dsub>
 80083d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80083dc:	f807 6b01 	strb.w	r6, [r7], #1
 80083e0:	9e03      	ldr	r6, [sp, #12]
 80083e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80083e6:	1bbe      	subs	r6, r7, r6
 80083e8:	45b4      	cmp	ip, r6
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	d136      	bne.n	800845e <_dtoa_r+0x70e>
 80083f0:	f7f7 fec6 	bl	8000180 <__adddf3>
 80083f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083f8:	4680      	mov	r8, r0
 80083fa:	4689      	mov	r9, r1
 80083fc:	f7f8 fb06 	bl	8000a0c <__aeabi_dcmpgt>
 8008400:	bb58      	cbnz	r0, 800845a <_dtoa_r+0x70a>
 8008402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008406:	4640      	mov	r0, r8
 8008408:	4649      	mov	r1, r9
 800840a:	f7f8 fad7 	bl	80009bc <__aeabi_dcmpeq>
 800840e:	b108      	cbz	r0, 8008414 <_dtoa_r+0x6c4>
 8008410:	07e1      	lsls	r1, r4, #31
 8008412:	d422      	bmi.n	800845a <_dtoa_r+0x70a>
 8008414:	4628      	mov	r0, r5
 8008416:	4659      	mov	r1, fp
 8008418:	f000 fe7a 	bl	8009110 <_Bfree>
 800841c:	2300      	movs	r3, #0
 800841e:	703b      	strb	r3, [r7, #0]
 8008420:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008422:	f10a 0001 	add.w	r0, sl, #1
 8008426:	6018      	str	r0, [r3, #0]
 8008428:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800842a:	2b00      	cmp	r3, #0
 800842c:	f43f acde 	beq.w	8007dec <_dtoa_r+0x9c>
 8008430:	601f      	str	r7, [r3, #0]
 8008432:	e4db      	b.n	8007dec <_dtoa_r+0x9c>
 8008434:	4627      	mov	r7, r4
 8008436:	463b      	mov	r3, r7
 8008438:	461f      	mov	r7, r3
 800843a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800843e:	2a39      	cmp	r2, #57	; 0x39
 8008440:	d107      	bne.n	8008452 <_dtoa_r+0x702>
 8008442:	9a03      	ldr	r2, [sp, #12]
 8008444:	429a      	cmp	r2, r3
 8008446:	d1f7      	bne.n	8008438 <_dtoa_r+0x6e8>
 8008448:	2230      	movs	r2, #48	; 0x30
 800844a:	9903      	ldr	r1, [sp, #12]
 800844c:	f108 0801 	add.w	r8, r8, #1
 8008450:	700a      	strb	r2, [r1, #0]
 8008452:	781a      	ldrb	r2, [r3, #0]
 8008454:	3201      	adds	r2, #1
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	e79e      	b.n	8008398 <_dtoa_r+0x648>
 800845a:	46d0      	mov	r8, sl
 800845c:	e7eb      	b.n	8008436 <_dtoa_r+0x6e6>
 800845e:	2200      	movs	r2, #0
 8008460:	4b6e      	ldr	r3, [pc, #440]	; (800861c <_dtoa_r+0x8cc>)
 8008462:	f7f8 f843 	bl	80004ec <__aeabi_dmul>
 8008466:	2200      	movs	r2, #0
 8008468:	2300      	movs	r3, #0
 800846a:	4680      	mov	r8, r0
 800846c:	4689      	mov	r9, r1
 800846e:	f7f8 faa5 	bl	80009bc <__aeabi_dcmpeq>
 8008472:	2800      	cmp	r0, #0
 8008474:	d09b      	beq.n	80083ae <_dtoa_r+0x65e>
 8008476:	e7cd      	b.n	8008414 <_dtoa_r+0x6c4>
 8008478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800847a:	2a00      	cmp	r2, #0
 800847c:	f000 80d0 	beq.w	8008620 <_dtoa_r+0x8d0>
 8008480:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008482:	2a01      	cmp	r2, #1
 8008484:	f300 80ae 	bgt.w	80085e4 <_dtoa_r+0x894>
 8008488:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800848a:	2a00      	cmp	r2, #0
 800848c:	f000 80a6 	beq.w	80085dc <_dtoa_r+0x88c>
 8008490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008494:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008496:	9f06      	ldr	r7, [sp, #24]
 8008498:	9a06      	ldr	r2, [sp, #24]
 800849a:	2101      	movs	r1, #1
 800849c:	441a      	add	r2, r3
 800849e:	9206      	str	r2, [sp, #24]
 80084a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a2:	4628      	mov	r0, r5
 80084a4:	441a      	add	r2, r3
 80084a6:	9209      	str	r2, [sp, #36]	; 0x24
 80084a8:	f000 ff32 	bl	8009310 <__i2b>
 80084ac:	4606      	mov	r6, r0
 80084ae:	2f00      	cmp	r7, #0
 80084b0:	dd0c      	ble.n	80084cc <_dtoa_r+0x77c>
 80084b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd09      	ble.n	80084cc <_dtoa_r+0x77c>
 80084b8:	42bb      	cmp	r3, r7
 80084ba:	bfa8      	it	ge
 80084bc:	463b      	movge	r3, r7
 80084be:	9a06      	ldr	r2, [sp, #24]
 80084c0:	1aff      	subs	r7, r7, r3
 80084c2:	1ad2      	subs	r2, r2, r3
 80084c4:	9206      	str	r2, [sp, #24]
 80084c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	9309      	str	r3, [sp, #36]	; 0x24
 80084cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ce:	b1f3      	cbz	r3, 800850e <_dtoa_r+0x7be>
 80084d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80a8 	beq.w	8008628 <_dtoa_r+0x8d8>
 80084d8:	2c00      	cmp	r4, #0
 80084da:	dd10      	ble.n	80084fe <_dtoa_r+0x7ae>
 80084dc:	4631      	mov	r1, r6
 80084de:	4622      	mov	r2, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 ffd3 	bl	800948c <__pow5mult>
 80084e6:	465a      	mov	r2, fp
 80084e8:	4601      	mov	r1, r0
 80084ea:	4606      	mov	r6, r0
 80084ec:	4628      	mov	r0, r5
 80084ee:	f000 ff25 	bl	800933c <__multiply>
 80084f2:	4680      	mov	r8, r0
 80084f4:	4659      	mov	r1, fp
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 fe0a 	bl	8009110 <_Bfree>
 80084fc:	46c3      	mov	fp, r8
 80084fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008500:	1b1a      	subs	r2, r3, r4
 8008502:	d004      	beq.n	800850e <_dtoa_r+0x7be>
 8008504:	4659      	mov	r1, fp
 8008506:	4628      	mov	r0, r5
 8008508:	f000 ffc0 	bl	800948c <__pow5mult>
 800850c:	4683      	mov	fp, r0
 800850e:	2101      	movs	r1, #1
 8008510:	4628      	mov	r0, r5
 8008512:	f000 fefd 	bl	8009310 <__i2b>
 8008516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008518:	4604      	mov	r4, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	f340 8086 	ble.w	800862c <_dtoa_r+0x8dc>
 8008520:	461a      	mov	r2, r3
 8008522:	4601      	mov	r1, r0
 8008524:	4628      	mov	r0, r5
 8008526:	f000 ffb1 	bl	800948c <__pow5mult>
 800852a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800852c:	4604      	mov	r4, r0
 800852e:	2b01      	cmp	r3, #1
 8008530:	dd7f      	ble.n	8008632 <_dtoa_r+0x8e2>
 8008532:	f04f 0800 	mov.w	r8, #0
 8008536:	6923      	ldr	r3, [r4, #16]
 8008538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800853c:	6918      	ldr	r0, [r3, #16]
 800853e:	f000 fe99 	bl	8009274 <__hi0bits>
 8008542:	f1c0 0020 	rsb	r0, r0, #32
 8008546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008548:	4418      	add	r0, r3
 800854a:	f010 001f 	ands.w	r0, r0, #31
 800854e:	f000 8092 	beq.w	8008676 <_dtoa_r+0x926>
 8008552:	f1c0 0320 	rsb	r3, r0, #32
 8008556:	2b04      	cmp	r3, #4
 8008558:	f340 808a 	ble.w	8008670 <_dtoa_r+0x920>
 800855c:	f1c0 001c 	rsb	r0, r0, #28
 8008560:	9b06      	ldr	r3, [sp, #24]
 8008562:	4407      	add	r7, r0
 8008564:	4403      	add	r3, r0
 8008566:	9306      	str	r3, [sp, #24]
 8008568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856a:	4403      	add	r3, r0
 800856c:	9309      	str	r3, [sp, #36]	; 0x24
 800856e:	9b06      	ldr	r3, [sp, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	dd05      	ble.n	8008580 <_dtoa_r+0x830>
 8008574:	4659      	mov	r1, fp
 8008576:	461a      	mov	r2, r3
 8008578:	4628      	mov	r0, r5
 800857a:	f000 ffe1 	bl	8009540 <__lshift>
 800857e:	4683      	mov	fp, r0
 8008580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd05      	ble.n	8008592 <_dtoa_r+0x842>
 8008586:	4621      	mov	r1, r4
 8008588:	461a      	mov	r2, r3
 800858a:	4628      	mov	r0, r5
 800858c:	f000 ffd8 	bl	8009540 <__lshift>
 8008590:	4604      	mov	r4, r0
 8008592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d070      	beq.n	800867a <_dtoa_r+0x92a>
 8008598:	4621      	mov	r1, r4
 800859a:	4658      	mov	r0, fp
 800859c:	f001 f840 	bl	8009620 <__mcmp>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	da6a      	bge.n	800867a <_dtoa_r+0x92a>
 80085a4:	2300      	movs	r3, #0
 80085a6:	4659      	mov	r1, fp
 80085a8:	220a      	movs	r2, #10
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 fdd2 	bl	8009154 <__multadd>
 80085b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b2:	4683      	mov	fp, r0
 80085b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8194 	beq.w	80088e6 <_dtoa_r+0xb96>
 80085be:	4631      	mov	r1, r6
 80085c0:	2300      	movs	r3, #0
 80085c2:	220a      	movs	r2, #10
 80085c4:	4628      	mov	r0, r5
 80085c6:	f000 fdc5 	bl	8009154 <__multadd>
 80085ca:	f1b9 0f00 	cmp.w	r9, #0
 80085ce:	4606      	mov	r6, r0
 80085d0:	f300 8093 	bgt.w	80086fa <_dtoa_r+0x9aa>
 80085d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	dc57      	bgt.n	800868a <_dtoa_r+0x93a>
 80085da:	e08e      	b.n	80086fa <_dtoa_r+0x9aa>
 80085dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80085de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085e2:	e757      	b.n	8008494 <_dtoa_r+0x744>
 80085e4:	9b08      	ldr	r3, [sp, #32]
 80085e6:	1e5c      	subs	r4, r3, #1
 80085e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ea:	42a3      	cmp	r3, r4
 80085ec:	bfb7      	itett	lt
 80085ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80085f0:	1b1c      	subge	r4, r3, r4
 80085f2:	1ae2      	sublt	r2, r4, r3
 80085f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80085f6:	bfbe      	ittt	lt
 80085f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80085fa:	189b      	addlt	r3, r3, r2
 80085fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	bfb8      	it	lt
 8008602:	2400      	movlt	r4, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbb      	ittet	lt
 8008608:	9b06      	ldrlt	r3, [sp, #24]
 800860a:	9a08      	ldrlt	r2, [sp, #32]
 800860c:	9f06      	ldrge	r7, [sp, #24]
 800860e:	1a9f      	sublt	r7, r3, r2
 8008610:	bfac      	ite	ge
 8008612:	9b08      	ldrge	r3, [sp, #32]
 8008614:	2300      	movlt	r3, #0
 8008616:	e73f      	b.n	8008498 <_dtoa_r+0x748>
 8008618:	3fe00000 	.word	0x3fe00000
 800861c:	40240000 	.word	0x40240000
 8008620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008622:	9f06      	ldr	r7, [sp, #24]
 8008624:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008626:	e742      	b.n	80084ae <_dtoa_r+0x75e>
 8008628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800862a:	e76b      	b.n	8008504 <_dtoa_r+0x7b4>
 800862c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800862e:	2b01      	cmp	r3, #1
 8008630:	dc19      	bgt.n	8008666 <_dtoa_r+0x916>
 8008632:	9b04      	ldr	r3, [sp, #16]
 8008634:	b9bb      	cbnz	r3, 8008666 <_dtoa_r+0x916>
 8008636:	9b05      	ldr	r3, [sp, #20]
 8008638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800863c:	b99b      	cbnz	r3, 8008666 <_dtoa_r+0x916>
 800863e:	9b05      	ldr	r3, [sp, #20]
 8008640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008644:	0d1b      	lsrs	r3, r3, #20
 8008646:	051b      	lsls	r3, r3, #20
 8008648:	b183      	cbz	r3, 800866c <_dtoa_r+0x91c>
 800864a:	f04f 0801 	mov.w	r8, #1
 800864e:	9b06      	ldr	r3, [sp, #24]
 8008650:	3301      	adds	r3, #1
 8008652:	9306      	str	r3, [sp, #24]
 8008654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008656:	3301      	adds	r3, #1
 8008658:	9309      	str	r3, [sp, #36]	; 0x24
 800865a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800865c:	2b00      	cmp	r3, #0
 800865e:	f47f af6a 	bne.w	8008536 <_dtoa_r+0x7e6>
 8008662:	2001      	movs	r0, #1
 8008664:	e76f      	b.n	8008546 <_dtoa_r+0x7f6>
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	e7f6      	b.n	800865a <_dtoa_r+0x90a>
 800866c:	4698      	mov	r8, r3
 800866e:	e7f4      	b.n	800865a <_dtoa_r+0x90a>
 8008670:	f43f af7d 	beq.w	800856e <_dtoa_r+0x81e>
 8008674:	4618      	mov	r0, r3
 8008676:	301c      	adds	r0, #28
 8008678:	e772      	b.n	8008560 <_dtoa_r+0x810>
 800867a:	9b08      	ldr	r3, [sp, #32]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dc36      	bgt.n	80086ee <_dtoa_r+0x99e>
 8008680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008682:	2b02      	cmp	r3, #2
 8008684:	dd33      	ble.n	80086ee <_dtoa_r+0x99e>
 8008686:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	d10d      	bne.n	80086ac <_dtoa_r+0x95c>
 8008690:	4621      	mov	r1, r4
 8008692:	464b      	mov	r3, r9
 8008694:	2205      	movs	r2, #5
 8008696:	4628      	mov	r0, r5
 8008698:	f000 fd5c 	bl	8009154 <__multadd>
 800869c:	4601      	mov	r1, r0
 800869e:	4604      	mov	r4, r0
 80086a0:	4658      	mov	r0, fp
 80086a2:	f000 ffbd 	bl	8009620 <__mcmp>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	f73f adb8 	bgt.w	800821c <_dtoa_r+0x4cc>
 80086ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086ae:	9f03      	ldr	r7, [sp, #12]
 80086b0:	ea6f 0a03 	mvn.w	sl, r3
 80086b4:	f04f 0800 	mov.w	r8, #0
 80086b8:	4621      	mov	r1, r4
 80086ba:	4628      	mov	r0, r5
 80086bc:	f000 fd28 	bl	8009110 <_Bfree>
 80086c0:	2e00      	cmp	r6, #0
 80086c2:	f43f aea7 	beq.w	8008414 <_dtoa_r+0x6c4>
 80086c6:	f1b8 0f00 	cmp.w	r8, #0
 80086ca:	d005      	beq.n	80086d8 <_dtoa_r+0x988>
 80086cc:	45b0      	cmp	r8, r6
 80086ce:	d003      	beq.n	80086d8 <_dtoa_r+0x988>
 80086d0:	4641      	mov	r1, r8
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 fd1c 	bl	8009110 <_Bfree>
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 fd18 	bl	8009110 <_Bfree>
 80086e0:	e698      	b.n	8008414 <_dtoa_r+0x6c4>
 80086e2:	2400      	movs	r4, #0
 80086e4:	4626      	mov	r6, r4
 80086e6:	e7e1      	b.n	80086ac <_dtoa_r+0x95c>
 80086e8:	46c2      	mov	sl, r8
 80086ea:	4626      	mov	r6, r4
 80086ec:	e596      	b.n	800821c <_dtoa_r+0x4cc>
 80086ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80fd 	beq.w	80088f4 <_dtoa_r+0xba4>
 80086fa:	2f00      	cmp	r7, #0
 80086fc:	dd05      	ble.n	800870a <_dtoa_r+0x9ba>
 80086fe:	4631      	mov	r1, r6
 8008700:	463a      	mov	r2, r7
 8008702:	4628      	mov	r0, r5
 8008704:	f000 ff1c 	bl	8009540 <__lshift>
 8008708:	4606      	mov	r6, r0
 800870a:	f1b8 0f00 	cmp.w	r8, #0
 800870e:	d05c      	beq.n	80087ca <_dtoa_r+0xa7a>
 8008710:	4628      	mov	r0, r5
 8008712:	6871      	ldr	r1, [r6, #4]
 8008714:	f000 fcbc 	bl	8009090 <_Balloc>
 8008718:	4607      	mov	r7, r0
 800871a:	b928      	cbnz	r0, 8008728 <_dtoa_r+0x9d8>
 800871c:	4602      	mov	r2, r0
 800871e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008722:	4b7f      	ldr	r3, [pc, #508]	; (8008920 <_dtoa_r+0xbd0>)
 8008724:	f7ff bb28 	b.w	8007d78 <_dtoa_r+0x28>
 8008728:	6932      	ldr	r2, [r6, #16]
 800872a:	f106 010c 	add.w	r1, r6, #12
 800872e:	3202      	adds	r2, #2
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	300c      	adds	r0, #12
 8008734:	f000 fc9e 	bl	8009074 <memcpy>
 8008738:	2201      	movs	r2, #1
 800873a:	4639      	mov	r1, r7
 800873c:	4628      	mov	r0, r5
 800873e:	f000 feff 	bl	8009540 <__lshift>
 8008742:	46b0      	mov	r8, r6
 8008744:	4606      	mov	r6, r0
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	3301      	adds	r3, #1
 800874a:	9308      	str	r3, [sp, #32]
 800874c:	9b03      	ldr	r3, [sp, #12]
 800874e:	444b      	add	r3, r9
 8008750:	930a      	str	r3, [sp, #40]	; 0x28
 8008752:	9b04      	ldr	r3, [sp, #16]
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	9309      	str	r3, [sp, #36]	; 0x24
 800875a:	9b08      	ldr	r3, [sp, #32]
 800875c:	4621      	mov	r1, r4
 800875e:	3b01      	subs	r3, #1
 8008760:	4658      	mov	r0, fp
 8008762:	9304      	str	r3, [sp, #16]
 8008764:	f7ff fa68 	bl	8007c38 <quorem>
 8008768:	4603      	mov	r3, r0
 800876a:	4641      	mov	r1, r8
 800876c:	3330      	adds	r3, #48	; 0x30
 800876e:	9006      	str	r0, [sp, #24]
 8008770:	4658      	mov	r0, fp
 8008772:	930b      	str	r3, [sp, #44]	; 0x2c
 8008774:	f000 ff54 	bl	8009620 <__mcmp>
 8008778:	4632      	mov	r2, r6
 800877a:	4681      	mov	r9, r0
 800877c:	4621      	mov	r1, r4
 800877e:	4628      	mov	r0, r5
 8008780:	f000 ff6a 	bl	8009658 <__mdiff>
 8008784:	68c2      	ldr	r2, [r0, #12]
 8008786:	4607      	mov	r7, r0
 8008788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800878a:	bb02      	cbnz	r2, 80087ce <_dtoa_r+0xa7e>
 800878c:	4601      	mov	r1, r0
 800878e:	4658      	mov	r0, fp
 8008790:	f000 ff46 	bl	8009620 <__mcmp>
 8008794:	4602      	mov	r2, r0
 8008796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008798:	4639      	mov	r1, r7
 800879a:	4628      	mov	r0, r5
 800879c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80087a0:	f000 fcb6 	bl	8009110 <_Bfree>
 80087a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087a8:	9f08      	ldr	r7, [sp, #32]
 80087aa:	ea43 0102 	orr.w	r1, r3, r2
 80087ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b0:	430b      	orrs	r3, r1
 80087b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b4:	d10d      	bne.n	80087d2 <_dtoa_r+0xa82>
 80087b6:	2b39      	cmp	r3, #57	; 0x39
 80087b8:	d029      	beq.n	800880e <_dtoa_r+0xabe>
 80087ba:	f1b9 0f00 	cmp.w	r9, #0
 80087be:	dd01      	ble.n	80087c4 <_dtoa_r+0xa74>
 80087c0:	9b06      	ldr	r3, [sp, #24]
 80087c2:	3331      	adds	r3, #49	; 0x31
 80087c4:	9a04      	ldr	r2, [sp, #16]
 80087c6:	7013      	strb	r3, [r2, #0]
 80087c8:	e776      	b.n	80086b8 <_dtoa_r+0x968>
 80087ca:	4630      	mov	r0, r6
 80087cc:	e7b9      	b.n	8008742 <_dtoa_r+0x9f2>
 80087ce:	2201      	movs	r2, #1
 80087d0:	e7e2      	b.n	8008798 <_dtoa_r+0xa48>
 80087d2:	f1b9 0f00 	cmp.w	r9, #0
 80087d6:	db06      	blt.n	80087e6 <_dtoa_r+0xa96>
 80087d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80087da:	ea41 0909 	orr.w	r9, r1, r9
 80087de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087e0:	ea59 0101 	orrs.w	r1, r9, r1
 80087e4:	d120      	bne.n	8008828 <_dtoa_r+0xad8>
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	ddec      	ble.n	80087c4 <_dtoa_r+0xa74>
 80087ea:	4659      	mov	r1, fp
 80087ec:	2201      	movs	r2, #1
 80087ee:	4628      	mov	r0, r5
 80087f0:	9308      	str	r3, [sp, #32]
 80087f2:	f000 fea5 	bl	8009540 <__lshift>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4683      	mov	fp, r0
 80087fa:	f000 ff11 	bl	8009620 <__mcmp>
 80087fe:	2800      	cmp	r0, #0
 8008800:	9b08      	ldr	r3, [sp, #32]
 8008802:	dc02      	bgt.n	800880a <_dtoa_r+0xaba>
 8008804:	d1de      	bne.n	80087c4 <_dtoa_r+0xa74>
 8008806:	07da      	lsls	r2, r3, #31
 8008808:	d5dc      	bpl.n	80087c4 <_dtoa_r+0xa74>
 800880a:	2b39      	cmp	r3, #57	; 0x39
 800880c:	d1d8      	bne.n	80087c0 <_dtoa_r+0xa70>
 800880e:	2339      	movs	r3, #57	; 0x39
 8008810:	9a04      	ldr	r2, [sp, #16]
 8008812:	7013      	strb	r3, [r2, #0]
 8008814:	463b      	mov	r3, r7
 8008816:	461f      	mov	r7, r3
 8008818:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800881c:	3b01      	subs	r3, #1
 800881e:	2a39      	cmp	r2, #57	; 0x39
 8008820:	d050      	beq.n	80088c4 <_dtoa_r+0xb74>
 8008822:	3201      	adds	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e747      	b.n	80086b8 <_dtoa_r+0x968>
 8008828:	2a00      	cmp	r2, #0
 800882a:	dd03      	ble.n	8008834 <_dtoa_r+0xae4>
 800882c:	2b39      	cmp	r3, #57	; 0x39
 800882e:	d0ee      	beq.n	800880e <_dtoa_r+0xabe>
 8008830:	3301      	adds	r3, #1
 8008832:	e7c7      	b.n	80087c4 <_dtoa_r+0xa74>
 8008834:	9a08      	ldr	r2, [sp, #32]
 8008836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008838:	f802 3c01 	strb.w	r3, [r2, #-1]
 800883c:	428a      	cmp	r2, r1
 800883e:	d02a      	beq.n	8008896 <_dtoa_r+0xb46>
 8008840:	4659      	mov	r1, fp
 8008842:	2300      	movs	r3, #0
 8008844:	220a      	movs	r2, #10
 8008846:	4628      	mov	r0, r5
 8008848:	f000 fc84 	bl	8009154 <__multadd>
 800884c:	45b0      	cmp	r8, r6
 800884e:	4683      	mov	fp, r0
 8008850:	f04f 0300 	mov.w	r3, #0
 8008854:	f04f 020a 	mov.w	r2, #10
 8008858:	4641      	mov	r1, r8
 800885a:	4628      	mov	r0, r5
 800885c:	d107      	bne.n	800886e <_dtoa_r+0xb1e>
 800885e:	f000 fc79 	bl	8009154 <__multadd>
 8008862:	4680      	mov	r8, r0
 8008864:	4606      	mov	r6, r0
 8008866:	9b08      	ldr	r3, [sp, #32]
 8008868:	3301      	adds	r3, #1
 800886a:	9308      	str	r3, [sp, #32]
 800886c:	e775      	b.n	800875a <_dtoa_r+0xa0a>
 800886e:	f000 fc71 	bl	8009154 <__multadd>
 8008872:	4631      	mov	r1, r6
 8008874:	4680      	mov	r8, r0
 8008876:	2300      	movs	r3, #0
 8008878:	220a      	movs	r2, #10
 800887a:	4628      	mov	r0, r5
 800887c:	f000 fc6a 	bl	8009154 <__multadd>
 8008880:	4606      	mov	r6, r0
 8008882:	e7f0      	b.n	8008866 <_dtoa_r+0xb16>
 8008884:	f1b9 0f00 	cmp.w	r9, #0
 8008888:	bfcc      	ite	gt
 800888a:	464f      	movgt	r7, r9
 800888c:	2701      	movle	r7, #1
 800888e:	f04f 0800 	mov.w	r8, #0
 8008892:	9a03      	ldr	r2, [sp, #12]
 8008894:	4417      	add	r7, r2
 8008896:	4659      	mov	r1, fp
 8008898:	2201      	movs	r2, #1
 800889a:	4628      	mov	r0, r5
 800889c:	9308      	str	r3, [sp, #32]
 800889e:	f000 fe4f 	bl	8009540 <__lshift>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4683      	mov	fp, r0
 80088a6:	f000 febb 	bl	8009620 <__mcmp>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	dcb2      	bgt.n	8008814 <_dtoa_r+0xac4>
 80088ae:	d102      	bne.n	80088b6 <_dtoa_r+0xb66>
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	07db      	lsls	r3, r3, #31
 80088b4:	d4ae      	bmi.n	8008814 <_dtoa_r+0xac4>
 80088b6:	463b      	mov	r3, r7
 80088b8:	461f      	mov	r7, r3
 80088ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088be:	2a30      	cmp	r2, #48	; 0x30
 80088c0:	d0fa      	beq.n	80088b8 <_dtoa_r+0xb68>
 80088c2:	e6f9      	b.n	80086b8 <_dtoa_r+0x968>
 80088c4:	9a03      	ldr	r2, [sp, #12]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d1a5      	bne.n	8008816 <_dtoa_r+0xac6>
 80088ca:	2331      	movs	r3, #49	; 0x31
 80088cc:	f10a 0a01 	add.w	sl, sl, #1
 80088d0:	e779      	b.n	80087c6 <_dtoa_r+0xa76>
 80088d2:	4b14      	ldr	r3, [pc, #80]	; (8008924 <_dtoa_r+0xbd4>)
 80088d4:	f7ff baa8 	b.w	8007e28 <_dtoa_r+0xd8>
 80088d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f47f aa81 	bne.w	8007de2 <_dtoa_r+0x92>
 80088e0:	4b11      	ldr	r3, [pc, #68]	; (8008928 <_dtoa_r+0xbd8>)
 80088e2:	f7ff baa1 	b.w	8007e28 <_dtoa_r+0xd8>
 80088e6:	f1b9 0f00 	cmp.w	r9, #0
 80088ea:	dc03      	bgt.n	80088f4 <_dtoa_r+0xba4>
 80088ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	f73f aecb 	bgt.w	800868a <_dtoa_r+0x93a>
 80088f4:	9f03      	ldr	r7, [sp, #12]
 80088f6:	4621      	mov	r1, r4
 80088f8:	4658      	mov	r0, fp
 80088fa:	f7ff f99d 	bl	8007c38 <quorem>
 80088fe:	9a03      	ldr	r2, [sp, #12]
 8008900:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008904:	f807 3b01 	strb.w	r3, [r7], #1
 8008908:	1aba      	subs	r2, r7, r2
 800890a:	4591      	cmp	r9, r2
 800890c:	ddba      	ble.n	8008884 <_dtoa_r+0xb34>
 800890e:	4659      	mov	r1, fp
 8008910:	2300      	movs	r3, #0
 8008912:	220a      	movs	r2, #10
 8008914:	4628      	mov	r0, r5
 8008916:	f000 fc1d 	bl	8009154 <__multadd>
 800891a:	4683      	mov	fp, r0
 800891c:	e7eb      	b.n	80088f6 <_dtoa_r+0xba6>
 800891e:	bf00      	nop
 8008920:	0800adc9 	.word	0x0800adc9
 8008924:	0800ab34 	.word	0x0800ab34
 8008928:	0800ad61 	.word	0x0800ad61

0800892c <fiprintf>:
 800892c:	b40e      	push	{r1, r2, r3}
 800892e:	b503      	push	{r0, r1, lr}
 8008930:	4601      	mov	r1, r0
 8008932:	ab03      	add	r3, sp, #12
 8008934:	4805      	ldr	r0, [pc, #20]	; (800894c <fiprintf+0x20>)
 8008936:	f853 2b04 	ldr.w	r2, [r3], #4
 800893a:	6800      	ldr	r0, [r0, #0]
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	f001 fad3 	bl	8009ee8 <_vfiprintf_r>
 8008942:	b002      	add	sp, #8
 8008944:	f85d eb04 	ldr.w	lr, [sp], #4
 8008948:	b003      	add	sp, #12
 800894a:	4770      	bx	lr
 800894c:	2000006c 	.word	0x2000006c

08008950 <rshift>:
 8008950:	6903      	ldr	r3, [r0, #16]
 8008952:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008956:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800895a:	f100 0414 	add.w	r4, r0, #20
 800895e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008962:	dd46      	ble.n	80089f2 <rshift+0xa2>
 8008964:	f011 011f 	ands.w	r1, r1, #31
 8008968:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800896c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008970:	d10c      	bne.n	800898c <rshift+0x3c>
 8008972:	4629      	mov	r1, r5
 8008974:	f100 0710 	add.w	r7, r0, #16
 8008978:	42b1      	cmp	r1, r6
 800897a:	d335      	bcc.n	80089e8 <rshift+0x98>
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	1eea      	subs	r2, r5, #3
 8008982:	4296      	cmp	r6, r2
 8008984:	bf38      	it	cc
 8008986:	2300      	movcc	r3, #0
 8008988:	4423      	add	r3, r4
 800898a:	e015      	b.n	80089b8 <rshift+0x68>
 800898c:	46a1      	mov	r9, r4
 800898e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008992:	f1c1 0820 	rsb	r8, r1, #32
 8008996:	40cf      	lsrs	r7, r1
 8008998:	f105 0e04 	add.w	lr, r5, #4
 800899c:	4576      	cmp	r6, lr
 800899e:	46f4      	mov	ip, lr
 80089a0:	d816      	bhi.n	80089d0 <rshift+0x80>
 80089a2:	1a9a      	subs	r2, r3, r2
 80089a4:	0092      	lsls	r2, r2, #2
 80089a6:	3a04      	subs	r2, #4
 80089a8:	3501      	adds	r5, #1
 80089aa:	42ae      	cmp	r6, r5
 80089ac:	bf38      	it	cc
 80089ae:	2200      	movcc	r2, #0
 80089b0:	18a3      	adds	r3, r4, r2
 80089b2:	50a7      	str	r7, [r4, r2]
 80089b4:	b107      	cbz	r7, 80089b8 <rshift+0x68>
 80089b6:	3304      	adds	r3, #4
 80089b8:	42a3      	cmp	r3, r4
 80089ba:	eba3 0204 	sub.w	r2, r3, r4
 80089be:	bf08      	it	eq
 80089c0:	2300      	moveq	r3, #0
 80089c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089c6:	6102      	str	r2, [r0, #16]
 80089c8:	bf08      	it	eq
 80089ca:	6143      	streq	r3, [r0, #20]
 80089cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089d0:	f8dc c000 	ldr.w	ip, [ip]
 80089d4:	fa0c fc08 	lsl.w	ip, ip, r8
 80089d8:	ea4c 0707 	orr.w	r7, ip, r7
 80089dc:	f849 7b04 	str.w	r7, [r9], #4
 80089e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089e4:	40cf      	lsrs	r7, r1
 80089e6:	e7d9      	b.n	800899c <rshift+0x4c>
 80089e8:	f851 cb04 	ldr.w	ip, [r1], #4
 80089ec:	f847 cf04 	str.w	ip, [r7, #4]!
 80089f0:	e7c2      	b.n	8008978 <rshift+0x28>
 80089f2:	4623      	mov	r3, r4
 80089f4:	e7e0      	b.n	80089b8 <rshift+0x68>

080089f6 <__hexdig_fun>:
 80089f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	d802      	bhi.n	8008a04 <__hexdig_fun+0xe>
 80089fe:	3820      	subs	r0, #32
 8008a00:	b2c0      	uxtb	r0, r0
 8008a02:	4770      	bx	lr
 8008a04:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	d801      	bhi.n	8008a10 <__hexdig_fun+0x1a>
 8008a0c:	3847      	subs	r0, #71	; 0x47
 8008a0e:	e7f7      	b.n	8008a00 <__hexdig_fun+0xa>
 8008a10:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a14:	2b05      	cmp	r3, #5
 8008a16:	d801      	bhi.n	8008a1c <__hexdig_fun+0x26>
 8008a18:	3827      	subs	r0, #39	; 0x27
 8008a1a:	e7f1      	b.n	8008a00 <__hexdig_fun+0xa>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	4770      	bx	lr

08008a20 <__gethex>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	b08b      	sub	sp, #44	; 0x2c
 8008a26:	9305      	str	r3, [sp, #20]
 8008a28:	4bb2      	ldr	r3, [pc, #712]	; (8008cf4 <__gethex+0x2d4>)
 8008a2a:	9002      	str	r0, [sp, #8]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	468b      	mov	fp, r1
 8008a30:	4618      	mov	r0, r3
 8008a32:	4690      	mov	r8, r2
 8008a34:	9303      	str	r3, [sp, #12]
 8008a36:	f7f7 fb95 	bl	8000164 <strlen>
 8008a3a:	4682      	mov	sl, r0
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	f8db 2000 	ldr.w	r2, [fp]
 8008a42:	4403      	add	r3, r0
 8008a44:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a48:	9306      	str	r3, [sp, #24]
 8008a4a:	1c93      	adds	r3, r2, #2
 8008a4c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a50:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a54:	32fe      	adds	r2, #254	; 0xfe
 8008a56:	18d1      	adds	r1, r2, r3
 8008a58:	461f      	mov	r7, r3
 8008a5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a5e:	9101      	str	r1, [sp, #4]
 8008a60:	2830      	cmp	r0, #48	; 0x30
 8008a62:	d0f8      	beq.n	8008a56 <__gethex+0x36>
 8008a64:	f7ff ffc7 	bl	80089f6 <__hexdig_fun>
 8008a68:	4604      	mov	r4, r0
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d13a      	bne.n	8008ae4 <__gethex+0xc4>
 8008a6e:	4652      	mov	r2, sl
 8008a70:	4638      	mov	r0, r7
 8008a72:	9903      	ldr	r1, [sp, #12]
 8008a74:	f001 fb7e 	bl	800a174 <strncmp>
 8008a78:	4605      	mov	r5, r0
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d166      	bne.n	8008b4c <__gethex+0x12c>
 8008a7e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008a82:	eb07 060a 	add.w	r6, r7, sl
 8008a86:	f7ff ffb6 	bl	80089f6 <__hexdig_fun>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d060      	beq.n	8008b50 <__gethex+0x130>
 8008a8e:	4633      	mov	r3, r6
 8008a90:	7818      	ldrb	r0, [r3, #0]
 8008a92:	461f      	mov	r7, r3
 8008a94:	2830      	cmp	r0, #48	; 0x30
 8008a96:	f103 0301 	add.w	r3, r3, #1
 8008a9a:	d0f9      	beq.n	8008a90 <__gethex+0x70>
 8008a9c:	f7ff ffab 	bl	80089f6 <__hexdig_fun>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	fab0 f480 	clz	r4, r0
 8008aa6:	4635      	mov	r5, r6
 8008aa8:	0964      	lsrs	r4, r4, #5
 8008aaa:	9301      	str	r3, [sp, #4]
 8008aac:	463a      	mov	r2, r7
 8008aae:	4616      	mov	r6, r2
 8008ab0:	7830      	ldrb	r0, [r6, #0]
 8008ab2:	3201      	adds	r2, #1
 8008ab4:	f7ff ff9f 	bl	80089f6 <__hexdig_fun>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d1f8      	bne.n	8008aae <__gethex+0x8e>
 8008abc:	4652      	mov	r2, sl
 8008abe:	4630      	mov	r0, r6
 8008ac0:	9903      	ldr	r1, [sp, #12]
 8008ac2:	f001 fb57 	bl	800a174 <strncmp>
 8008ac6:	b980      	cbnz	r0, 8008aea <__gethex+0xca>
 8008ac8:	b94d      	cbnz	r5, 8008ade <__gethex+0xbe>
 8008aca:	eb06 050a 	add.w	r5, r6, sl
 8008ace:	462a      	mov	r2, r5
 8008ad0:	4616      	mov	r6, r2
 8008ad2:	7830      	ldrb	r0, [r6, #0]
 8008ad4:	3201      	adds	r2, #1
 8008ad6:	f7ff ff8e 	bl	80089f6 <__hexdig_fun>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d1f8      	bne.n	8008ad0 <__gethex+0xb0>
 8008ade:	1bad      	subs	r5, r5, r6
 8008ae0:	00ad      	lsls	r5, r5, #2
 8008ae2:	e004      	b.n	8008aee <__gethex+0xce>
 8008ae4:	2400      	movs	r4, #0
 8008ae6:	4625      	mov	r5, r4
 8008ae8:	e7e0      	b.n	8008aac <__gethex+0x8c>
 8008aea:	2d00      	cmp	r5, #0
 8008aec:	d1f7      	bne.n	8008ade <__gethex+0xbe>
 8008aee:	7833      	ldrb	r3, [r6, #0]
 8008af0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008af4:	2b50      	cmp	r3, #80	; 0x50
 8008af6:	d139      	bne.n	8008b6c <__gethex+0x14c>
 8008af8:	7873      	ldrb	r3, [r6, #1]
 8008afa:	2b2b      	cmp	r3, #43	; 0x2b
 8008afc:	d02a      	beq.n	8008b54 <__gethex+0x134>
 8008afe:	2b2d      	cmp	r3, #45	; 0x2d
 8008b00:	d02c      	beq.n	8008b5c <__gethex+0x13c>
 8008b02:	f04f 0900 	mov.w	r9, #0
 8008b06:	1c71      	adds	r1, r6, #1
 8008b08:	7808      	ldrb	r0, [r1, #0]
 8008b0a:	f7ff ff74 	bl	80089f6 <__hexdig_fun>
 8008b0e:	1e43      	subs	r3, r0, #1
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b18      	cmp	r3, #24
 8008b14:	d82a      	bhi.n	8008b6c <__gethex+0x14c>
 8008b16:	f1a0 0210 	sub.w	r2, r0, #16
 8008b1a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b1e:	f7ff ff6a 	bl	80089f6 <__hexdig_fun>
 8008b22:	1e43      	subs	r3, r0, #1
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b18      	cmp	r3, #24
 8008b28:	d91b      	bls.n	8008b62 <__gethex+0x142>
 8008b2a:	f1b9 0f00 	cmp.w	r9, #0
 8008b2e:	d000      	beq.n	8008b32 <__gethex+0x112>
 8008b30:	4252      	negs	r2, r2
 8008b32:	4415      	add	r5, r2
 8008b34:	f8cb 1000 	str.w	r1, [fp]
 8008b38:	b1d4      	cbz	r4, 8008b70 <__gethex+0x150>
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	bf14      	ite	ne
 8008b40:	2700      	movne	r7, #0
 8008b42:	2706      	moveq	r7, #6
 8008b44:	4638      	mov	r0, r7
 8008b46:	b00b      	add	sp, #44	; 0x2c
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	463e      	mov	r6, r7
 8008b4e:	4625      	mov	r5, r4
 8008b50:	2401      	movs	r4, #1
 8008b52:	e7cc      	b.n	8008aee <__gethex+0xce>
 8008b54:	f04f 0900 	mov.w	r9, #0
 8008b58:	1cb1      	adds	r1, r6, #2
 8008b5a:	e7d5      	b.n	8008b08 <__gethex+0xe8>
 8008b5c:	f04f 0901 	mov.w	r9, #1
 8008b60:	e7fa      	b.n	8008b58 <__gethex+0x138>
 8008b62:	230a      	movs	r3, #10
 8008b64:	fb03 0202 	mla	r2, r3, r2, r0
 8008b68:	3a10      	subs	r2, #16
 8008b6a:	e7d6      	b.n	8008b1a <__gethex+0xfa>
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	e7e1      	b.n	8008b34 <__gethex+0x114>
 8008b70:	4621      	mov	r1, r4
 8008b72:	1bf3      	subs	r3, r6, r7
 8008b74:	3b01      	subs	r3, #1
 8008b76:	2b07      	cmp	r3, #7
 8008b78:	dc0a      	bgt.n	8008b90 <__gethex+0x170>
 8008b7a:	9802      	ldr	r0, [sp, #8]
 8008b7c:	f000 fa88 	bl	8009090 <_Balloc>
 8008b80:	4604      	mov	r4, r0
 8008b82:	b940      	cbnz	r0, 8008b96 <__gethex+0x176>
 8008b84:	4602      	mov	r2, r0
 8008b86:	21de      	movs	r1, #222	; 0xde
 8008b88:	4b5b      	ldr	r3, [pc, #364]	; (8008cf8 <__gethex+0x2d8>)
 8008b8a:	485c      	ldr	r0, [pc, #368]	; (8008cfc <__gethex+0x2dc>)
 8008b8c:	f7ff f836 	bl	8007bfc <__assert_func>
 8008b90:	3101      	adds	r1, #1
 8008b92:	105b      	asrs	r3, r3, #1
 8008b94:	e7ef      	b.n	8008b76 <__gethex+0x156>
 8008b96:	f04f 0b00 	mov.w	fp, #0
 8008b9a:	f100 0914 	add.w	r9, r0, #20
 8008b9e:	f1ca 0301 	rsb	r3, sl, #1
 8008ba2:	f8cd 9010 	str.w	r9, [sp, #16]
 8008ba6:	f8cd b004 	str.w	fp, [sp, #4]
 8008baa:	9308      	str	r3, [sp, #32]
 8008bac:	42b7      	cmp	r7, r6
 8008bae:	d33f      	bcc.n	8008c30 <__gethex+0x210>
 8008bb0:	9f04      	ldr	r7, [sp, #16]
 8008bb2:	9b01      	ldr	r3, [sp, #4]
 8008bb4:	f847 3b04 	str.w	r3, [r7], #4
 8008bb8:	eba7 0709 	sub.w	r7, r7, r9
 8008bbc:	10bf      	asrs	r7, r7, #2
 8008bbe:	6127      	str	r7, [r4, #16]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fb57 	bl	8009274 <__hi0bits>
 8008bc6:	017f      	lsls	r7, r7, #5
 8008bc8:	f8d8 6000 	ldr.w	r6, [r8]
 8008bcc:	1a3f      	subs	r7, r7, r0
 8008bce:	42b7      	cmp	r7, r6
 8008bd0:	dd62      	ble.n	8008c98 <__gethex+0x278>
 8008bd2:	1bbf      	subs	r7, r7, r6
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f000 fef1 	bl	80099be <__any_on>
 8008bdc:	4682      	mov	sl, r0
 8008bde:	b1a8      	cbz	r0, 8008c0c <__gethex+0x1ec>
 8008be0:	f04f 0a01 	mov.w	sl, #1
 8008be4:	1e7b      	subs	r3, r7, #1
 8008be6:	1159      	asrs	r1, r3, #5
 8008be8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008bec:	f003 021f 	and.w	r2, r3, #31
 8008bf0:	fa0a f202 	lsl.w	r2, sl, r2
 8008bf4:	420a      	tst	r2, r1
 8008bf6:	d009      	beq.n	8008c0c <__gethex+0x1ec>
 8008bf8:	4553      	cmp	r3, sl
 8008bfa:	dd05      	ble.n	8008c08 <__gethex+0x1e8>
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	1eb9      	subs	r1, r7, #2
 8008c00:	f000 fedd 	bl	80099be <__any_on>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d144      	bne.n	8008c92 <__gethex+0x272>
 8008c08:	f04f 0a02 	mov.w	sl, #2
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7ff fe9e 	bl	8008950 <rshift>
 8008c14:	443d      	add	r5, r7
 8008c16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c1a:	42ab      	cmp	r3, r5
 8008c1c:	da4a      	bge.n	8008cb4 <__gethex+0x294>
 8008c1e:	4621      	mov	r1, r4
 8008c20:	9802      	ldr	r0, [sp, #8]
 8008c22:	f000 fa75 	bl	8009110 <_Bfree>
 8008c26:	2300      	movs	r3, #0
 8008c28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c2a:	27a3      	movs	r7, #163	; 0xa3
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	e789      	b.n	8008b44 <__gethex+0x124>
 8008c30:	1e73      	subs	r3, r6, #1
 8008c32:	9a06      	ldr	r2, [sp, #24]
 8008c34:	9307      	str	r3, [sp, #28]
 8008c36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d019      	beq.n	8008c72 <__gethex+0x252>
 8008c3e:	f1bb 0f20 	cmp.w	fp, #32
 8008c42:	d107      	bne.n	8008c54 <__gethex+0x234>
 8008c44:	9b04      	ldr	r3, [sp, #16]
 8008c46:	9a01      	ldr	r2, [sp, #4]
 8008c48:	f843 2b04 	str.w	r2, [r3], #4
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	469b      	mov	fp, r3
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c58:	f7ff fecd 	bl	80089f6 <__hexdig_fun>
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	f000 000f 	and.w	r0, r0, #15
 8008c62:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c66:	4303      	orrs	r3, r0
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	f10b 0b04 	add.w	fp, fp, #4
 8008c6e:	9b07      	ldr	r3, [sp, #28]
 8008c70:	e00d      	b.n	8008c8e <__gethex+0x26e>
 8008c72:	9a08      	ldr	r2, [sp, #32]
 8008c74:	1e73      	subs	r3, r6, #1
 8008c76:	4413      	add	r3, r2
 8008c78:	42bb      	cmp	r3, r7
 8008c7a:	d3e0      	bcc.n	8008c3e <__gethex+0x21e>
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	4652      	mov	r2, sl
 8008c80:	9903      	ldr	r1, [sp, #12]
 8008c82:	9309      	str	r3, [sp, #36]	; 0x24
 8008c84:	f001 fa76 	bl	800a174 <strncmp>
 8008c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d1d7      	bne.n	8008c3e <__gethex+0x21e>
 8008c8e:	461e      	mov	r6, r3
 8008c90:	e78c      	b.n	8008bac <__gethex+0x18c>
 8008c92:	f04f 0a03 	mov.w	sl, #3
 8008c96:	e7b9      	b.n	8008c0c <__gethex+0x1ec>
 8008c98:	da09      	bge.n	8008cae <__gethex+0x28e>
 8008c9a:	1bf7      	subs	r7, r6, r7
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	463a      	mov	r2, r7
 8008ca0:	9802      	ldr	r0, [sp, #8]
 8008ca2:	f000 fc4d 	bl	8009540 <__lshift>
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	1bed      	subs	r5, r5, r7
 8008caa:	f100 0914 	add.w	r9, r0, #20
 8008cae:	f04f 0a00 	mov.w	sl, #0
 8008cb2:	e7b0      	b.n	8008c16 <__gethex+0x1f6>
 8008cb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008cb8:	42a8      	cmp	r0, r5
 8008cba:	dd72      	ble.n	8008da2 <__gethex+0x382>
 8008cbc:	1b45      	subs	r5, r0, r5
 8008cbe:	42ae      	cmp	r6, r5
 8008cc0:	dc35      	bgt.n	8008d2e <__gethex+0x30e>
 8008cc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d029      	beq.n	8008d1e <__gethex+0x2fe>
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d02b      	beq.n	8008d26 <__gethex+0x306>
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d11c      	bne.n	8008d0c <__gethex+0x2ec>
 8008cd2:	42ae      	cmp	r6, r5
 8008cd4:	d11a      	bne.n	8008d0c <__gethex+0x2ec>
 8008cd6:	2e01      	cmp	r6, #1
 8008cd8:	d112      	bne.n	8008d00 <__gethex+0x2e0>
 8008cda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cde:	9a05      	ldr	r2, [sp, #20]
 8008ce0:	2762      	movs	r7, #98	; 0x62
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	6123      	str	r3, [r4, #16]
 8008ce8:	f8c9 3000 	str.w	r3, [r9]
 8008cec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cee:	601c      	str	r4, [r3, #0]
 8008cf0:	e728      	b.n	8008b44 <__gethex+0x124>
 8008cf2:	bf00      	nop
 8008cf4:	0800ae40 	.word	0x0800ae40
 8008cf8:	0800adc9 	.word	0x0800adc9
 8008cfc:	0800adda 	.word	0x0800adda
 8008d00:	4620      	mov	r0, r4
 8008d02:	1e71      	subs	r1, r6, #1
 8008d04:	f000 fe5b 	bl	80099be <__any_on>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d1e6      	bne.n	8008cda <__gethex+0x2ba>
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	9802      	ldr	r0, [sp, #8]
 8008d10:	f000 f9fe 	bl	8009110 <_Bfree>
 8008d14:	2300      	movs	r3, #0
 8008d16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d18:	2750      	movs	r7, #80	; 0x50
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	e712      	b.n	8008b44 <__gethex+0x124>
 8008d1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1f3      	bne.n	8008d0c <__gethex+0x2ec>
 8008d24:	e7d9      	b.n	8008cda <__gethex+0x2ba>
 8008d26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1d6      	bne.n	8008cda <__gethex+0x2ba>
 8008d2c:	e7ee      	b.n	8008d0c <__gethex+0x2ec>
 8008d2e:	1e6f      	subs	r7, r5, #1
 8008d30:	f1ba 0f00 	cmp.w	sl, #0
 8008d34:	d132      	bne.n	8008d9c <__gethex+0x37c>
 8008d36:	b127      	cbz	r7, 8008d42 <__gethex+0x322>
 8008d38:	4639      	mov	r1, r7
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 fe3f 	bl	80099be <__any_on>
 8008d40:	4682      	mov	sl, r0
 8008d42:	2101      	movs	r1, #1
 8008d44:	117b      	asrs	r3, r7, #5
 8008d46:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d4a:	f007 071f 	and.w	r7, r7, #31
 8008d4e:	fa01 f707 	lsl.w	r7, r1, r7
 8008d52:	421f      	tst	r7, r3
 8008d54:	f04f 0702 	mov.w	r7, #2
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	bf18      	it	ne
 8008d5e:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d62:	1b76      	subs	r6, r6, r5
 8008d64:	f7ff fdf4 	bl	8008950 <rshift>
 8008d68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d6c:	f1ba 0f00 	cmp.w	sl, #0
 8008d70:	d048      	beq.n	8008e04 <__gethex+0x3e4>
 8008d72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d015      	beq.n	8008da6 <__gethex+0x386>
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d017      	beq.n	8008dae <__gethex+0x38e>
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d109      	bne.n	8008d96 <__gethex+0x376>
 8008d82:	f01a 0f02 	tst.w	sl, #2
 8008d86:	d006      	beq.n	8008d96 <__gethex+0x376>
 8008d88:	f8d9 0000 	ldr.w	r0, [r9]
 8008d8c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d90:	f01a 0f01 	tst.w	sl, #1
 8008d94:	d10e      	bne.n	8008db4 <__gethex+0x394>
 8008d96:	f047 0710 	orr.w	r7, r7, #16
 8008d9a:	e033      	b.n	8008e04 <__gethex+0x3e4>
 8008d9c:	f04f 0a01 	mov.w	sl, #1
 8008da0:	e7cf      	b.n	8008d42 <__gethex+0x322>
 8008da2:	2701      	movs	r7, #1
 8008da4:	e7e2      	b.n	8008d6c <__gethex+0x34c>
 8008da6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008da8:	f1c3 0301 	rsb	r3, r3, #1
 8008dac:	9315      	str	r3, [sp, #84]	; 0x54
 8008dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0f0      	beq.n	8008d96 <__gethex+0x376>
 8008db4:	f04f 0c00 	mov.w	ip, #0
 8008db8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008dbc:	f104 0314 	add.w	r3, r4, #20
 8008dc0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008dc4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dce:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008dd2:	d01c      	beq.n	8008e0e <__gethex+0x3ee>
 8008dd4:	3201      	adds	r2, #1
 8008dd6:	6002      	str	r2, [r0, #0]
 8008dd8:	2f02      	cmp	r7, #2
 8008dda:	f104 0314 	add.w	r3, r4, #20
 8008dde:	d13d      	bne.n	8008e5c <__gethex+0x43c>
 8008de0:	f8d8 2000 	ldr.w	r2, [r8]
 8008de4:	3a01      	subs	r2, #1
 8008de6:	42b2      	cmp	r2, r6
 8008de8:	d10a      	bne.n	8008e00 <__gethex+0x3e0>
 8008dea:	2201      	movs	r2, #1
 8008dec:	1171      	asrs	r1, r6, #5
 8008dee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008df2:	f006 061f 	and.w	r6, r6, #31
 8008df6:	fa02 f606 	lsl.w	r6, r2, r6
 8008dfa:	421e      	tst	r6, r3
 8008dfc:	bf18      	it	ne
 8008dfe:	4617      	movne	r7, r2
 8008e00:	f047 0720 	orr.w	r7, r7, #32
 8008e04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e06:	601c      	str	r4, [r3, #0]
 8008e08:	9b05      	ldr	r3, [sp, #20]
 8008e0a:	601d      	str	r5, [r3, #0]
 8008e0c:	e69a      	b.n	8008b44 <__gethex+0x124>
 8008e0e:	4299      	cmp	r1, r3
 8008e10:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e14:	d8d8      	bhi.n	8008dc8 <__gethex+0x3a8>
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	459b      	cmp	fp, r3
 8008e1a:	db17      	blt.n	8008e4c <__gethex+0x42c>
 8008e1c:	6861      	ldr	r1, [r4, #4]
 8008e1e:	9802      	ldr	r0, [sp, #8]
 8008e20:	3101      	adds	r1, #1
 8008e22:	f000 f935 	bl	8009090 <_Balloc>
 8008e26:	4681      	mov	r9, r0
 8008e28:	b918      	cbnz	r0, 8008e32 <__gethex+0x412>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	2184      	movs	r1, #132	; 0x84
 8008e2e:	4b19      	ldr	r3, [pc, #100]	; (8008e94 <__gethex+0x474>)
 8008e30:	e6ab      	b.n	8008b8a <__gethex+0x16a>
 8008e32:	6922      	ldr	r2, [r4, #16]
 8008e34:	f104 010c 	add.w	r1, r4, #12
 8008e38:	3202      	adds	r2, #2
 8008e3a:	0092      	lsls	r2, r2, #2
 8008e3c:	300c      	adds	r0, #12
 8008e3e:	f000 f919 	bl	8009074 <memcpy>
 8008e42:	4621      	mov	r1, r4
 8008e44:	9802      	ldr	r0, [sp, #8]
 8008e46:	f000 f963 	bl	8009110 <_Bfree>
 8008e4a:	464c      	mov	r4, r9
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	6122      	str	r2, [r4, #16]
 8008e52:	2201      	movs	r2, #1
 8008e54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e58:	615a      	str	r2, [r3, #20]
 8008e5a:	e7bd      	b.n	8008dd8 <__gethex+0x3b8>
 8008e5c:	6922      	ldr	r2, [r4, #16]
 8008e5e:	455a      	cmp	r2, fp
 8008e60:	dd0b      	ble.n	8008e7a <__gethex+0x45a>
 8008e62:	2101      	movs	r1, #1
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7ff fd73 	bl	8008950 <rshift>
 8008e6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e6e:	3501      	adds	r5, #1
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	f6ff aed4 	blt.w	8008c1e <__gethex+0x1fe>
 8008e76:	2701      	movs	r7, #1
 8008e78:	e7c2      	b.n	8008e00 <__gethex+0x3e0>
 8008e7a:	f016 061f 	ands.w	r6, r6, #31
 8008e7e:	d0fa      	beq.n	8008e76 <__gethex+0x456>
 8008e80:	4453      	add	r3, sl
 8008e82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e86:	f000 f9f5 	bl	8009274 <__hi0bits>
 8008e8a:	f1c6 0620 	rsb	r6, r6, #32
 8008e8e:	42b0      	cmp	r0, r6
 8008e90:	dbe7      	blt.n	8008e62 <__gethex+0x442>
 8008e92:	e7f0      	b.n	8008e76 <__gethex+0x456>
 8008e94:	0800adc9 	.word	0x0800adc9

08008e98 <L_shift>:
 8008e98:	f1c2 0208 	rsb	r2, r2, #8
 8008e9c:	0092      	lsls	r2, r2, #2
 8008e9e:	b570      	push	{r4, r5, r6, lr}
 8008ea0:	f1c2 0620 	rsb	r6, r2, #32
 8008ea4:	6843      	ldr	r3, [r0, #4]
 8008ea6:	6804      	ldr	r4, [r0, #0]
 8008ea8:	fa03 f506 	lsl.w	r5, r3, r6
 8008eac:	432c      	orrs	r4, r5
 8008eae:	40d3      	lsrs	r3, r2
 8008eb0:	6004      	str	r4, [r0, #0]
 8008eb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008eb6:	4288      	cmp	r0, r1
 8008eb8:	d3f4      	bcc.n	8008ea4 <L_shift+0xc>
 8008eba:	bd70      	pop	{r4, r5, r6, pc}

08008ebc <__match>:
 8008ebc:	b530      	push	{r4, r5, lr}
 8008ebe:	6803      	ldr	r3, [r0, #0]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ec6:	b914      	cbnz	r4, 8008ece <__match+0x12>
 8008ec8:	6003      	str	r3, [r0, #0]
 8008eca:	2001      	movs	r0, #1
 8008ecc:	bd30      	pop	{r4, r5, pc}
 8008ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008ed6:	2d19      	cmp	r5, #25
 8008ed8:	bf98      	it	ls
 8008eda:	3220      	addls	r2, #32
 8008edc:	42a2      	cmp	r2, r4
 8008ede:	d0f0      	beq.n	8008ec2 <__match+0x6>
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	e7f3      	b.n	8008ecc <__match+0x10>

08008ee4 <__hexnan>:
 8008ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee8:	2500      	movs	r5, #0
 8008eea:	680b      	ldr	r3, [r1, #0]
 8008eec:	4682      	mov	sl, r0
 8008eee:	115e      	asrs	r6, r3, #5
 8008ef0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ef4:	f013 031f 	ands.w	r3, r3, #31
 8008ef8:	bf18      	it	ne
 8008efa:	3604      	addne	r6, #4
 8008efc:	1f37      	subs	r7, r6, #4
 8008efe:	46b9      	mov	r9, r7
 8008f00:	463c      	mov	r4, r7
 8008f02:	46ab      	mov	fp, r5
 8008f04:	b087      	sub	sp, #28
 8008f06:	4690      	mov	r8, r2
 8008f08:	6802      	ldr	r2, [r0, #0]
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f10:	9502      	str	r5, [sp, #8]
 8008f12:	7851      	ldrb	r1, [r2, #1]
 8008f14:	1c53      	adds	r3, r2, #1
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	b341      	cbz	r1, 8008f6c <__hexnan+0x88>
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	9205      	str	r2, [sp, #20]
 8008f1e:	9104      	str	r1, [sp, #16]
 8008f20:	f7ff fd69 	bl	80089f6 <__hexdig_fun>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d14f      	bne.n	8008fc8 <__hexnan+0xe4>
 8008f28:	9904      	ldr	r1, [sp, #16]
 8008f2a:	9a05      	ldr	r2, [sp, #20]
 8008f2c:	2920      	cmp	r1, #32
 8008f2e:	d818      	bhi.n	8008f62 <__hexnan+0x7e>
 8008f30:	9b02      	ldr	r3, [sp, #8]
 8008f32:	459b      	cmp	fp, r3
 8008f34:	dd13      	ble.n	8008f5e <__hexnan+0x7a>
 8008f36:	454c      	cmp	r4, r9
 8008f38:	d206      	bcs.n	8008f48 <__hexnan+0x64>
 8008f3a:	2d07      	cmp	r5, #7
 8008f3c:	dc04      	bgt.n	8008f48 <__hexnan+0x64>
 8008f3e:	462a      	mov	r2, r5
 8008f40:	4649      	mov	r1, r9
 8008f42:	4620      	mov	r0, r4
 8008f44:	f7ff ffa8 	bl	8008e98 <L_shift>
 8008f48:	4544      	cmp	r4, r8
 8008f4a:	d950      	bls.n	8008fee <__hexnan+0x10a>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f1a4 0904 	sub.w	r9, r4, #4
 8008f52:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f56:	461d      	mov	r5, r3
 8008f58:	464c      	mov	r4, r9
 8008f5a:	f8cd b008 	str.w	fp, [sp, #8]
 8008f5e:	9a03      	ldr	r2, [sp, #12]
 8008f60:	e7d7      	b.n	8008f12 <__hexnan+0x2e>
 8008f62:	2929      	cmp	r1, #41	; 0x29
 8008f64:	d156      	bne.n	8009014 <__hexnan+0x130>
 8008f66:	3202      	adds	r2, #2
 8008f68:	f8ca 2000 	str.w	r2, [sl]
 8008f6c:	f1bb 0f00 	cmp.w	fp, #0
 8008f70:	d050      	beq.n	8009014 <__hexnan+0x130>
 8008f72:	454c      	cmp	r4, r9
 8008f74:	d206      	bcs.n	8008f84 <__hexnan+0xa0>
 8008f76:	2d07      	cmp	r5, #7
 8008f78:	dc04      	bgt.n	8008f84 <__hexnan+0xa0>
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f7ff ff8a 	bl	8008e98 <L_shift>
 8008f84:	4544      	cmp	r4, r8
 8008f86:	d934      	bls.n	8008ff2 <__hexnan+0x10e>
 8008f88:	4623      	mov	r3, r4
 8008f8a:	f1a8 0204 	sub.w	r2, r8, #4
 8008f8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f92:	429f      	cmp	r7, r3
 8008f94:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f98:	d2f9      	bcs.n	8008f8e <__hexnan+0xaa>
 8008f9a:	1b3b      	subs	r3, r7, r4
 8008f9c:	f023 0303 	bic.w	r3, r3, #3
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	3401      	adds	r4, #1
 8008fa4:	3e03      	subs	r6, #3
 8008fa6:	42b4      	cmp	r4, r6
 8008fa8:	bf88      	it	hi
 8008faa:	2304      	movhi	r3, #4
 8008fac:	2200      	movs	r2, #0
 8008fae:	4443      	add	r3, r8
 8008fb0:	f843 2b04 	str.w	r2, [r3], #4
 8008fb4:	429f      	cmp	r7, r3
 8008fb6:	d2fb      	bcs.n	8008fb0 <__hexnan+0xcc>
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	b91b      	cbnz	r3, 8008fc4 <__hexnan+0xe0>
 8008fbc:	4547      	cmp	r7, r8
 8008fbe:	d127      	bne.n	8009010 <__hexnan+0x12c>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	2005      	movs	r0, #5
 8008fc6:	e026      	b.n	8009016 <__hexnan+0x132>
 8008fc8:	3501      	adds	r5, #1
 8008fca:	2d08      	cmp	r5, #8
 8008fcc:	f10b 0b01 	add.w	fp, fp, #1
 8008fd0:	dd06      	ble.n	8008fe0 <__hexnan+0xfc>
 8008fd2:	4544      	cmp	r4, r8
 8008fd4:	d9c3      	bls.n	8008f5e <__hexnan+0x7a>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2501      	movs	r5, #1
 8008fda:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fde:	3c04      	subs	r4, #4
 8008fe0:	6822      	ldr	r2, [r4, #0]
 8008fe2:	f000 000f 	and.w	r0, r0, #15
 8008fe6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008fea:	6022      	str	r2, [r4, #0]
 8008fec:	e7b7      	b.n	8008f5e <__hexnan+0x7a>
 8008fee:	2508      	movs	r5, #8
 8008ff0:	e7b5      	b.n	8008f5e <__hexnan+0x7a>
 8008ff2:	9b01      	ldr	r3, [sp, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0df      	beq.n	8008fb8 <__hexnan+0xd4>
 8008ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffc:	f1c3 0320 	rsb	r3, r3, #32
 8009000:	fa22 f303 	lsr.w	r3, r2, r3
 8009004:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009008:	401a      	ands	r2, r3
 800900a:	f846 2c04 	str.w	r2, [r6, #-4]
 800900e:	e7d3      	b.n	8008fb8 <__hexnan+0xd4>
 8009010:	3f04      	subs	r7, #4
 8009012:	e7d1      	b.n	8008fb8 <__hexnan+0xd4>
 8009014:	2004      	movs	r0, #4
 8009016:	b007      	add	sp, #28
 8009018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800901c <_localeconv_r>:
 800901c:	4800      	ldr	r0, [pc, #0]	; (8009020 <_localeconv_r+0x4>)
 800901e:	4770      	bx	lr
 8009020:	200001c4 	.word	0x200001c4

08009024 <malloc>:
 8009024:	4b02      	ldr	r3, [pc, #8]	; (8009030 <malloc+0xc>)
 8009026:	4601      	mov	r1, r0
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	f000 bd65 	b.w	8009af8 <_malloc_r>
 800902e:	bf00      	nop
 8009030:	2000006c 	.word	0x2000006c

08009034 <__ascii_mbtowc>:
 8009034:	b082      	sub	sp, #8
 8009036:	b901      	cbnz	r1, 800903a <__ascii_mbtowc+0x6>
 8009038:	a901      	add	r1, sp, #4
 800903a:	b142      	cbz	r2, 800904e <__ascii_mbtowc+0x1a>
 800903c:	b14b      	cbz	r3, 8009052 <__ascii_mbtowc+0x1e>
 800903e:	7813      	ldrb	r3, [r2, #0]
 8009040:	600b      	str	r3, [r1, #0]
 8009042:	7812      	ldrb	r2, [r2, #0]
 8009044:	1e10      	subs	r0, r2, #0
 8009046:	bf18      	it	ne
 8009048:	2001      	movne	r0, #1
 800904a:	b002      	add	sp, #8
 800904c:	4770      	bx	lr
 800904e:	4610      	mov	r0, r2
 8009050:	e7fb      	b.n	800904a <__ascii_mbtowc+0x16>
 8009052:	f06f 0001 	mvn.w	r0, #1
 8009056:	e7f8      	b.n	800904a <__ascii_mbtowc+0x16>

08009058 <memchr>:
 8009058:	4603      	mov	r3, r0
 800905a:	b510      	push	{r4, lr}
 800905c:	b2c9      	uxtb	r1, r1
 800905e:	4402      	add	r2, r0
 8009060:	4293      	cmp	r3, r2
 8009062:	4618      	mov	r0, r3
 8009064:	d101      	bne.n	800906a <memchr+0x12>
 8009066:	2000      	movs	r0, #0
 8009068:	e003      	b.n	8009072 <memchr+0x1a>
 800906a:	7804      	ldrb	r4, [r0, #0]
 800906c:	3301      	adds	r3, #1
 800906e:	428c      	cmp	r4, r1
 8009070:	d1f6      	bne.n	8009060 <memchr+0x8>
 8009072:	bd10      	pop	{r4, pc}

08009074 <memcpy>:
 8009074:	440a      	add	r2, r1
 8009076:	4291      	cmp	r1, r2
 8009078:	f100 33ff 	add.w	r3, r0, #4294967295
 800907c:	d100      	bne.n	8009080 <memcpy+0xc>
 800907e:	4770      	bx	lr
 8009080:	b510      	push	{r4, lr}
 8009082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009086:	4291      	cmp	r1, r2
 8009088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800908c:	d1f9      	bne.n	8009082 <memcpy+0xe>
 800908e:	bd10      	pop	{r4, pc}

08009090 <_Balloc>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009094:	4604      	mov	r4, r0
 8009096:	460d      	mov	r5, r1
 8009098:	b976      	cbnz	r6, 80090b8 <_Balloc+0x28>
 800909a:	2010      	movs	r0, #16
 800909c:	f7ff ffc2 	bl	8009024 <malloc>
 80090a0:	4602      	mov	r2, r0
 80090a2:	6260      	str	r0, [r4, #36]	; 0x24
 80090a4:	b920      	cbnz	r0, 80090b0 <_Balloc+0x20>
 80090a6:	2166      	movs	r1, #102	; 0x66
 80090a8:	4b17      	ldr	r3, [pc, #92]	; (8009108 <_Balloc+0x78>)
 80090aa:	4818      	ldr	r0, [pc, #96]	; (800910c <_Balloc+0x7c>)
 80090ac:	f7fe fda6 	bl	8007bfc <__assert_func>
 80090b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090b4:	6006      	str	r6, [r0, #0]
 80090b6:	60c6      	str	r6, [r0, #12]
 80090b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090ba:	68f3      	ldr	r3, [r6, #12]
 80090bc:	b183      	cbz	r3, 80090e0 <_Balloc+0x50>
 80090be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090c6:	b9b8      	cbnz	r0, 80090f8 <_Balloc+0x68>
 80090c8:	2101      	movs	r1, #1
 80090ca:	fa01 f605 	lsl.w	r6, r1, r5
 80090ce:	1d72      	adds	r2, r6, #5
 80090d0:	4620      	mov	r0, r4
 80090d2:	0092      	lsls	r2, r2, #2
 80090d4:	f000 fc94 	bl	8009a00 <_calloc_r>
 80090d8:	b160      	cbz	r0, 80090f4 <_Balloc+0x64>
 80090da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090de:	e00e      	b.n	80090fe <_Balloc+0x6e>
 80090e0:	2221      	movs	r2, #33	; 0x21
 80090e2:	2104      	movs	r1, #4
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 fc8b 	bl	8009a00 <_calloc_r>
 80090ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ec:	60f0      	str	r0, [r6, #12]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e4      	bne.n	80090be <_Balloc+0x2e>
 80090f4:	2000      	movs	r0, #0
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
 80090f8:	6802      	ldr	r2, [r0, #0]
 80090fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090fe:	2300      	movs	r3, #0
 8009100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009104:	e7f7      	b.n	80090f6 <_Balloc+0x66>
 8009106:	bf00      	nop
 8009108:	0800abb0 	.word	0x0800abb0
 800910c:	0800ae54 	.word	0x0800ae54

08009110 <_Bfree>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009114:	4605      	mov	r5, r0
 8009116:	460c      	mov	r4, r1
 8009118:	b976      	cbnz	r6, 8009138 <_Bfree+0x28>
 800911a:	2010      	movs	r0, #16
 800911c:	f7ff ff82 	bl	8009024 <malloc>
 8009120:	4602      	mov	r2, r0
 8009122:	6268      	str	r0, [r5, #36]	; 0x24
 8009124:	b920      	cbnz	r0, 8009130 <_Bfree+0x20>
 8009126:	218a      	movs	r1, #138	; 0x8a
 8009128:	4b08      	ldr	r3, [pc, #32]	; (800914c <_Bfree+0x3c>)
 800912a:	4809      	ldr	r0, [pc, #36]	; (8009150 <_Bfree+0x40>)
 800912c:	f7fe fd66 	bl	8007bfc <__assert_func>
 8009130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009134:	6006      	str	r6, [r0, #0]
 8009136:	60c6      	str	r6, [r0, #12]
 8009138:	b13c      	cbz	r4, 800914a <_Bfree+0x3a>
 800913a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800913c:	6862      	ldr	r2, [r4, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009144:	6021      	str	r1, [r4, #0]
 8009146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	0800abb0 	.word	0x0800abb0
 8009150:	0800ae54 	.word	0x0800ae54

08009154 <__multadd>:
 8009154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009158:	4607      	mov	r7, r0
 800915a:	460c      	mov	r4, r1
 800915c:	461e      	mov	r6, r3
 800915e:	2000      	movs	r0, #0
 8009160:	690d      	ldr	r5, [r1, #16]
 8009162:	f101 0c14 	add.w	ip, r1, #20
 8009166:	f8dc 3000 	ldr.w	r3, [ip]
 800916a:	3001      	adds	r0, #1
 800916c:	b299      	uxth	r1, r3
 800916e:	fb02 6101 	mla	r1, r2, r1, r6
 8009172:	0c1e      	lsrs	r6, r3, #16
 8009174:	0c0b      	lsrs	r3, r1, #16
 8009176:	fb02 3306 	mla	r3, r2, r6, r3
 800917a:	b289      	uxth	r1, r1
 800917c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009180:	4285      	cmp	r5, r0
 8009182:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009186:	f84c 1b04 	str.w	r1, [ip], #4
 800918a:	dcec      	bgt.n	8009166 <__multadd+0x12>
 800918c:	b30e      	cbz	r6, 80091d2 <__multadd+0x7e>
 800918e:	68a3      	ldr	r3, [r4, #8]
 8009190:	42ab      	cmp	r3, r5
 8009192:	dc19      	bgt.n	80091c8 <__multadd+0x74>
 8009194:	6861      	ldr	r1, [r4, #4]
 8009196:	4638      	mov	r0, r7
 8009198:	3101      	adds	r1, #1
 800919a:	f7ff ff79 	bl	8009090 <_Balloc>
 800919e:	4680      	mov	r8, r0
 80091a0:	b928      	cbnz	r0, 80091ae <__multadd+0x5a>
 80091a2:	4602      	mov	r2, r0
 80091a4:	21b5      	movs	r1, #181	; 0xb5
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <__multadd+0x84>)
 80091a8:	480c      	ldr	r0, [pc, #48]	; (80091dc <__multadd+0x88>)
 80091aa:	f7fe fd27 	bl	8007bfc <__assert_func>
 80091ae:	6922      	ldr	r2, [r4, #16]
 80091b0:	f104 010c 	add.w	r1, r4, #12
 80091b4:	3202      	adds	r2, #2
 80091b6:	0092      	lsls	r2, r2, #2
 80091b8:	300c      	adds	r0, #12
 80091ba:	f7ff ff5b 	bl	8009074 <memcpy>
 80091be:	4621      	mov	r1, r4
 80091c0:	4638      	mov	r0, r7
 80091c2:	f7ff ffa5 	bl	8009110 <_Bfree>
 80091c6:	4644      	mov	r4, r8
 80091c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091cc:	3501      	adds	r5, #1
 80091ce:	615e      	str	r6, [r3, #20]
 80091d0:	6125      	str	r5, [r4, #16]
 80091d2:	4620      	mov	r0, r4
 80091d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d8:	0800adc9 	.word	0x0800adc9
 80091dc:	0800ae54 	.word	0x0800ae54

080091e0 <__s2b>:
 80091e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e4:	4615      	mov	r5, r2
 80091e6:	2209      	movs	r2, #9
 80091e8:	461f      	mov	r7, r3
 80091ea:	3308      	adds	r3, #8
 80091ec:	460c      	mov	r4, r1
 80091ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80091f2:	4606      	mov	r6, r0
 80091f4:	2201      	movs	r2, #1
 80091f6:	2100      	movs	r1, #0
 80091f8:	429a      	cmp	r2, r3
 80091fa:	db09      	blt.n	8009210 <__s2b+0x30>
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7ff ff47 	bl	8009090 <_Balloc>
 8009202:	b940      	cbnz	r0, 8009216 <__s2b+0x36>
 8009204:	4602      	mov	r2, r0
 8009206:	21ce      	movs	r1, #206	; 0xce
 8009208:	4b18      	ldr	r3, [pc, #96]	; (800926c <__s2b+0x8c>)
 800920a:	4819      	ldr	r0, [pc, #100]	; (8009270 <__s2b+0x90>)
 800920c:	f7fe fcf6 	bl	8007bfc <__assert_func>
 8009210:	0052      	lsls	r2, r2, #1
 8009212:	3101      	adds	r1, #1
 8009214:	e7f0      	b.n	80091f8 <__s2b+0x18>
 8009216:	9b08      	ldr	r3, [sp, #32]
 8009218:	2d09      	cmp	r5, #9
 800921a:	6143      	str	r3, [r0, #20]
 800921c:	f04f 0301 	mov.w	r3, #1
 8009220:	6103      	str	r3, [r0, #16]
 8009222:	dd16      	ble.n	8009252 <__s2b+0x72>
 8009224:	f104 0909 	add.w	r9, r4, #9
 8009228:	46c8      	mov	r8, r9
 800922a:	442c      	add	r4, r5
 800922c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009230:	4601      	mov	r1, r0
 8009232:	220a      	movs	r2, #10
 8009234:	4630      	mov	r0, r6
 8009236:	3b30      	subs	r3, #48	; 0x30
 8009238:	f7ff ff8c 	bl	8009154 <__multadd>
 800923c:	45a0      	cmp	r8, r4
 800923e:	d1f5      	bne.n	800922c <__s2b+0x4c>
 8009240:	f1a5 0408 	sub.w	r4, r5, #8
 8009244:	444c      	add	r4, r9
 8009246:	1b2d      	subs	r5, r5, r4
 8009248:	1963      	adds	r3, r4, r5
 800924a:	42bb      	cmp	r3, r7
 800924c:	db04      	blt.n	8009258 <__s2b+0x78>
 800924e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009252:	2509      	movs	r5, #9
 8009254:	340a      	adds	r4, #10
 8009256:	e7f6      	b.n	8009246 <__s2b+0x66>
 8009258:	f814 3b01 	ldrb.w	r3, [r4], #1
 800925c:	4601      	mov	r1, r0
 800925e:	220a      	movs	r2, #10
 8009260:	4630      	mov	r0, r6
 8009262:	3b30      	subs	r3, #48	; 0x30
 8009264:	f7ff ff76 	bl	8009154 <__multadd>
 8009268:	e7ee      	b.n	8009248 <__s2b+0x68>
 800926a:	bf00      	nop
 800926c:	0800adc9 	.word	0x0800adc9
 8009270:	0800ae54 	.word	0x0800ae54

08009274 <__hi0bits>:
 8009274:	0c02      	lsrs	r2, r0, #16
 8009276:	0412      	lsls	r2, r2, #16
 8009278:	4603      	mov	r3, r0
 800927a:	b9ca      	cbnz	r2, 80092b0 <__hi0bits+0x3c>
 800927c:	0403      	lsls	r3, r0, #16
 800927e:	2010      	movs	r0, #16
 8009280:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009284:	bf04      	itt	eq
 8009286:	021b      	lsleq	r3, r3, #8
 8009288:	3008      	addeq	r0, #8
 800928a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800928e:	bf04      	itt	eq
 8009290:	011b      	lsleq	r3, r3, #4
 8009292:	3004      	addeq	r0, #4
 8009294:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009298:	bf04      	itt	eq
 800929a:	009b      	lsleq	r3, r3, #2
 800929c:	3002      	addeq	r0, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	db05      	blt.n	80092ae <__hi0bits+0x3a>
 80092a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80092a6:	f100 0001 	add.w	r0, r0, #1
 80092aa:	bf08      	it	eq
 80092ac:	2020      	moveq	r0, #32
 80092ae:	4770      	bx	lr
 80092b0:	2000      	movs	r0, #0
 80092b2:	e7e5      	b.n	8009280 <__hi0bits+0xc>

080092b4 <__lo0bits>:
 80092b4:	6803      	ldr	r3, [r0, #0]
 80092b6:	4602      	mov	r2, r0
 80092b8:	f013 0007 	ands.w	r0, r3, #7
 80092bc:	d00b      	beq.n	80092d6 <__lo0bits+0x22>
 80092be:	07d9      	lsls	r1, r3, #31
 80092c0:	d421      	bmi.n	8009306 <__lo0bits+0x52>
 80092c2:	0798      	lsls	r0, r3, #30
 80092c4:	bf49      	itett	mi
 80092c6:	085b      	lsrmi	r3, r3, #1
 80092c8:	089b      	lsrpl	r3, r3, #2
 80092ca:	2001      	movmi	r0, #1
 80092cc:	6013      	strmi	r3, [r2, #0]
 80092ce:	bf5c      	itt	pl
 80092d0:	2002      	movpl	r0, #2
 80092d2:	6013      	strpl	r3, [r2, #0]
 80092d4:	4770      	bx	lr
 80092d6:	b299      	uxth	r1, r3
 80092d8:	b909      	cbnz	r1, 80092de <__lo0bits+0x2a>
 80092da:	2010      	movs	r0, #16
 80092dc:	0c1b      	lsrs	r3, r3, #16
 80092de:	b2d9      	uxtb	r1, r3
 80092e0:	b909      	cbnz	r1, 80092e6 <__lo0bits+0x32>
 80092e2:	3008      	adds	r0, #8
 80092e4:	0a1b      	lsrs	r3, r3, #8
 80092e6:	0719      	lsls	r1, r3, #28
 80092e8:	bf04      	itt	eq
 80092ea:	091b      	lsreq	r3, r3, #4
 80092ec:	3004      	addeq	r0, #4
 80092ee:	0799      	lsls	r1, r3, #30
 80092f0:	bf04      	itt	eq
 80092f2:	089b      	lsreq	r3, r3, #2
 80092f4:	3002      	addeq	r0, #2
 80092f6:	07d9      	lsls	r1, r3, #31
 80092f8:	d403      	bmi.n	8009302 <__lo0bits+0x4e>
 80092fa:	085b      	lsrs	r3, r3, #1
 80092fc:	f100 0001 	add.w	r0, r0, #1
 8009300:	d003      	beq.n	800930a <__lo0bits+0x56>
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	4770      	bx	lr
 8009306:	2000      	movs	r0, #0
 8009308:	4770      	bx	lr
 800930a:	2020      	movs	r0, #32
 800930c:	4770      	bx	lr
	...

08009310 <__i2b>:
 8009310:	b510      	push	{r4, lr}
 8009312:	460c      	mov	r4, r1
 8009314:	2101      	movs	r1, #1
 8009316:	f7ff febb 	bl	8009090 <_Balloc>
 800931a:	4602      	mov	r2, r0
 800931c:	b928      	cbnz	r0, 800932a <__i2b+0x1a>
 800931e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009322:	4b04      	ldr	r3, [pc, #16]	; (8009334 <__i2b+0x24>)
 8009324:	4804      	ldr	r0, [pc, #16]	; (8009338 <__i2b+0x28>)
 8009326:	f7fe fc69 	bl	8007bfc <__assert_func>
 800932a:	2301      	movs	r3, #1
 800932c:	6144      	str	r4, [r0, #20]
 800932e:	6103      	str	r3, [r0, #16]
 8009330:	bd10      	pop	{r4, pc}
 8009332:	bf00      	nop
 8009334:	0800adc9 	.word	0x0800adc9
 8009338:	0800ae54 	.word	0x0800ae54

0800933c <__multiply>:
 800933c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009340:	4691      	mov	r9, r2
 8009342:	690a      	ldr	r2, [r1, #16]
 8009344:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009348:	460c      	mov	r4, r1
 800934a:	429a      	cmp	r2, r3
 800934c:	bfbe      	ittt	lt
 800934e:	460b      	movlt	r3, r1
 8009350:	464c      	movlt	r4, r9
 8009352:	4699      	movlt	r9, r3
 8009354:	6927      	ldr	r7, [r4, #16]
 8009356:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	6861      	ldr	r1, [r4, #4]
 800935e:	eb07 060a 	add.w	r6, r7, sl
 8009362:	42b3      	cmp	r3, r6
 8009364:	b085      	sub	sp, #20
 8009366:	bfb8      	it	lt
 8009368:	3101      	addlt	r1, #1
 800936a:	f7ff fe91 	bl	8009090 <_Balloc>
 800936e:	b930      	cbnz	r0, 800937e <__multiply+0x42>
 8009370:	4602      	mov	r2, r0
 8009372:	f240 115d 	movw	r1, #349	; 0x15d
 8009376:	4b43      	ldr	r3, [pc, #268]	; (8009484 <__multiply+0x148>)
 8009378:	4843      	ldr	r0, [pc, #268]	; (8009488 <__multiply+0x14c>)
 800937a:	f7fe fc3f 	bl	8007bfc <__assert_func>
 800937e:	f100 0514 	add.w	r5, r0, #20
 8009382:	462b      	mov	r3, r5
 8009384:	2200      	movs	r2, #0
 8009386:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800938a:	4543      	cmp	r3, r8
 800938c:	d321      	bcc.n	80093d2 <__multiply+0x96>
 800938e:	f104 0314 	add.w	r3, r4, #20
 8009392:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009396:	f109 0314 	add.w	r3, r9, #20
 800939a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800939e:	9202      	str	r2, [sp, #8]
 80093a0:	1b3a      	subs	r2, r7, r4
 80093a2:	3a15      	subs	r2, #21
 80093a4:	f022 0203 	bic.w	r2, r2, #3
 80093a8:	3204      	adds	r2, #4
 80093aa:	f104 0115 	add.w	r1, r4, #21
 80093ae:	428f      	cmp	r7, r1
 80093b0:	bf38      	it	cc
 80093b2:	2204      	movcc	r2, #4
 80093b4:	9201      	str	r2, [sp, #4]
 80093b6:	9a02      	ldr	r2, [sp, #8]
 80093b8:	9303      	str	r3, [sp, #12]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d80c      	bhi.n	80093d8 <__multiply+0x9c>
 80093be:	2e00      	cmp	r6, #0
 80093c0:	dd03      	ble.n	80093ca <__multiply+0x8e>
 80093c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d059      	beq.n	800947e <__multiply+0x142>
 80093ca:	6106      	str	r6, [r0, #16]
 80093cc:	b005      	add	sp, #20
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	f843 2b04 	str.w	r2, [r3], #4
 80093d6:	e7d8      	b.n	800938a <__multiply+0x4e>
 80093d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80093dc:	f1ba 0f00 	cmp.w	sl, #0
 80093e0:	d023      	beq.n	800942a <__multiply+0xee>
 80093e2:	46a9      	mov	r9, r5
 80093e4:	f04f 0c00 	mov.w	ip, #0
 80093e8:	f104 0e14 	add.w	lr, r4, #20
 80093ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80093f0:	f8d9 1000 	ldr.w	r1, [r9]
 80093f4:	fa1f fb82 	uxth.w	fp, r2
 80093f8:	b289      	uxth	r1, r1
 80093fa:	fb0a 110b 	mla	r1, sl, fp, r1
 80093fe:	4461      	add	r1, ip
 8009400:	f8d9 c000 	ldr.w	ip, [r9]
 8009404:	0c12      	lsrs	r2, r2, #16
 8009406:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800940a:	fb0a c202 	mla	r2, sl, r2, ip
 800940e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009412:	b289      	uxth	r1, r1
 8009414:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009418:	4577      	cmp	r7, lr
 800941a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800941e:	f849 1b04 	str.w	r1, [r9], #4
 8009422:	d8e3      	bhi.n	80093ec <__multiply+0xb0>
 8009424:	9a01      	ldr	r2, [sp, #4]
 8009426:	f845 c002 	str.w	ip, [r5, r2]
 800942a:	9a03      	ldr	r2, [sp, #12]
 800942c:	3304      	adds	r3, #4
 800942e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009432:	f1b9 0f00 	cmp.w	r9, #0
 8009436:	d020      	beq.n	800947a <__multiply+0x13e>
 8009438:	46ae      	mov	lr, r5
 800943a:	f04f 0a00 	mov.w	sl, #0
 800943e:	6829      	ldr	r1, [r5, #0]
 8009440:	f104 0c14 	add.w	ip, r4, #20
 8009444:	f8bc b000 	ldrh.w	fp, [ip]
 8009448:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800944c:	b289      	uxth	r1, r1
 800944e:	fb09 220b 	mla	r2, r9, fp, r2
 8009452:	4492      	add	sl, r2
 8009454:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009458:	f84e 1b04 	str.w	r1, [lr], #4
 800945c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009460:	f8be 1000 	ldrh.w	r1, [lr]
 8009464:	0c12      	lsrs	r2, r2, #16
 8009466:	fb09 1102 	mla	r1, r9, r2, r1
 800946a:	4567      	cmp	r7, ip
 800946c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009470:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009474:	d8e6      	bhi.n	8009444 <__multiply+0x108>
 8009476:	9a01      	ldr	r2, [sp, #4]
 8009478:	50a9      	str	r1, [r5, r2]
 800947a:	3504      	adds	r5, #4
 800947c:	e79b      	b.n	80093b6 <__multiply+0x7a>
 800947e:	3e01      	subs	r6, #1
 8009480:	e79d      	b.n	80093be <__multiply+0x82>
 8009482:	bf00      	nop
 8009484:	0800adc9 	.word	0x0800adc9
 8009488:	0800ae54 	.word	0x0800ae54

0800948c <__pow5mult>:
 800948c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009490:	4615      	mov	r5, r2
 8009492:	f012 0203 	ands.w	r2, r2, #3
 8009496:	4606      	mov	r6, r0
 8009498:	460f      	mov	r7, r1
 800949a:	d007      	beq.n	80094ac <__pow5mult+0x20>
 800949c:	4c25      	ldr	r4, [pc, #148]	; (8009534 <__pow5mult+0xa8>)
 800949e:	3a01      	subs	r2, #1
 80094a0:	2300      	movs	r3, #0
 80094a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094a6:	f7ff fe55 	bl	8009154 <__multadd>
 80094aa:	4607      	mov	r7, r0
 80094ac:	10ad      	asrs	r5, r5, #2
 80094ae:	d03d      	beq.n	800952c <__pow5mult+0xa0>
 80094b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094b2:	b97c      	cbnz	r4, 80094d4 <__pow5mult+0x48>
 80094b4:	2010      	movs	r0, #16
 80094b6:	f7ff fdb5 	bl	8009024 <malloc>
 80094ba:	4602      	mov	r2, r0
 80094bc:	6270      	str	r0, [r6, #36]	; 0x24
 80094be:	b928      	cbnz	r0, 80094cc <__pow5mult+0x40>
 80094c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80094c4:	4b1c      	ldr	r3, [pc, #112]	; (8009538 <__pow5mult+0xac>)
 80094c6:	481d      	ldr	r0, [pc, #116]	; (800953c <__pow5mult+0xb0>)
 80094c8:	f7fe fb98 	bl	8007bfc <__assert_func>
 80094cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094d0:	6004      	str	r4, [r0, #0]
 80094d2:	60c4      	str	r4, [r0, #12]
 80094d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094dc:	b94c      	cbnz	r4, 80094f2 <__pow5mult+0x66>
 80094de:	f240 2171 	movw	r1, #625	; 0x271
 80094e2:	4630      	mov	r0, r6
 80094e4:	f7ff ff14 	bl	8009310 <__i2b>
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80094f0:	6003      	str	r3, [r0, #0]
 80094f2:	f04f 0900 	mov.w	r9, #0
 80094f6:	07eb      	lsls	r3, r5, #31
 80094f8:	d50a      	bpl.n	8009510 <__pow5mult+0x84>
 80094fa:	4639      	mov	r1, r7
 80094fc:	4622      	mov	r2, r4
 80094fe:	4630      	mov	r0, r6
 8009500:	f7ff ff1c 	bl	800933c <__multiply>
 8009504:	4680      	mov	r8, r0
 8009506:	4639      	mov	r1, r7
 8009508:	4630      	mov	r0, r6
 800950a:	f7ff fe01 	bl	8009110 <_Bfree>
 800950e:	4647      	mov	r7, r8
 8009510:	106d      	asrs	r5, r5, #1
 8009512:	d00b      	beq.n	800952c <__pow5mult+0xa0>
 8009514:	6820      	ldr	r0, [r4, #0]
 8009516:	b938      	cbnz	r0, 8009528 <__pow5mult+0x9c>
 8009518:	4622      	mov	r2, r4
 800951a:	4621      	mov	r1, r4
 800951c:	4630      	mov	r0, r6
 800951e:	f7ff ff0d 	bl	800933c <__multiply>
 8009522:	6020      	str	r0, [r4, #0]
 8009524:	f8c0 9000 	str.w	r9, [r0]
 8009528:	4604      	mov	r4, r0
 800952a:	e7e4      	b.n	80094f6 <__pow5mult+0x6a>
 800952c:	4638      	mov	r0, r7
 800952e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009532:	bf00      	nop
 8009534:	0800afa0 	.word	0x0800afa0
 8009538:	0800abb0 	.word	0x0800abb0
 800953c:	0800ae54 	.word	0x0800ae54

08009540 <__lshift>:
 8009540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009544:	460c      	mov	r4, r1
 8009546:	4607      	mov	r7, r0
 8009548:	4691      	mov	r9, r2
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	6849      	ldr	r1, [r1, #4]
 800954e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009552:	68a3      	ldr	r3, [r4, #8]
 8009554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009558:	f108 0601 	add.w	r6, r8, #1
 800955c:	42b3      	cmp	r3, r6
 800955e:	db0b      	blt.n	8009578 <__lshift+0x38>
 8009560:	4638      	mov	r0, r7
 8009562:	f7ff fd95 	bl	8009090 <_Balloc>
 8009566:	4605      	mov	r5, r0
 8009568:	b948      	cbnz	r0, 800957e <__lshift+0x3e>
 800956a:	4602      	mov	r2, r0
 800956c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009570:	4b29      	ldr	r3, [pc, #164]	; (8009618 <__lshift+0xd8>)
 8009572:	482a      	ldr	r0, [pc, #168]	; (800961c <__lshift+0xdc>)
 8009574:	f7fe fb42 	bl	8007bfc <__assert_func>
 8009578:	3101      	adds	r1, #1
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	e7ee      	b.n	800955c <__lshift+0x1c>
 800957e:	2300      	movs	r3, #0
 8009580:	f100 0114 	add.w	r1, r0, #20
 8009584:	f100 0210 	add.w	r2, r0, #16
 8009588:	4618      	mov	r0, r3
 800958a:	4553      	cmp	r3, sl
 800958c:	db37      	blt.n	80095fe <__lshift+0xbe>
 800958e:	6920      	ldr	r0, [r4, #16]
 8009590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009594:	f104 0314 	add.w	r3, r4, #20
 8009598:	f019 091f 	ands.w	r9, r9, #31
 800959c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80095a4:	d02f      	beq.n	8009606 <__lshift+0xc6>
 80095a6:	468a      	mov	sl, r1
 80095a8:	f04f 0c00 	mov.w	ip, #0
 80095ac:	f1c9 0e20 	rsb	lr, r9, #32
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	fa02 f209 	lsl.w	r2, r2, r9
 80095b6:	ea42 020c 	orr.w	r2, r2, ip
 80095ba:	f84a 2b04 	str.w	r2, [sl], #4
 80095be:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c2:	4298      	cmp	r0, r3
 80095c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80095c8:	d8f2      	bhi.n	80095b0 <__lshift+0x70>
 80095ca:	1b03      	subs	r3, r0, r4
 80095cc:	3b15      	subs	r3, #21
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	3304      	adds	r3, #4
 80095d4:	f104 0215 	add.w	r2, r4, #21
 80095d8:	4290      	cmp	r0, r2
 80095da:	bf38      	it	cc
 80095dc:	2304      	movcc	r3, #4
 80095de:	f841 c003 	str.w	ip, [r1, r3]
 80095e2:	f1bc 0f00 	cmp.w	ip, #0
 80095e6:	d001      	beq.n	80095ec <__lshift+0xac>
 80095e8:	f108 0602 	add.w	r6, r8, #2
 80095ec:	3e01      	subs	r6, #1
 80095ee:	4638      	mov	r0, r7
 80095f0:	4621      	mov	r1, r4
 80095f2:	612e      	str	r6, [r5, #16]
 80095f4:	f7ff fd8c 	bl	8009110 <_Bfree>
 80095f8:	4628      	mov	r0, r5
 80095fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009602:	3301      	adds	r3, #1
 8009604:	e7c1      	b.n	800958a <__lshift+0x4a>
 8009606:	3904      	subs	r1, #4
 8009608:	f853 2b04 	ldr.w	r2, [r3], #4
 800960c:	4298      	cmp	r0, r3
 800960e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009612:	d8f9      	bhi.n	8009608 <__lshift+0xc8>
 8009614:	e7ea      	b.n	80095ec <__lshift+0xac>
 8009616:	bf00      	nop
 8009618:	0800adc9 	.word	0x0800adc9
 800961c:	0800ae54 	.word	0x0800ae54

08009620 <__mcmp>:
 8009620:	4603      	mov	r3, r0
 8009622:	690a      	ldr	r2, [r1, #16]
 8009624:	6900      	ldr	r0, [r0, #16]
 8009626:	b530      	push	{r4, r5, lr}
 8009628:	1a80      	subs	r0, r0, r2
 800962a:	d10d      	bne.n	8009648 <__mcmp+0x28>
 800962c:	3314      	adds	r3, #20
 800962e:	3114      	adds	r1, #20
 8009630:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009634:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009638:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800963c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009640:	4295      	cmp	r5, r2
 8009642:	d002      	beq.n	800964a <__mcmp+0x2a>
 8009644:	d304      	bcc.n	8009650 <__mcmp+0x30>
 8009646:	2001      	movs	r0, #1
 8009648:	bd30      	pop	{r4, r5, pc}
 800964a:	42a3      	cmp	r3, r4
 800964c:	d3f4      	bcc.n	8009638 <__mcmp+0x18>
 800964e:	e7fb      	b.n	8009648 <__mcmp+0x28>
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	e7f8      	b.n	8009648 <__mcmp+0x28>
	...

08009658 <__mdiff>:
 8009658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	460d      	mov	r5, r1
 800965e:	4607      	mov	r7, r0
 8009660:	4611      	mov	r1, r2
 8009662:	4628      	mov	r0, r5
 8009664:	4614      	mov	r4, r2
 8009666:	f7ff ffdb 	bl	8009620 <__mcmp>
 800966a:	1e06      	subs	r6, r0, #0
 800966c:	d111      	bne.n	8009692 <__mdiff+0x3a>
 800966e:	4631      	mov	r1, r6
 8009670:	4638      	mov	r0, r7
 8009672:	f7ff fd0d 	bl	8009090 <_Balloc>
 8009676:	4602      	mov	r2, r0
 8009678:	b928      	cbnz	r0, 8009686 <__mdiff+0x2e>
 800967a:	f240 2132 	movw	r1, #562	; 0x232
 800967e:	4b3a      	ldr	r3, [pc, #232]	; (8009768 <__mdiff+0x110>)
 8009680:	483a      	ldr	r0, [pc, #232]	; (800976c <__mdiff+0x114>)
 8009682:	f7fe fabb 	bl	8007bfc <__assert_func>
 8009686:	2301      	movs	r3, #1
 8009688:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800968c:	4610      	mov	r0, r2
 800968e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009692:	bfa4      	itt	ge
 8009694:	4623      	movge	r3, r4
 8009696:	462c      	movge	r4, r5
 8009698:	4638      	mov	r0, r7
 800969a:	6861      	ldr	r1, [r4, #4]
 800969c:	bfa6      	itte	ge
 800969e:	461d      	movge	r5, r3
 80096a0:	2600      	movge	r6, #0
 80096a2:	2601      	movlt	r6, #1
 80096a4:	f7ff fcf4 	bl	8009090 <_Balloc>
 80096a8:	4602      	mov	r2, r0
 80096aa:	b918      	cbnz	r0, 80096b4 <__mdiff+0x5c>
 80096ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096b0:	4b2d      	ldr	r3, [pc, #180]	; (8009768 <__mdiff+0x110>)
 80096b2:	e7e5      	b.n	8009680 <__mdiff+0x28>
 80096b4:	f102 0814 	add.w	r8, r2, #20
 80096b8:	46c2      	mov	sl, r8
 80096ba:	f04f 0c00 	mov.w	ip, #0
 80096be:	6927      	ldr	r7, [r4, #16]
 80096c0:	60c6      	str	r6, [r0, #12]
 80096c2:	692e      	ldr	r6, [r5, #16]
 80096c4:	f104 0014 	add.w	r0, r4, #20
 80096c8:	f105 0914 	add.w	r9, r5, #20
 80096cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80096d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80096d4:	3410      	adds	r4, #16
 80096d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80096da:	f859 3b04 	ldr.w	r3, [r9], #4
 80096de:	fa1f f18b 	uxth.w	r1, fp
 80096e2:	448c      	add	ip, r1
 80096e4:	b299      	uxth	r1, r3
 80096e6:	0c1b      	lsrs	r3, r3, #16
 80096e8:	ebac 0101 	sub.w	r1, ip, r1
 80096ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80096f4:	b289      	uxth	r1, r1
 80096f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80096fa:	454e      	cmp	r6, r9
 80096fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009700:	f84a 3b04 	str.w	r3, [sl], #4
 8009704:	d8e7      	bhi.n	80096d6 <__mdiff+0x7e>
 8009706:	1b73      	subs	r3, r6, r5
 8009708:	3b15      	subs	r3, #21
 800970a:	f023 0303 	bic.w	r3, r3, #3
 800970e:	3515      	adds	r5, #21
 8009710:	3304      	adds	r3, #4
 8009712:	42ae      	cmp	r6, r5
 8009714:	bf38      	it	cc
 8009716:	2304      	movcc	r3, #4
 8009718:	4418      	add	r0, r3
 800971a:	4443      	add	r3, r8
 800971c:	461e      	mov	r6, r3
 800971e:	4605      	mov	r5, r0
 8009720:	4575      	cmp	r5, lr
 8009722:	d30e      	bcc.n	8009742 <__mdiff+0xea>
 8009724:	f10e 0103 	add.w	r1, lr, #3
 8009728:	1a09      	subs	r1, r1, r0
 800972a:	f021 0103 	bic.w	r1, r1, #3
 800972e:	3803      	subs	r0, #3
 8009730:	4586      	cmp	lr, r0
 8009732:	bf38      	it	cc
 8009734:	2100      	movcc	r1, #0
 8009736:	4419      	add	r1, r3
 8009738:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800973c:	b18b      	cbz	r3, 8009762 <__mdiff+0x10a>
 800973e:	6117      	str	r7, [r2, #16]
 8009740:	e7a4      	b.n	800968c <__mdiff+0x34>
 8009742:	f855 8b04 	ldr.w	r8, [r5], #4
 8009746:	fa1f f188 	uxth.w	r1, r8
 800974a:	4461      	add	r1, ip
 800974c:	140c      	asrs	r4, r1, #16
 800974e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009752:	b289      	uxth	r1, r1
 8009754:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009758:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800975c:	f846 1b04 	str.w	r1, [r6], #4
 8009760:	e7de      	b.n	8009720 <__mdiff+0xc8>
 8009762:	3f01      	subs	r7, #1
 8009764:	e7e8      	b.n	8009738 <__mdiff+0xe0>
 8009766:	bf00      	nop
 8009768:	0800adc9 	.word	0x0800adc9
 800976c:	0800ae54 	.word	0x0800ae54

08009770 <__ulp>:
 8009770:	4b11      	ldr	r3, [pc, #68]	; (80097b8 <__ulp+0x48>)
 8009772:	400b      	ands	r3, r1
 8009774:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009778:	2b00      	cmp	r3, #0
 800977a:	dd02      	ble.n	8009782 <__ulp+0x12>
 800977c:	2000      	movs	r0, #0
 800977e:	4619      	mov	r1, r3
 8009780:	4770      	bx	lr
 8009782:	425b      	negs	r3, r3
 8009784:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009788:	f04f 0000 	mov.w	r0, #0
 800978c:	f04f 0100 	mov.w	r1, #0
 8009790:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009794:	da04      	bge.n	80097a0 <__ulp+0x30>
 8009796:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800979a:	fa43 f102 	asr.w	r1, r3, r2
 800979e:	4770      	bx	lr
 80097a0:	f1a2 0314 	sub.w	r3, r2, #20
 80097a4:	2b1e      	cmp	r3, #30
 80097a6:	bfd6      	itet	le
 80097a8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80097ac:	2301      	movgt	r3, #1
 80097ae:	fa22 f303 	lsrle.w	r3, r2, r3
 80097b2:	4618      	mov	r0, r3
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	7ff00000 	.word	0x7ff00000

080097bc <__b2d>:
 80097bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c0:	6907      	ldr	r7, [r0, #16]
 80097c2:	f100 0914 	add.w	r9, r0, #20
 80097c6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80097ca:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80097ce:	f1a7 0804 	sub.w	r8, r7, #4
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7ff fd4e 	bl	8009274 <__hi0bits>
 80097d8:	f1c0 0320 	rsb	r3, r0, #32
 80097dc:	280a      	cmp	r0, #10
 80097de:	600b      	str	r3, [r1, #0]
 80097e0:	491f      	ldr	r1, [pc, #124]	; (8009860 <__b2d+0xa4>)
 80097e2:	dc17      	bgt.n	8009814 <__b2d+0x58>
 80097e4:	45c1      	cmp	r9, r8
 80097e6:	bf28      	it	cs
 80097e8:	2200      	movcs	r2, #0
 80097ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80097ee:	fa26 f30c 	lsr.w	r3, r6, ip
 80097f2:	bf38      	it	cc
 80097f4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80097f8:	ea43 0501 	orr.w	r5, r3, r1
 80097fc:	f100 0315 	add.w	r3, r0, #21
 8009800:	fa06 f303 	lsl.w	r3, r6, r3
 8009804:	fa22 f20c 	lsr.w	r2, r2, ip
 8009808:	ea43 0402 	orr.w	r4, r3, r2
 800980c:	4620      	mov	r0, r4
 800980e:	4629      	mov	r1, r5
 8009810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009814:	45c1      	cmp	r9, r8
 8009816:	bf2e      	itee	cs
 8009818:	2200      	movcs	r2, #0
 800981a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800981e:	f1a7 0808 	subcc.w	r8, r7, #8
 8009822:	f1b0 030b 	subs.w	r3, r0, #11
 8009826:	d016      	beq.n	8009856 <__b2d+0x9a>
 8009828:	f1c3 0720 	rsb	r7, r3, #32
 800982c:	fa22 f107 	lsr.w	r1, r2, r7
 8009830:	45c8      	cmp	r8, r9
 8009832:	fa06 f603 	lsl.w	r6, r6, r3
 8009836:	ea46 0601 	orr.w	r6, r6, r1
 800983a:	bf94      	ite	ls
 800983c:	2100      	movls	r1, #0
 800983e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009842:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009846:	fa02 f003 	lsl.w	r0, r2, r3
 800984a:	40f9      	lsrs	r1, r7
 800984c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009850:	ea40 0401 	orr.w	r4, r0, r1
 8009854:	e7da      	b.n	800980c <__b2d+0x50>
 8009856:	4614      	mov	r4, r2
 8009858:	ea46 0501 	orr.w	r5, r6, r1
 800985c:	e7d6      	b.n	800980c <__b2d+0x50>
 800985e:	bf00      	nop
 8009860:	3ff00000 	.word	0x3ff00000

08009864 <__d2b>:
 8009864:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009868:	2101      	movs	r1, #1
 800986a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800986e:	4690      	mov	r8, r2
 8009870:	461d      	mov	r5, r3
 8009872:	f7ff fc0d 	bl	8009090 <_Balloc>
 8009876:	4604      	mov	r4, r0
 8009878:	b930      	cbnz	r0, 8009888 <__d2b+0x24>
 800987a:	4602      	mov	r2, r0
 800987c:	f240 310a 	movw	r1, #778	; 0x30a
 8009880:	4b24      	ldr	r3, [pc, #144]	; (8009914 <__d2b+0xb0>)
 8009882:	4825      	ldr	r0, [pc, #148]	; (8009918 <__d2b+0xb4>)
 8009884:	f7fe f9ba 	bl	8007bfc <__assert_func>
 8009888:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800988c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009890:	bb2d      	cbnz	r5, 80098de <__d2b+0x7a>
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	f1b8 0300 	subs.w	r3, r8, #0
 8009898:	d026      	beq.n	80098e8 <__d2b+0x84>
 800989a:	4668      	mov	r0, sp
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	f7ff fd09 	bl	80092b4 <__lo0bits>
 80098a2:	9900      	ldr	r1, [sp, #0]
 80098a4:	b1f0      	cbz	r0, 80098e4 <__d2b+0x80>
 80098a6:	9a01      	ldr	r2, [sp, #4]
 80098a8:	f1c0 0320 	rsb	r3, r0, #32
 80098ac:	fa02 f303 	lsl.w	r3, r2, r3
 80098b0:	430b      	orrs	r3, r1
 80098b2:	40c2      	lsrs	r2, r0
 80098b4:	6163      	str	r3, [r4, #20]
 80098b6:	9201      	str	r2, [sp, #4]
 80098b8:	9b01      	ldr	r3, [sp, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	bf14      	ite	ne
 80098be:	2102      	movne	r1, #2
 80098c0:	2101      	moveq	r1, #1
 80098c2:	61a3      	str	r3, [r4, #24]
 80098c4:	6121      	str	r1, [r4, #16]
 80098c6:	b1c5      	cbz	r5, 80098fa <__d2b+0x96>
 80098c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098cc:	4405      	add	r5, r0
 80098ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098d2:	603d      	str	r5, [r7, #0]
 80098d4:	6030      	str	r0, [r6, #0]
 80098d6:	4620      	mov	r0, r4
 80098d8:	b002      	add	sp, #8
 80098da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098e2:	e7d6      	b.n	8009892 <__d2b+0x2e>
 80098e4:	6161      	str	r1, [r4, #20]
 80098e6:	e7e7      	b.n	80098b8 <__d2b+0x54>
 80098e8:	a801      	add	r0, sp, #4
 80098ea:	f7ff fce3 	bl	80092b4 <__lo0bits>
 80098ee:	2101      	movs	r1, #1
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	6121      	str	r1, [r4, #16]
 80098f4:	6163      	str	r3, [r4, #20]
 80098f6:	3020      	adds	r0, #32
 80098f8:	e7e5      	b.n	80098c6 <__d2b+0x62>
 80098fa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80098fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009902:	6038      	str	r0, [r7, #0]
 8009904:	6918      	ldr	r0, [r3, #16]
 8009906:	f7ff fcb5 	bl	8009274 <__hi0bits>
 800990a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800990e:	6031      	str	r1, [r6, #0]
 8009910:	e7e1      	b.n	80098d6 <__d2b+0x72>
 8009912:	bf00      	nop
 8009914:	0800adc9 	.word	0x0800adc9
 8009918:	0800ae54 	.word	0x0800ae54

0800991c <__ratio>:
 800991c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	4688      	mov	r8, r1
 8009922:	4669      	mov	r1, sp
 8009924:	4681      	mov	r9, r0
 8009926:	f7ff ff49 	bl	80097bc <__b2d>
 800992a:	460f      	mov	r7, r1
 800992c:	4604      	mov	r4, r0
 800992e:	460d      	mov	r5, r1
 8009930:	4640      	mov	r0, r8
 8009932:	a901      	add	r1, sp, #4
 8009934:	f7ff ff42 	bl	80097bc <__b2d>
 8009938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800993c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009940:	468b      	mov	fp, r1
 8009942:	eba3 0c02 	sub.w	ip, r3, r2
 8009946:	e9dd 3200 	ldrd	r3, r2, [sp]
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009950:	2b00      	cmp	r3, #0
 8009952:	bfd5      	itete	le
 8009954:	460a      	movle	r2, r1
 8009956:	462a      	movgt	r2, r5
 8009958:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800995c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009960:	bfd8      	it	le
 8009962:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009966:	465b      	mov	r3, fp
 8009968:	4602      	mov	r2, r0
 800996a:	4639      	mov	r1, r7
 800996c:	4620      	mov	r0, r4
 800996e:	f7f6 fee7 	bl	8000740 <__aeabi_ddiv>
 8009972:	b003      	add	sp, #12
 8009974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009978 <__copybits>:
 8009978:	3901      	subs	r1, #1
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	1149      	asrs	r1, r1, #5
 800997e:	6914      	ldr	r4, [r2, #16]
 8009980:	3101      	adds	r1, #1
 8009982:	f102 0314 	add.w	r3, r2, #20
 8009986:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800998a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800998e:	1f05      	subs	r5, r0, #4
 8009990:	42a3      	cmp	r3, r4
 8009992:	d30c      	bcc.n	80099ae <__copybits+0x36>
 8009994:	1aa3      	subs	r3, r4, r2
 8009996:	3b11      	subs	r3, #17
 8009998:	f023 0303 	bic.w	r3, r3, #3
 800999c:	3211      	adds	r2, #17
 800999e:	42a2      	cmp	r2, r4
 80099a0:	bf88      	it	hi
 80099a2:	2300      	movhi	r3, #0
 80099a4:	4418      	add	r0, r3
 80099a6:	2300      	movs	r3, #0
 80099a8:	4288      	cmp	r0, r1
 80099aa:	d305      	bcc.n	80099b8 <__copybits+0x40>
 80099ac:	bd70      	pop	{r4, r5, r6, pc}
 80099ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80099b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80099b6:	e7eb      	b.n	8009990 <__copybits+0x18>
 80099b8:	f840 3b04 	str.w	r3, [r0], #4
 80099bc:	e7f4      	b.n	80099a8 <__copybits+0x30>

080099be <__any_on>:
 80099be:	f100 0214 	add.w	r2, r0, #20
 80099c2:	6900      	ldr	r0, [r0, #16]
 80099c4:	114b      	asrs	r3, r1, #5
 80099c6:	4298      	cmp	r0, r3
 80099c8:	b510      	push	{r4, lr}
 80099ca:	db11      	blt.n	80099f0 <__any_on+0x32>
 80099cc:	dd0a      	ble.n	80099e4 <__any_on+0x26>
 80099ce:	f011 011f 	ands.w	r1, r1, #31
 80099d2:	d007      	beq.n	80099e4 <__any_on+0x26>
 80099d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099d8:	fa24 f001 	lsr.w	r0, r4, r1
 80099dc:	fa00 f101 	lsl.w	r1, r0, r1
 80099e0:	428c      	cmp	r4, r1
 80099e2:	d10b      	bne.n	80099fc <__any_on+0x3e>
 80099e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d803      	bhi.n	80099f4 <__any_on+0x36>
 80099ec:	2000      	movs	r0, #0
 80099ee:	bd10      	pop	{r4, pc}
 80099f0:	4603      	mov	r3, r0
 80099f2:	e7f7      	b.n	80099e4 <__any_on+0x26>
 80099f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099f8:	2900      	cmp	r1, #0
 80099fa:	d0f5      	beq.n	80099e8 <__any_on+0x2a>
 80099fc:	2001      	movs	r0, #1
 80099fe:	e7f6      	b.n	80099ee <__any_on+0x30>

08009a00 <_calloc_r>:
 8009a00:	b570      	push	{r4, r5, r6, lr}
 8009a02:	fba1 5402 	umull	r5, r4, r1, r2
 8009a06:	b934      	cbnz	r4, 8009a16 <_calloc_r+0x16>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	f000 f875 	bl	8009af8 <_malloc_r>
 8009a0e:	4606      	mov	r6, r0
 8009a10:	b928      	cbnz	r0, 8009a1e <_calloc_r+0x1e>
 8009a12:	4630      	mov	r0, r6
 8009a14:	bd70      	pop	{r4, r5, r6, pc}
 8009a16:	220c      	movs	r2, #12
 8009a18:	2600      	movs	r6, #0
 8009a1a:	6002      	str	r2, [r0, #0]
 8009a1c:	e7f9      	b.n	8009a12 <_calloc_r+0x12>
 8009a1e:	462a      	mov	r2, r5
 8009a20:	4621      	mov	r1, r4
 8009a22:	f7fc fb35 	bl	8006090 <memset>
 8009a26:	e7f4      	b.n	8009a12 <_calloc_r+0x12>

08009a28 <_free_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d040      	beq.n	8009ab2 <_free_r+0x8a>
 8009a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a34:	1f0c      	subs	r4, r1, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	bfb8      	it	lt
 8009a3a:	18e4      	addlt	r4, r4, r3
 8009a3c:	f000 feba 	bl	800a7b4 <__malloc_lock>
 8009a40:	4a1c      	ldr	r2, [pc, #112]	; (8009ab4 <_free_r+0x8c>)
 8009a42:	6813      	ldr	r3, [r2, #0]
 8009a44:	b933      	cbnz	r3, 8009a54 <_free_r+0x2c>
 8009a46:	6063      	str	r3, [r4, #4]
 8009a48:	6014      	str	r4, [r2, #0]
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a50:	f000 beb6 	b.w	800a7c0 <__malloc_unlock>
 8009a54:	42a3      	cmp	r3, r4
 8009a56:	d908      	bls.n	8009a6a <_free_r+0x42>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	1821      	adds	r1, r4, r0
 8009a5c:	428b      	cmp	r3, r1
 8009a5e:	bf01      	itttt	eq
 8009a60:	6819      	ldreq	r1, [r3, #0]
 8009a62:	685b      	ldreq	r3, [r3, #4]
 8009a64:	1809      	addeq	r1, r1, r0
 8009a66:	6021      	streq	r1, [r4, #0]
 8009a68:	e7ed      	b.n	8009a46 <_free_r+0x1e>
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	b10b      	cbz	r3, 8009a74 <_free_r+0x4c>
 8009a70:	42a3      	cmp	r3, r4
 8009a72:	d9fa      	bls.n	8009a6a <_free_r+0x42>
 8009a74:	6811      	ldr	r1, [r2, #0]
 8009a76:	1850      	adds	r0, r2, r1
 8009a78:	42a0      	cmp	r0, r4
 8009a7a:	d10b      	bne.n	8009a94 <_free_r+0x6c>
 8009a7c:	6820      	ldr	r0, [r4, #0]
 8009a7e:	4401      	add	r1, r0
 8009a80:	1850      	adds	r0, r2, r1
 8009a82:	4283      	cmp	r3, r0
 8009a84:	6011      	str	r1, [r2, #0]
 8009a86:	d1e0      	bne.n	8009a4a <_free_r+0x22>
 8009a88:	6818      	ldr	r0, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	4401      	add	r1, r0
 8009a8e:	6011      	str	r1, [r2, #0]
 8009a90:	6053      	str	r3, [r2, #4]
 8009a92:	e7da      	b.n	8009a4a <_free_r+0x22>
 8009a94:	d902      	bls.n	8009a9c <_free_r+0x74>
 8009a96:	230c      	movs	r3, #12
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	e7d6      	b.n	8009a4a <_free_r+0x22>
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	1821      	adds	r1, r4, r0
 8009aa0:	428b      	cmp	r3, r1
 8009aa2:	bf01      	itttt	eq
 8009aa4:	6819      	ldreq	r1, [r3, #0]
 8009aa6:	685b      	ldreq	r3, [r3, #4]
 8009aa8:	1809      	addeq	r1, r1, r0
 8009aaa:	6021      	streq	r1, [r4, #0]
 8009aac:	6063      	str	r3, [r4, #4]
 8009aae:	6054      	str	r4, [r2, #4]
 8009ab0:	e7cb      	b.n	8009a4a <_free_r+0x22>
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	2000056c 	.word	0x2000056c

08009ab8 <sbrk_aligned>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	4e0e      	ldr	r6, [pc, #56]	; (8009af4 <sbrk_aligned+0x3c>)
 8009abc:	460c      	mov	r4, r1
 8009abe:	6831      	ldr	r1, [r6, #0]
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	b911      	cbnz	r1, 8009aca <sbrk_aligned+0x12>
 8009ac4:	f000 fb46 	bl	800a154 <_sbrk_r>
 8009ac8:	6030      	str	r0, [r6, #0]
 8009aca:	4621      	mov	r1, r4
 8009acc:	4628      	mov	r0, r5
 8009ace:	f000 fb41 	bl	800a154 <_sbrk_r>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	d00a      	beq.n	8009aec <sbrk_aligned+0x34>
 8009ad6:	1cc4      	adds	r4, r0, #3
 8009ad8:	f024 0403 	bic.w	r4, r4, #3
 8009adc:	42a0      	cmp	r0, r4
 8009ade:	d007      	beq.n	8009af0 <sbrk_aligned+0x38>
 8009ae0:	1a21      	subs	r1, r4, r0
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 fb36 	bl	800a154 <_sbrk_r>
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d101      	bne.n	8009af0 <sbrk_aligned+0x38>
 8009aec:	f04f 34ff 	mov.w	r4, #4294967295
 8009af0:	4620      	mov	r0, r4
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	20000570 	.word	0x20000570

08009af8 <_malloc_r>:
 8009af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afc:	1ccd      	adds	r5, r1, #3
 8009afe:	f025 0503 	bic.w	r5, r5, #3
 8009b02:	3508      	adds	r5, #8
 8009b04:	2d0c      	cmp	r5, #12
 8009b06:	bf38      	it	cc
 8009b08:	250c      	movcc	r5, #12
 8009b0a:	2d00      	cmp	r5, #0
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	db01      	blt.n	8009b14 <_malloc_r+0x1c>
 8009b10:	42a9      	cmp	r1, r5
 8009b12:	d905      	bls.n	8009b20 <_malloc_r+0x28>
 8009b14:	230c      	movs	r3, #12
 8009b16:	2600      	movs	r6, #0
 8009b18:	603b      	str	r3, [r7, #0]
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b20:	4e2e      	ldr	r6, [pc, #184]	; (8009bdc <_malloc_r+0xe4>)
 8009b22:	f000 fe47 	bl	800a7b4 <__malloc_lock>
 8009b26:	6833      	ldr	r3, [r6, #0]
 8009b28:	461c      	mov	r4, r3
 8009b2a:	bb34      	cbnz	r4, 8009b7a <_malloc_r+0x82>
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	4638      	mov	r0, r7
 8009b30:	f7ff ffc2 	bl	8009ab8 <sbrk_aligned>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	4604      	mov	r4, r0
 8009b38:	d14d      	bne.n	8009bd6 <_malloc_r+0xde>
 8009b3a:	6834      	ldr	r4, [r6, #0]
 8009b3c:	4626      	mov	r6, r4
 8009b3e:	2e00      	cmp	r6, #0
 8009b40:	d140      	bne.n	8009bc4 <_malloc_r+0xcc>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	4631      	mov	r1, r6
 8009b46:	4638      	mov	r0, r7
 8009b48:	eb04 0803 	add.w	r8, r4, r3
 8009b4c:	f000 fb02 	bl	800a154 <_sbrk_r>
 8009b50:	4580      	cmp	r8, r0
 8009b52:	d13a      	bne.n	8009bca <_malloc_r+0xd2>
 8009b54:	6821      	ldr	r1, [r4, #0]
 8009b56:	3503      	adds	r5, #3
 8009b58:	1a6d      	subs	r5, r5, r1
 8009b5a:	f025 0503 	bic.w	r5, r5, #3
 8009b5e:	3508      	adds	r5, #8
 8009b60:	2d0c      	cmp	r5, #12
 8009b62:	bf38      	it	cc
 8009b64:	250c      	movcc	r5, #12
 8009b66:	4638      	mov	r0, r7
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7ff ffa5 	bl	8009ab8 <sbrk_aligned>
 8009b6e:	3001      	adds	r0, #1
 8009b70:	d02b      	beq.n	8009bca <_malloc_r+0xd2>
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	442b      	add	r3, r5
 8009b76:	6023      	str	r3, [r4, #0]
 8009b78:	e00e      	b.n	8009b98 <_malloc_r+0xa0>
 8009b7a:	6822      	ldr	r2, [r4, #0]
 8009b7c:	1b52      	subs	r2, r2, r5
 8009b7e:	d41e      	bmi.n	8009bbe <_malloc_r+0xc6>
 8009b80:	2a0b      	cmp	r2, #11
 8009b82:	d916      	bls.n	8009bb2 <_malloc_r+0xba>
 8009b84:	1961      	adds	r1, r4, r5
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	6025      	str	r5, [r4, #0]
 8009b8a:	bf18      	it	ne
 8009b8c:	6059      	strne	r1, [r3, #4]
 8009b8e:	6863      	ldr	r3, [r4, #4]
 8009b90:	bf08      	it	eq
 8009b92:	6031      	streq	r1, [r6, #0]
 8009b94:	5162      	str	r2, [r4, r5]
 8009b96:	604b      	str	r3, [r1, #4]
 8009b98:	4638      	mov	r0, r7
 8009b9a:	f104 060b 	add.w	r6, r4, #11
 8009b9e:	f000 fe0f 	bl	800a7c0 <__malloc_unlock>
 8009ba2:	f026 0607 	bic.w	r6, r6, #7
 8009ba6:	1d23      	adds	r3, r4, #4
 8009ba8:	1af2      	subs	r2, r6, r3
 8009baa:	d0b6      	beq.n	8009b1a <_malloc_r+0x22>
 8009bac:	1b9b      	subs	r3, r3, r6
 8009bae:	50a3      	str	r3, [r4, r2]
 8009bb0:	e7b3      	b.n	8009b1a <_malloc_r+0x22>
 8009bb2:	6862      	ldr	r2, [r4, #4]
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	bf0c      	ite	eq
 8009bb8:	6032      	streq	r2, [r6, #0]
 8009bba:	605a      	strne	r2, [r3, #4]
 8009bbc:	e7ec      	b.n	8009b98 <_malloc_r+0xa0>
 8009bbe:	4623      	mov	r3, r4
 8009bc0:	6864      	ldr	r4, [r4, #4]
 8009bc2:	e7b2      	b.n	8009b2a <_malloc_r+0x32>
 8009bc4:	4634      	mov	r4, r6
 8009bc6:	6876      	ldr	r6, [r6, #4]
 8009bc8:	e7b9      	b.n	8009b3e <_malloc_r+0x46>
 8009bca:	230c      	movs	r3, #12
 8009bcc:	4638      	mov	r0, r7
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	f000 fdf6 	bl	800a7c0 <__malloc_unlock>
 8009bd4:	e7a1      	b.n	8009b1a <_malloc_r+0x22>
 8009bd6:	6025      	str	r5, [r4, #0]
 8009bd8:	e7de      	b.n	8009b98 <_malloc_r+0xa0>
 8009bda:	bf00      	nop
 8009bdc:	2000056c 	.word	0x2000056c

08009be0 <__ssputs_r>:
 8009be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be4:	688e      	ldr	r6, [r1, #8]
 8009be6:	4682      	mov	sl, r0
 8009be8:	429e      	cmp	r6, r3
 8009bea:	460c      	mov	r4, r1
 8009bec:	4690      	mov	r8, r2
 8009bee:	461f      	mov	r7, r3
 8009bf0:	d838      	bhi.n	8009c64 <__ssputs_r+0x84>
 8009bf2:	898a      	ldrh	r2, [r1, #12]
 8009bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bf8:	d032      	beq.n	8009c60 <__ssputs_r+0x80>
 8009bfa:	6825      	ldr	r5, [r4, #0]
 8009bfc:	6909      	ldr	r1, [r1, #16]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	eba5 0901 	sub.w	r9, r5, r1
 8009c04:	6965      	ldr	r5, [r4, #20]
 8009c06:	444b      	add	r3, r9
 8009c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c10:	106d      	asrs	r5, r5, #1
 8009c12:	429d      	cmp	r5, r3
 8009c14:	bf38      	it	cc
 8009c16:	461d      	movcc	r5, r3
 8009c18:	0553      	lsls	r3, r2, #21
 8009c1a:	d531      	bpl.n	8009c80 <__ssputs_r+0xa0>
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	f7ff ff6b 	bl	8009af8 <_malloc_r>
 8009c22:	4606      	mov	r6, r0
 8009c24:	b950      	cbnz	r0, 8009c3c <__ssputs_r+0x5c>
 8009c26:	230c      	movs	r3, #12
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	f8ca 3000 	str.w	r3, [sl]
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3c:	464a      	mov	r2, r9
 8009c3e:	6921      	ldr	r1, [r4, #16]
 8009c40:	f7ff fa18 	bl	8009074 <memcpy>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	6126      	str	r6, [r4, #16]
 8009c52:	444e      	add	r6, r9
 8009c54:	6026      	str	r6, [r4, #0]
 8009c56:	463e      	mov	r6, r7
 8009c58:	6165      	str	r5, [r4, #20]
 8009c5a:	eba5 0509 	sub.w	r5, r5, r9
 8009c5e:	60a5      	str	r5, [r4, #8]
 8009c60:	42be      	cmp	r6, r7
 8009c62:	d900      	bls.n	8009c66 <__ssputs_r+0x86>
 8009c64:	463e      	mov	r6, r7
 8009c66:	4632      	mov	r2, r6
 8009c68:	4641      	mov	r1, r8
 8009c6a:	6820      	ldr	r0, [r4, #0]
 8009c6c:	f000 fd88 	bl	800a780 <memmove>
 8009c70:	68a3      	ldr	r3, [r4, #8]
 8009c72:	2000      	movs	r0, #0
 8009c74:	1b9b      	subs	r3, r3, r6
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	4433      	add	r3, r6
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	e7db      	b.n	8009c38 <__ssputs_r+0x58>
 8009c80:	462a      	mov	r2, r5
 8009c82:	f000 fda3 	bl	800a7cc <_realloc_r>
 8009c86:	4606      	mov	r6, r0
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d1e1      	bne.n	8009c50 <__ssputs_r+0x70>
 8009c8c:	4650      	mov	r0, sl
 8009c8e:	6921      	ldr	r1, [r4, #16]
 8009c90:	f7ff feca 	bl	8009a28 <_free_r>
 8009c94:	e7c7      	b.n	8009c26 <__ssputs_r+0x46>
	...

08009c98 <_svfiprintf_r>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	4698      	mov	r8, r3
 8009c9e:	898b      	ldrh	r3, [r1, #12]
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	061b      	lsls	r3, r3, #24
 8009ca4:	460d      	mov	r5, r1
 8009ca6:	4614      	mov	r4, r2
 8009ca8:	b09d      	sub	sp, #116	; 0x74
 8009caa:	d50e      	bpl.n	8009cca <_svfiprintf_r+0x32>
 8009cac:	690b      	ldr	r3, [r1, #16]
 8009cae:	b963      	cbnz	r3, 8009cca <_svfiprintf_r+0x32>
 8009cb0:	2140      	movs	r1, #64	; 0x40
 8009cb2:	f7ff ff21 	bl	8009af8 <_malloc_r>
 8009cb6:	6028      	str	r0, [r5, #0]
 8009cb8:	6128      	str	r0, [r5, #16]
 8009cba:	b920      	cbnz	r0, 8009cc6 <_svfiprintf_r+0x2e>
 8009cbc:	230c      	movs	r3, #12
 8009cbe:	603b      	str	r3, [r7, #0]
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	e0d1      	b.n	8009e6a <_svfiprintf_r+0x1d2>
 8009cc6:	2340      	movs	r3, #64	; 0x40
 8009cc8:	616b      	str	r3, [r5, #20]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cce:	2320      	movs	r3, #32
 8009cd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cd4:	2330      	movs	r3, #48	; 0x30
 8009cd6:	f04f 0901 	mov.w	r9, #1
 8009cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e84 <_svfiprintf_r+0x1ec>
 8009ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ce6:	4623      	mov	r3, r4
 8009ce8:	469a      	mov	sl, r3
 8009cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cee:	b10a      	cbz	r2, 8009cf4 <_svfiprintf_r+0x5c>
 8009cf0:	2a25      	cmp	r2, #37	; 0x25
 8009cf2:	d1f9      	bne.n	8009ce8 <_svfiprintf_r+0x50>
 8009cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf8:	d00b      	beq.n	8009d12 <_svfiprintf_r+0x7a>
 8009cfa:	465b      	mov	r3, fp
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	4638      	mov	r0, r7
 8009d02:	f7ff ff6d 	bl	8009be0 <__ssputs_r>
 8009d06:	3001      	adds	r0, #1
 8009d08:	f000 80aa 	beq.w	8009e60 <_svfiprintf_r+0x1c8>
 8009d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d0e:	445a      	add	r2, fp
 8009d10:	9209      	str	r2, [sp, #36]	; 0x24
 8009d12:	f89a 3000 	ldrb.w	r3, [sl]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 80a2 	beq.w	8009e60 <_svfiprintf_r+0x1c8>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d26:	f10a 0a01 	add.w	sl, sl, #1
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	9307      	str	r3, [sp, #28]
 8009d2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d32:	931a      	str	r3, [sp, #104]	; 0x68
 8009d34:	4654      	mov	r4, sl
 8009d36:	2205      	movs	r2, #5
 8009d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3c:	4851      	ldr	r0, [pc, #324]	; (8009e84 <_svfiprintf_r+0x1ec>)
 8009d3e:	f7ff f98b 	bl	8009058 <memchr>
 8009d42:	9a04      	ldr	r2, [sp, #16]
 8009d44:	b9d8      	cbnz	r0, 8009d7e <_svfiprintf_r+0xe6>
 8009d46:	06d0      	lsls	r0, r2, #27
 8009d48:	bf44      	itt	mi
 8009d4a:	2320      	movmi	r3, #32
 8009d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d50:	0711      	lsls	r1, r2, #28
 8009d52:	bf44      	itt	mi
 8009d54:	232b      	movmi	r3, #43	; 0x2b
 8009d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d60:	d015      	beq.n	8009d8e <_svfiprintf_r+0xf6>
 8009d62:	4654      	mov	r4, sl
 8009d64:	2000      	movs	r0, #0
 8009d66:	f04f 0c0a 	mov.w	ip, #10
 8009d6a:	9a07      	ldr	r2, [sp, #28]
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d72:	3b30      	subs	r3, #48	; 0x30
 8009d74:	2b09      	cmp	r3, #9
 8009d76:	d94e      	bls.n	8009e16 <_svfiprintf_r+0x17e>
 8009d78:	b1b0      	cbz	r0, 8009da8 <_svfiprintf_r+0x110>
 8009d7a:	9207      	str	r2, [sp, #28]
 8009d7c:	e014      	b.n	8009da8 <_svfiprintf_r+0x110>
 8009d7e:	eba0 0308 	sub.w	r3, r0, r8
 8009d82:	fa09 f303 	lsl.w	r3, r9, r3
 8009d86:	4313      	orrs	r3, r2
 8009d88:	46a2      	mov	sl, r4
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	e7d2      	b.n	8009d34 <_svfiprintf_r+0x9c>
 8009d8e:	9b03      	ldr	r3, [sp, #12]
 8009d90:	1d19      	adds	r1, r3, #4
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	9103      	str	r1, [sp, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bfbb      	ittet	lt
 8009d9a:	425b      	neglt	r3, r3
 8009d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009da0:	9307      	strge	r3, [sp, #28]
 8009da2:	9307      	strlt	r3, [sp, #28]
 8009da4:	bfb8      	it	lt
 8009da6:	9204      	strlt	r2, [sp, #16]
 8009da8:	7823      	ldrb	r3, [r4, #0]
 8009daa:	2b2e      	cmp	r3, #46	; 0x2e
 8009dac:	d10c      	bne.n	8009dc8 <_svfiprintf_r+0x130>
 8009dae:	7863      	ldrb	r3, [r4, #1]
 8009db0:	2b2a      	cmp	r3, #42	; 0x2a
 8009db2:	d135      	bne.n	8009e20 <_svfiprintf_r+0x188>
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	3402      	adds	r4, #2
 8009db8:	1d1a      	adds	r2, r3, #4
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	9203      	str	r2, [sp, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	bfb8      	it	lt
 8009dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dc6:	9305      	str	r3, [sp, #20]
 8009dc8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009e88 <_svfiprintf_r+0x1f0>
 8009dcc:	2203      	movs	r2, #3
 8009dce:	4650      	mov	r0, sl
 8009dd0:	7821      	ldrb	r1, [r4, #0]
 8009dd2:	f7ff f941 	bl	8009058 <memchr>
 8009dd6:	b140      	cbz	r0, 8009dea <_svfiprintf_r+0x152>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	eba0 000a 	sub.w	r0, r0, sl
 8009dde:	fa03 f000 	lsl.w	r0, r3, r0
 8009de2:	9b04      	ldr	r3, [sp, #16]
 8009de4:	3401      	adds	r4, #1
 8009de6:	4303      	orrs	r3, r0
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dee:	2206      	movs	r2, #6
 8009df0:	4826      	ldr	r0, [pc, #152]	; (8009e8c <_svfiprintf_r+0x1f4>)
 8009df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009df6:	f7ff f92f 	bl	8009058 <memchr>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d038      	beq.n	8009e70 <_svfiprintf_r+0x1d8>
 8009dfe:	4b24      	ldr	r3, [pc, #144]	; (8009e90 <_svfiprintf_r+0x1f8>)
 8009e00:	bb1b      	cbnz	r3, 8009e4a <_svfiprintf_r+0x1b2>
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	3307      	adds	r3, #7
 8009e06:	f023 0307 	bic.w	r3, r3, #7
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	9303      	str	r3, [sp, #12]
 8009e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e10:	4433      	add	r3, r6
 8009e12:	9309      	str	r3, [sp, #36]	; 0x24
 8009e14:	e767      	b.n	8009ce6 <_svfiprintf_r+0x4e>
 8009e16:	460c      	mov	r4, r1
 8009e18:	2001      	movs	r0, #1
 8009e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e1e:	e7a5      	b.n	8009d6c <_svfiprintf_r+0xd4>
 8009e20:	2300      	movs	r3, #0
 8009e22:	f04f 0c0a 	mov.w	ip, #10
 8009e26:	4619      	mov	r1, r3
 8009e28:	3401      	adds	r4, #1
 8009e2a:	9305      	str	r3, [sp, #20]
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e32:	3a30      	subs	r2, #48	; 0x30
 8009e34:	2a09      	cmp	r2, #9
 8009e36:	d903      	bls.n	8009e40 <_svfiprintf_r+0x1a8>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0c5      	beq.n	8009dc8 <_svfiprintf_r+0x130>
 8009e3c:	9105      	str	r1, [sp, #20]
 8009e3e:	e7c3      	b.n	8009dc8 <_svfiprintf_r+0x130>
 8009e40:	4604      	mov	r4, r0
 8009e42:	2301      	movs	r3, #1
 8009e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e48:	e7f0      	b.n	8009e2c <_svfiprintf_r+0x194>
 8009e4a:	ab03      	add	r3, sp, #12
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4638      	mov	r0, r7
 8009e52:	4b10      	ldr	r3, [pc, #64]	; (8009e94 <_svfiprintf_r+0x1fc>)
 8009e54:	a904      	add	r1, sp, #16
 8009e56:	f7fc f9c1 	bl	80061dc <_printf_float>
 8009e5a:	1c42      	adds	r2, r0, #1
 8009e5c:	4606      	mov	r6, r0
 8009e5e:	d1d6      	bne.n	8009e0e <_svfiprintf_r+0x176>
 8009e60:	89ab      	ldrh	r3, [r5, #12]
 8009e62:	065b      	lsls	r3, r3, #25
 8009e64:	f53f af2c 	bmi.w	8009cc0 <_svfiprintf_r+0x28>
 8009e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e6a:	b01d      	add	sp, #116	; 0x74
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	ab03      	add	r3, sp, #12
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	462a      	mov	r2, r5
 8009e76:	4638      	mov	r0, r7
 8009e78:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <_svfiprintf_r+0x1fc>)
 8009e7a:	a904      	add	r1, sp, #16
 8009e7c:	f7fc fc4a 	bl	8006714 <_printf_i>
 8009e80:	e7eb      	b.n	8009e5a <_svfiprintf_r+0x1c2>
 8009e82:	bf00      	nop
 8009e84:	0800afac 	.word	0x0800afac
 8009e88:	0800afb2 	.word	0x0800afb2
 8009e8c:	0800afb6 	.word	0x0800afb6
 8009e90:	080061dd 	.word	0x080061dd
 8009e94:	08009be1 	.word	0x08009be1

08009e98 <__sfputc_r>:
 8009e98:	6893      	ldr	r3, [r2, #8]
 8009e9a:	b410      	push	{r4}
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	6093      	str	r3, [r2, #8]
 8009ea2:	da07      	bge.n	8009eb4 <__sfputc_r+0x1c>
 8009ea4:	6994      	ldr	r4, [r2, #24]
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	db01      	blt.n	8009eae <__sfputc_r+0x16>
 8009eaa:	290a      	cmp	r1, #10
 8009eac:	d102      	bne.n	8009eb4 <__sfputc_r+0x1c>
 8009eae:	bc10      	pop	{r4}
 8009eb0:	f000 b974 	b.w	800a19c <__swbuf_r>
 8009eb4:	6813      	ldr	r3, [r2, #0]
 8009eb6:	1c58      	adds	r0, r3, #1
 8009eb8:	6010      	str	r0, [r2, #0]
 8009eba:	7019      	strb	r1, [r3, #0]
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	bc10      	pop	{r4}
 8009ec0:	4770      	bx	lr

08009ec2 <__sfputs_r>:
 8009ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	460f      	mov	r7, r1
 8009ec8:	4614      	mov	r4, r2
 8009eca:	18d5      	adds	r5, r2, r3
 8009ecc:	42ac      	cmp	r4, r5
 8009ece:	d101      	bne.n	8009ed4 <__sfputs_r+0x12>
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	e007      	b.n	8009ee4 <__sfputs_r+0x22>
 8009ed4:	463a      	mov	r2, r7
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009edc:	f7ff ffdc 	bl	8009e98 <__sfputc_r>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d1f3      	bne.n	8009ecc <__sfputs_r+0xa>
 8009ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ee8 <_vfiprintf_r>:
 8009ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	460d      	mov	r5, r1
 8009eee:	4614      	mov	r4, r2
 8009ef0:	4698      	mov	r8, r3
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	b09d      	sub	sp, #116	; 0x74
 8009ef6:	b118      	cbz	r0, 8009f00 <_vfiprintf_r+0x18>
 8009ef8:	6983      	ldr	r3, [r0, #24]
 8009efa:	b90b      	cbnz	r3, 8009f00 <_vfiprintf_r+0x18>
 8009efc:	f000 fb3a 	bl	800a574 <__sinit>
 8009f00:	4b89      	ldr	r3, [pc, #548]	; (800a128 <_vfiprintf_r+0x240>)
 8009f02:	429d      	cmp	r5, r3
 8009f04:	d11b      	bne.n	8009f3e <_vfiprintf_r+0x56>
 8009f06:	6875      	ldr	r5, [r6, #4]
 8009f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f0a:	07d9      	lsls	r1, r3, #31
 8009f0c:	d405      	bmi.n	8009f1a <_vfiprintf_r+0x32>
 8009f0e:	89ab      	ldrh	r3, [r5, #12]
 8009f10:	059a      	lsls	r2, r3, #22
 8009f12:	d402      	bmi.n	8009f1a <_vfiprintf_r+0x32>
 8009f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f16:	f000 fbcb 	bl	800a6b0 <__retarget_lock_acquire_recursive>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	071b      	lsls	r3, r3, #28
 8009f1e:	d501      	bpl.n	8009f24 <_vfiprintf_r+0x3c>
 8009f20:	692b      	ldr	r3, [r5, #16]
 8009f22:	b9eb      	cbnz	r3, 8009f60 <_vfiprintf_r+0x78>
 8009f24:	4629      	mov	r1, r5
 8009f26:	4630      	mov	r0, r6
 8009f28:	f000 f998 	bl	800a25c <__swsetup_r>
 8009f2c:	b1c0      	cbz	r0, 8009f60 <_vfiprintf_r+0x78>
 8009f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f30:	07dc      	lsls	r4, r3, #31
 8009f32:	d50e      	bpl.n	8009f52 <_vfiprintf_r+0x6a>
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	b01d      	add	sp, #116	; 0x74
 8009f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3e:	4b7b      	ldr	r3, [pc, #492]	; (800a12c <_vfiprintf_r+0x244>)
 8009f40:	429d      	cmp	r5, r3
 8009f42:	d101      	bne.n	8009f48 <_vfiprintf_r+0x60>
 8009f44:	68b5      	ldr	r5, [r6, #8]
 8009f46:	e7df      	b.n	8009f08 <_vfiprintf_r+0x20>
 8009f48:	4b79      	ldr	r3, [pc, #484]	; (800a130 <_vfiprintf_r+0x248>)
 8009f4a:	429d      	cmp	r5, r3
 8009f4c:	bf08      	it	eq
 8009f4e:	68f5      	ldreq	r5, [r6, #12]
 8009f50:	e7da      	b.n	8009f08 <_vfiprintf_r+0x20>
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	0598      	lsls	r0, r3, #22
 8009f56:	d4ed      	bmi.n	8009f34 <_vfiprintf_r+0x4c>
 8009f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f5a:	f000 fbaa 	bl	800a6b2 <__retarget_lock_release_recursive>
 8009f5e:	e7e9      	b.n	8009f34 <_vfiprintf_r+0x4c>
 8009f60:	2300      	movs	r3, #0
 8009f62:	9309      	str	r3, [sp, #36]	; 0x24
 8009f64:	2320      	movs	r3, #32
 8009f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f6a:	2330      	movs	r3, #48	; 0x30
 8009f6c:	f04f 0901 	mov.w	r9, #1
 8009f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a134 <_vfiprintf_r+0x24c>
 8009f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f7c:	4623      	mov	r3, r4
 8009f7e:	469a      	mov	sl, r3
 8009f80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f84:	b10a      	cbz	r2, 8009f8a <_vfiprintf_r+0xa2>
 8009f86:	2a25      	cmp	r2, #37	; 0x25
 8009f88:	d1f9      	bne.n	8009f7e <_vfiprintf_r+0x96>
 8009f8a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f8e:	d00b      	beq.n	8009fa8 <_vfiprintf_r+0xc0>
 8009f90:	465b      	mov	r3, fp
 8009f92:	4622      	mov	r2, r4
 8009f94:	4629      	mov	r1, r5
 8009f96:	4630      	mov	r0, r6
 8009f98:	f7ff ff93 	bl	8009ec2 <__sfputs_r>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	f000 80aa 	beq.w	800a0f6 <_vfiprintf_r+0x20e>
 8009fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fa4:	445a      	add	r2, fp
 8009fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 80a2 	beq.w	800a0f6 <_vfiprintf_r+0x20e>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fbc:	f10a 0a01 	add.w	sl, sl, #1
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	9307      	str	r3, [sp, #28]
 8009fc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8009fca:	4654      	mov	r4, sl
 8009fcc:	2205      	movs	r2, #5
 8009fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd2:	4858      	ldr	r0, [pc, #352]	; (800a134 <_vfiprintf_r+0x24c>)
 8009fd4:	f7ff f840 	bl	8009058 <memchr>
 8009fd8:	9a04      	ldr	r2, [sp, #16]
 8009fda:	b9d8      	cbnz	r0, 800a014 <_vfiprintf_r+0x12c>
 8009fdc:	06d1      	lsls	r1, r2, #27
 8009fde:	bf44      	itt	mi
 8009fe0:	2320      	movmi	r3, #32
 8009fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe6:	0713      	lsls	r3, r2, #28
 8009fe8:	bf44      	itt	mi
 8009fea:	232b      	movmi	r3, #43	; 0x2b
 8009fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ff6:	d015      	beq.n	800a024 <_vfiprintf_r+0x13c>
 8009ff8:	4654      	mov	r4, sl
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	f04f 0c0a 	mov.w	ip, #10
 800a000:	9a07      	ldr	r2, [sp, #28]
 800a002:	4621      	mov	r1, r4
 800a004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a008:	3b30      	subs	r3, #48	; 0x30
 800a00a:	2b09      	cmp	r3, #9
 800a00c:	d94e      	bls.n	800a0ac <_vfiprintf_r+0x1c4>
 800a00e:	b1b0      	cbz	r0, 800a03e <_vfiprintf_r+0x156>
 800a010:	9207      	str	r2, [sp, #28]
 800a012:	e014      	b.n	800a03e <_vfiprintf_r+0x156>
 800a014:	eba0 0308 	sub.w	r3, r0, r8
 800a018:	fa09 f303 	lsl.w	r3, r9, r3
 800a01c:	4313      	orrs	r3, r2
 800a01e:	46a2      	mov	sl, r4
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	e7d2      	b.n	8009fca <_vfiprintf_r+0xe2>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	1d19      	adds	r1, r3, #4
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	9103      	str	r1, [sp, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	bfbb      	ittet	lt
 800a030:	425b      	neglt	r3, r3
 800a032:	f042 0202 	orrlt.w	r2, r2, #2
 800a036:	9307      	strge	r3, [sp, #28]
 800a038:	9307      	strlt	r3, [sp, #28]
 800a03a:	bfb8      	it	lt
 800a03c:	9204      	strlt	r2, [sp, #16]
 800a03e:	7823      	ldrb	r3, [r4, #0]
 800a040:	2b2e      	cmp	r3, #46	; 0x2e
 800a042:	d10c      	bne.n	800a05e <_vfiprintf_r+0x176>
 800a044:	7863      	ldrb	r3, [r4, #1]
 800a046:	2b2a      	cmp	r3, #42	; 0x2a
 800a048:	d135      	bne.n	800a0b6 <_vfiprintf_r+0x1ce>
 800a04a:	9b03      	ldr	r3, [sp, #12]
 800a04c:	3402      	adds	r4, #2
 800a04e:	1d1a      	adds	r2, r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	9203      	str	r2, [sp, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	bfb8      	it	lt
 800a058:	f04f 33ff 	movlt.w	r3, #4294967295
 800a05c:	9305      	str	r3, [sp, #20]
 800a05e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a138 <_vfiprintf_r+0x250>
 800a062:	2203      	movs	r2, #3
 800a064:	4650      	mov	r0, sl
 800a066:	7821      	ldrb	r1, [r4, #0]
 800a068:	f7fe fff6 	bl	8009058 <memchr>
 800a06c:	b140      	cbz	r0, 800a080 <_vfiprintf_r+0x198>
 800a06e:	2340      	movs	r3, #64	; 0x40
 800a070:	eba0 000a 	sub.w	r0, r0, sl
 800a074:	fa03 f000 	lsl.w	r0, r3, r0
 800a078:	9b04      	ldr	r3, [sp, #16]
 800a07a:	3401      	adds	r4, #1
 800a07c:	4303      	orrs	r3, r0
 800a07e:	9304      	str	r3, [sp, #16]
 800a080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a084:	2206      	movs	r2, #6
 800a086:	482d      	ldr	r0, [pc, #180]	; (800a13c <_vfiprintf_r+0x254>)
 800a088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a08c:	f7fe ffe4 	bl	8009058 <memchr>
 800a090:	2800      	cmp	r0, #0
 800a092:	d03f      	beq.n	800a114 <_vfiprintf_r+0x22c>
 800a094:	4b2a      	ldr	r3, [pc, #168]	; (800a140 <_vfiprintf_r+0x258>)
 800a096:	bb1b      	cbnz	r3, 800a0e0 <_vfiprintf_r+0x1f8>
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	3307      	adds	r3, #7
 800a09c:	f023 0307 	bic.w	r3, r3, #7
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	9303      	str	r3, [sp, #12]
 800a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a6:	443b      	add	r3, r7
 800a0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0aa:	e767      	b.n	8009f7c <_vfiprintf_r+0x94>
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b4:	e7a5      	b.n	800a002 <_vfiprintf_r+0x11a>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f04f 0c0a 	mov.w	ip, #10
 800a0bc:	4619      	mov	r1, r3
 800a0be:	3401      	adds	r4, #1
 800a0c0:	9305      	str	r3, [sp, #20]
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c8:	3a30      	subs	r2, #48	; 0x30
 800a0ca:	2a09      	cmp	r2, #9
 800a0cc:	d903      	bls.n	800a0d6 <_vfiprintf_r+0x1ee>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0c5      	beq.n	800a05e <_vfiprintf_r+0x176>
 800a0d2:	9105      	str	r1, [sp, #20]
 800a0d4:	e7c3      	b.n	800a05e <_vfiprintf_r+0x176>
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	2301      	movs	r3, #1
 800a0da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0de:	e7f0      	b.n	800a0c2 <_vfiprintf_r+0x1da>
 800a0e0:	ab03      	add	r3, sp, #12
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	462a      	mov	r2, r5
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4b16      	ldr	r3, [pc, #88]	; (800a144 <_vfiprintf_r+0x25c>)
 800a0ea:	a904      	add	r1, sp, #16
 800a0ec:	f7fc f876 	bl	80061dc <_printf_float>
 800a0f0:	4607      	mov	r7, r0
 800a0f2:	1c78      	adds	r0, r7, #1
 800a0f4:	d1d6      	bne.n	800a0a4 <_vfiprintf_r+0x1bc>
 800a0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f8:	07d9      	lsls	r1, r3, #31
 800a0fa:	d405      	bmi.n	800a108 <_vfiprintf_r+0x220>
 800a0fc:	89ab      	ldrh	r3, [r5, #12]
 800a0fe:	059a      	lsls	r2, r3, #22
 800a100:	d402      	bmi.n	800a108 <_vfiprintf_r+0x220>
 800a102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a104:	f000 fad5 	bl	800a6b2 <__retarget_lock_release_recursive>
 800a108:	89ab      	ldrh	r3, [r5, #12]
 800a10a:	065b      	lsls	r3, r3, #25
 800a10c:	f53f af12 	bmi.w	8009f34 <_vfiprintf_r+0x4c>
 800a110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a112:	e711      	b.n	8009f38 <_vfiprintf_r+0x50>
 800a114:	ab03      	add	r3, sp, #12
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	462a      	mov	r2, r5
 800a11a:	4630      	mov	r0, r6
 800a11c:	4b09      	ldr	r3, [pc, #36]	; (800a144 <_vfiprintf_r+0x25c>)
 800a11e:	a904      	add	r1, sp, #16
 800a120:	f7fc faf8 	bl	8006714 <_printf_i>
 800a124:	e7e4      	b.n	800a0f0 <_vfiprintf_r+0x208>
 800a126:	bf00      	nop
 800a128:	0800afe0 	.word	0x0800afe0
 800a12c:	0800b000 	.word	0x0800b000
 800a130:	0800afc0 	.word	0x0800afc0
 800a134:	0800afac 	.word	0x0800afac
 800a138:	0800afb2 	.word	0x0800afb2
 800a13c:	0800afb6 	.word	0x0800afb6
 800a140:	080061dd 	.word	0x080061dd
 800a144:	08009ec3 	.word	0x08009ec3

0800a148 <nan>:
 800a148:	2000      	movs	r0, #0
 800a14a:	4901      	ldr	r1, [pc, #4]	; (800a150 <nan+0x8>)
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	7ff80000 	.word	0x7ff80000

0800a154 <_sbrk_r>:
 800a154:	b538      	push	{r3, r4, r5, lr}
 800a156:	2300      	movs	r3, #0
 800a158:	4d05      	ldr	r5, [pc, #20]	; (800a170 <_sbrk_r+0x1c>)
 800a15a:	4604      	mov	r4, r0
 800a15c:	4608      	mov	r0, r1
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	f7f7 fbbc 	bl	80018dc <_sbrk>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_sbrk_r+0x1a>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_sbrk_r+0x1a>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	20000578 	.word	0x20000578

0800a174 <strncmp>:
 800a174:	4603      	mov	r3, r0
 800a176:	b510      	push	{r4, lr}
 800a178:	b172      	cbz	r2, 800a198 <strncmp+0x24>
 800a17a:	3901      	subs	r1, #1
 800a17c:	1884      	adds	r4, r0, r2
 800a17e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a182:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a186:	4290      	cmp	r0, r2
 800a188:	d101      	bne.n	800a18e <strncmp+0x1a>
 800a18a:	42a3      	cmp	r3, r4
 800a18c:	d101      	bne.n	800a192 <strncmp+0x1e>
 800a18e:	1a80      	subs	r0, r0, r2
 800a190:	bd10      	pop	{r4, pc}
 800a192:	2800      	cmp	r0, #0
 800a194:	d1f3      	bne.n	800a17e <strncmp+0xa>
 800a196:	e7fa      	b.n	800a18e <strncmp+0x1a>
 800a198:	4610      	mov	r0, r2
 800a19a:	e7f9      	b.n	800a190 <strncmp+0x1c>

0800a19c <__swbuf_r>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	460e      	mov	r6, r1
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	b118      	cbz	r0, 800a1ae <__swbuf_r+0x12>
 800a1a6:	6983      	ldr	r3, [r0, #24]
 800a1a8:	b90b      	cbnz	r3, 800a1ae <__swbuf_r+0x12>
 800a1aa:	f000 f9e3 	bl	800a574 <__sinit>
 800a1ae:	4b21      	ldr	r3, [pc, #132]	; (800a234 <__swbuf_r+0x98>)
 800a1b0:	429c      	cmp	r4, r3
 800a1b2:	d12b      	bne.n	800a20c <__swbuf_r+0x70>
 800a1b4:	686c      	ldr	r4, [r5, #4]
 800a1b6:	69a3      	ldr	r3, [r4, #24]
 800a1b8:	60a3      	str	r3, [r4, #8]
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	071a      	lsls	r2, r3, #28
 800a1be:	d52f      	bpl.n	800a220 <__swbuf_r+0x84>
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	b36b      	cbz	r3, 800a220 <__swbuf_r+0x84>
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	6820      	ldr	r0, [r4, #0]
 800a1c8:	b2f6      	uxtb	r6, r6
 800a1ca:	1ac0      	subs	r0, r0, r3
 800a1cc:	6963      	ldr	r3, [r4, #20]
 800a1ce:	4637      	mov	r7, r6
 800a1d0:	4283      	cmp	r3, r0
 800a1d2:	dc04      	bgt.n	800a1de <__swbuf_r+0x42>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f000 f938 	bl	800a44c <_fflush_r>
 800a1dc:	bb30      	cbnz	r0, 800a22c <__swbuf_r+0x90>
 800a1de:	68a3      	ldr	r3, [r4, #8]
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	60a3      	str	r3, [r4, #8]
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	6022      	str	r2, [r4, #0]
 800a1ec:	701e      	strb	r6, [r3, #0]
 800a1ee:	6963      	ldr	r3, [r4, #20]
 800a1f0:	4283      	cmp	r3, r0
 800a1f2:	d004      	beq.n	800a1fe <__swbuf_r+0x62>
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	07db      	lsls	r3, r3, #31
 800a1f8:	d506      	bpl.n	800a208 <__swbuf_r+0x6c>
 800a1fa:	2e0a      	cmp	r6, #10
 800a1fc:	d104      	bne.n	800a208 <__swbuf_r+0x6c>
 800a1fe:	4621      	mov	r1, r4
 800a200:	4628      	mov	r0, r5
 800a202:	f000 f923 	bl	800a44c <_fflush_r>
 800a206:	b988      	cbnz	r0, 800a22c <__swbuf_r+0x90>
 800a208:	4638      	mov	r0, r7
 800a20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a20c:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <__swbuf_r+0x9c>)
 800a20e:	429c      	cmp	r4, r3
 800a210:	d101      	bne.n	800a216 <__swbuf_r+0x7a>
 800a212:	68ac      	ldr	r4, [r5, #8]
 800a214:	e7cf      	b.n	800a1b6 <__swbuf_r+0x1a>
 800a216:	4b09      	ldr	r3, [pc, #36]	; (800a23c <__swbuf_r+0xa0>)
 800a218:	429c      	cmp	r4, r3
 800a21a:	bf08      	it	eq
 800a21c:	68ec      	ldreq	r4, [r5, #12]
 800a21e:	e7ca      	b.n	800a1b6 <__swbuf_r+0x1a>
 800a220:	4621      	mov	r1, r4
 800a222:	4628      	mov	r0, r5
 800a224:	f000 f81a 	bl	800a25c <__swsetup_r>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d0cb      	beq.n	800a1c4 <__swbuf_r+0x28>
 800a22c:	f04f 37ff 	mov.w	r7, #4294967295
 800a230:	e7ea      	b.n	800a208 <__swbuf_r+0x6c>
 800a232:	bf00      	nop
 800a234:	0800afe0 	.word	0x0800afe0
 800a238:	0800b000 	.word	0x0800b000
 800a23c:	0800afc0 	.word	0x0800afc0

0800a240 <__ascii_wctomb>:
 800a240:	4603      	mov	r3, r0
 800a242:	4608      	mov	r0, r1
 800a244:	b141      	cbz	r1, 800a258 <__ascii_wctomb+0x18>
 800a246:	2aff      	cmp	r2, #255	; 0xff
 800a248:	d904      	bls.n	800a254 <__ascii_wctomb+0x14>
 800a24a:	228a      	movs	r2, #138	; 0x8a
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	601a      	str	r2, [r3, #0]
 800a252:	4770      	bx	lr
 800a254:	2001      	movs	r0, #1
 800a256:	700a      	strb	r2, [r1, #0]
 800a258:	4770      	bx	lr
	...

0800a25c <__swsetup_r>:
 800a25c:	4b32      	ldr	r3, [pc, #200]	; (800a328 <__swsetup_r+0xcc>)
 800a25e:	b570      	push	{r4, r5, r6, lr}
 800a260:	681d      	ldr	r5, [r3, #0]
 800a262:	4606      	mov	r6, r0
 800a264:	460c      	mov	r4, r1
 800a266:	b125      	cbz	r5, 800a272 <__swsetup_r+0x16>
 800a268:	69ab      	ldr	r3, [r5, #24]
 800a26a:	b913      	cbnz	r3, 800a272 <__swsetup_r+0x16>
 800a26c:	4628      	mov	r0, r5
 800a26e:	f000 f981 	bl	800a574 <__sinit>
 800a272:	4b2e      	ldr	r3, [pc, #184]	; (800a32c <__swsetup_r+0xd0>)
 800a274:	429c      	cmp	r4, r3
 800a276:	d10f      	bne.n	800a298 <__swsetup_r+0x3c>
 800a278:	686c      	ldr	r4, [r5, #4]
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a280:	0719      	lsls	r1, r3, #28
 800a282:	d42c      	bmi.n	800a2de <__swsetup_r+0x82>
 800a284:	06dd      	lsls	r5, r3, #27
 800a286:	d411      	bmi.n	800a2ac <__swsetup_r+0x50>
 800a288:	2309      	movs	r3, #9
 800a28a:	6033      	str	r3, [r6, #0]
 800a28c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a290:	f04f 30ff 	mov.w	r0, #4294967295
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	e03e      	b.n	800a316 <__swsetup_r+0xba>
 800a298:	4b25      	ldr	r3, [pc, #148]	; (800a330 <__swsetup_r+0xd4>)
 800a29a:	429c      	cmp	r4, r3
 800a29c:	d101      	bne.n	800a2a2 <__swsetup_r+0x46>
 800a29e:	68ac      	ldr	r4, [r5, #8]
 800a2a0:	e7eb      	b.n	800a27a <__swsetup_r+0x1e>
 800a2a2:	4b24      	ldr	r3, [pc, #144]	; (800a334 <__swsetup_r+0xd8>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	bf08      	it	eq
 800a2a8:	68ec      	ldreq	r4, [r5, #12]
 800a2aa:	e7e6      	b.n	800a27a <__swsetup_r+0x1e>
 800a2ac:	0758      	lsls	r0, r3, #29
 800a2ae:	d512      	bpl.n	800a2d6 <__swsetup_r+0x7a>
 800a2b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b2:	b141      	cbz	r1, 800a2c6 <__swsetup_r+0x6a>
 800a2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2b8:	4299      	cmp	r1, r3
 800a2ba:	d002      	beq.n	800a2c2 <__swsetup_r+0x66>
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7ff fbb3 	bl	8009a28 <_free_r>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a2c6:	89a3      	ldrh	r3, [r4, #12]
 800a2c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2cc:	81a3      	strh	r3, [r4, #12]
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	6063      	str	r3, [r4, #4]
 800a2d2:	6923      	ldr	r3, [r4, #16]
 800a2d4:	6023      	str	r3, [r4, #0]
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f043 0308 	orr.w	r3, r3, #8
 800a2dc:	81a3      	strh	r3, [r4, #12]
 800a2de:	6923      	ldr	r3, [r4, #16]
 800a2e0:	b94b      	cbnz	r3, 800a2f6 <__swsetup_r+0x9a>
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2ec:	d003      	beq.n	800a2f6 <__swsetup_r+0x9a>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f000 fa05 	bl	800a700 <__smakebuf_r>
 800a2f6:	89a0      	ldrh	r0, [r4, #12]
 800a2f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2fc:	f010 0301 	ands.w	r3, r0, #1
 800a300:	d00a      	beq.n	800a318 <__swsetup_r+0xbc>
 800a302:	2300      	movs	r3, #0
 800a304:	60a3      	str	r3, [r4, #8]
 800a306:	6963      	ldr	r3, [r4, #20]
 800a308:	425b      	negs	r3, r3
 800a30a:	61a3      	str	r3, [r4, #24]
 800a30c:	6923      	ldr	r3, [r4, #16]
 800a30e:	b943      	cbnz	r3, 800a322 <__swsetup_r+0xc6>
 800a310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a314:	d1ba      	bne.n	800a28c <__swsetup_r+0x30>
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	0781      	lsls	r1, r0, #30
 800a31a:	bf58      	it	pl
 800a31c:	6963      	ldrpl	r3, [r4, #20]
 800a31e:	60a3      	str	r3, [r4, #8]
 800a320:	e7f4      	b.n	800a30c <__swsetup_r+0xb0>
 800a322:	2000      	movs	r0, #0
 800a324:	e7f7      	b.n	800a316 <__swsetup_r+0xba>
 800a326:	bf00      	nop
 800a328:	2000006c 	.word	0x2000006c
 800a32c:	0800afe0 	.word	0x0800afe0
 800a330:	0800b000 	.word	0x0800b000
 800a334:	0800afc0 	.word	0x0800afc0

0800a338 <abort>:
 800a338:	2006      	movs	r0, #6
 800a33a:	b508      	push	{r3, lr}
 800a33c:	f000 fa9e 	bl	800a87c <raise>
 800a340:	2001      	movs	r0, #1
 800a342:	f7f7 fa58 	bl	80017f6 <_exit>
	...

0800a348 <__sflush_r>:
 800a348:	898a      	ldrh	r2, [r1, #12]
 800a34a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34c:	4605      	mov	r5, r0
 800a34e:	0710      	lsls	r0, r2, #28
 800a350:	460c      	mov	r4, r1
 800a352:	d457      	bmi.n	800a404 <__sflush_r+0xbc>
 800a354:	684b      	ldr	r3, [r1, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	dc04      	bgt.n	800a364 <__sflush_r+0x1c>
 800a35a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	dc01      	bgt.n	800a364 <__sflush_r+0x1c>
 800a360:	2000      	movs	r0, #0
 800a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a366:	2e00      	cmp	r6, #0
 800a368:	d0fa      	beq.n	800a360 <__sflush_r+0x18>
 800a36a:	2300      	movs	r3, #0
 800a36c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a370:	682f      	ldr	r7, [r5, #0]
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	d032      	beq.n	800a3dc <__sflush_r+0x94>
 800a376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	075a      	lsls	r2, r3, #29
 800a37c:	d505      	bpl.n	800a38a <__sflush_r+0x42>
 800a37e:	6863      	ldr	r3, [r4, #4]
 800a380:	1ac0      	subs	r0, r0, r3
 800a382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a384:	b10b      	cbz	r3, 800a38a <__sflush_r+0x42>
 800a386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a388:	1ac0      	subs	r0, r0, r3
 800a38a:	2300      	movs	r3, #0
 800a38c:	4602      	mov	r2, r0
 800a38e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a390:	4628      	mov	r0, r5
 800a392:	6a21      	ldr	r1, [r4, #32]
 800a394:	47b0      	blx	r6
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	d106      	bne.n	800a3aa <__sflush_r+0x62>
 800a39c:	6829      	ldr	r1, [r5, #0]
 800a39e:	291d      	cmp	r1, #29
 800a3a0:	d82c      	bhi.n	800a3fc <__sflush_r+0xb4>
 800a3a2:	4a29      	ldr	r2, [pc, #164]	; (800a448 <__sflush_r+0x100>)
 800a3a4:	40ca      	lsrs	r2, r1
 800a3a6:	07d6      	lsls	r6, r2, #31
 800a3a8:	d528      	bpl.n	800a3fc <__sflush_r+0xb4>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	6062      	str	r2, [r4, #4]
 800a3ae:	6922      	ldr	r2, [r4, #16]
 800a3b0:	04d9      	lsls	r1, r3, #19
 800a3b2:	6022      	str	r2, [r4, #0]
 800a3b4:	d504      	bpl.n	800a3c0 <__sflush_r+0x78>
 800a3b6:	1c42      	adds	r2, r0, #1
 800a3b8:	d101      	bne.n	800a3be <__sflush_r+0x76>
 800a3ba:	682b      	ldr	r3, [r5, #0]
 800a3bc:	b903      	cbnz	r3, 800a3c0 <__sflush_r+0x78>
 800a3be:	6560      	str	r0, [r4, #84]	; 0x54
 800a3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3c2:	602f      	str	r7, [r5, #0]
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	d0cb      	beq.n	800a360 <__sflush_r+0x18>
 800a3c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3cc:	4299      	cmp	r1, r3
 800a3ce:	d002      	beq.n	800a3d6 <__sflush_r+0x8e>
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	f7ff fb29 	bl	8009a28 <_free_r>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	6360      	str	r0, [r4, #52]	; 0x34
 800a3da:	e7c2      	b.n	800a362 <__sflush_r+0x1a>
 800a3dc:	6a21      	ldr	r1, [r4, #32]
 800a3de:	2301      	movs	r3, #1
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	47b0      	blx	r6
 800a3e4:	1c41      	adds	r1, r0, #1
 800a3e6:	d1c7      	bne.n	800a378 <__sflush_r+0x30>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0c4      	beq.n	800a378 <__sflush_r+0x30>
 800a3ee:	2b1d      	cmp	r3, #29
 800a3f0:	d001      	beq.n	800a3f6 <__sflush_r+0xae>
 800a3f2:	2b16      	cmp	r3, #22
 800a3f4:	d101      	bne.n	800a3fa <__sflush_r+0xb2>
 800a3f6:	602f      	str	r7, [r5, #0]
 800a3f8:	e7b2      	b.n	800a360 <__sflush_r+0x18>
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a400:	81a3      	strh	r3, [r4, #12]
 800a402:	e7ae      	b.n	800a362 <__sflush_r+0x1a>
 800a404:	690f      	ldr	r7, [r1, #16]
 800a406:	2f00      	cmp	r7, #0
 800a408:	d0aa      	beq.n	800a360 <__sflush_r+0x18>
 800a40a:	0793      	lsls	r3, r2, #30
 800a40c:	bf18      	it	ne
 800a40e:	2300      	movne	r3, #0
 800a410:	680e      	ldr	r6, [r1, #0]
 800a412:	bf08      	it	eq
 800a414:	694b      	ldreq	r3, [r1, #20]
 800a416:	1bf6      	subs	r6, r6, r7
 800a418:	600f      	str	r7, [r1, #0]
 800a41a:	608b      	str	r3, [r1, #8]
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	dd9f      	ble.n	800a360 <__sflush_r+0x18>
 800a420:	4633      	mov	r3, r6
 800a422:	463a      	mov	r2, r7
 800a424:	4628      	mov	r0, r5
 800a426:	6a21      	ldr	r1, [r4, #32]
 800a428:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a42c:	47e0      	blx	ip
 800a42e:	2800      	cmp	r0, #0
 800a430:	dc06      	bgt.n	800a440 <__sflush_r+0xf8>
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	f04f 30ff 	mov.w	r0, #4294967295
 800a438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a43c:	81a3      	strh	r3, [r4, #12]
 800a43e:	e790      	b.n	800a362 <__sflush_r+0x1a>
 800a440:	4407      	add	r7, r0
 800a442:	1a36      	subs	r6, r6, r0
 800a444:	e7ea      	b.n	800a41c <__sflush_r+0xd4>
 800a446:	bf00      	nop
 800a448:	20400001 	.word	0x20400001

0800a44c <_fflush_r>:
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	690b      	ldr	r3, [r1, #16]
 800a450:	4605      	mov	r5, r0
 800a452:	460c      	mov	r4, r1
 800a454:	b913      	cbnz	r3, 800a45c <_fflush_r+0x10>
 800a456:	2500      	movs	r5, #0
 800a458:	4628      	mov	r0, r5
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	b118      	cbz	r0, 800a466 <_fflush_r+0x1a>
 800a45e:	6983      	ldr	r3, [r0, #24]
 800a460:	b90b      	cbnz	r3, 800a466 <_fflush_r+0x1a>
 800a462:	f000 f887 	bl	800a574 <__sinit>
 800a466:	4b14      	ldr	r3, [pc, #80]	; (800a4b8 <_fflush_r+0x6c>)
 800a468:	429c      	cmp	r4, r3
 800a46a:	d11b      	bne.n	800a4a4 <_fflush_r+0x58>
 800a46c:	686c      	ldr	r4, [r5, #4]
 800a46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0ef      	beq.n	800a456 <_fflush_r+0xa>
 800a476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a478:	07d0      	lsls	r0, r2, #31
 800a47a:	d404      	bmi.n	800a486 <_fflush_r+0x3a>
 800a47c:	0599      	lsls	r1, r3, #22
 800a47e:	d402      	bmi.n	800a486 <_fflush_r+0x3a>
 800a480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a482:	f000 f915 	bl	800a6b0 <__retarget_lock_acquire_recursive>
 800a486:	4628      	mov	r0, r5
 800a488:	4621      	mov	r1, r4
 800a48a:	f7ff ff5d 	bl	800a348 <__sflush_r>
 800a48e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a490:	4605      	mov	r5, r0
 800a492:	07da      	lsls	r2, r3, #31
 800a494:	d4e0      	bmi.n	800a458 <_fflush_r+0xc>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	059b      	lsls	r3, r3, #22
 800a49a:	d4dd      	bmi.n	800a458 <_fflush_r+0xc>
 800a49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a49e:	f000 f908 	bl	800a6b2 <__retarget_lock_release_recursive>
 800a4a2:	e7d9      	b.n	800a458 <_fflush_r+0xc>
 800a4a4:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <_fflush_r+0x70>)
 800a4a6:	429c      	cmp	r4, r3
 800a4a8:	d101      	bne.n	800a4ae <_fflush_r+0x62>
 800a4aa:	68ac      	ldr	r4, [r5, #8]
 800a4ac:	e7df      	b.n	800a46e <_fflush_r+0x22>
 800a4ae:	4b04      	ldr	r3, [pc, #16]	; (800a4c0 <_fflush_r+0x74>)
 800a4b0:	429c      	cmp	r4, r3
 800a4b2:	bf08      	it	eq
 800a4b4:	68ec      	ldreq	r4, [r5, #12]
 800a4b6:	e7da      	b.n	800a46e <_fflush_r+0x22>
 800a4b8:	0800afe0 	.word	0x0800afe0
 800a4bc:	0800b000 	.word	0x0800b000
 800a4c0:	0800afc0 	.word	0x0800afc0

0800a4c4 <std>:
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	b510      	push	{r4, lr}
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a4ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4d2:	6083      	str	r3, [r0, #8]
 800a4d4:	8181      	strh	r1, [r0, #12]
 800a4d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a4d8:	81c2      	strh	r2, [r0, #14]
 800a4da:	6183      	str	r3, [r0, #24]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	2208      	movs	r2, #8
 800a4e0:	305c      	adds	r0, #92	; 0x5c
 800a4e2:	f7fb fdd5 	bl	8006090 <memset>
 800a4e6:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <std+0x38>)
 800a4e8:	6224      	str	r4, [r4, #32]
 800a4ea:	6263      	str	r3, [r4, #36]	; 0x24
 800a4ec:	4b04      	ldr	r3, [pc, #16]	; (800a500 <std+0x3c>)
 800a4ee:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4f0:	4b04      	ldr	r3, [pc, #16]	; (800a504 <std+0x40>)
 800a4f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <std+0x44>)
 800a4f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a4f8:	bd10      	pop	{r4, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0800a8b5 	.word	0x0800a8b5
 800a500:	0800a8d7 	.word	0x0800a8d7
 800a504:	0800a90f 	.word	0x0800a90f
 800a508:	0800a933 	.word	0x0800a933

0800a50c <_cleanup_r>:
 800a50c:	4901      	ldr	r1, [pc, #4]	; (800a514 <_cleanup_r+0x8>)
 800a50e:	f000 b8af 	b.w	800a670 <_fwalk_reent>
 800a512:	bf00      	nop
 800a514:	0800a44d 	.word	0x0800a44d

0800a518 <__sfmoreglue>:
 800a518:	2268      	movs	r2, #104	; 0x68
 800a51a:	b570      	push	{r4, r5, r6, lr}
 800a51c:	1e4d      	subs	r5, r1, #1
 800a51e:	4355      	muls	r5, r2
 800a520:	460e      	mov	r6, r1
 800a522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a526:	f7ff fae7 	bl	8009af8 <_malloc_r>
 800a52a:	4604      	mov	r4, r0
 800a52c:	b140      	cbz	r0, 800a540 <__sfmoreglue+0x28>
 800a52e:	2100      	movs	r1, #0
 800a530:	e9c0 1600 	strd	r1, r6, [r0]
 800a534:	300c      	adds	r0, #12
 800a536:	60a0      	str	r0, [r4, #8]
 800a538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a53c:	f7fb fda8 	bl	8006090 <memset>
 800a540:	4620      	mov	r0, r4
 800a542:	bd70      	pop	{r4, r5, r6, pc}

0800a544 <__sfp_lock_acquire>:
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <__sfp_lock_acquire+0x8>)
 800a546:	f000 b8b3 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800a54a:	bf00      	nop
 800a54c:	20000575 	.word	0x20000575

0800a550 <__sfp_lock_release>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__sfp_lock_release+0x8>)
 800a552:	f000 b8ae 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800a556:	bf00      	nop
 800a558:	20000575 	.word	0x20000575

0800a55c <__sinit_lock_acquire>:
 800a55c:	4801      	ldr	r0, [pc, #4]	; (800a564 <__sinit_lock_acquire+0x8>)
 800a55e:	f000 b8a7 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800a562:	bf00      	nop
 800a564:	20000576 	.word	0x20000576

0800a568 <__sinit_lock_release>:
 800a568:	4801      	ldr	r0, [pc, #4]	; (800a570 <__sinit_lock_release+0x8>)
 800a56a:	f000 b8a2 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800a56e:	bf00      	nop
 800a570:	20000576 	.word	0x20000576

0800a574 <__sinit>:
 800a574:	b510      	push	{r4, lr}
 800a576:	4604      	mov	r4, r0
 800a578:	f7ff fff0 	bl	800a55c <__sinit_lock_acquire>
 800a57c:	69a3      	ldr	r3, [r4, #24]
 800a57e:	b11b      	cbz	r3, 800a588 <__sinit+0x14>
 800a580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a584:	f7ff bff0 	b.w	800a568 <__sinit_lock_release>
 800a588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a58c:	6523      	str	r3, [r4, #80]	; 0x50
 800a58e:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <__sinit+0x68>)
 800a590:	4a13      	ldr	r2, [pc, #76]	; (800a5e0 <__sinit+0x6c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	62a2      	str	r2, [r4, #40]	; 0x28
 800a596:	42a3      	cmp	r3, r4
 800a598:	bf08      	it	eq
 800a59a:	2301      	moveq	r3, #1
 800a59c:	4620      	mov	r0, r4
 800a59e:	bf08      	it	eq
 800a5a0:	61a3      	streq	r3, [r4, #24]
 800a5a2:	f000 f81f 	bl	800a5e4 <__sfp>
 800a5a6:	6060      	str	r0, [r4, #4]
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 f81b 	bl	800a5e4 <__sfp>
 800a5ae:	60a0      	str	r0, [r4, #8]
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 f817 	bl	800a5e4 <__sfp>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2104      	movs	r1, #4
 800a5ba:	60e0      	str	r0, [r4, #12]
 800a5bc:	6860      	ldr	r0, [r4, #4]
 800a5be:	f7ff ff81 	bl	800a4c4 <std>
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	2109      	movs	r1, #9
 800a5c6:	68a0      	ldr	r0, [r4, #8]
 800a5c8:	f7ff ff7c 	bl	800a4c4 <std>
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	2112      	movs	r1, #18
 800a5d0:	68e0      	ldr	r0, [r4, #12]
 800a5d2:	f7ff ff77 	bl	800a4c4 <std>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	61a3      	str	r3, [r4, #24]
 800a5da:	e7d1      	b.n	800a580 <__sinit+0xc>
 800a5dc:	0800ab20 	.word	0x0800ab20
 800a5e0:	0800a50d 	.word	0x0800a50d

0800a5e4 <__sfp>:
 800a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	f7ff ffac 	bl	800a544 <__sfp_lock_acquire>
 800a5ec:	4b1e      	ldr	r3, [pc, #120]	; (800a668 <__sfp+0x84>)
 800a5ee:	681e      	ldr	r6, [r3, #0]
 800a5f0:	69b3      	ldr	r3, [r6, #24]
 800a5f2:	b913      	cbnz	r3, 800a5fa <__sfp+0x16>
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff ffbd 	bl	800a574 <__sinit>
 800a5fa:	3648      	adds	r6, #72	; 0x48
 800a5fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a600:	3b01      	subs	r3, #1
 800a602:	d503      	bpl.n	800a60c <__sfp+0x28>
 800a604:	6833      	ldr	r3, [r6, #0]
 800a606:	b30b      	cbz	r3, 800a64c <__sfp+0x68>
 800a608:	6836      	ldr	r6, [r6, #0]
 800a60a:	e7f7      	b.n	800a5fc <__sfp+0x18>
 800a60c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a610:	b9d5      	cbnz	r5, 800a648 <__sfp+0x64>
 800a612:	4b16      	ldr	r3, [pc, #88]	; (800a66c <__sfp+0x88>)
 800a614:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a618:	60e3      	str	r3, [r4, #12]
 800a61a:	6665      	str	r5, [r4, #100]	; 0x64
 800a61c:	f000 f847 	bl	800a6ae <__retarget_lock_init_recursive>
 800a620:	f7ff ff96 	bl	800a550 <__sfp_lock_release>
 800a624:	2208      	movs	r2, #8
 800a626:	4629      	mov	r1, r5
 800a628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a62c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a630:	6025      	str	r5, [r4, #0]
 800a632:	61a5      	str	r5, [r4, #24]
 800a634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a638:	f7fb fd2a 	bl	8006090 <memset>
 800a63c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a644:	4620      	mov	r0, r4
 800a646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a648:	3468      	adds	r4, #104	; 0x68
 800a64a:	e7d9      	b.n	800a600 <__sfp+0x1c>
 800a64c:	2104      	movs	r1, #4
 800a64e:	4638      	mov	r0, r7
 800a650:	f7ff ff62 	bl	800a518 <__sfmoreglue>
 800a654:	4604      	mov	r4, r0
 800a656:	6030      	str	r0, [r6, #0]
 800a658:	2800      	cmp	r0, #0
 800a65a:	d1d5      	bne.n	800a608 <__sfp+0x24>
 800a65c:	f7ff ff78 	bl	800a550 <__sfp_lock_release>
 800a660:	230c      	movs	r3, #12
 800a662:	603b      	str	r3, [r7, #0]
 800a664:	e7ee      	b.n	800a644 <__sfp+0x60>
 800a666:	bf00      	nop
 800a668:	0800ab20 	.word	0x0800ab20
 800a66c:	ffff0001 	.word	0xffff0001

0800a670 <_fwalk_reent>:
 800a670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a674:	4606      	mov	r6, r0
 800a676:	4688      	mov	r8, r1
 800a678:	2700      	movs	r7, #0
 800a67a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a67e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a682:	f1b9 0901 	subs.w	r9, r9, #1
 800a686:	d505      	bpl.n	800a694 <_fwalk_reent+0x24>
 800a688:	6824      	ldr	r4, [r4, #0]
 800a68a:	2c00      	cmp	r4, #0
 800a68c:	d1f7      	bne.n	800a67e <_fwalk_reent+0xe>
 800a68e:	4638      	mov	r0, r7
 800a690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a694:	89ab      	ldrh	r3, [r5, #12]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d907      	bls.n	800a6aa <_fwalk_reent+0x3a>
 800a69a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	d003      	beq.n	800a6aa <_fwalk_reent+0x3a>
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	47c0      	blx	r8
 800a6a8:	4307      	orrs	r7, r0
 800a6aa:	3568      	adds	r5, #104	; 0x68
 800a6ac:	e7e9      	b.n	800a682 <_fwalk_reent+0x12>

0800a6ae <__retarget_lock_init_recursive>:
 800a6ae:	4770      	bx	lr

0800a6b0 <__retarget_lock_acquire_recursive>:
 800a6b0:	4770      	bx	lr

0800a6b2 <__retarget_lock_release_recursive>:
 800a6b2:	4770      	bx	lr

0800a6b4 <__swhatbuf_r>:
 800a6b4:	b570      	push	{r4, r5, r6, lr}
 800a6b6:	460e      	mov	r6, r1
 800a6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6bc:	4614      	mov	r4, r2
 800a6be:	2900      	cmp	r1, #0
 800a6c0:	461d      	mov	r5, r3
 800a6c2:	b096      	sub	sp, #88	; 0x58
 800a6c4:	da08      	bge.n	800a6d8 <__swhatbuf_r+0x24>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6cc:	602a      	str	r2, [r5, #0]
 800a6ce:	061a      	lsls	r2, r3, #24
 800a6d0:	d410      	bmi.n	800a6f4 <__swhatbuf_r+0x40>
 800a6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6d6:	e00e      	b.n	800a6f6 <__swhatbuf_r+0x42>
 800a6d8:	466a      	mov	r2, sp
 800a6da:	f000 f951 	bl	800a980 <_fstat_r>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	dbf1      	blt.n	800a6c6 <__swhatbuf_r+0x12>
 800a6e2:	9a01      	ldr	r2, [sp, #4]
 800a6e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6ec:	425a      	negs	r2, r3
 800a6ee:	415a      	adcs	r2, r3
 800a6f0:	602a      	str	r2, [r5, #0]
 800a6f2:	e7ee      	b.n	800a6d2 <__swhatbuf_r+0x1e>
 800a6f4:	2340      	movs	r3, #64	; 0x40
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	b016      	add	sp, #88	; 0x58
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a700 <__smakebuf_r>:
 800a700:	898b      	ldrh	r3, [r1, #12]
 800a702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a704:	079d      	lsls	r5, r3, #30
 800a706:	4606      	mov	r6, r0
 800a708:	460c      	mov	r4, r1
 800a70a:	d507      	bpl.n	800a71c <__smakebuf_r+0x1c>
 800a70c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	2301      	movs	r3, #1
 800a716:	6163      	str	r3, [r4, #20]
 800a718:	b002      	add	sp, #8
 800a71a:	bd70      	pop	{r4, r5, r6, pc}
 800a71c:	466a      	mov	r2, sp
 800a71e:	ab01      	add	r3, sp, #4
 800a720:	f7ff ffc8 	bl	800a6b4 <__swhatbuf_r>
 800a724:	9900      	ldr	r1, [sp, #0]
 800a726:	4605      	mov	r5, r0
 800a728:	4630      	mov	r0, r6
 800a72a:	f7ff f9e5 	bl	8009af8 <_malloc_r>
 800a72e:	b948      	cbnz	r0, 800a744 <__smakebuf_r+0x44>
 800a730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a734:	059a      	lsls	r2, r3, #22
 800a736:	d4ef      	bmi.n	800a718 <__smakebuf_r+0x18>
 800a738:	f023 0303 	bic.w	r3, r3, #3
 800a73c:	f043 0302 	orr.w	r3, r3, #2
 800a740:	81a3      	strh	r3, [r4, #12]
 800a742:	e7e3      	b.n	800a70c <__smakebuf_r+0xc>
 800a744:	4b0d      	ldr	r3, [pc, #52]	; (800a77c <__smakebuf_r+0x7c>)
 800a746:	62b3      	str	r3, [r6, #40]	; 0x28
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	6020      	str	r0, [r4, #0]
 800a74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	9b00      	ldr	r3, [sp, #0]
 800a754:	6120      	str	r0, [r4, #16]
 800a756:	6163      	str	r3, [r4, #20]
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	b15b      	cbz	r3, 800a774 <__smakebuf_r+0x74>
 800a75c:	4630      	mov	r0, r6
 800a75e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a762:	f000 f91f 	bl	800a9a4 <_isatty_r>
 800a766:	b128      	cbz	r0, 800a774 <__smakebuf_r+0x74>
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	f043 0301 	orr.w	r3, r3, #1
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	89a0      	ldrh	r0, [r4, #12]
 800a776:	4305      	orrs	r5, r0
 800a778:	81a5      	strh	r5, [r4, #12]
 800a77a:	e7cd      	b.n	800a718 <__smakebuf_r+0x18>
 800a77c:	0800a50d 	.word	0x0800a50d

0800a780 <memmove>:
 800a780:	4288      	cmp	r0, r1
 800a782:	b510      	push	{r4, lr}
 800a784:	eb01 0402 	add.w	r4, r1, r2
 800a788:	d902      	bls.n	800a790 <memmove+0x10>
 800a78a:	4284      	cmp	r4, r0
 800a78c:	4623      	mov	r3, r4
 800a78e:	d807      	bhi.n	800a7a0 <memmove+0x20>
 800a790:	1e43      	subs	r3, r0, #1
 800a792:	42a1      	cmp	r1, r4
 800a794:	d008      	beq.n	800a7a8 <memmove+0x28>
 800a796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a79a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a79e:	e7f8      	b.n	800a792 <memmove+0x12>
 800a7a0:	4601      	mov	r1, r0
 800a7a2:	4402      	add	r2, r0
 800a7a4:	428a      	cmp	r2, r1
 800a7a6:	d100      	bne.n	800a7aa <memmove+0x2a>
 800a7a8:	bd10      	pop	{r4, pc}
 800a7aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7b2:	e7f7      	b.n	800a7a4 <memmove+0x24>

0800a7b4 <__malloc_lock>:
 800a7b4:	4801      	ldr	r0, [pc, #4]	; (800a7bc <__malloc_lock+0x8>)
 800a7b6:	f7ff bf7b 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800a7ba:	bf00      	nop
 800a7bc:	20000574 	.word	0x20000574

0800a7c0 <__malloc_unlock>:
 800a7c0:	4801      	ldr	r0, [pc, #4]	; (800a7c8 <__malloc_unlock+0x8>)
 800a7c2:	f7ff bf76 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800a7c6:	bf00      	nop
 800a7c8:	20000574 	.word	0x20000574

0800a7cc <_realloc_r>:
 800a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4614      	mov	r4, r2
 800a7d4:	460e      	mov	r6, r1
 800a7d6:	b921      	cbnz	r1, 800a7e2 <_realloc_r+0x16>
 800a7d8:	4611      	mov	r1, r2
 800a7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7de:	f7ff b98b 	b.w	8009af8 <_malloc_r>
 800a7e2:	b92a      	cbnz	r2, 800a7f0 <_realloc_r+0x24>
 800a7e4:	f7ff f920 	bl	8009a28 <_free_r>
 800a7e8:	4625      	mov	r5, r4
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f0:	f000 f8fa 	bl	800a9e8 <_malloc_usable_size_r>
 800a7f4:	4284      	cmp	r4, r0
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	d802      	bhi.n	800a800 <_realloc_r+0x34>
 800a7fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7fe:	d812      	bhi.n	800a826 <_realloc_r+0x5a>
 800a800:	4621      	mov	r1, r4
 800a802:	4640      	mov	r0, r8
 800a804:	f7ff f978 	bl	8009af8 <_malloc_r>
 800a808:	4605      	mov	r5, r0
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d0ed      	beq.n	800a7ea <_realloc_r+0x1e>
 800a80e:	42bc      	cmp	r4, r7
 800a810:	4622      	mov	r2, r4
 800a812:	4631      	mov	r1, r6
 800a814:	bf28      	it	cs
 800a816:	463a      	movcs	r2, r7
 800a818:	f7fe fc2c 	bl	8009074 <memcpy>
 800a81c:	4631      	mov	r1, r6
 800a81e:	4640      	mov	r0, r8
 800a820:	f7ff f902 	bl	8009a28 <_free_r>
 800a824:	e7e1      	b.n	800a7ea <_realloc_r+0x1e>
 800a826:	4635      	mov	r5, r6
 800a828:	e7df      	b.n	800a7ea <_realloc_r+0x1e>

0800a82a <_raise_r>:
 800a82a:	291f      	cmp	r1, #31
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4604      	mov	r4, r0
 800a830:	460d      	mov	r5, r1
 800a832:	d904      	bls.n	800a83e <_raise_r+0x14>
 800a834:	2316      	movs	r3, #22
 800a836:	6003      	str	r3, [r0, #0]
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	bd38      	pop	{r3, r4, r5, pc}
 800a83e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a840:	b112      	cbz	r2, 800a848 <_raise_r+0x1e>
 800a842:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a846:	b94b      	cbnz	r3, 800a85c <_raise_r+0x32>
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 f831 	bl	800a8b0 <_getpid_r>
 800a84e:	462a      	mov	r2, r5
 800a850:	4601      	mov	r1, r0
 800a852:	4620      	mov	r0, r4
 800a854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a858:	f000 b818 	b.w	800a88c <_kill_r>
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d00a      	beq.n	800a876 <_raise_r+0x4c>
 800a860:	1c59      	adds	r1, r3, #1
 800a862:	d103      	bne.n	800a86c <_raise_r+0x42>
 800a864:	2316      	movs	r3, #22
 800a866:	6003      	str	r3, [r0, #0]
 800a868:	2001      	movs	r0, #1
 800a86a:	e7e7      	b.n	800a83c <_raise_r+0x12>
 800a86c:	2400      	movs	r4, #0
 800a86e:	4628      	mov	r0, r5
 800a870:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a874:	4798      	blx	r3
 800a876:	2000      	movs	r0, #0
 800a878:	e7e0      	b.n	800a83c <_raise_r+0x12>
	...

0800a87c <raise>:
 800a87c:	4b02      	ldr	r3, [pc, #8]	; (800a888 <raise+0xc>)
 800a87e:	4601      	mov	r1, r0
 800a880:	6818      	ldr	r0, [r3, #0]
 800a882:	f7ff bfd2 	b.w	800a82a <_raise_r>
 800a886:	bf00      	nop
 800a888:	2000006c 	.word	0x2000006c

0800a88c <_kill_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	2300      	movs	r3, #0
 800a890:	4d06      	ldr	r5, [pc, #24]	; (800a8ac <_kill_r+0x20>)
 800a892:	4604      	mov	r4, r0
 800a894:	4608      	mov	r0, r1
 800a896:	4611      	mov	r1, r2
 800a898:	602b      	str	r3, [r5, #0]
 800a89a:	f7f6 ff9c 	bl	80017d6 <_kill>
 800a89e:	1c43      	adds	r3, r0, #1
 800a8a0:	d102      	bne.n	800a8a8 <_kill_r+0x1c>
 800a8a2:	682b      	ldr	r3, [r5, #0]
 800a8a4:	b103      	cbz	r3, 800a8a8 <_kill_r+0x1c>
 800a8a6:	6023      	str	r3, [r4, #0]
 800a8a8:	bd38      	pop	{r3, r4, r5, pc}
 800a8aa:	bf00      	nop
 800a8ac:	20000578 	.word	0x20000578

0800a8b0 <_getpid_r>:
 800a8b0:	f7f6 bf8a 	b.w	80017c8 <_getpid>

0800a8b4 <__sread>:
 800a8b4:	b510      	push	{r4, lr}
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8bc:	f000 f89c 	bl	800a9f8 <_read_r>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	bfab      	itete	ge
 800a8c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8c6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8c8:	181b      	addge	r3, r3, r0
 800a8ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8ce:	bfac      	ite	ge
 800a8d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8d2:	81a3      	strhlt	r3, [r4, #12]
 800a8d4:	bd10      	pop	{r4, pc}

0800a8d6 <__swrite>:
 800a8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8da:	461f      	mov	r7, r3
 800a8dc:	898b      	ldrh	r3, [r1, #12]
 800a8de:	4605      	mov	r5, r0
 800a8e0:	05db      	lsls	r3, r3, #23
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	4616      	mov	r6, r2
 800a8e6:	d505      	bpl.n	800a8f4 <__swrite+0x1e>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f0:	f000 f868 	bl	800a9c4 <_lseek_r>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8fc:	81a3      	strh	r3, [r4, #12]
 800a8fe:	4628      	mov	r0, r5
 800a900:	463b      	mov	r3, r7
 800a902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a90a:	f000 b817 	b.w	800a93c <_write_r>

0800a90e <__sseek>:
 800a90e:	b510      	push	{r4, lr}
 800a910:	460c      	mov	r4, r1
 800a912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a916:	f000 f855 	bl	800a9c4 <_lseek_r>
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	bf15      	itete	ne
 800a920:	6560      	strne	r0, [r4, #84]	; 0x54
 800a922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a92a:	81a3      	strheq	r3, [r4, #12]
 800a92c:	bf18      	it	ne
 800a92e:	81a3      	strhne	r3, [r4, #12]
 800a930:	bd10      	pop	{r4, pc}

0800a932 <__sclose>:
 800a932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a936:	f000 b813 	b.w	800a960 <_close_r>
	...

0800a93c <_write_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4604      	mov	r4, r0
 800a940:	4608      	mov	r0, r1
 800a942:	4611      	mov	r1, r2
 800a944:	2200      	movs	r2, #0
 800a946:	4d05      	ldr	r5, [pc, #20]	; (800a95c <_write_r+0x20>)
 800a948:	602a      	str	r2, [r5, #0]
 800a94a:	461a      	mov	r2, r3
 800a94c:	f7f6 ff7a 	bl	8001844 <_write>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_write_r+0x1e>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_write_r+0x1e>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	20000578 	.word	0x20000578

0800a960 <_close_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	2300      	movs	r3, #0
 800a964:	4d05      	ldr	r5, [pc, #20]	; (800a97c <_close_r+0x1c>)
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	f7f6 ff86 	bl	800187c <_close>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_close_r+0x1a>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_close_r+0x1a>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20000578 	.word	0x20000578

0800a980 <_fstat_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	2300      	movs	r3, #0
 800a984:	4d06      	ldr	r5, [pc, #24]	; (800a9a0 <_fstat_r+0x20>)
 800a986:	4604      	mov	r4, r0
 800a988:	4608      	mov	r0, r1
 800a98a:	4611      	mov	r1, r2
 800a98c:	602b      	str	r3, [r5, #0]
 800a98e:	f7f6 ff80 	bl	8001892 <_fstat>
 800a992:	1c43      	adds	r3, r0, #1
 800a994:	d102      	bne.n	800a99c <_fstat_r+0x1c>
 800a996:	682b      	ldr	r3, [r5, #0]
 800a998:	b103      	cbz	r3, 800a99c <_fstat_r+0x1c>
 800a99a:	6023      	str	r3, [r4, #0]
 800a99c:	bd38      	pop	{r3, r4, r5, pc}
 800a99e:	bf00      	nop
 800a9a0:	20000578 	.word	0x20000578

0800a9a4 <_isatty_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	4d05      	ldr	r5, [pc, #20]	; (800a9c0 <_isatty_r+0x1c>)
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	4608      	mov	r0, r1
 800a9ae:	602b      	str	r3, [r5, #0]
 800a9b0:	f7f6 ff7e 	bl	80018b0 <_isatty>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d102      	bne.n	800a9be <_isatty_r+0x1a>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	b103      	cbz	r3, 800a9be <_isatty_r+0x1a>
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	20000578 	.word	0x20000578

0800a9c4 <_lseek_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4d05      	ldr	r5, [pc, #20]	; (800a9e4 <_lseek_r+0x20>)
 800a9d0:	602a      	str	r2, [r5, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	f7f6 ff76 	bl	80018c4 <_lseek>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d102      	bne.n	800a9e2 <_lseek_r+0x1e>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	b103      	cbz	r3, 800a9e2 <_lseek_r+0x1e>
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	20000578 	.word	0x20000578

0800a9e8 <_malloc_usable_size_r>:
 800a9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9ec:	1f18      	subs	r0, r3, #4
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	bfbc      	itt	lt
 800a9f2:	580b      	ldrlt	r3, [r1, r0]
 800a9f4:	18c0      	addlt	r0, r0, r3
 800a9f6:	4770      	bx	lr

0800a9f8 <_read_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	2200      	movs	r2, #0
 800aa02:	4d05      	ldr	r5, [pc, #20]	; (800aa18 <_read_r+0x20>)
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f7f6 feff 	bl	800180a <_read>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_read_r+0x1e>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_read_r+0x1e>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	20000578 	.word	0x20000578

0800aa1c <_init>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	bf00      	nop
 800aa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa22:	bc08      	pop	{r3}
 800aa24:	469e      	mov	lr, r3
 800aa26:	4770      	bx	lr

0800aa28 <_fini>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	bf00      	nop
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr

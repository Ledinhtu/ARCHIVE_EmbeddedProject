
Blink_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009484  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08009598  08009598  00019598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ae4  08009ae4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009ae4  08009ae4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ae4  08009ae4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ae4  08009ae4  00019ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001e0  08009ccc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08009ccc  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9a8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bd  00000000  00000000  0002fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00032070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00033100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001958d  00000000  00000000  000340c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012378  00000000  00000000  0004d64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e66d  00000000  00000000  0005f9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b7c  00000000  00000000  000ee084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800957c 	.word	0x0800957c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800957c 	.word	0x0800957c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <HW_init>:
DHT_HandleTypeDef DHT11;

uint8_t data_rx;
char buff[50];

void HW_init(int delay) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fd4e 	bl	8001684 <HAL_Delay>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
//	} else if (data_rx == 'b') {
//		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
//	}

	HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4904      	ldr	r1, [pc, #16]	; (8000c0c <HAL_UART_RxCpltCallback+0x1c>)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <HAL_UART_RxCpltCallback+0x20>)
 8000bfe:	f003 f858 	bl	8003cb2 <HAL_UART_Receive_IT>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000350 	.word	0x20000350
 8000c10:	200002e0 	.word	0x200002e0

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c18:	b088      	sub	sp, #32
 8000c1a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f000 fcd0 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f8d8 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 fa38 	bl	8001098 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c28:	f000 fa0c 	bl	8001044 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c2c:	f000 f946 	bl	8000ebc <MX_TIM2_Init>
  MX_I2C1_Init();
 8000c30:	f000 f916 	bl	8000e60 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000c34:	f000 f98e 	bl	8000f54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DHT_Init(&DHT11, &htim2, GPIO_PORT_DHT11, GPIO_PIN_DHT11);
 8000c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c3c:	4a57      	ldr	r2, [pc, #348]	; (8000d9c <main+0x188>)
 8000c3e:	4958      	ldr	r1, [pc, #352]	; (8000da0 <main+0x18c>)
 8000c40:	4858      	ldr	r0, [pc, #352]	; (8000da4 <main+0x190>)
 8000c42:	f003 fe45 	bl	80048d0 <DHT_Init>
  lcd_init(&hlcd, &hi2c1, LCD_ADDR_DEFAULT);
 8000c46:	2227      	movs	r2, #39	; 0x27
 8000c48:	4957      	ldr	r1, [pc, #348]	; (8000da8 <main+0x194>)
 8000c4a:	4858      	ldr	r0, [pc, #352]	; (8000dac <main+0x198>)
 8000c4c:	f003 ffd1 	bl	8004bf2 <lcd_init>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000c50:	2100      	movs	r1, #0
 8000c52:	4857      	ldr	r0, [pc, #348]	; (8000db0 <main+0x19c>)
 8000c54:	f002 fa28 	bl	80030a8 <HAL_TIM_PWM_Start>
  HW_init(2000);
 8000c58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c5c:	f7ff ffbc 	bl	8000bd8 <HW_init>
  int ret = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  int index=0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  uint32_t time = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  time = HAL_GetTick();
 8000c6c:	f000 fd00 	bl	8001670 <HAL_GetTick>
 8000c70:	6078      	str	r0, [r7, #4]
	  ret = DHT_ReadTempHum(&DHT11);
 8000c72:	484c      	ldr	r0, [pc, #304]	; (8000da4 <main+0x190>)
 8000c74:	f003 fe46 	bl	8004904 <DHT_ReadTempHum>
 8000c78:	60f8      	str	r0, [r7, #12]
	  if(ret) {
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d010      	beq.n	8000ca2 <main+0x8e>
		  sprintf(buff, " Error Code: %d \n", ret);
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	494c      	ldr	r1, [pc, #304]	; (8000db4 <main+0x1a0>)
 8000c84:	484c      	ldr	r0, [pc, #304]	; (8000db8 <main+0x1a4>)
 8000c86:	f004 fe9d 	bl	80059c4 <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t* )buff, strlen(buff), 300 );
 8000c8a:	484b      	ldr	r0, [pc, #300]	; (8000db8 <main+0x1a4>)
 8000c8c:	f7ff fa60 	bl	8000150 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c98:	4947      	ldr	r1, [pc, #284]	; (8000db8 <main+0x1a4>)
 8000c9a:	4848      	ldr	r0, [pc, #288]	; (8000dbc <main+0x1a8>)
 8000c9c:	f002 ff77 	bl	8003b8e <HAL_UART_Transmit>
 8000ca0:	e048      	b.n	8000d34 <main+0x120>

	  } else {
		  sprintf(buff, "Read OK\n Temp: %f\n Humi: %f Time: %ld\n", DHT11.Temp, DHT11.Humi, HAL_GetTick() - time);
 8000ca2:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <main+0x190>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fbbe 	bl	8000428 <__aeabi_f2d>
 8000cac:	4680      	mov	r8, r0
 8000cae:	4689      	mov	r9, r1
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <main+0x190>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fbb7 	bl	8000428 <__aeabi_f2d>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	460d      	mov	r5, r1
 8000cbe:	f000 fcd7 	bl	8001670 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	9302      	str	r3, [sp, #8]
 8000cca:	e9cd 4500 	strd	r4, r5, [sp]
 8000cce:	4642      	mov	r2, r8
 8000cd0:	464b      	mov	r3, r9
 8000cd2:	493b      	ldr	r1, [pc, #236]	; (8000dc0 <main+0x1ac>)
 8000cd4:	4838      	ldr	r0, [pc, #224]	; (8000db8 <main+0x1a4>)
 8000cd6:	f004 fe75 	bl	80059c4 <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t* )buff, strlen(buff), 300 );
 8000cda:	4837      	ldr	r0, [pc, #220]	; (8000db8 <main+0x1a4>)
 8000cdc:	f7ff fa38 	bl	8000150 <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ce8:	4933      	ldr	r1, [pc, #204]	; (8000db8 <main+0x1a4>)
 8000cea:	4834      	ldr	r0, [pc, #208]	; (8000dbc <main+0x1a8>)
 8000cec:	f002 ff4f 	bl	8003b8e <HAL_UART_Transmit>

		  sprintf(buff, " Raw Data: %d %d %d %d %d\n", DHT11.raw_data[0], DHT11.raw_data[1], DHT11.raw_data[2], DHT11.raw_data[3], DHT11.raw_data[4]);
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <main+0x190>)
 8000cf2:	7c1b      	ldrb	r3, [r3, #16]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <main+0x190>)
 8000cf8:	7c5b      	ldrb	r3, [r3, #17]
 8000cfa:	461c      	mov	r4, r3
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <main+0x190>)
 8000cfe:	7c9b      	ldrb	r3, [r3, #18]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <main+0x190>)
 8000d04:	7cdb      	ldrb	r3, [r3, #19]
 8000d06:	4619      	mov	r1, r3
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <main+0x190>)
 8000d0a:	7d1b      	ldrb	r3, [r3, #20]
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	9101      	str	r1, [sp, #4]
 8000d10:	9200      	str	r2, [sp, #0]
 8000d12:	4623      	mov	r3, r4
 8000d14:	4602      	mov	r2, r0
 8000d16:	492b      	ldr	r1, [pc, #172]	; (8000dc4 <main+0x1b0>)
 8000d18:	4827      	ldr	r0, [pc, #156]	; (8000db8 <main+0x1a4>)
 8000d1a:	f004 fe53 	bl	80059c4 <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t* )buff, strlen(buff), 300 );
 8000d1e:	4826      	ldr	r0, [pc, #152]	; (8000db8 <main+0x1a4>)
 8000d20:	f7ff fa16 	bl	8000150 <strlen>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d2c:	4922      	ldr	r1, [pc, #136]	; (8000db8 <main+0x1a4>)
 8000d2e:	4823      	ldr	r0, [pc, #140]	; (8000dbc <main+0x1a8>)
 8000d30:	f002 ff2d 	bl	8003b8e <HAL_UART_Transmit>
	  }

	  lcd_set_cursor(&hlcd, 0, 0);//(char)223,
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	481c      	ldr	r0, [pc, #112]	; (8000dac <main+0x198>)
 8000d3a:	f003 fee9 	bl	8004b10 <lcd_set_cursor>
//	  lcd_printf(&hlcd, "RH=%d.%1d%c T=%d.%1d%C", DHT11.raw_data[0], DHT11.raw_data[1],  (char)223,DHT11.raw_data[2], DHT11.raw_data[3] );
	  lcd_printf(&hlcd, "RH=%d%% T=%d%c%C", DHT11.raw_data[0], DHT11.raw_data[2], (char)223 );
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <main+0x190>)
 8000d40:	7c1b      	ldrb	r3, [r3, #16]
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <main+0x190>)
 8000d46:	7c9b      	ldrb	r3, [r3, #18]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	23df      	movs	r3, #223	; 0xdf
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	491d      	ldr	r1, [pc, #116]	; (8000dc8 <main+0x1b4>)
 8000d52:	4816      	ldr	r0, [pc, #88]	; (8000dac <main+0x198>)
 8000d54:	f003 ff16 	bl	8004b84 <lcd_printf>
	  lcd_set_cursor(&hlcd, 1,4);
 8000d58:	2204      	movs	r2, #4
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <main+0x198>)
 8000d5e:	f003 fed7 	bl	8004b10 <lcd_set_cursor>
	  lcd_printf(&hlcd, "%02d/%02d/%02d", 12, 12, 12);
 8000d62:	230c      	movs	r3, #12
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	230c      	movs	r3, #12
 8000d68:	220c      	movs	r2, #12
 8000d6a:	4918      	ldr	r1, [pc, #96]	; (8000dcc <main+0x1b8>)
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <main+0x198>)
 8000d6e:	f003 ff09 	bl	8004b84 <lcd_printf>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2110      	movs	r1, #16
 8000d76:	4816      	ldr	r0, [pc, #88]	; (8000dd0 <main+0x1bc>)
 8000d78:	f001 f801 	bl	8001d7e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2120      	movs	r1, #32
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <main+0x1bc>)
 8000d82:	f000 fffc 	bl	8001d7e <HAL_GPIO_WritePin>
//	  for(int i=0;i<1000;i=i+100)
//	    {
//	      __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,i);
//	      HAL_Delay(2000);
//	     }
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,999);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <main+0x19c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM_DelayMs(&htim2, 2000);
 8000d90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <main+0x18c>)
 8000d96:	f003 fc00 	bl	800459a <TIM_DelayMs>
	  time = HAL_GetTick();
 8000d9a:	e767      	b.n	8000c6c <main+0x58>
 8000d9c:	40011000 	.word	0x40011000
 8000da0:	20000250 	.word	0x20000250
 8000da4:	20000330 	.word	0x20000330
 8000da8:	200001fc 	.word	0x200001fc
 8000dac:	20000324 	.word	0x20000324
 8000db0:	20000298 	.word	0x20000298
 8000db4:	08009598 	.word	0x08009598
 8000db8:	20000354 	.word	0x20000354
 8000dbc:	200002e0 	.word	0x200002e0
 8000dc0:	080095ac 	.word	0x080095ac
 8000dc4:	080095d4 	.word	0x080095d4
 8000dc8:	080095f0 	.word	0x080095f0
 8000dcc:	08009604 	.word	0x08009604
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b090      	sub	sp, #64	; 0x40
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	2228      	movs	r2, #40	; 0x28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 ff74 	bl	8004cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 fc11 	bl	8002644 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e28:	f000 f980 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2102      	movs	r1, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fe7e 	bl	8002b48 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e52:	f000 f96b 	bl	800112c <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3740      	adds	r7, #64	; 0x40
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <MX_I2C1_Init+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_I2C1_Init+0x58>)
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e9e:	f000 ff87 	bl	8001db0 <HAL_I2C_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea8:	f000 f940 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200001fc 	.word	0x200001fc
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	000186a0 	.word	0x000186a0

08000ebc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000eda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ede:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000ee2:	2247      	movs	r2, #71	; 0x47
 8000ee4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f00:	4813      	ldr	r0, [pc, #76]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000f02:	f001 ffb9 	bl	8002e78 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f0c:	f000 f90e 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000f1e:	f002 fa23 	bl	8003368 <HAL_TIM_ConfigClockSource>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f28:	f000 f900 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_TIM2_Init+0x94>)
 8000f3a:	f002 fd7d 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f44:	f000 f8f2 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000250 	.word	0x20000250

08000f54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	; 0x38
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <MX_TIM3_Init+0xe8>)
 8000f86:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <MX_TIM3_Init+0xec>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <MX_TIM3_Init+0xe8>)
 8000f8c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000f90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <MX_TIM3_Init+0xe8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_TIM3_Init+0xe8>)
 8000f9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <MX_TIM3_Init+0xe8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_TIM3_Init+0xe8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fac:	4823      	ldr	r0, [pc, #140]	; (800103c <MX_TIM3_Init+0xe8>)
 8000fae:	f001 ff63 	bl	8002e78 <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000fb8:	f000 f8b8 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481c      	ldr	r0, [pc, #112]	; (800103c <MX_TIM3_Init+0xe8>)
 8000fca:	f002 f9cd 	bl	8003368 <HAL_TIM_ConfigClockSource>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000fd4:	f000 f8aa 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fd8:	4818      	ldr	r0, [pc, #96]	; (800103c <MX_TIM3_Init+0xe8>)
 8000fda:	f002 f80d 	bl	8002ff8 <HAL_TIM_PWM_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000fe4:	f000 f8a2 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4811      	ldr	r0, [pc, #68]	; (800103c <MX_TIM3_Init+0xe8>)
 8000ff8:	f002 fd1e 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001002:	f000 f893 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001006:	2360      	movs	r3, #96	; 0x60
 8001008:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	4619      	mov	r1, r3
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <MX_TIM3_Init+0xe8>)
 800101e:	f002 f8e5 	bl	80031ec <HAL_TIM_PWM_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001028:	f000 f880 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <MX_TIM3_Init+0xe8>)
 800102e:	f000 f923 	bl	8001278 <HAL_TIM_MspPostInit>

}
 8001032:	bf00      	nop
 8001034:	3738      	adds	r7, #56	; 0x38
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000298 	.word	0x20000298
 8001040:	40000400 	.word	0x40000400

08001044 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART1_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 800107c:	f002 fd3a 	bl	8003af4 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f000 f851 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200002e0 	.word	0x200002e0
 8001094:	40013800 	.word	0x40013800

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010b2:	f043 0320 	orr.w	r3, r3, #32
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0320 	and.w	r3, r3, #32
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a16      	ldr	r2, [pc, #88]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a10      	ldr	r2, [pc, #64]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2130      	movs	r1, #48	; 0x30
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <MX_GPIO_Init+0x90>)
 80010fa:	f000 fe40 	bl	8001d7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010fe:	2330      	movs	r3, #48	; 0x30
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2302      	movs	r3, #2
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_GPIO_Init+0x90>)
 8001116:	f000 fc97 	bl	8001a48 <HAL_GPIO_Init>

}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	40010800 	.word	0x40010800

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	e7fe      	b.n	8001134 <Error_Handler+0x8>
	...

08001138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_MspInit+0x5c>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_MspInit+0x5c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6193      	str	r3, [r2, #24]
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_MspInit+0x5c>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x5c>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_MspInit+0x5c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_MspInit+0x5c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_MspInit+0x60>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_MspInit+0x60>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000

0800119c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <HAL_I2C_MspInit+0x70>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d123      	bne.n	8001204 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_I2C_MspInit+0x74>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a13      	ldr	r2, [pc, #76]	; (8001210 <HAL_I2C_MspInit+0x74>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_I2C_MspInit+0x74>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011d4:	23c0      	movs	r3, #192	; 0xc0
 80011d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d8:	2312      	movs	r3, #18
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <HAL_I2C_MspInit+0x78>)
 80011e8:	f000 fc2e 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_I2C_MspInit+0x74>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_I2C_MspInit+0x74>)
 80011f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f6:	61d3      	str	r3, [r2, #28]
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_I2C_MspInit+0x74>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40005400 	.word	0x40005400
 8001210:	40021000 	.word	0x40021000
 8001214:	40010c00 	.word	0x40010c00

08001218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001228:	d10c      	bne.n	8001244 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_TIM_Base_MspInit+0x58>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_TIM_Base_MspInit+0x58>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_TIM_Base_MspInit+0x58>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001242:	e010      	b.n	8001266 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_TIM_Base_MspInit+0x5c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10b      	bne.n	8001266 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_TIM_Base_MspInit+0x58>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_TIM_Base_MspInit+0x58>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	61d3      	str	r3, [r2, #28]
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_TIM_Base_MspInit+0x58>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000
 8001274:	40000400 	.word	0x40000400

08001278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_TIM_MspPostInit+0x58>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d117      	bne.n	80012c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_TIM_MspPostInit+0x5c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <HAL_TIM_MspPostInit+0x5c>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_TIM_MspPostInit+0x5c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b0:	2340      	movs	r3, #64	; 0x40
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_TIM_MspPostInit+0x60>)
 80012c4:	f000 fbc0 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40000400 	.word	0x40000400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010800 	.word	0x40010800

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a20      	ldr	r2, [pc, #128]	; (8001378 <HAL_UART_MspInit+0x9c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d139      	bne.n	8001370 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <HAL_UART_MspInit+0xa0>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a1e      	ldr	r2, [pc, #120]	; (800137c <HAL_UART_MspInit+0xa0>)
 8001302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_UART_MspInit+0xa0>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_UART_MspInit+0xa0>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_UART_MspInit+0xa0>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_UART_MspInit+0xa0>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4619      	mov	r1, r3
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <HAL_UART_MspInit+0xa4>)
 8001342:	f000 fb81 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4619      	mov	r1, r3
 800135a:	4809      	ldr	r0, [pc, #36]	; (8001380 <HAL_UART_MspInit+0xa4>)
 800135c:	f000 fb74 	bl	8001a48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2101      	movs	r1, #1
 8001364:	2025      	movs	r0, #37	; 0x25
 8001366:	f000 fa88 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800136a:	2025      	movs	r0, #37	; 0x25
 800136c:	f000 faa1 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40013800 	.word	0x40013800
 800137c:	40021000 	.word	0x40021000
 8001380:	40010800 	.word	0x40010800

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ca:	f000 f93f 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <USART1_IRQHandler+0x10>)
 80013da:	f002 fc9b 	bl	8003d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002e0 	.word	0x200002e0

080013e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	return 1;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <_kill>:

int _kill(int pid, int sig)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001400:	f003 fc3c 	bl	8004c7c <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	2216      	movs	r2, #22
 8001408:	601a      	str	r2, [r3, #0]
	return -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_exit>:

void _exit (int status)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800141e:	f04f 31ff 	mov.w	r1, #4294967295
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffe7 	bl	80013f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001428:	e7fe      	b.n	8001428 <_exit+0x12>

0800142a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e00a      	b.n	8001452 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800143c:	f3af 8000 	nop.w
 8001440:	4601      	mov	r1, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	60ba      	str	r2, [r7, #8]
 8001448:	b2ca      	uxtb	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	dbf0      	blt.n	800143c <_read+0x12>
	}

return len;
 800145a:	687b      	ldr	r3, [r7, #4]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e009      	b.n	800148a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	60ba      	str	r2, [r7, #8]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	dbf1      	blt.n	8001476 <_write+0x12>
	}
	return len;
 8001492:	687b      	ldr	r3, [r7, #4]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_close>:

int _close(int file)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	return -1;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c2:	605a      	str	r2, [r3, #4]
	return 0;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <_isatty>:

int _isatty(int file)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	return 1;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f003 fba6 	bl	8004c7c <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20005000 	.word	0x20005000
 800155c:	00000400 	.word	0x00000400
 8001560:	20000388 	.word	0x20000388
 8001564:	200003a0 	.word	0x200003a0

08001568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	; (80015b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800159a:	f7ff ffe5 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f003 fb73 	bl	8004c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a2:	f7ff fb37 	bl	8000c14 <main>
  bx lr
 80015a6:	4770      	bx	lr
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80015b0:	08009aec 	.word	0x08009aec
  ldr r2, =_sbss
 80015b4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80015b8:	200003a0 	.word	0x200003a0

080015bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_2_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x28>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x28>)
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f947 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fdac 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f95f 	bl	80018ce <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f000 f927 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000000 	.word	0x20000000
 8001644:	20000008 	.word	0x20000008
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x1c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x20>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a03      	ldr	r2, [pc, #12]	; (800166c <HAL_IncTick+0x20>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000008 	.word	0x20000008
 800166c:	2000038c 	.word	0x2000038c

08001670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b02      	ldr	r3, [pc, #8]	; (8001680 <HAL_GetTick+0x10>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	2000038c 	.word	0x2000038c

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff fff0 	bl	8001670 <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffe0 	bl	8001670 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <__NVIC_EnableIRQ+0x34>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff90 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff2d 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff42 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff90 	bl	80017bc <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5f 	bl	8001768 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff35 	bl	8001730 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d008      	beq.n	800190e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2204      	movs	r2, #4
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e020      	b.n	8001950 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 020e 	bic.w	r2, r2, #14
 800191c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
	...

0800195c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800196e:	2b02      	cmp	r3, #2
 8001970:	d005      	beq.n	800197e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2204      	movs	r2, #4
 8001976:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	e051      	b.n	8001a22 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 020e 	bic.w	r2, r2, #14
 800198c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <HAL_DMA_Abort_IT+0xd0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d029      	beq.n	80019fc <HAL_DMA_Abort_IT+0xa0>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <HAL_DMA_Abort_IT+0xd4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d022      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x9c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <HAL_DMA_Abort_IT+0xd8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d01a      	beq.n	80019f2 <HAL_DMA_Abort_IT+0x96>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_DMA_Abort_IT+0xdc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d012      	beq.n	80019ec <HAL_DMA_Abort_IT+0x90>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <HAL_DMA_Abort_IT+0xe0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00a      	beq.n	80019e6 <HAL_DMA_Abort_IT+0x8a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_DMA_Abort_IT+0xe4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d102      	bne.n	80019e0 <HAL_DMA_Abort_IT+0x84>
 80019da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019de:	e00e      	b.n	80019fe <HAL_DMA_Abort_IT+0xa2>
 80019e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019e4:	e00b      	b.n	80019fe <HAL_DMA_Abort_IT+0xa2>
 80019e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ea:	e008      	b.n	80019fe <HAL_DMA_Abort_IT+0xa2>
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	e005      	b.n	80019fe <HAL_DMA_Abort_IT+0xa2>
 80019f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f6:	e002      	b.n	80019fe <HAL_DMA_Abort_IT+0xa2>
 80019f8:	2310      	movs	r3, #16
 80019fa:	e000      	b.n	80019fe <HAL_DMA_Abort_IT+0xa2>
 80019fc:	2301      	movs	r3, #1
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_DMA_Abort_IT+0xe8>)
 8001a00:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
    } 
  }
  return status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40020008 	.word	0x40020008
 8001a30:	4002001c 	.word	0x4002001c
 8001a34:	40020030 	.word	0x40020030
 8001a38:	40020044 	.word	0x40020044
 8001a3c:	40020058 	.word	0x40020058
 8001a40:	4002006c 	.word	0x4002006c
 8001a44:	40020000 	.word	0x40020000

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b08b      	sub	sp, #44	; 0x2c
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5a:	e169      	b.n	8001d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 8158 	bne.w	8001d2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a9a      	ldr	r2, [pc, #616]	; (8001ce8 <HAL_GPIO_Init+0x2a0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d05e      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a84:	4a98      	ldr	r2, [pc, #608]	; (8001ce8 <HAL_GPIO_Init+0x2a0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d875      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a8a:	4a98      	ldr	r2, [pc, #608]	; (8001cec <HAL_GPIO_Init+0x2a4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d058      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a90:	4a96      	ldr	r2, [pc, #600]	; (8001cec <HAL_GPIO_Init+0x2a4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d86f      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a96:	4a96      	ldr	r2, [pc, #600]	; (8001cf0 <HAL_GPIO_Init+0x2a8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d052      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a9c:	4a94      	ldr	r2, [pc, #592]	; (8001cf0 <HAL_GPIO_Init+0x2a8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d869      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aa2:	4a94      	ldr	r2, [pc, #592]	; (8001cf4 <HAL_GPIO_Init+0x2ac>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d04c      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a92      	ldr	r2, [pc, #584]	; (8001cf4 <HAL_GPIO_Init+0x2ac>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d863      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aae:	4a92      	ldr	r2, [pc, #584]	; (8001cf8 <HAL_GPIO_Init+0x2b0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d046      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a90      	ldr	r2, [pc, #576]	; (8001cf8 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d85d      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d82a      	bhi.n	8001b14 <HAL_GPIO_Init+0xcc>
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d859      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <HAL_GPIO_Init+0x80>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001b43 	.word	0x08001b43
 8001acc:	08001b1d 	.word	0x08001b1d
 8001ad0:	08001b2f 	.word	0x08001b2f
 8001ad4:	08001b71 	.word	0x08001b71
 8001ad8:	08001b77 	.word	0x08001b77
 8001adc:	08001b77 	.word	0x08001b77
 8001ae0:	08001b77 	.word	0x08001b77
 8001ae4:	08001b77 	.word	0x08001b77
 8001ae8:	08001b77 	.word	0x08001b77
 8001aec:	08001b77 	.word	0x08001b77
 8001af0:	08001b77 	.word	0x08001b77
 8001af4:	08001b77 	.word	0x08001b77
 8001af8:	08001b77 	.word	0x08001b77
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b77 	.word	0x08001b77
 8001b04:	08001b77 	.word	0x08001b77
 8001b08:	08001b77 	.word	0x08001b77
 8001b0c:	08001b25 	.word	0x08001b25
 8001b10:	08001b39 	.word	0x08001b39
 8001b14:	4a79      	ldr	r2, [pc, #484]	; (8001cfc <HAL_GPIO_Init+0x2b4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b1a:	e02c      	b.n	8001b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	623b      	str	r3, [r7, #32]
          break;
 8001b22:	e029      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e024      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	3308      	adds	r3, #8
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e01f      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	623b      	str	r3, [r7, #32]
          break;
 8001b40:	e01a      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e013      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	611a      	str	r2, [r3, #16]
          break;
 8001b62:	e009      	b.n	8001b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b64:	2308      	movs	r3, #8
 8001b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	615a      	str	r2, [r3, #20]
          break;
 8001b6e:	e003      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          break;
 8001b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d801      	bhi.n	8001b82 <HAL_GPIO_Init+0x13a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_Init+0x13e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d802      	bhi.n	8001b94 <HAL_GPIO_Init+0x14c>
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	e002      	b.n	8001b9a <HAL_GPIO_Init+0x152>
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3b08      	subs	r3, #8
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	6a39      	ldr	r1, [r7, #32]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80b1 	beq.w	8001d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc8:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	; (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be0:	4a48      	ldr	r2, [pc, #288]	; (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a40      	ldr	r2, [pc, #256]	; (8001d08 <HAL_GPIO_Init+0x2c0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_GPIO_Init+0x1ec>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3f      	ldr	r2, [pc, #252]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1e8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3e      	ldr	r2, [pc, #248]	; (8001d10 <HAL_GPIO_Init+0x2c8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1e4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3d      	ldr	r2, [pc, #244]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1e0>
 8001c24:	2303      	movs	r3, #3
 8001c26:	e006      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c28:	2304      	movs	r3, #4
 8001c2a:	e004      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e002      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c34:	2300      	movs	r3, #0
 8001c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c38:	f002 0203 	and.w	r2, r2, #3
 8001c3c:	0092      	lsls	r2, r2, #2
 8001c3e:	4093      	lsls	r3, r2
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c46:	492f      	ldr	r1, [pc, #188]	; (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	492c      	ldr	r1, [pc, #176]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4928      	ldr	r1, [pc, #160]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4922      	ldr	r1, [pc, #136]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	491e      	ldr	r1, [pc, #120]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4918      	ldr	r1, [pc, #96]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4914      	ldr	r1, [pc, #80]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d021      	beq.n	8001d1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60cb      	str	r3, [r1, #12]
 8001ce4:	e021      	b.n	8001d2a <HAL_GPIO_Init+0x2e2>
 8001ce6:	bf00      	nop
 8001ce8:	10320000 	.word	0x10320000
 8001cec:	10310000 	.word	0x10310000
 8001cf0:	10220000 	.word	0x10220000
 8001cf4:	10210000 	.word	0x10210000
 8001cf8:	10120000 	.word	0x10120000
 8001cfc:	10110000 	.word	0x10110000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	40010800 	.word	0x40010800
 8001d0c:	40010c00 	.word	0x40010c00
 8001d10:	40011000 	.word	0x40011000
 8001d14:	40011400 	.word	0x40011400
 8001d18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	4909      	ldr	r1, [pc, #36]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f47f ae8e 	bne.w	8001a5c <HAL_GPIO_Init+0x14>
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	372c      	adds	r7, #44	; 0x2c
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e001      	b.n	8001d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	807b      	strh	r3, [r7, #2]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d8e:	787b      	ldrb	r3, [r7, #1]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d9a:	e003      	b.n	8001da4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	041a      	lsls	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e12b      	b.n	800201a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff f9e0 	bl	800119c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e14:	f000 ffea 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8001e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a81      	ldr	r2, [pc, #516]	; (8002024 <HAL_I2C_Init+0x274>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d807      	bhi.n	8001e34 <HAL_I2C_Init+0x84>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a80      	ldr	r2, [pc, #512]	; (8002028 <HAL_I2C_Init+0x278>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bf94      	ite	ls
 8001e2c:	2301      	movls	r3, #1
 8001e2e:	2300      	movhi	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e006      	b.n	8001e42 <HAL_I2C_Init+0x92>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a7d      	ldr	r2, [pc, #500]	; (800202c <HAL_I2C_Init+0x27c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0e7      	b.n	800201a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4a78      	ldr	r2, [pc, #480]	; (8002030 <HAL_I2C_Init+0x280>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a6a      	ldr	r2, [pc, #424]	; (8002024 <HAL_I2C_Init+0x274>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d802      	bhi.n	8001e84 <HAL_I2C_Init+0xd4>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3301      	adds	r3, #1
 8001e82:	e009      	b.n	8001e98 <HAL_I2C_Init+0xe8>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	4a69      	ldr	r2, [pc, #420]	; (8002034 <HAL_I2C_Init+0x284>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	3301      	adds	r3, #1
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	495c      	ldr	r1, [pc, #368]	; (8002024 <HAL_I2C_Init+0x274>)
 8001eb4:	428b      	cmp	r3, r1
 8001eb6:	d819      	bhi.n	8001eec <HAL_I2C_Init+0x13c>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e59      	subs	r1, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec6:	1c59      	adds	r1, r3, #1
 8001ec8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ecc:	400b      	ands	r3, r1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_I2C_Init+0x138>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e59      	subs	r1, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee6:	e051      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	e04f      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <HAL_I2C_Init+0x168>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e012      	b.n	8001f3e <HAL_I2C_Init+0x18e>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1e58      	subs	r0, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	0099      	lsls	r1, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Init+0x196>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e022      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10e      	bne.n	8001f6c <HAL_I2C_Init+0x1bc>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1e58      	subs	r0, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6859      	ldr	r1, [r3, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	440b      	add	r3, r1
 8001f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6a:	e00f      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e58      	subs	r0, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	0099      	lsls	r1, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	6809      	ldr	r1, [r1, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6911      	ldr	r1, [r2, #16]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68d2      	ldr	r2, [r2, #12]
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	000186a0 	.word	0x000186a0
 8002028:	001e847f 	.word	0x001e847f
 800202c:	003d08ff 	.word	0x003d08ff
 8002030:	431bde83 	.word	0x431bde83
 8002034:	10624dd3 	.word	0x10624dd3

08002038 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	461a      	mov	r2, r3
 8002044:	460b      	mov	r3, r1
 8002046:	817b      	strh	r3, [r7, #10]
 8002048:	4613      	mov	r3, r2
 800204a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff fb10 	bl	8001670 <HAL_GetTick>
 8002050:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b20      	cmp	r3, #32
 800205c:	f040 80e0 	bne.w	8002220 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2319      	movs	r3, #25
 8002066:	2201      	movs	r2, #1
 8002068:	4970      	ldr	r1, [pc, #448]	; (800222c <HAL_I2C_Master_Transmit+0x1f4>)
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f964 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002076:	2302      	movs	r3, #2
 8002078:	e0d3      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_I2C_Master_Transmit+0x50>
 8002084:	2302      	movs	r3, #2
 8002086:	e0cc      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d007      	beq.n	80020ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2221      	movs	r2, #33	; 0x21
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2210      	movs	r2, #16
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	893a      	ldrh	r2, [r7, #8]
 80020de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4a50      	ldr	r2, [pc, #320]	; (8002230 <HAL_I2C_Master_Transmit+0x1f8>)
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f0:	8979      	ldrh	r1, [r7, #10]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	6a3a      	ldr	r2, [r7, #32]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f89c 	bl	8002234 <I2C_MasterRequestWrite>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e08d      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800211c:	e066      	b.n	80021ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	6a39      	ldr	r1, [r7, #32]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f9de 	bl	80024e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00d      	beq.n	800214a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b04      	cmp	r3, #4
 8002134:	d107      	bne.n	8002146 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06b      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b04      	cmp	r3, #4
 8002186:	d11b      	bne.n	80021c0 <HAL_I2C_Master_Transmit+0x188>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	d017      	beq.n	80021c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	6a39      	ldr	r1, [r7, #32]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f9ce 	bl	8002566 <I2C_WaitOnBTFFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d107      	bne.n	80021e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e01a      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d194      	bne.n	800211e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	e000      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002220:	2302      	movs	r3, #2
  }
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	00100002 	.word	0x00100002
 8002230:	ffff0000 	.word	0xffff0000

08002234 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	460b      	mov	r3, r1
 8002242:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d006      	beq.n	800225e <I2C_MasterRequestWrite+0x2a>
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d003      	beq.n	800225e <I2C_MasterRequestWrite+0x2a>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800225c:	d108      	bne.n	8002270 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e00b      	b.n	8002288 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	2b12      	cmp	r3, #18
 8002276:	d107      	bne.n	8002288 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f84f 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ae:	d103      	bne.n	80022b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e035      	b.n	8002328 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c4:	d108      	bne.n	80022d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022c6:	897b      	ldrh	r3, [r7, #10]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022d4:	611a      	str	r2, [r3, #16]
 80022d6:	e01b      	b.n	8002310 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022d8:	897b      	ldrh	r3, [r7, #10]
 80022da:	11db      	asrs	r3, r3, #7
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 0306 	and.w	r3, r3, #6
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f063 030f 	orn	r3, r3, #15
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <I2C_MasterRequestWrite+0xfc>)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f875 	bl	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e010      	b.n	8002328 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002306:	897b      	ldrh	r3, [r7, #10]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4907      	ldr	r1, [pc, #28]	; (8002334 <I2C_MasterRequestWrite+0x100>)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f865 	bl	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	00010008 	.word	0x00010008
 8002334:	00010002 	.word	0x00010002

08002338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002348:	e025      	b.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d021      	beq.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7ff f98d 	bl	8001670 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d116      	bne.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0220 	orr.w	r2, r3, #32
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e023      	b.n	80023de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10d      	bne.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4013      	ands	r3, r2
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	e00c      	b.n	80023d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4013      	ands	r3, r2
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf0c      	ite	eq
 80023ce:	2301      	moveq	r3, #1
 80023d0:	2300      	movne	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d0b6      	beq.n	800234a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023f4:	e051      	b.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002404:	d123      	bne.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800241e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f043 0204 	orr.w	r2, r3, #4
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e046      	b.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d021      	beq.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7ff f90b 	bl	8001670 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e020      	b.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d10c      	bne.n	80024be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4013      	ands	r3, r2
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	e00b      	b.n	80024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	43da      	mvns	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	4013      	ands	r3, r2
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d18d      	bne.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f0:	e02d      	b.n	800254e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f878 	bl	80025e8 <I2C_IsAcknowledgeFailed>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e02d      	b.n	800255e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d021      	beq.n	800254e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7ff f8b1 	bl	8001670 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0220 	orr.w	r2, r3, #32
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e007      	b.n	800255e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d1ca      	bne.n	80024f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002572:	e02d      	b.n	80025d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f837 	bl	80025e8 <I2C_IsAcknowledgeFailed>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e02d      	b.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d021      	beq.n	80025d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7ff f870 	bl	8001670 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	d302      	bcc.n	80025a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d116      	bne.n	80025d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e007      	b.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d1ca      	bne.n	8002574 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fe:	d11b      	bne.n	8002638 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002608:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f043 0204 	orr.w	r2, r3, #4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e272      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8087 	beq.w	8002772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002664:	4b92      	ldr	r3, [pc, #584]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b04      	cmp	r3, #4
 800266e:	d00c      	beq.n	800268a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002670:	4b8f      	ldr	r3, [pc, #572]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d112      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5e>
 800267c:	4b8c      	ldr	r3, [pc, #560]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002688:	d10b      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268a:	4b89      	ldr	r3, [pc, #548]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d06c      	beq.n	8002770 <HAL_RCC_OscConfig+0x12c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d168      	bne.n	8002770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e24c      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x76>
 80026ac:	4b80      	ldr	r3, [pc, #512]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a7f      	ldr	r2, [pc, #508]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e02e      	b.n	8002718 <HAL_RCC_OscConfig+0xd4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x98>
 80026c2:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7a      	ldr	r2, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b78      	ldr	r3, [pc, #480]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a77      	ldr	r2, [pc, #476]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01d      	b.n	8002718 <HAL_RCC_OscConfig+0xd4>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0xbc>
 80026e6:	4b72      	ldr	r3, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a71      	ldr	r2, [pc, #452]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b6f      	ldr	r3, [pc, #444]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6e      	ldr	r2, [pc, #440]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0xd4>
 8002700:	4b6b      	ldr	r3, [pc, #428]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6a      	ldr	r2, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a67      	ldr	r2, [pc, #412]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe ffa6 	bl	8001670 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7fe ffa2 	bl	8001670 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e200      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0xe4>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe ff92 	bl	8001670 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe ff8e 	bl	8001670 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1ec      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x10c>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d063      	beq.n	8002846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277e:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800278a:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b08      	cmp	r3, #8
 8002794:	d11c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x18c>
 8002796:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d116      	bne.n	80027d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_RCC_OscConfig+0x176>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1c0      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ba:	4b3d      	ldr	r3, [pc, #244]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4939      	ldr	r1, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ce:	e03a      	b.n	8002846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe ff47 	bl	8001670 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe ff43 	bl	8001670 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1a1      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4927      	ldr	r1, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	e015      	b.n	8002846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe ff26 	bl	8001670 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7fe ff22 	bl	8001670 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e180      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d03a      	beq.n	80028c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d019      	beq.n	800288e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7fe ff06 	bl	8001670 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe ff02 	bl	8001670 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e160      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002886:	2001      	movs	r0, #1
 8002888:	f000 fad8 	bl	8002e3c <RCC_Delay>
 800288c:	e01c      	b.n	80028c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002894:	f7fe feec 	bl	8001670 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289a:	e00f      	b.n	80028bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fee8 	bl	8001670 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d908      	bls.n	80028bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e146      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	42420000 	.word	0x42420000
 80028b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028bc:	4b92      	ldr	r3, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e9      	bne.n	800289c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80a6 	beq.w	8002a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b8b      	ldr	r3, [pc, #556]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4b88      	ldr	r3, [pc, #544]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4a87      	ldr	r2, [pc, #540]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	61d3      	str	r3, [r2, #28]
 80028f2:	4b85      	ldr	r3, [pc, #532]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b82      	ldr	r3, [pc, #520]	; (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290e:	4b7f      	ldr	r3, [pc, #508]	; (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7e      	ldr	r2, [pc, #504]	; (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fe fea9 	bl	8001670 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe fea5 	bl	8001670 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	; 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e103      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x312>
 8002948:	4b6f      	ldr	r3, [pc, #444]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6213      	str	r3, [r2, #32]
 8002954:	e02d      	b.n	80029b2 <HAL_RCC_OscConfig+0x36e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x334>
 800295e:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a69      	ldr	r2, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6213      	str	r3, [r2, #32]
 8002976:	e01c      	b.n	80029b2 <HAL_RCC_OscConfig+0x36e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x356>
 8002980:	4b61      	ldr	r3, [pc, #388]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a60      	ldr	r2, [pc, #384]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4a5d      	ldr	r2, [pc, #372]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6213      	str	r3, [r2, #32]
 8002998:	e00b      	b.n	80029b2 <HAL_RCC_OscConfig+0x36e>
 800299a:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a5a      	ldr	r2, [pc, #360]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6213      	str	r3, [r2, #32]
 80029a6:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4a57      	ldr	r2, [pc, #348]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d015      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fe59 	bl	8001670 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe fe55 	bl	8001670 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0b1      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	4b4b      	ldr	r3, [pc, #300]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ee      	beq.n	80029c2 <HAL_RCC_OscConfig+0x37e>
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7fe fe43 	bl	8001670 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fe3f 	bl	8001670 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e09b      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	4b40      	ldr	r3, [pc, #256]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b3c      	ldr	r3, [pc, #240]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4a3b      	ldr	r2, [pc, #236]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8087 	beq.w	8002b3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d061      	beq.n	8002afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d146      	bne.n	8002ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <HAL_RCC_OscConfig+0x4cc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a46:	f7fe fe13 	bl	8001670 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4e:	f7fe fe0f 	bl	8001670 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e06d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f0      	bne.n	8002a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d108      	bne.n	8002a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4921      	ldr	r1, [pc, #132]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a19      	ldr	r1, [r3, #32]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	491b      	ldr	r1, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <HAL_RCC_OscConfig+0x4cc>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fde3 	bl	8001670 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aae:	f7fe fddf 	bl	8001670 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e03d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x46a>
 8002acc:	e035      	b.n	8002b3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_RCC_OscConfig+0x4cc>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fdcc 	bl	8001670 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fdc8 	bl	8001670 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e026      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x498>
 8002afa:	e01e      	b.n	8002b3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e019      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_OscConfig+0x500>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0d0      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4965      	ldr	r1, [pc, #404]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d040      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e073      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06b      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4936      	ldr	r1, [pc, #216]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7fe fd1a 	bl	8001670 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe fd16 	bl	8001670 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e053      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d210      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	4922      	ldr	r1, [pc, #136]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1cc>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1d0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fc78 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08009624 	.word	0x08009624
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	b490      	push	{r4, r7}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d24:	1d3c      	adds	r4, r7, #4
 8002d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d2c:	f240 2301 	movw	r3, #513	; 0x201
 8002d30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d46:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x40>
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x46>
 8002d5a:	e02b      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d5e:	623b      	str	r3, [r7, #32]
      break;
 8002d60:	e02b      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	0c9b      	lsrs	r3, r3, #18
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3328      	adds	r3, #40	; 0x28
 8002d6c:	443b      	add	r3, r7
 8002d6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d012      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0c5b      	lsrs	r3, r3, #17
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	3328      	adds	r3, #40	; 0x28
 8002d8a:	443b      	add	r3, r7
 8002d8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d96:	fb03 f202 	mul.w	r2, r3, r2
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	e004      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	623b      	str	r3, [r7, #32]
      break;
 8002db2:	e002      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002db6:	623b      	str	r3, [r7, #32]
      break;
 8002db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dba:	6a3b      	ldr	r3, [r7, #32]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3728      	adds	r7, #40	; 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc90      	pop	{r4, r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	08009614 	.word	0x08009614
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	003d0900 	.word	0x003d0900

08002dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b02      	ldr	r3, [pc, #8]	; (8002de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	20000000 	.word	0x20000000

08002dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df0:	f7ff fff2 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08009634 	.word	0x08009634

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e18:	f7ff ffde 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	0adb      	lsrs	r3, r3, #11
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08009634 	.word	0x08009634

08002e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <RCC_Delay+0x34>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <RCC_Delay+0x38>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0a5b      	lsrs	r3, r3, #9
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e58:	bf00      	nop
  }
  while (Delay --);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e5a      	subs	r2, r3, #1
 8002e5e:	60fa      	str	r2, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f9      	bne.n	8002e58 <RCC_Delay+0x1c>
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000000 	.word	0x20000000
 8002e74:	10624dd3 	.word	0x10624dd3

08002e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e041      	b.n	8002f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe f9ba 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f000 fb1a 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d001      	beq.n	8002f30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e032      	b.n	8002f96 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <HAL_TIM_Base_Start+0x88>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_TIM_Base_Start+0x48>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4a:	d009      	beq.n	8002f60 <HAL_TIM_Base_Start+0x48>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <HAL_TIM_Base_Start+0x8c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_TIM_Base_Start+0x48>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <HAL_TIM_Base_Start+0x90>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d111      	bne.n	8002f84 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d010      	beq.n	8002f94 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f82:	e007      	b.n	8002f94 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800

08002fac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_TIM_Base_Stop+0x38>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a1a      	ldr	r2, [r3, #32]
 8002fca:	f240 4344 	movw	r3, #1092	; 0x444
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_Base_Stop+0x38>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e041      	b.n	800308e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f839 	bl	8003096 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fa5a 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start+0x24>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e022      	b.n	8003112 <HAL_TIM_PWM_Start+0x6a>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d109      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x3e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e015      	b.n	8003112 <HAL_TIM_PWM_Start+0x6a>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d109      	bne.n	8003100 <HAL_TIM_PWM_Start+0x58>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e008      	b.n	8003112 <HAL_TIM_PWM_Start+0x6a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e05e      	b.n	80031d8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Start+0x82>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003128:	e013      	b.n	8003152 <HAL_TIM_PWM_Start+0xaa>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Start+0x92>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003138:	e00b      	b.n	8003152 <HAL_TIM_PWM_Start+0xaa>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d104      	bne.n	800314a <HAL_TIM_PWM_Start+0xa2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003148:	e003      	b.n	8003152 <HAL_TIM_PWM_Start+0xaa>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fc48 	bl	80039f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_TIM_PWM_Start+0x138>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d107      	bne.n	800317a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_TIM_PWM_Start+0x138>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00e      	beq.n	80031a2 <HAL_TIM_PWM_Start+0xfa>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d009      	beq.n	80031a2 <HAL_TIM_PWM_Start+0xfa>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <HAL_TIM_PWM_Start+0x13c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d004      	beq.n	80031a2 <HAL_TIM_PWM_Start+0xfa>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <HAL_TIM_PWM_Start+0x140>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d111      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b06      	cmp	r3, #6
 80031b2:	d010      	beq.n	80031d6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	e007      	b.n	80031d6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800

080031ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003202:	2302      	movs	r3, #2
 8003204:	e0ac      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b0c      	cmp	r3, #12
 8003212:	f200 809f 	bhi.w	8003354 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003251 	.word	0x08003251
 8003220:	08003355 	.word	0x08003355
 8003224:	08003355 	.word	0x08003355
 8003228:	08003355 	.word	0x08003355
 800322c:	08003291 	.word	0x08003291
 8003230:	08003355 	.word	0x08003355
 8003234:	08003355 	.word	0x08003355
 8003238:	08003355 	.word	0x08003355
 800323c:	080032d3 	.word	0x080032d3
 8003240:	08003355 	.word	0x08003355
 8003244:	08003355 	.word	0x08003355
 8003248:	08003355 	.word	0x08003355
 800324c:	08003313 	.word	0x08003313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f9ac 	bl	80035b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0204 	bic.w	r2, r2, #4
 800327a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6999      	ldr	r1, [r3, #24]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	619a      	str	r2, [r3, #24]
      break;
 800328e:	e062      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f9f2 	bl	8003680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6999      	ldr	r1, [r3, #24]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	021a      	lsls	r2, r3, #8
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	619a      	str	r2, [r3, #24]
      break;
 80032d0:	e041      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fa3b 	bl	8003754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0208 	orr.w	r2, r2, #8
 80032ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0204 	bic.w	r2, r2, #4
 80032fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69d9      	ldr	r1, [r3, #28]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	61da      	str	r2, [r3, #28]
      break;
 8003310:	e021      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fa85 	bl	8003828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69d9      	ldr	r1, [r3, #28]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	021a      	lsls	r2, r3, #8
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	61da      	str	r2, [r3, #28]
      break;
 8003352:	e000      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_TIM_ConfigClockSource+0x18>
 800337c:	2302      	movs	r3, #2
 800337e:	e0b3      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x180>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800339e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b8:	d03e      	beq.n	8003438 <HAL_TIM_ConfigClockSource+0xd0>
 80033ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033be:	f200 8087 	bhi.w	80034d0 <HAL_TIM_ConfigClockSource+0x168>
 80033c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c6:	f000 8085 	beq.w	80034d4 <HAL_TIM_ConfigClockSource+0x16c>
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ce:	d87f      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x168>
 80033d0:	2b70      	cmp	r3, #112	; 0x70
 80033d2:	d01a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0xa2>
 80033d4:	2b70      	cmp	r3, #112	; 0x70
 80033d6:	d87b      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x168>
 80033d8:	2b60      	cmp	r3, #96	; 0x60
 80033da:	d050      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x116>
 80033dc:	2b60      	cmp	r3, #96	; 0x60
 80033de:	d877      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x168>
 80033e0:	2b50      	cmp	r3, #80	; 0x50
 80033e2:	d03c      	beq.n	800345e <HAL_TIM_ConfigClockSource+0xf6>
 80033e4:	2b50      	cmp	r3, #80	; 0x50
 80033e6:	d873      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x168>
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d058      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x136>
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d86f      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x168>
 80033f0:	2b30      	cmp	r3, #48	; 0x30
 80033f2:	d064      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x156>
 80033f4:	2b30      	cmp	r3, #48	; 0x30
 80033f6:	d86b      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x168>
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d060      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x156>
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d867      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x168>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d05c      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x156>
 8003404:	2b10      	cmp	r3, #16
 8003406:	d05a      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003408:	e062      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6899      	ldr	r1, [r3, #8]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f000 faca 	bl	80039b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800342c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	609a      	str	r2, [r3, #8]
      break;
 8003436:	e04e      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6899      	ldr	r1, [r3, #8]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f000 fab3 	bl	80039b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800345a:	609a      	str	r2, [r3, #8]
      break;
 800345c:	e03b      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	461a      	mov	r2, r3
 800346c:	f000 fa2a 	bl	80038c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2150      	movs	r1, #80	; 0x50
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fa81 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 800347c:	e02b      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	f000 fa48 	bl	8003920 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2160      	movs	r1, #96	; 0x60
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fa71 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 800349c:	e01b      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f000 fa0a 	bl	80038c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2140      	movs	r1, #64	; 0x40
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fa61 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 80034bc:	e00b      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4619      	mov	r1, r3
 80034c8:	4610      	mov	r0, r2
 80034ca:	f000 fa58 	bl	800397e <TIM_ITRx_SetConfig>
        break;
 80034ce:	e002      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <TIM_Base_SetConfig+0xb8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00b      	beq.n	8003520 <TIM_Base_SetConfig+0x30>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d007      	beq.n	8003520 <TIM_Base_SetConfig+0x30>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a26      	ldr	r2, [pc, #152]	; (80035ac <TIM_Base_SetConfig+0xbc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_Base_SetConfig+0x30>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a25      	ldr	r2, [pc, #148]	; (80035b0 <TIM_Base_SetConfig+0xc0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d108      	bne.n	8003532 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <TIM_Base_SetConfig+0xb8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00b      	beq.n	8003552 <TIM_Base_SetConfig+0x62>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003540:	d007      	beq.n	8003552 <TIM_Base_SetConfig+0x62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a19      	ldr	r2, [pc, #100]	; (80035ac <TIM_Base_SetConfig+0xbc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <TIM_Base_SetConfig+0x62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <TIM_Base_SetConfig+0xc0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d108      	bne.n	8003564 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <TIM_Base_SetConfig+0xb8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d103      	bne.n	8003598 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	615a      	str	r2, [r3, #20]
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800

080035b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0201 	bic.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f023 0302 	bic.w	r3, r3, #2
 80035fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a1c      	ldr	r2, [pc, #112]	; (800367c <TIM_OC1_SetConfig+0xc8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10c      	bne.n	800362a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0308 	bic.w	r3, r3, #8
 8003616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 0304 	bic.w	r3, r3, #4
 8003628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a13      	ldr	r2, [pc, #76]	; (800367c <TIM_OC1_SetConfig+0xc8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d111      	bne.n	8003656 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00

08003680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f023 0210 	bic.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0320 	bic.w	r3, r3, #32
 80036ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <TIM_OC2_SetConfig+0xd0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d10d      	bne.n	80036fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a14      	ldr	r2, [pc, #80]	; (8003750 <TIM_OC2_SetConfig+0xd0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d113      	bne.n	800372c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800370a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00

08003754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800379c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <TIM_OC3_SetConfig+0xd0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10d      	bne.n	80037ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <TIM_OC3_SetConfig+0xd0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d113      	bne.n	80037fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00

08003828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	031b      	lsls	r3, r3, #12
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <TIM_OC4_SetConfig+0x98>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	019b      	lsls	r3, r3, #6
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	40012c00 	.word	0x40012c00

080038c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0201 	bic.w	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 030a 	bic.w	r3, r3, #10
 8003900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f023 0210 	bic.w	r2, r3, #16
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800394a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	031b      	lsls	r3, r3, #12
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800395c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	f043 0307 	orr.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b087      	sub	sp, #28
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	021a      	lsls	r2, r3, #8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4313      	orrs	r3, r2
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	609a      	str	r2, [r3, #8]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2201      	movs	r2, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	401a      	ands	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e046      	b.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d009      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a10      	ldr	r2, [pc, #64]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10c      	bne.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800

08003af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e03f      	b.n	8003b86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fbde 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	; 0x24
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fc85 	bl	8004448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b08a      	sub	sp, #40	; 0x28
 8003b92:	af02      	add	r7, sp, #8
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d17c      	bne.n	8003ca8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_UART_Transmit+0x2c>
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e075      	b.n	8003caa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_UART_Transmit+0x3e>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e06e      	b.n	8003caa <HAL_UART_Transmit+0x11c>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2221      	movs	r2, #33	; 0x21
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003be2:	f7fd fd45 	bl	8001670 <HAL_GetTick>
 8003be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfc:	d108      	bne.n	8003c10 <HAL_UART_Transmit+0x82>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e003      	b.n	8003c18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c20:	e02a      	b.n	8003c78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2180      	movs	r1, #128	; 0x80
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fa38 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e036      	b.n	8003caa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	3302      	adds	r3, #2
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e007      	b.n	8003c6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	3301      	adds	r3, #1
 8003c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1cf      	bne.n	8003c22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2140      	movs	r1, #64	; 0x40
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fa08 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e006      	b.n	8003caa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e000      	b.n	8003caa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
  }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d11d      	bne.n	8003d08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_UART_Receive_IT+0x26>
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e016      	b.n	8003d0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Receive_IT+0x38>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e00f      	b.n	8003d0a <HAL_UART_Receive_IT+0x58>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fa19 	bl	8004136 <UART_Start_Receive_IT>
 8003d04:	4603      	mov	r3, r0
 8003d06:	e000      	b.n	8003d0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10d      	bne.n	8003d66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_UART_IRQHandler+0x52>
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fac9 	bl	80042f6 <UART_Receive_IT>
      return;
 8003d64:	e17b      	b.n	800405e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80b1 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x1bc>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_UART_IRQHandler+0x70>
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80a6 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_UART_IRQHandler+0x90>
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_UART_IRQHandler+0xb0>
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f043 0202 	orr.w	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_UART_IRQHandler+0xd0>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00f      	beq.n	8003e0e <HAL_UART_IRQHandler+0xfa>
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_UART_IRQHandler+0xee>
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0208 	orr.w	r2, r3, #8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 811e 	beq.w	8004054 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <HAL_UART_IRQHandler+0x11e>
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fa62 	bl	80042f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <HAL_UART_IRQHandler+0x146>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d031      	beq.n	8003ebe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9a4 	bl	80041a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d023      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d013      	beq.n	8003eae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	4a76      	ldr	r2, [pc, #472]	; (8004064 <HAL_UART_IRQHandler+0x350>)
 8003e8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd fd62 	bl	800195c <HAL_DMA_Abort_IT>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	e00e      	b.n	8003ecc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8e3 	bl	800407a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00a      	b.n	8003ecc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8df 	bl	800407a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e006      	b.n	8003ecc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8db 	bl	800407a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003eca:	e0c3      	b.n	8004054 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	bf00      	nop
    return;
 8003ece:	e0c1      	b.n	8004054 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	f040 80a1 	bne.w	800401c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 809b 	beq.w	800401c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8095 	beq.w	800401c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d04e      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f20:	8a3b      	ldrh	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8098 	beq.w	8004058 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f2c:	8a3a      	ldrh	r2, [r7, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	f080 8092 	bcs.w	8004058 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8a3a      	ldrh	r2, [r7, #16]
 8003f38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d02b      	beq.n	8003f9c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f52:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f72:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0210 	bic.w	r2, r2, #16
 8003f90:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fca5 	bl	80018e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f86d 	bl	800408c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fb2:	e051      	b.n	8004058 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d047      	beq.n	800405c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003fcc:	8a7b      	ldrh	r3, [r7, #18]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d044      	beq.n	800405c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fe0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0210 	bic.w	r2, r2, #16
 800400e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004010:	8a7b      	ldrh	r3, [r7, #18]
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f839 	bl	800408c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800401a:	e01f      	b.n	800405c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_UART_IRQHandler+0x324>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8f9 	bl	8004228 <UART_Transmit_IT>
    return;
 8004036:	e012      	b.n	800405e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <HAL_UART_IRQHandler+0x34a>
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f93a 	bl	80042c6 <UART_EndTransmit_IT>
    return;
 8004052:	e004      	b.n	800405e <HAL_UART_IRQHandler+0x34a>
    return;
 8004054:	bf00      	nop
 8004056:	e002      	b.n	800405e <HAL_UART_IRQHandler+0x34a>
      return;
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <HAL_UART_IRQHandler+0x34a>
      return;
 800405c:	bf00      	nop
  }
}
 800405e:	3728      	adds	r7, #40	; 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	08004201 	.word	0x08004201

08004068 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	4613      	mov	r3, r2
 80040b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b2:	e02c      	b.n	800410e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d028      	beq.n	800410e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040c2:	f7fd fad5 	bl	8001670 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d21d      	bcs.n	800410e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e00f      	b.n	800412e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	429a      	cmp	r2, r3
 800412a:	d0c3      	beq.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004136:	b480      	push	{r7}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2222      	movs	r2, #34	; 0x22
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0220 	orr.w	r2, r2, #32
 800419a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0210 	bic.w	r2, r2, #16
 80041e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff ff2d 	bl	800407a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b21      	cmp	r3, #33	; 0x21
 800423a:	d13e      	bne.n	80042ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d114      	bne.n	8004270 <UART_Transmit_IT+0x48>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d110      	bne.n	8004270 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004262:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	1c9a      	adds	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	621a      	str	r2, [r3, #32]
 800426e:	e008      	b.n	8004282 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	1c59      	adds	r1, r3, #1
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6211      	str	r1, [r2, #32]
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29b      	uxth	r3, r3
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4619      	mov	r1, r3
 8004290:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e000      	b.n	80042bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff febe 	bl	8004068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b086      	sub	sp, #24
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b22      	cmp	r3, #34	; 0x22
 8004308:	f040 8099 	bne.w	800443e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004314:	d117      	bne.n	8004346 <UART_Receive_IT+0x50>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d113      	bne.n	8004346 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004334:	b29a      	uxth	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	1c9a      	adds	r2, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
 8004344:	e026      	b.n	8004394 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d007      	beq.n	800436a <UART_Receive_IT+0x74>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <UART_Receive_IT+0x82>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	e008      	b.n	800438a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004384:	b2da      	uxtb	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29b      	uxth	r3, r3
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4619      	mov	r1, r3
 80043a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d148      	bne.n	800443a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0220 	bic.w	r2, r2, #32
 80043b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d123      	bne.n	8004430 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0210 	bic.w	r2, r2, #16
 80043fc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d10a      	bne.n	8004422 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff fe2f 	bl	800408c <HAL_UARTEx_RxEventCallback>
 800442e:	e002      	b.n	8004436 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7fc fbdd 	bl	8000bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e002      	b.n	8004440 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
  }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004482:	f023 030c 	bic.w	r3, r3, #12
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	430b      	orrs	r3, r1
 800448e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2c      	ldr	r2, [pc, #176]	; (800455c <UART_SetConfig+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d103      	bne.n	80044b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044b0:	f7fe fcb0 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	e002      	b.n	80044be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7fe fc98 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 80044bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009a      	lsls	r2, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	4a22      	ldr	r2, [pc, #136]	; (8004560 <UART_SetConfig+0x118>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	0119      	lsls	r1, r3, #4
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009a      	lsls	r2, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <UART_SetConfig+0x118>)
 80044f6:	fba3 0302 	umull	r0, r3, r3, r2
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2064      	movs	r0, #100	; 0x64
 80044fe:	fb00 f303 	mul.w	r3, r0, r3
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	3332      	adds	r3, #50	; 0x32
 8004508:	4a15      	ldr	r2, [pc, #84]	; (8004560 <UART_SetConfig+0x118>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004514:	4419      	add	r1, r3
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	009a      	lsls	r2, r3, #2
 8004520:	441a      	add	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	fbb2 f2f3 	udiv	r2, r2, r3
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <UART_SetConfig+0x118>)
 800452e:	fba3 0302 	umull	r0, r3, r3, r2
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2064      	movs	r0, #100	; 0x64
 8004536:	fb00 f303 	mul.w	r3, r0, r3
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	3332      	adds	r3, #50	; 0x32
 8004540:	4a07      	ldr	r2, [pc, #28]	; (8004560 <UART_SetConfig+0x118>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	440a      	add	r2, r1
 8004552:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40013800 	.word	0x40013800
 8004560:	51eb851f 	.word	0x51eb851f

08004564 <TIM_DelayUs>:
  * 		the source of time base.
  * @param  Delay: specifies the delay time length, in microseconds.
  * @retval None
  */
void TIM_DelayUs(TIM_HandleTypeDef *htim, uint16_t Delay)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fe fccd 	bl	8002f18 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(htim) < Delay);
 800457e:	bf00      	nop
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004586:	887b      	ldrh	r3, [r7, #2]
 8004588:	429a      	cmp	r2, r3
 800458a:	d3f9      	bcc.n	8004580 <TIM_DelayUs+0x1c>
	HAL_TIM_Base_Stop(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fe fd0d 	bl	8002fac <HAL_TIM_Base_Stop>

}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <TIM_DelayMs>:
  * 		the source of time base.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void TIM_DelayMs(TIM_HandleTypeDef *htim, uint16_t Delay)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	807b      	strh	r3, [r7, #2]
	while(Delay--)
 80045a6:	e004      	b.n	80045b2 <TIM_DelayMs+0x18>
	{
//		__HAL_TIM_SET_COUNTER(htim, 0);
//		HAL_TIM_Base_Start(htim);
//		while(__HAL_TIM_GET_COUNTER(htim) < 1000);
		TIM_DelayUs(htim, 1000);
 80045a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ffd9 	bl	8004564 <TIM_DelayUs>
	while(Delay--)
 80045b2:	887b      	ldrh	r3, [r7, #2]
 80045b4:	1e5a      	subs	r2, r3, #1
 80045b6:	807a      	strh	r2, [r7, #2]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f5      	bne.n	80045a8 <TIM_DelayMs+0xe>
	}
//	HAL_TIM_Base_Stop(htim);
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <DHT_DelayUs>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains the configuration information for the specified DHT sensor.
  * @param  Time: specifies the delay time length, in microseconds.
  * @retval None
  */
static void DHT_DelayUs(DHT_HandleTypeDef* DHT, uint16_t Time)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	460b      	mov	r3, r1
 80045d0:	807b      	strh	r3, [r7, #2]
	TIM_DelayUs(DHT->Timer, Time);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ffc2 	bl	8004564 <TIM_DelayUs>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <DHT_DelayMs>:
  * 		the configuration information for the specified DHT sensor.
  * @param  Time: specifies the delay time length, in miliseconds.
  * @retval None
  */
static void DHT_DelayMs(DHT_HandleTypeDef* DHT, uint16_t Time)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	807b      	strh	r3, [r7, #2]
	TIM_DelayMs(DHT->Timer, Time);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	887a      	ldrh	r2, [r7, #2]
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ffcc 	bl	800459a <TIM_DelayMs>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <DHT_SetPinOut>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @retval None
  */
static void DHT_SetPinOut(DHT_HandleTypeDef* DHT)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004614:	f107 0318 	add.w	r3, r7, #24
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	60da      	str	r2, [r3, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004622:	4b26      	ldr	r3, [pc, #152]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	4a25      	ldr	r2, [pc, #148]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004628:	f043 0304 	orr.w	r3, r3, #4
 800462c:	6193      	str	r3, [r2, #24]
 800462e:	4b23      	ldr	r3, [pc, #140]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <DHT_SetPinOut+0xb0>)
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004640:	f043 0308 	orr.w	r3, r3, #8
 8004644:	6193      	str	r3, [r2, #24]
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004658:	f043 0310 	orr.w	r3, r3, #16
 800465c:	6193      	str	r3, [r2, #24]
 800465e:	4b17      	ldr	r3, [pc, #92]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <DHT_SetPinOut+0xb0>)
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	4a13      	ldr	r2, [pc, #76]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004670:	f043 0320 	orr.w	r3, r3, #32
 8004674:	6193      	str	r3, [r2, #24]
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <DHT_SetPinOut+0xb0>)
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_WritePin(DHT->Port, DHT->Pin, GPIO_PIN_SET);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68d8      	ldr	r0, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	891b      	ldrh	r3, [r3, #8]
 800468a:	2201      	movs	r2, #1
 800468c:	4619      	mov	r1, r3
 800468e:	f7fd fb76 	bl	8001d7e <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DHT->Pin;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	891b      	ldrh	r3, [r3, #8]
 8004696:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004698:	2311      	movs	r3, #17
 800469a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a0:	2302      	movs	r3, #2
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f107 0218 	add.w	r2, r7, #24
 80046ac:	4611      	mov	r1, r2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd f9ca 	bl	8001a48 <HAL_GPIO_Init>
}
 80046b4:	bf00      	nop
 80046b6:	3728      	adds	r7, #40	; 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000

080046c0 <DHT_SetPinIn>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @retval None
  */
static void DHT_SetPinIn(DHT_HandleTypeDef* DHT)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	891b      	ldrh	r3, [r3, #8]
 80046da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f107 0208 	add.w	r2, r7, #8
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd f9aa 	bl	8001a48 <HAL_GPIO_Init>
}
 80046f4:	bf00      	nop
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <DHT_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
static void DHT_WritePin(DHT_HandleTypeDef* DHT, GPIO_PinState PinState)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->Port, DHT->Pin, PinState);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68d8      	ldr	r0, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	891b      	ldrh	r3, [r3, #8]
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	4619      	mov	r1, r3
 8004714:	f7fd fb33 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <DHT_ReadPin>:
  * 		the configuration information for the specified DHT sensor.
  *
  * @retval The input port pin value.
  */
static GPIO_PinState DHT_ReadPin(DHT_HandleTypeDef* DHT)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	GPIO_PinState PinState;
	PinState =  HAL_GPIO_ReadPin(DHT->Port, DHT->Pin);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	891b      	ldrh	r3, [r3, #8]
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f7fd fb0c 	bl	8001d50 <HAL_GPIO_ReadPin>
 8004738:	4603      	mov	r3, r0
 800473a:	73fb      	strb	r3, [r7, #15]
	return PinState;
 800473c:	7bfb      	ldrb	r3, [r7, #15]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <DHT_AwaitPinState>:
  * 			DHT_OK: read the expected port pin value on sensor pin.
  * 			DHT_ERR_TIMEOUT: timeout but not read the expected port pin value on sensor pin.
  */
static dht_err_t DHT_AwaitPinState(DHT_HandleTypeDef* DHT, uint32_t timeout,
									GPIO_PinState expected_pin_state, uint32_t* duration)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	71fb      	strb	r3, [r7, #7]
	DHT_SetPinIn(DHT);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff ffb2 	bl	80046c0 <DHT_SetPinIn>
    for (uint32_t i = 0; i < timeout; i += DHT_TIMER_INTERVAL)
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e016      	b.n	8004790 <DHT_AwaitPinState+0x4a>
    {
        // need to wait at least a single interval to prevent reading a jitter
    	DHT_DelayUs(DHT, DHT_TIMER_INTERVAL);
 8004762:	2102      	movs	r1, #2
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff ff2e 	bl	80045c6 <DHT_DelayUs>
        if (DHT_ReadPin(DHT) == expected_pin_state)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff ffd8 	bl	8004720 <DHT_ReadPin>
 8004770:	4603      	mov	r3, r0
 8004772:	461a      	mov	r2, r3
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	4293      	cmp	r3, r2
 8004778:	d107      	bne.n	800478a <DHT_AwaitPinState+0x44>
        {
        	if(duration)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <DHT_AwaitPinState+0x40>
        		*duration = i;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	601a      	str	r2, [r3, #0]
            return DHT_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e008      	b.n	800479c <DHT_AwaitPinState+0x56>
    for (uint32_t i = 0; i < timeout; i += DHT_TIMER_INTERVAL)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	3302      	adds	r3, #2
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	429a      	cmp	r2, r3
 8004796:	d3e4      	bcc.n	8004762 <DHT_AwaitPinState+0x1c>
        }
    }

    return DHT_ERR_TIMEOUT;
 8004798:	f240 1301 	movw	r3, #257	; 0x101
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <DHT_FetchData>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @param  data[DHT_DATA_BYTES]: Pointer to a uint8_t array.
  * @retval DHT status
  */
static dht_err_t DHT_FetchData(DHT_HandleTypeDef* DHT, uint8_t data[DHT_DATA_BYTES]) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
	uint32_t low_duration;
	uint32_t high_duration;

	DHT_SetPinOut(DHT);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ff2c 	bl	800460c <DHT_SetPinOut>
	DHT_WritePin(DHT, GPIO_PIN_RESET);
 80047b4:	2100      	movs	r1, #0
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff ffa0 	bl	80046fc <DHT_WritePin>
	DHT_DelayMs(DHT, Tbe);
 80047bc:	2114      	movs	r1, #20
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff ff12 	bl	80045e8 <DHT_DelayMs>
	DHT_WritePin(DHT, GPIO_PIN_SET);
 80047c4:	2101      	movs	r1, #1
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff ff98 	bl	80046fc <DHT_WritePin>

	int ret = DHT_AwaitPinState(DHT, Tgo, GPIO_PIN_RESET, NULL);
 80047cc:	2300      	movs	r3, #0
 80047ce:	2200      	movs	r2, #0
 80047d0:	2123      	movs	r1, #35	; 0x23
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ffb7 	bl	8004746 <DHT_AwaitPinState>
 80047d8:	61b8      	str	r0, [r7, #24]
	if(ret) {
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <DHT_FetchData+0x42>
		return DHT_ERR_PHASE_B;
 80047e0:	f240 1303 	movw	r3, #259	; 0x103
 80047e4:	e070      	b.n	80048c8 <DHT_FetchData+0x124>
	}


	ret = DHT_AwaitPinState(DHT, Trel, GPIO_PIN_SET, NULL);
 80047e6:	2300      	movs	r3, #0
 80047e8:	2201      	movs	r2, #1
 80047ea:	2158      	movs	r1, #88	; 0x58
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ffaa 	bl	8004746 <DHT_AwaitPinState>
 80047f2:	61b8      	str	r0, [r7, #24]
	if(ret) {
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <DHT_FetchData+0x5c>
		return DHT_ERR_PHASE_C;
 80047fa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80047fe:	e063      	b.n	80048c8 <DHT_FetchData+0x124>
	}

	ret = DHT_AwaitPinState(DHT, Treh, GPIO_PIN_RESET, NULL);
 8004800:	2300      	movs	r3, #0
 8004802:	2200      	movs	r2, #0
 8004804:	215c      	movs	r1, #92	; 0x5c
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff ff9d 	bl	8004746 <DHT_AwaitPinState>
 800480c:	61b8      	str	r0, [r7, #24]
	if(ret) {
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <DHT_FetchData+0x76>
		return DHT_ERR_PHASE_D;
 8004814:	f240 1305 	movw	r3, #261	; 0x105
 8004818:	e056      	b.n	80048c8 <DHT_FetchData+0x124>
	}

	for (int i = 0; i < DHT_DATA_BITS; ++i) {
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	e04f      	b.n	80048c0 <DHT_FetchData+0x11c>
		ret = DHT_AwaitPinState(DHT, T_LOW, GPIO_PIN_SET, &low_duration);
 8004820:	f107 0310 	add.w	r3, r7, #16
 8004824:	2201      	movs	r2, #1
 8004826:	213a      	movs	r1, #58	; 0x3a
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ff8c 	bl	8004746 <DHT_AwaitPinState>
 800482e:	61b8      	str	r0, [r7, #24]
		if (ret) {
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <DHT_FetchData+0x98>
			return DHT_ERR_LBIT_TIMEOUT;
 8004836:	f44f 7383 	mov.w	r3, #262	; 0x106
 800483a:	e045      	b.n	80048c8 <DHT_FetchData+0x124>
		}
		ret = DHT_AwaitPinState(DHT, TH1, GPIO_PIN_RESET, &high_duration);
 800483c:	f107 030c 	add.w	r3, r7, #12
 8004840:	2200      	movs	r2, #0
 8004842:	214a      	movs	r1, #74	; 0x4a
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff7e 	bl	8004746 <DHT_AwaitPinState>
 800484a:	61b8      	str	r0, [r7, #24]
		if (ret) {
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <DHT_FetchData+0xb4>
			return DHT_ERR_HBIT_TIMEOUT;
 8004852:	f240 1307 	movw	r3, #263	; 0x107
 8004856:	e037      	b.n	80048c8 <DHT_FetchData+0x124>
		}

		uint8_t byte = i / 8;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	2b00      	cmp	r3, #0
 800485c:	da00      	bge.n	8004860 <DHT_FetchData+0xbc>
 800485e:	3307      	adds	r3, #7
 8004860:	10db      	asrs	r3, r3, #3
 8004862:	75fb      	strb	r3, [r7, #23]
		uint8_t bit = i % 8;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	425a      	negs	r2, r3
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	f002 0207 	and.w	r2, r2, #7
 8004870:	bf58      	it	pl
 8004872:	4253      	negpl	r3, r2
 8004874:	75bb      	strb	r3, [r7, #22]
		if (!bit) {
 8004876:	7dbb      	ldrb	r3, [r7, #22]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d104      	bne.n	8004886 <DHT_FetchData+0xe2>
		     data[byte] = 0;
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	4413      	add	r3, r2
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
		}
		data[byte] |= (high_duration > low_duration) << (7 - bit);
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	4413      	add	r3, r2
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b25a      	sxtb	r2, r3
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4299      	cmp	r1, r3
 8004896:	bf8c      	ite	hi
 8004898:	2301      	movhi	r3, #1
 800489a:	2300      	movls	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	4619      	mov	r1, r3
 80048a0:	7dbb      	ldrb	r3, [r7, #22]
 80048a2:	f1c3 0307 	rsb	r3, r3, #7
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	b25b      	sxtb	r3, r3
 80048ac:	4313      	orrs	r3, r2
 80048ae:	b259      	sxtb	r1, r3
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	4413      	add	r3, r2
 80048b6:	b2ca      	uxtb	r2, r1
 80048b8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < DHT_DATA_BITS; ++i) {
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	3301      	adds	r3, #1
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b27      	cmp	r3, #39	; 0x27
 80048c4:	ddac      	ble.n	8004820 <DHT_FetchData+0x7c>
	}

	return DHT_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <DHT_Init>:
  * @param  DHT_Pin: GPIO_PIN_xx that is specified for DHT sensor pin.
  * 		DHT sensor pin.
  * @retval None
  */
void DHT_Init(DHT_HandleTypeDef* DHT, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DHT_Port, uint16_t DHT_Pin)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	807b      	strh	r3, [r7, #2]
	DHT->Error = DHT_OK;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
	DHT->Port = DHT_Port;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	60da      	str	r2, [r3, #12]
	DHT->Pin = DHT_Pin;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	887a      	ldrh	r2, [r7, #2]
 80048ee:	811a      	strh	r2, [r3, #8]
	DHT->Timer = Timer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	605a      	str	r2, [r3, #4]
	DHT_SetPinOut(DHT);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff fe88 	bl	800460c <DHT_SetPinOut>

}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <DHT_ReadTempHum>:
  * @param  DHT: Pointer to a DHT_HandleTypeDef structure that contains
  * 		the configuration information for the specified DHT sensor.
  * @retval DHT status
  */
dht_err_t DHT_ReadTempHum(DHT_HandleTypeDef* DHT)
{
 8004904:	b5b0      	push	{r4, r5, r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	uint8_t data[DHT_DATA_BYTES] = {0};
 800490c:	2300      	movs	r3, #0
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	2300      	movs	r3, #0
 8004912:	733b      	strb	r3, [r7, #12]

	DHT_SetPinOut(DHT);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff fe79 	bl	800460c <DHT_SetPinOut>
	DHT_WritePin(DHT, GPIO_PIN_SET);
 800491a:	2101      	movs	r1, #1
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff feed 	bl	80046fc <DHT_WritePin>

	int ret = DHT_FetchData(DHT, data);
 8004922:	f107 0308 	add.w	r3, r7, #8
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff3b 	bl	80047a4 <DHT_FetchData>
 800492e:	6138      	str	r0, [r7, #16]
	if(ret) {
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d004      	beq.n	8004940 <DHT_ReadTempHum+0x3c>
		DHT->Error = ret;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	601a      	str	r2, [r3, #0]
		return ret;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	e064      	b.n	8004a0a <DHT_ReadTempHum+0x106>
	}

	for (int i = 0; i < DHT_DATA_BYTES; i++) {
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e00d      	b.n	8004962 <DHT_ReadTempHum+0x5e>
		DHT->raw_data[i] = data[i];
 8004946:	f107 0208 	add.w	r2, r7, #8
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	4413      	add	r3, r2
 800494e:	7819      	ldrb	r1, [r3, #0]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	4413      	add	r3, r2
 8004956:	3310      	adds	r3, #16
 8004958:	460a      	mov	r2, r1
 800495a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < DHT_DATA_BYTES; i++) {
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3301      	adds	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b04      	cmp	r3, #4
 8004966:	ddee      	ble.n	8004946 <DHT_ReadTempHum+0x42>

	}

	if(data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 8004968:	7b3b      	ldrb	r3, [r7, #12]
 800496a:	461a      	mov	r2, r3
 800496c:	7a3b      	ldrb	r3, [r7, #8]
 800496e:	4619      	mov	r1, r3
 8004970:	7a7b      	ldrb	r3, [r7, #9]
 8004972:	440b      	add	r3, r1
 8004974:	7ab9      	ldrb	r1, [r7, #10]
 8004976:	440b      	add	r3, r1
 8004978:	7af9      	ldrb	r1, [r7, #11]
 800497a:	440b      	add	r3, r1
 800497c:	b2db      	uxtb	r3, r3
 800497e:	429a      	cmp	r2, r3
 8004980:	d006      	beq.n	8004990 <DHT_ReadTempHum+0x8c>
		DHT->Error = DHT_ERR_INVALID_CRC;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004988:	601a      	str	r2, [r3, #0]
		return DHT_ERR_INVALID_CRC;
 800498a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800498e:	e03c      	b.n	8004a0a <DHT_ReadTempHum+0x106>
	}

	DHT->Temp = data[2] + data[3]/10.0;
 8004990:	7abb      	ldrb	r3, [r7, #10]
 8004992:	4618      	mov	r0, r3
 8004994:	f7fb fd36 	bl	8000404 <__aeabi_i2d>
 8004998:	4604      	mov	r4, r0
 800499a:	460d      	mov	r5, r1
 800499c:	7afb      	ldrb	r3, [r7, #11]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fb fd30 	bl	8000404 <__aeabi_i2d>
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <DHT_ReadTempHum+0x110>)
 80049aa:	f7fb febf 	bl	800072c <__aeabi_ddiv>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4620      	mov	r0, r4
 80049b4:	4629      	mov	r1, r5
 80049b6:	f7fb fbd9 	bl	800016c <__adddf3>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	f7fc f881 	bl	8000ac8 <__aeabi_d2f>
 80049c6:	4602      	mov	r2, r0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	619a      	str	r2, [r3, #24]
	DHT->Humi = data[0] + data[1]/10.0;
 80049cc:	7a3b      	ldrb	r3, [r7, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fb fd18 	bl	8000404 <__aeabi_i2d>
 80049d4:	4604      	mov	r4, r0
 80049d6:	460d      	mov	r5, r1
 80049d8:	7a7b      	ldrb	r3, [r7, #9]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fb fd12 	bl	8000404 <__aeabi_i2d>
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <DHT_ReadTempHum+0x110>)
 80049e6:	f7fb fea1 	bl	800072c <__aeabi_ddiv>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4620      	mov	r0, r4
 80049f0:	4629      	mov	r1, r5
 80049f2:	f7fb fbbb 	bl	800016c <__adddf3>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	f7fc f863 	bl	8000ac8 <__aeabi_d2f>
 8004a02:	4602      	mov	r2, r0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	61da      	str	r2, [r3, #28]

	return DHT_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bdb0      	pop	{r4, r5, r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40240000 	.word	0x40240000

08004a18 <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	f023 030f 	bic.w	r3, r3, #15
 8004a2a:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7a5a      	ldrb	r2, [r3, #9]
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f043 0304 	orr.w	r3, r3, #4
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7a5a      	ldrb	r2, [r3, #9]
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	7a5a      	ldrb	r2, [r3, #9]
 8004a54:	7bbb      	ldrb	r3, [r7, #14]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f043 0304 	orr.w	r3, r3, #4
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7a5a      	ldrb	r2, [r3, #9]
 8004a66:	7bbb      	ldrb	r3, [r7, #14]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6858      	ldr	r0, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	b299      	uxth	r1, r3
 8004a78:	f107 0208 	add.w	r2, r7, #8
 8004a7c:	2364      	movs	r3, #100	; 0x64
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	2304      	movs	r3, #4
 8004a82:	f7fd fad9 	bl	8002038 <HAL_I2C_Master_Transmit>
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af02      	add	r7, sp, #8
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	460b      	mov	r3, r1
 8004a98:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f023 030f 	bic.w	r3, r3, #15
 8004aa0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7a5a      	ldrb	r2, [r3, #9]
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f043 0305 	orr.w	r3, r3, #5
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	7a5a      	ldrb	r2, [r3, #9]
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	7a5a      	ldrb	r2, [r3, #9]
 8004ad0:	7bbb      	ldrb	r3, [r7, #14]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f043 0305 	orr.w	r3, r3, #5
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	7a5a      	ldrb	r2, [r3, #9]
 8004ae2:	7bbb      	ldrb	r3, [r7, #14]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6858      	ldr	r0, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	b299      	uxth	r1, r3
 8004afa:	f107 0208 	add.w	r2, r7, #8
 8004afe:	2364      	movs	r3, #100	; 0x64
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2304      	movs	r3, #4
 8004b04:	f7fd fa98 	bl	8002038 <HAL_I2C_Master_Transmit>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <lcd_set_cursor>:
	lcd->Backlightval = LCD_NOBACKLIGHT;
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <lcd_set_cursor+0x40>)
 8004b22:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	3310      	adds	r3, #16
 8004b28:	443b      	add	r3, r7
 8004b2a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8004b2e:	78bb      	ldrb	r3, [r7, #2]
 8004b30:	4413      	add	r3, r2
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	b25b      	sxtb	r3, r3
 8004b36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff69 	bl	8004a18 <lcd_send_cmd>
}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	54144000 	.word	0x54144000

08004b54 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7a1b      	ldrb	r3, [r3, #8]
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	7a1b      	ldrb	r3, [r3, #8]
 8004b6e:	f043 0308 	orr.w	r3, r3, #8
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ff4e 	bl	8004a18 <lcd_send_cmd>
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 8004b84:	b40e      	push	{r1, r2, r3}
 8004b86:	b590      	push	{r4, r7, lr}
 8004b88:	b08a      	sub	sp, #40	; 0x28
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 8004b8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b92:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 8004b94:	f107 0310 	add.w	r3, r7, #16
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fdd5 	bl	800674c <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ba8:	e00e      	b.n	8004bc8 <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 8004baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bae:	3328      	adds	r3, #40	; 0x28
 8004bb0:	443b      	add	r3, r7
 8004bb2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff68 	bl	8004a8e <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bc8:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8004bcc:	f107 0310 	add.w	r3, r7, #16
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fb fabd 	bl	8000150 <strlen>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	429c      	cmp	r4, r3
 8004bda:	d203      	bcs.n	8004be4 <lcd_printf+0x60>
 8004bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004be0:	2b0f      	cmp	r3, #15
 8004be2:	d9e2      	bls.n	8004baa <lcd_printf+0x26>
  }
}
 8004be4:	bf00      	nop
 8004be6:	3728      	adds	r7, #40	; 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004bee:	b003      	add	sp, #12
 8004bf0:	4770      	bx	lr

08004bf2 <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	7a1b      	ldrb	r3, [r3, #8]
 8004c14:	f043 0304 	orr.w	r3, r3, #4
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 8004c1e:	2133      	movs	r1, #51	; 0x33
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff fef9 	bl	8004a18 <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 8004c26:	2132      	movs	r1, #50	; 0x32
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff fef5 	bl	8004a18 <lcd_send_cmd>
	HAL_Delay(5);
 8004c2e:	2005      	movs	r0, #5
 8004c30:	f7fc fd28 	bl	8001684 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 8004c34:	2101      	movs	r1, #1
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff feee 	bl	8004a18 <lcd_send_cmd>
	HAL_Delay(5);
 8004c3c:	2005      	movs	r0, #5
 8004c3e:	f7fc fd21 	bl	8001684 <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 8004c42:	210c      	movs	r1, #12
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff fee7 	bl	8004a18 <lcd_send_cmd>
	HAL_Delay(5);
 8004c4a:	2005      	movs	r0, #5
 8004c4c:	f7fc fd1a 	bl	8001684 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 8004c50:	2102      	movs	r1, #2
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fee0 	bl	8004a18 <lcd_send_cmd>
	HAL_Delay(5);
 8004c58:	2005      	movs	r0, #5
 8004c5a:	f7fc fd13 	bl	8001684 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7ff fed9 	bl	8004a18 <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff ff74 	bl	8004b54 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2208      	movs	r2, #8
 8004c70:	725a      	strb	r2, [r3, #9]
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <__errno>:
 8004c7c:	4b01      	ldr	r3, [pc, #4]	; (8004c84 <__errno+0x8>)
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	2000000c 	.word	0x2000000c

08004c88 <__libc_init_array>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	2600      	movs	r6, #0
 8004c8c:	4d0c      	ldr	r5, [pc, #48]	; (8004cc0 <__libc_init_array+0x38>)
 8004c8e:	4c0d      	ldr	r4, [pc, #52]	; (8004cc4 <__libc_init_array+0x3c>)
 8004c90:	1b64      	subs	r4, r4, r5
 8004c92:	10a4      	asrs	r4, r4, #2
 8004c94:	42a6      	cmp	r6, r4
 8004c96:	d109      	bne.n	8004cac <__libc_init_array+0x24>
 8004c98:	f004 fc70 	bl	800957c <_init>
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	4d0a      	ldr	r5, [pc, #40]	; (8004cc8 <__libc_init_array+0x40>)
 8004ca0:	4c0a      	ldr	r4, [pc, #40]	; (8004ccc <__libc_init_array+0x44>)
 8004ca2:	1b64      	subs	r4, r4, r5
 8004ca4:	10a4      	asrs	r4, r4, #2
 8004ca6:	42a6      	cmp	r6, r4
 8004ca8:	d105      	bne.n	8004cb6 <__libc_init_array+0x2e>
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
 8004cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb0:	4798      	blx	r3
 8004cb2:	3601      	adds	r6, #1
 8004cb4:	e7ee      	b.n	8004c94 <__libc_init_array+0xc>
 8004cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cba:	4798      	blx	r3
 8004cbc:	3601      	adds	r6, #1
 8004cbe:	e7f2      	b.n	8004ca6 <__libc_init_array+0x1e>
 8004cc0:	08009ae4 	.word	0x08009ae4
 8004cc4:	08009ae4 	.word	0x08009ae4
 8004cc8:	08009ae4 	.word	0x08009ae4
 8004ccc:	08009ae8 	.word	0x08009ae8

08004cd0 <memset>:
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4402      	add	r2, r0
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d100      	bne.n	8004cda <memset+0xa>
 8004cd8:	4770      	bx	lr
 8004cda:	f803 1b01 	strb.w	r1, [r3], #1
 8004cde:	e7f9      	b.n	8004cd4 <memset+0x4>

08004ce0 <__cvt>:
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce6:	461f      	mov	r7, r3
 8004ce8:	bfbb      	ittet	lt
 8004cea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004cee:	461f      	movlt	r7, r3
 8004cf0:	2300      	movge	r3, #0
 8004cf2:	232d      	movlt	r3, #45	; 0x2d
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	4614      	mov	r4, r2
 8004cf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cfa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004cfc:	7013      	strb	r3, [r2, #0]
 8004cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d00:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d04:	f023 0820 	bic.w	r8, r3, #32
 8004d08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d0c:	d005      	beq.n	8004d1a <__cvt+0x3a>
 8004d0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d12:	d100      	bne.n	8004d16 <__cvt+0x36>
 8004d14:	3501      	adds	r5, #1
 8004d16:	2302      	movs	r3, #2
 8004d18:	e000      	b.n	8004d1c <__cvt+0x3c>
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	aa07      	add	r2, sp, #28
 8004d1e:	9204      	str	r2, [sp, #16]
 8004d20:	aa06      	add	r2, sp, #24
 8004d22:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d26:	e9cd 3500 	strd	r3, r5, [sp]
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	f001 fda3 	bl	8006878 <_dtoa_r>
 8004d32:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d36:	4606      	mov	r6, r0
 8004d38:	d102      	bne.n	8004d40 <__cvt+0x60>
 8004d3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d3c:	07db      	lsls	r3, r3, #31
 8004d3e:	d522      	bpl.n	8004d86 <__cvt+0xa6>
 8004d40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d44:	eb06 0905 	add.w	r9, r6, r5
 8004d48:	d110      	bne.n	8004d6c <__cvt+0x8c>
 8004d4a:	7833      	ldrb	r3, [r6, #0]
 8004d4c:	2b30      	cmp	r3, #48	; 0x30
 8004d4e:	d10a      	bne.n	8004d66 <__cvt+0x86>
 8004d50:	2200      	movs	r2, #0
 8004d52:	2300      	movs	r3, #0
 8004d54:	4620      	mov	r0, r4
 8004d56:	4639      	mov	r1, r7
 8004d58:	f7fb fe26 	bl	80009a8 <__aeabi_dcmpeq>
 8004d5c:	b918      	cbnz	r0, 8004d66 <__cvt+0x86>
 8004d5e:	f1c5 0501 	rsb	r5, r5, #1
 8004d62:	f8ca 5000 	str.w	r5, [sl]
 8004d66:	f8da 3000 	ldr.w	r3, [sl]
 8004d6a:	4499      	add	r9, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2300      	movs	r3, #0
 8004d70:	4620      	mov	r0, r4
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb fe18 	bl	80009a8 <__aeabi_dcmpeq>
 8004d78:	b108      	cbz	r0, 8004d7e <__cvt+0x9e>
 8004d7a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d7e:	2230      	movs	r2, #48	; 0x30
 8004d80:	9b07      	ldr	r3, [sp, #28]
 8004d82:	454b      	cmp	r3, r9
 8004d84:	d307      	bcc.n	8004d96 <__cvt+0xb6>
 8004d86:	4630      	mov	r0, r6
 8004d88:	9b07      	ldr	r3, [sp, #28]
 8004d8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d8c:	1b9b      	subs	r3, r3, r6
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	b008      	add	sp, #32
 8004d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d96:	1c59      	adds	r1, r3, #1
 8004d98:	9107      	str	r1, [sp, #28]
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e7f0      	b.n	8004d80 <__cvt+0xa0>

08004d9e <__exponent>:
 8004d9e:	4603      	mov	r3, r0
 8004da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004da2:	2900      	cmp	r1, #0
 8004da4:	f803 2b02 	strb.w	r2, [r3], #2
 8004da8:	bfb6      	itet	lt
 8004daa:	222d      	movlt	r2, #45	; 0x2d
 8004dac:	222b      	movge	r2, #43	; 0x2b
 8004dae:	4249      	neglt	r1, r1
 8004db0:	2909      	cmp	r1, #9
 8004db2:	7042      	strb	r2, [r0, #1]
 8004db4:	dd2b      	ble.n	8004e0e <__exponent+0x70>
 8004db6:	f10d 0407 	add.w	r4, sp, #7
 8004dba:	46a4      	mov	ip, r4
 8004dbc:	270a      	movs	r7, #10
 8004dbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	46a6      	mov	lr, r4
 8004dc6:	fb07 1516 	mls	r5, r7, r6, r1
 8004dca:	2a63      	cmp	r2, #99	; 0x63
 8004dcc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8004dd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004dda:	dcf0      	bgt.n	8004dbe <__exponent+0x20>
 8004ddc:	3130      	adds	r1, #48	; 0x30
 8004dde:	f1ae 0502 	sub.w	r5, lr, #2
 8004de2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004de6:	4629      	mov	r1, r5
 8004de8:	1c44      	adds	r4, r0, #1
 8004dea:	4561      	cmp	r1, ip
 8004dec:	d30a      	bcc.n	8004e04 <__exponent+0x66>
 8004dee:	f10d 0209 	add.w	r2, sp, #9
 8004df2:	eba2 020e 	sub.w	r2, r2, lr
 8004df6:	4565      	cmp	r5, ip
 8004df8:	bf88      	it	hi
 8004dfa:	2200      	movhi	r2, #0
 8004dfc:	4413      	add	r3, r2
 8004dfe:	1a18      	subs	r0, r3, r0
 8004e00:	b003      	add	sp, #12
 8004e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e08:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e0c:	e7ed      	b.n	8004dea <__exponent+0x4c>
 8004e0e:	2330      	movs	r3, #48	; 0x30
 8004e10:	3130      	adds	r1, #48	; 0x30
 8004e12:	7083      	strb	r3, [r0, #2]
 8004e14:	70c1      	strb	r1, [r0, #3]
 8004e16:	1d03      	adds	r3, r0, #4
 8004e18:	e7f1      	b.n	8004dfe <__exponent+0x60>
	...

08004e1c <_printf_float>:
 8004e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	b091      	sub	sp, #68	; 0x44
 8004e22:	460c      	mov	r4, r1
 8004e24:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e28:	4616      	mov	r6, r2
 8004e2a:	461f      	mov	r7, r3
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	f002 fe77 	bl	8007b20 <_localeconv_r>
 8004e32:	6803      	ldr	r3, [r0, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	9309      	str	r3, [sp, #36]	; 0x24
 8004e38:	f7fb f98a 	bl	8000150 <strlen>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	930e      	str	r3, [sp, #56]	; 0x38
 8004e40:	f8d8 3000 	ldr.w	r3, [r8]
 8004e44:	900a      	str	r0, [sp, #40]	; 0x28
 8004e46:	3307      	adds	r3, #7
 8004e48:	f023 0307 	bic.w	r3, r3, #7
 8004e4c:	f103 0208 	add.w	r2, r3, #8
 8004e50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e54:	f8d4 b000 	ldr.w	fp, [r4]
 8004e58:	f8c8 2000 	str.w	r2, [r8]
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e64:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e68:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e72:	4640      	mov	r0, r8
 8004e74:	4b9c      	ldr	r3, [pc, #624]	; (80050e8 <_printf_float+0x2cc>)
 8004e76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e78:	f7fb fdc8 	bl	8000a0c <__aeabi_dcmpun>
 8004e7c:	bb70      	cbnz	r0, 8004edc <_printf_float+0xc0>
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e82:	4640      	mov	r0, r8
 8004e84:	4b98      	ldr	r3, [pc, #608]	; (80050e8 <_printf_float+0x2cc>)
 8004e86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e88:	f7fb fda2 	bl	80009d0 <__aeabi_dcmple>
 8004e8c:	bb30      	cbnz	r0, 8004edc <_printf_float+0xc0>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2300      	movs	r3, #0
 8004e92:	4640      	mov	r0, r8
 8004e94:	4651      	mov	r1, sl
 8004e96:	f7fb fd91 	bl	80009bc <__aeabi_dcmplt>
 8004e9a:	b110      	cbz	r0, 8004ea2 <_printf_float+0x86>
 8004e9c:	232d      	movs	r3, #45	; 0x2d
 8004e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea2:	4b92      	ldr	r3, [pc, #584]	; (80050ec <_printf_float+0x2d0>)
 8004ea4:	4892      	ldr	r0, [pc, #584]	; (80050f0 <_printf_float+0x2d4>)
 8004ea6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004eaa:	bf94      	ite	ls
 8004eac:	4698      	movls	r8, r3
 8004eae:	4680      	movhi	r8, r0
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	f04f 0a00 	mov.w	sl, #0
 8004eb6:	6123      	str	r3, [r4, #16]
 8004eb8:	f02b 0304 	bic.w	r3, fp, #4
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	4633      	mov	r3, r6
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	9700      	str	r7, [sp, #0]
 8004ec6:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ec8:	f000 f9d4 	bl	8005274 <_printf_common>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	f040 8090 	bne.w	8004ff2 <_printf_float+0x1d6>
 8004ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed6:	b011      	add	sp, #68	; 0x44
 8004ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004edc:	4642      	mov	r2, r8
 8004ede:	4653      	mov	r3, sl
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	4651      	mov	r1, sl
 8004ee4:	f7fb fd92 	bl	8000a0c <__aeabi_dcmpun>
 8004ee8:	b148      	cbz	r0, 8004efe <_printf_float+0xe2>
 8004eea:	f1ba 0f00 	cmp.w	sl, #0
 8004eee:	bfb8      	it	lt
 8004ef0:	232d      	movlt	r3, #45	; 0x2d
 8004ef2:	4880      	ldr	r0, [pc, #512]	; (80050f4 <_printf_float+0x2d8>)
 8004ef4:	bfb8      	it	lt
 8004ef6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004efa:	4b7f      	ldr	r3, [pc, #508]	; (80050f8 <_printf_float+0x2dc>)
 8004efc:	e7d3      	b.n	8004ea6 <_printf_float+0x8a>
 8004efe:	6863      	ldr	r3, [r4, #4]
 8004f00:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	d142      	bne.n	8004f8e <_printf_float+0x172>
 8004f08:	2306      	movs	r3, #6
 8004f0a:	6063      	str	r3, [r4, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	9206      	str	r2, [sp, #24]
 8004f10:	aa0e      	add	r2, sp, #56	; 0x38
 8004f12:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f16:	aa0d      	add	r2, sp, #52	; 0x34
 8004f18:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f1c:	9203      	str	r2, [sp, #12]
 8004f1e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f22:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f26:	6023      	str	r3, [r4, #0]
 8004f28:	6863      	ldr	r3, [r4, #4]
 8004f2a:	4642      	mov	r2, r8
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4628      	mov	r0, r5
 8004f30:	4653      	mov	r3, sl
 8004f32:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f34:	f7ff fed4 	bl	8004ce0 <__cvt>
 8004f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f3a:	4680      	mov	r8, r0
 8004f3c:	2947      	cmp	r1, #71	; 0x47
 8004f3e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f40:	d108      	bne.n	8004f54 <_printf_float+0x138>
 8004f42:	1cc8      	adds	r0, r1, #3
 8004f44:	db02      	blt.n	8004f4c <_printf_float+0x130>
 8004f46:	6863      	ldr	r3, [r4, #4]
 8004f48:	4299      	cmp	r1, r3
 8004f4a:	dd40      	ble.n	8004fce <_printf_float+0x1b2>
 8004f4c:	f1a9 0902 	sub.w	r9, r9, #2
 8004f50:	fa5f f989 	uxtb.w	r9, r9
 8004f54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f58:	d81f      	bhi.n	8004f9a <_printf_float+0x17e>
 8004f5a:	464a      	mov	r2, r9
 8004f5c:	3901      	subs	r1, #1
 8004f5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f62:	910d      	str	r1, [sp, #52]	; 0x34
 8004f64:	f7ff ff1b 	bl	8004d9e <__exponent>
 8004f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f6a:	4682      	mov	sl, r0
 8004f6c:	1813      	adds	r3, r2, r0
 8004f6e:	2a01      	cmp	r2, #1
 8004f70:	6123      	str	r3, [r4, #16]
 8004f72:	dc02      	bgt.n	8004f7a <_printf_float+0x15e>
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	07d2      	lsls	r2, r2, #31
 8004f78:	d501      	bpl.n	8004f7e <_printf_float+0x162>
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d09b      	beq.n	8004ebe <_printf_float+0xa2>
 8004f86:	232d      	movs	r3, #45	; 0x2d
 8004f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f8c:	e797      	b.n	8004ebe <_printf_float+0xa2>
 8004f8e:	2947      	cmp	r1, #71	; 0x47
 8004f90:	d1bc      	bne.n	8004f0c <_printf_float+0xf0>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1ba      	bne.n	8004f0c <_printf_float+0xf0>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e7b7      	b.n	8004f0a <_printf_float+0xee>
 8004f9a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f9e:	d118      	bne.n	8004fd2 <_printf_float+0x1b6>
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	dd0b      	ble.n	8004fbe <_printf_float+0x1a2>
 8004fa6:	6121      	str	r1, [r4, #16]
 8004fa8:	b913      	cbnz	r3, 8004fb0 <_printf_float+0x194>
 8004faa:	6822      	ldr	r2, [r4, #0]
 8004fac:	07d0      	lsls	r0, r2, #31
 8004fae:	d502      	bpl.n	8004fb6 <_printf_float+0x19a>
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	440b      	add	r3, r1
 8004fb4:	6123      	str	r3, [r4, #16]
 8004fb6:	f04f 0a00 	mov.w	sl, #0
 8004fba:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fbc:	e7df      	b.n	8004f7e <_printf_float+0x162>
 8004fbe:	b913      	cbnz	r3, 8004fc6 <_printf_float+0x1aa>
 8004fc0:	6822      	ldr	r2, [r4, #0]
 8004fc2:	07d2      	lsls	r2, r2, #31
 8004fc4:	d501      	bpl.n	8004fca <_printf_float+0x1ae>
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	e7f4      	b.n	8004fb4 <_printf_float+0x198>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e7f2      	b.n	8004fb4 <_printf_float+0x198>
 8004fce:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	db05      	blt.n	8004fe4 <_printf_float+0x1c8>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	6121      	str	r1, [r4, #16]
 8004fdc:	07d8      	lsls	r0, r3, #31
 8004fde:	d5ea      	bpl.n	8004fb6 <_printf_float+0x19a>
 8004fe0:	1c4b      	adds	r3, r1, #1
 8004fe2:	e7e7      	b.n	8004fb4 <_printf_float+0x198>
 8004fe4:	2900      	cmp	r1, #0
 8004fe6:	bfcc      	ite	gt
 8004fe8:	2201      	movgt	r2, #1
 8004fea:	f1c1 0202 	rsble	r2, r1, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	e7e0      	b.n	8004fb4 <_printf_float+0x198>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	055a      	lsls	r2, r3, #21
 8004ff6:	d407      	bmi.n	8005008 <_printf_float+0x1ec>
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	4642      	mov	r2, r8
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	3001      	adds	r0, #1
 8005004:	d12b      	bne.n	800505e <_printf_float+0x242>
 8005006:	e764      	b.n	8004ed2 <_printf_float+0xb6>
 8005008:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800500c:	f240 80dd 	bls.w	80051ca <_printf_float+0x3ae>
 8005010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005014:	2200      	movs	r2, #0
 8005016:	2300      	movs	r3, #0
 8005018:	f7fb fcc6 	bl	80009a8 <__aeabi_dcmpeq>
 800501c:	2800      	cmp	r0, #0
 800501e:	d033      	beq.n	8005088 <_printf_float+0x26c>
 8005020:	2301      	movs	r3, #1
 8005022:	4631      	mov	r1, r6
 8005024:	4628      	mov	r0, r5
 8005026:	4a35      	ldr	r2, [pc, #212]	; (80050fc <_printf_float+0x2e0>)
 8005028:	47b8      	blx	r7
 800502a:	3001      	adds	r0, #1
 800502c:	f43f af51 	beq.w	8004ed2 <_printf_float+0xb6>
 8005030:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005034:	429a      	cmp	r2, r3
 8005036:	db02      	blt.n	800503e <_printf_float+0x222>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	07d8      	lsls	r0, r3, #31
 800503c:	d50f      	bpl.n	800505e <_printf_float+0x242>
 800503e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f af42 	beq.w	8004ed2 <_printf_float+0xb6>
 800504e:	f04f 0800 	mov.w	r8, #0
 8005052:	f104 091a 	add.w	r9, r4, #26
 8005056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005058:	3b01      	subs	r3, #1
 800505a:	4543      	cmp	r3, r8
 800505c:	dc09      	bgt.n	8005072 <_printf_float+0x256>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	079b      	lsls	r3, r3, #30
 8005062:	f100 8102 	bmi.w	800526a <_printf_float+0x44e>
 8005066:	68e0      	ldr	r0, [r4, #12]
 8005068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800506a:	4298      	cmp	r0, r3
 800506c:	bfb8      	it	lt
 800506e:	4618      	movlt	r0, r3
 8005070:	e731      	b.n	8004ed6 <_printf_float+0xba>
 8005072:	2301      	movs	r3, #1
 8005074:	464a      	mov	r2, r9
 8005076:	4631      	mov	r1, r6
 8005078:	4628      	mov	r0, r5
 800507a:	47b8      	blx	r7
 800507c:	3001      	adds	r0, #1
 800507e:	f43f af28 	beq.w	8004ed2 <_printf_float+0xb6>
 8005082:	f108 0801 	add.w	r8, r8, #1
 8005086:	e7e6      	b.n	8005056 <_printf_float+0x23a>
 8005088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800508a:	2b00      	cmp	r3, #0
 800508c:	dc38      	bgt.n	8005100 <_printf_float+0x2e4>
 800508e:	2301      	movs	r3, #1
 8005090:	4631      	mov	r1, r6
 8005092:	4628      	mov	r0, r5
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <_printf_float+0x2e0>)
 8005096:	47b8      	blx	r7
 8005098:	3001      	adds	r0, #1
 800509a:	f43f af1a 	beq.w	8004ed2 <_printf_float+0xb6>
 800509e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050a2:	4313      	orrs	r3, r2
 80050a4:	d102      	bne.n	80050ac <_printf_float+0x290>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	07d9      	lsls	r1, r3, #31
 80050aa:	d5d8      	bpl.n	800505e <_printf_float+0x242>
 80050ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050b0:	4631      	mov	r1, r6
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b8      	blx	r7
 80050b6:	3001      	adds	r0, #1
 80050b8:	f43f af0b 	beq.w	8004ed2 <_printf_float+0xb6>
 80050bc:	f04f 0900 	mov.w	r9, #0
 80050c0:	f104 0a1a 	add.w	sl, r4, #26
 80050c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050c6:	425b      	negs	r3, r3
 80050c8:	454b      	cmp	r3, r9
 80050ca:	dc01      	bgt.n	80050d0 <_printf_float+0x2b4>
 80050cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050ce:	e794      	b.n	8004ffa <_printf_float+0x1de>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4652      	mov	r2, sl
 80050d4:	4631      	mov	r1, r6
 80050d6:	4628      	mov	r0, r5
 80050d8:	47b8      	blx	r7
 80050da:	3001      	adds	r0, #1
 80050dc:	f43f aef9 	beq.w	8004ed2 <_printf_float+0xb6>
 80050e0:	f109 0901 	add.w	r9, r9, #1
 80050e4:	e7ee      	b.n	80050c4 <_printf_float+0x2a8>
 80050e6:	bf00      	nop
 80050e8:	7fefffff 	.word	0x7fefffff
 80050ec:	08009640 	.word	0x08009640
 80050f0:	08009644 	.word	0x08009644
 80050f4:	0800964c 	.word	0x0800964c
 80050f8:	08009648 	.word	0x08009648
 80050fc:	08009650 	.word	0x08009650
 8005100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005102:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005104:	429a      	cmp	r2, r3
 8005106:	bfa8      	it	ge
 8005108:	461a      	movge	r2, r3
 800510a:	2a00      	cmp	r2, #0
 800510c:	4691      	mov	r9, r2
 800510e:	dc37      	bgt.n	8005180 <_printf_float+0x364>
 8005110:	f04f 0b00 	mov.w	fp, #0
 8005114:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005118:	f104 021a 	add.w	r2, r4, #26
 800511c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005120:	ebaa 0309 	sub.w	r3, sl, r9
 8005124:	455b      	cmp	r3, fp
 8005126:	dc33      	bgt.n	8005190 <_printf_float+0x374>
 8005128:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800512c:	429a      	cmp	r2, r3
 800512e:	db3b      	blt.n	80051a8 <_printf_float+0x38c>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	07da      	lsls	r2, r3, #31
 8005134:	d438      	bmi.n	80051a8 <_printf_float+0x38c>
 8005136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005138:	990d      	ldr	r1, [sp, #52]	; 0x34
 800513a:	eba3 020a 	sub.w	r2, r3, sl
 800513e:	eba3 0901 	sub.w	r9, r3, r1
 8005142:	4591      	cmp	r9, r2
 8005144:	bfa8      	it	ge
 8005146:	4691      	movge	r9, r2
 8005148:	f1b9 0f00 	cmp.w	r9, #0
 800514c:	dc34      	bgt.n	80051b8 <_printf_float+0x39c>
 800514e:	f04f 0800 	mov.w	r8, #0
 8005152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005156:	f104 0a1a 	add.w	sl, r4, #26
 800515a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	eba3 0309 	sub.w	r3, r3, r9
 8005164:	4543      	cmp	r3, r8
 8005166:	f77f af7a 	ble.w	800505e <_printf_float+0x242>
 800516a:	2301      	movs	r3, #1
 800516c:	4652      	mov	r2, sl
 800516e:	4631      	mov	r1, r6
 8005170:	4628      	mov	r0, r5
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	f43f aeac 	beq.w	8004ed2 <_printf_float+0xb6>
 800517a:	f108 0801 	add.w	r8, r8, #1
 800517e:	e7ec      	b.n	800515a <_printf_float+0x33e>
 8005180:	4613      	mov	r3, r2
 8005182:	4631      	mov	r1, r6
 8005184:	4642      	mov	r2, r8
 8005186:	4628      	mov	r0, r5
 8005188:	47b8      	blx	r7
 800518a:	3001      	adds	r0, #1
 800518c:	d1c0      	bne.n	8005110 <_printf_float+0x2f4>
 800518e:	e6a0      	b.n	8004ed2 <_printf_float+0xb6>
 8005190:	2301      	movs	r3, #1
 8005192:	4631      	mov	r1, r6
 8005194:	4628      	mov	r0, r5
 8005196:	920b      	str	r2, [sp, #44]	; 0x2c
 8005198:	47b8      	blx	r7
 800519a:	3001      	adds	r0, #1
 800519c:	f43f ae99 	beq.w	8004ed2 <_printf_float+0xb6>
 80051a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051a2:	f10b 0b01 	add.w	fp, fp, #1
 80051a6:	e7b9      	b.n	800511c <_printf_float+0x300>
 80051a8:	4631      	mov	r1, r6
 80051aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	d1bf      	bne.n	8005136 <_printf_float+0x31a>
 80051b6:	e68c      	b.n	8004ed2 <_printf_float+0xb6>
 80051b8:	464b      	mov	r3, r9
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	eb08 020a 	add.w	r2, r8, sl
 80051c2:	47b8      	blx	r7
 80051c4:	3001      	adds	r0, #1
 80051c6:	d1c2      	bne.n	800514e <_printf_float+0x332>
 80051c8:	e683      	b.n	8004ed2 <_printf_float+0xb6>
 80051ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051cc:	2a01      	cmp	r2, #1
 80051ce:	dc01      	bgt.n	80051d4 <_printf_float+0x3b8>
 80051d0:	07db      	lsls	r3, r3, #31
 80051d2:	d537      	bpl.n	8005244 <_printf_float+0x428>
 80051d4:	2301      	movs	r3, #1
 80051d6:	4642      	mov	r2, r8
 80051d8:	4631      	mov	r1, r6
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	f43f ae77 	beq.w	8004ed2 <_printf_float+0xb6>
 80051e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051e8:	4631      	mov	r1, r6
 80051ea:	4628      	mov	r0, r5
 80051ec:	47b8      	blx	r7
 80051ee:	3001      	adds	r0, #1
 80051f0:	f43f ae6f 	beq.w	8004ed2 <_printf_float+0xb6>
 80051f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051f8:	2200      	movs	r2, #0
 80051fa:	2300      	movs	r3, #0
 80051fc:	f7fb fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8005200:	b9d8      	cbnz	r0, 800523a <_printf_float+0x41e>
 8005202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005204:	f108 0201 	add.w	r2, r8, #1
 8005208:	3b01      	subs	r3, #1
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	d10e      	bne.n	8005232 <_printf_float+0x416>
 8005214:	e65d      	b.n	8004ed2 <_printf_float+0xb6>
 8005216:	2301      	movs	r3, #1
 8005218:	464a      	mov	r2, r9
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f ae56 	beq.w	8004ed2 <_printf_float+0xb6>
 8005226:	f108 0801 	add.w	r8, r8, #1
 800522a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800522c:	3b01      	subs	r3, #1
 800522e:	4543      	cmp	r3, r8
 8005230:	dcf1      	bgt.n	8005216 <_printf_float+0x3fa>
 8005232:	4653      	mov	r3, sl
 8005234:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005238:	e6e0      	b.n	8004ffc <_printf_float+0x1e0>
 800523a:	f04f 0800 	mov.w	r8, #0
 800523e:	f104 091a 	add.w	r9, r4, #26
 8005242:	e7f2      	b.n	800522a <_printf_float+0x40e>
 8005244:	2301      	movs	r3, #1
 8005246:	4642      	mov	r2, r8
 8005248:	e7df      	b.n	800520a <_printf_float+0x3ee>
 800524a:	2301      	movs	r3, #1
 800524c:	464a      	mov	r2, r9
 800524e:	4631      	mov	r1, r6
 8005250:	4628      	mov	r0, r5
 8005252:	47b8      	blx	r7
 8005254:	3001      	adds	r0, #1
 8005256:	f43f ae3c 	beq.w	8004ed2 <_printf_float+0xb6>
 800525a:	f108 0801 	add.w	r8, r8, #1
 800525e:	68e3      	ldr	r3, [r4, #12]
 8005260:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005262:	1a5b      	subs	r3, r3, r1
 8005264:	4543      	cmp	r3, r8
 8005266:	dcf0      	bgt.n	800524a <_printf_float+0x42e>
 8005268:	e6fd      	b.n	8005066 <_printf_float+0x24a>
 800526a:	f04f 0800 	mov.w	r8, #0
 800526e:	f104 0919 	add.w	r9, r4, #25
 8005272:	e7f4      	b.n	800525e <_printf_float+0x442>

08005274 <_printf_common>:
 8005274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005278:	4616      	mov	r6, r2
 800527a:	4699      	mov	r9, r3
 800527c:	688a      	ldr	r2, [r1, #8]
 800527e:	690b      	ldr	r3, [r1, #16]
 8005280:	4607      	mov	r7, r0
 8005282:	4293      	cmp	r3, r2
 8005284:	bfb8      	it	lt
 8005286:	4613      	movlt	r3, r2
 8005288:	6033      	str	r3, [r6, #0]
 800528a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800528e:	460c      	mov	r4, r1
 8005290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005294:	b10a      	cbz	r2, 800529a <_printf_common+0x26>
 8005296:	3301      	adds	r3, #1
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	0699      	lsls	r1, r3, #26
 800529e:	bf42      	ittt	mi
 80052a0:	6833      	ldrmi	r3, [r6, #0]
 80052a2:	3302      	addmi	r3, #2
 80052a4:	6033      	strmi	r3, [r6, #0]
 80052a6:	6825      	ldr	r5, [r4, #0]
 80052a8:	f015 0506 	ands.w	r5, r5, #6
 80052ac:	d106      	bne.n	80052bc <_printf_common+0x48>
 80052ae:	f104 0a19 	add.w	sl, r4, #25
 80052b2:	68e3      	ldr	r3, [r4, #12]
 80052b4:	6832      	ldr	r2, [r6, #0]
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	42ab      	cmp	r3, r5
 80052ba:	dc28      	bgt.n	800530e <_printf_common+0x9a>
 80052bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052c0:	1e13      	subs	r3, r2, #0
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	bf18      	it	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	0692      	lsls	r2, r2, #26
 80052ca:	d42d      	bmi.n	8005328 <_printf_common+0xb4>
 80052cc:	4649      	mov	r1, r9
 80052ce:	4638      	mov	r0, r7
 80052d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d4:	47c0      	blx	r8
 80052d6:	3001      	adds	r0, #1
 80052d8:	d020      	beq.n	800531c <_printf_common+0xa8>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	68e5      	ldr	r5, [r4, #12]
 80052de:	f003 0306 	and.w	r3, r3, #6
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	bf18      	it	ne
 80052e6:	2500      	movne	r5, #0
 80052e8:	6832      	ldr	r2, [r6, #0]
 80052ea:	f04f 0600 	mov.w	r6, #0
 80052ee:	68a3      	ldr	r3, [r4, #8]
 80052f0:	bf08      	it	eq
 80052f2:	1aad      	subeq	r5, r5, r2
 80052f4:	6922      	ldr	r2, [r4, #16]
 80052f6:	bf08      	it	eq
 80052f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052fc:	4293      	cmp	r3, r2
 80052fe:	bfc4      	itt	gt
 8005300:	1a9b      	subgt	r3, r3, r2
 8005302:	18ed      	addgt	r5, r5, r3
 8005304:	341a      	adds	r4, #26
 8005306:	42b5      	cmp	r5, r6
 8005308:	d11a      	bne.n	8005340 <_printf_common+0xcc>
 800530a:	2000      	movs	r0, #0
 800530c:	e008      	b.n	8005320 <_printf_common+0xac>
 800530e:	2301      	movs	r3, #1
 8005310:	4652      	mov	r2, sl
 8005312:	4649      	mov	r1, r9
 8005314:	4638      	mov	r0, r7
 8005316:	47c0      	blx	r8
 8005318:	3001      	adds	r0, #1
 800531a:	d103      	bne.n	8005324 <_printf_common+0xb0>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005324:	3501      	adds	r5, #1
 8005326:	e7c4      	b.n	80052b2 <_printf_common+0x3e>
 8005328:	2030      	movs	r0, #48	; 0x30
 800532a:	18e1      	adds	r1, r4, r3
 800532c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005336:	4422      	add	r2, r4
 8005338:	3302      	adds	r3, #2
 800533a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800533e:	e7c5      	b.n	80052cc <_printf_common+0x58>
 8005340:	2301      	movs	r3, #1
 8005342:	4622      	mov	r2, r4
 8005344:	4649      	mov	r1, r9
 8005346:	4638      	mov	r0, r7
 8005348:	47c0      	blx	r8
 800534a:	3001      	adds	r0, #1
 800534c:	d0e6      	beq.n	800531c <_printf_common+0xa8>
 800534e:	3601      	adds	r6, #1
 8005350:	e7d9      	b.n	8005306 <_printf_common+0x92>
	...

08005354 <_printf_i>:
 8005354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005358:	7e0f      	ldrb	r7, [r1, #24]
 800535a:	4691      	mov	r9, r2
 800535c:	2f78      	cmp	r7, #120	; 0x78
 800535e:	4680      	mov	r8, r0
 8005360:	460c      	mov	r4, r1
 8005362:	469a      	mov	sl, r3
 8005364:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800536a:	d807      	bhi.n	800537c <_printf_i+0x28>
 800536c:	2f62      	cmp	r7, #98	; 0x62
 800536e:	d80a      	bhi.n	8005386 <_printf_i+0x32>
 8005370:	2f00      	cmp	r7, #0
 8005372:	f000 80d9 	beq.w	8005528 <_printf_i+0x1d4>
 8005376:	2f58      	cmp	r7, #88	; 0x58
 8005378:	f000 80a4 	beq.w	80054c4 <_printf_i+0x170>
 800537c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005384:	e03a      	b.n	80053fc <_printf_i+0xa8>
 8005386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800538a:	2b15      	cmp	r3, #21
 800538c:	d8f6      	bhi.n	800537c <_printf_i+0x28>
 800538e:	a101      	add	r1, pc, #4	; (adr r1, 8005394 <_printf_i+0x40>)
 8005390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005394:	080053ed 	.word	0x080053ed
 8005398:	08005401 	.word	0x08005401
 800539c:	0800537d 	.word	0x0800537d
 80053a0:	0800537d 	.word	0x0800537d
 80053a4:	0800537d 	.word	0x0800537d
 80053a8:	0800537d 	.word	0x0800537d
 80053ac:	08005401 	.word	0x08005401
 80053b0:	0800537d 	.word	0x0800537d
 80053b4:	0800537d 	.word	0x0800537d
 80053b8:	0800537d 	.word	0x0800537d
 80053bc:	0800537d 	.word	0x0800537d
 80053c0:	0800550f 	.word	0x0800550f
 80053c4:	08005431 	.word	0x08005431
 80053c8:	080054f1 	.word	0x080054f1
 80053cc:	0800537d 	.word	0x0800537d
 80053d0:	0800537d 	.word	0x0800537d
 80053d4:	08005531 	.word	0x08005531
 80053d8:	0800537d 	.word	0x0800537d
 80053dc:	08005431 	.word	0x08005431
 80053e0:	0800537d 	.word	0x0800537d
 80053e4:	0800537d 	.word	0x0800537d
 80053e8:	080054f9 	.word	0x080054f9
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	1d1a      	adds	r2, r3, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	602a      	str	r2, [r5, #0]
 80053f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0a4      	b.n	800554a <_printf_i+0x1f6>
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	6829      	ldr	r1, [r5, #0]
 8005404:	0606      	lsls	r6, r0, #24
 8005406:	f101 0304 	add.w	r3, r1, #4
 800540a:	d50a      	bpl.n	8005422 <_printf_i+0xce>
 800540c:	680e      	ldr	r6, [r1, #0]
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	2e00      	cmp	r6, #0
 8005412:	da03      	bge.n	800541c <_printf_i+0xc8>
 8005414:	232d      	movs	r3, #45	; 0x2d
 8005416:	4276      	negs	r6, r6
 8005418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800541c:	230a      	movs	r3, #10
 800541e:	485e      	ldr	r0, [pc, #376]	; (8005598 <_printf_i+0x244>)
 8005420:	e019      	b.n	8005456 <_printf_i+0x102>
 8005422:	680e      	ldr	r6, [r1, #0]
 8005424:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	bf18      	it	ne
 800542c:	b236      	sxthne	r6, r6
 800542e:	e7ef      	b.n	8005410 <_printf_i+0xbc>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	1d19      	adds	r1, r3, #4
 8005436:	6029      	str	r1, [r5, #0]
 8005438:	0601      	lsls	r1, r0, #24
 800543a:	d501      	bpl.n	8005440 <_printf_i+0xec>
 800543c:	681e      	ldr	r6, [r3, #0]
 800543e:	e002      	b.n	8005446 <_printf_i+0xf2>
 8005440:	0646      	lsls	r6, r0, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0xe8>
 8005444:	881e      	ldrh	r6, [r3, #0]
 8005446:	2f6f      	cmp	r7, #111	; 0x6f
 8005448:	bf0c      	ite	eq
 800544a:	2308      	moveq	r3, #8
 800544c:	230a      	movne	r3, #10
 800544e:	4852      	ldr	r0, [pc, #328]	; (8005598 <_printf_i+0x244>)
 8005450:	2100      	movs	r1, #0
 8005452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005456:	6865      	ldr	r5, [r4, #4]
 8005458:	2d00      	cmp	r5, #0
 800545a:	bfa8      	it	ge
 800545c:	6821      	ldrge	r1, [r4, #0]
 800545e:	60a5      	str	r5, [r4, #8]
 8005460:	bfa4      	itt	ge
 8005462:	f021 0104 	bicge.w	r1, r1, #4
 8005466:	6021      	strge	r1, [r4, #0]
 8005468:	b90e      	cbnz	r6, 800546e <_printf_i+0x11a>
 800546a:	2d00      	cmp	r5, #0
 800546c:	d04d      	beq.n	800550a <_printf_i+0x1b6>
 800546e:	4615      	mov	r5, r2
 8005470:	fbb6 f1f3 	udiv	r1, r6, r3
 8005474:	fb03 6711 	mls	r7, r3, r1, r6
 8005478:	5dc7      	ldrb	r7, [r0, r7]
 800547a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800547e:	4637      	mov	r7, r6
 8005480:	42bb      	cmp	r3, r7
 8005482:	460e      	mov	r6, r1
 8005484:	d9f4      	bls.n	8005470 <_printf_i+0x11c>
 8005486:	2b08      	cmp	r3, #8
 8005488:	d10b      	bne.n	80054a2 <_printf_i+0x14e>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	07de      	lsls	r6, r3, #31
 800548e:	d508      	bpl.n	80054a2 <_printf_i+0x14e>
 8005490:	6923      	ldr	r3, [r4, #16]
 8005492:	6861      	ldr	r1, [r4, #4]
 8005494:	4299      	cmp	r1, r3
 8005496:	bfde      	ittt	le
 8005498:	2330      	movle	r3, #48	; 0x30
 800549a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800549e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054a2:	1b52      	subs	r2, r2, r5
 80054a4:	6122      	str	r2, [r4, #16]
 80054a6:	464b      	mov	r3, r9
 80054a8:	4621      	mov	r1, r4
 80054aa:	4640      	mov	r0, r8
 80054ac:	f8cd a000 	str.w	sl, [sp]
 80054b0:	aa03      	add	r2, sp, #12
 80054b2:	f7ff fedf 	bl	8005274 <_printf_common>
 80054b6:	3001      	adds	r0, #1
 80054b8:	d14c      	bne.n	8005554 <_printf_i+0x200>
 80054ba:	f04f 30ff 	mov.w	r0, #4294967295
 80054be:	b004      	add	sp, #16
 80054c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c4:	4834      	ldr	r0, [pc, #208]	; (8005598 <_printf_i+0x244>)
 80054c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054ca:	6829      	ldr	r1, [r5, #0]
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80054d2:	6029      	str	r1, [r5, #0]
 80054d4:	061d      	lsls	r5, r3, #24
 80054d6:	d514      	bpl.n	8005502 <_printf_i+0x1ae>
 80054d8:	07df      	lsls	r7, r3, #31
 80054da:	bf44      	itt	mi
 80054dc:	f043 0320 	orrmi.w	r3, r3, #32
 80054e0:	6023      	strmi	r3, [r4, #0]
 80054e2:	b91e      	cbnz	r6, 80054ec <_printf_i+0x198>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	f023 0320 	bic.w	r3, r3, #32
 80054ea:	6023      	str	r3, [r4, #0]
 80054ec:	2310      	movs	r3, #16
 80054ee:	e7af      	b.n	8005450 <_printf_i+0xfc>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	f043 0320 	orr.w	r3, r3, #32
 80054f6:	6023      	str	r3, [r4, #0]
 80054f8:	2378      	movs	r3, #120	; 0x78
 80054fa:	4828      	ldr	r0, [pc, #160]	; (800559c <_printf_i+0x248>)
 80054fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005500:	e7e3      	b.n	80054ca <_printf_i+0x176>
 8005502:	0659      	lsls	r1, r3, #25
 8005504:	bf48      	it	mi
 8005506:	b2b6      	uxthmi	r6, r6
 8005508:	e7e6      	b.n	80054d8 <_printf_i+0x184>
 800550a:	4615      	mov	r5, r2
 800550c:	e7bb      	b.n	8005486 <_printf_i+0x132>
 800550e:	682b      	ldr	r3, [r5, #0]
 8005510:	6826      	ldr	r6, [r4, #0]
 8005512:	1d18      	adds	r0, r3, #4
 8005514:	6961      	ldr	r1, [r4, #20]
 8005516:	6028      	str	r0, [r5, #0]
 8005518:	0635      	lsls	r5, r6, #24
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	d501      	bpl.n	8005522 <_printf_i+0x1ce>
 800551e:	6019      	str	r1, [r3, #0]
 8005520:	e002      	b.n	8005528 <_printf_i+0x1d4>
 8005522:	0670      	lsls	r0, r6, #25
 8005524:	d5fb      	bpl.n	800551e <_printf_i+0x1ca>
 8005526:	8019      	strh	r1, [r3, #0]
 8005528:	2300      	movs	r3, #0
 800552a:	4615      	mov	r5, r2
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	e7ba      	b.n	80054a6 <_printf_i+0x152>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	2100      	movs	r1, #0
 8005534:	1d1a      	adds	r2, r3, #4
 8005536:	602a      	str	r2, [r5, #0]
 8005538:	681d      	ldr	r5, [r3, #0]
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	4628      	mov	r0, r5
 800553e:	f002 fb0d 	bl	8007b5c <memchr>
 8005542:	b108      	cbz	r0, 8005548 <_printf_i+0x1f4>
 8005544:	1b40      	subs	r0, r0, r5
 8005546:	6060      	str	r0, [r4, #4]
 8005548:	6863      	ldr	r3, [r4, #4]
 800554a:	6123      	str	r3, [r4, #16]
 800554c:	2300      	movs	r3, #0
 800554e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005552:	e7a8      	b.n	80054a6 <_printf_i+0x152>
 8005554:	462a      	mov	r2, r5
 8005556:	4649      	mov	r1, r9
 8005558:	4640      	mov	r0, r8
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	47d0      	blx	sl
 800555e:	3001      	adds	r0, #1
 8005560:	d0ab      	beq.n	80054ba <_printf_i+0x166>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	079b      	lsls	r3, r3, #30
 8005566:	d413      	bmi.n	8005590 <_printf_i+0x23c>
 8005568:	68e0      	ldr	r0, [r4, #12]
 800556a:	9b03      	ldr	r3, [sp, #12]
 800556c:	4298      	cmp	r0, r3
 800556e:	bfb8      	it	lt
 8005570:	4618      	movlt	r0, r3
 8005572:	e7a4      	b.n	80054be <_printf_i+0x16a>
 8005574:	2301      	movs	r3, #1
 8005576:	4632      	mov	r2, r6
 8005578:	4649      	mov	r1, r9
 800557a:	4640      	mov	r0, r8
 800557c:	47d0      	blx	sl
 800557e:	3001      	adds	r0, #1
 8005580:	d09b      	beq.n	80054ba <_printf_i+0x166>
 8005582:	3501      	adds	r5, #1
 8005584:	68e3      	ldr	r3, [r4, #12]
 8005586:	9903      	ldr	r1, [sp, #12]
 8005588:	1a5b      	subs	r3, r3, r1
 800558a:	42ab      	cmp	r3, r5
 800558c:	dcf2      	bgt.n	8005574 <_printf_i+0x220>
 800558e:	e7eb      	b.n	8005568 <_printf_i+0x214>
 8005590:	2500      	movs	r5, #0
 8005592:	f104 0619 	add.w	r6, r4, #25
 8005596:	e7f5      	b.n	8005584 <_printf_i+0x230>
 8005598:	08009652 	.word	0x08009652
 800559c:	08009663 	.word	0x08009663

080055a0 <_scanf_float>:
 80055a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	b087      	sub	sp, #28
 80055a6:	9303      	str	r3, [sp, #12]
 80055a8:	688b      	ldr	r3, [r1, #8]
 80055aa:	4617      	mov	r7, r2
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80055b2:	bf85      	ittet	hi
 80055b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80055b8:	195b      	addhi	r3, r3, r5
 80055ba:	2300      	movls	r3, #0
 80055bc:	9302      	strhi	r3, [sp, #8]
 80055be:	bf88      	it	hi
 80055c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80055c4:	468b      	mov	fp, r1
 80055c6:	f04f 0500 	mov.w	r5, #0
 80055ca:	bf8c      	ite	hi
 80055cc:	608b      	strhi	r3, [r1, #8]
 80055ce:	9302      	strls	r3, [sp, #8]
 80055d0:	680b      	ldr	r3, [r1, #0]
 80055d2:	4680      	mov	r8, r0
 80055d4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80055d8:	f84b 3b1c 	str.w	r3, [fp], #28
 80055dc:	460c      	mov	r4, r1
 80055de:	465e      	mov	r6, fp
 80055e0:	46aa      	mov	sl, r5
 80055e2:	46a9      	mov	r9, r5
 80055e4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055e8:	9501      	str	r5, [sp, #4]
 80055ea:	68a2      	ldr	r2, [r4, #8]
 80055ec:	b152      	cbz	r2, 8005604 <_scanf_float+0x64>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b4e      	cmp	r3, #78	; 0x4e
 80055f4:	d864      	bhi.n	80056c0 <_scanf_float+0x120>
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d83c      	bhi.n	8005674 <_scanf_float+0xd4>
 80055fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80055fe:	b2c8      	uxtb	r0, r1
 8005600:	280e      	cmp	r0, #14
 8005602:	d93a      	bls.n	800567a <_scanf_float+0xda>
 8005604:	f1b9 0f00 	cmp.w	r9, #0
 8005608:	d003      	beq.n	8005612 <_scanf_float+0x72>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005616:	f1ba 0f01 	cmp.w	sl, #1
 800561a:	f200 8113 	bhi.w	8005844 <_scanf_float+0x2a4>
 800561e:	455e      	cmp	r6, fp
 8005620:	f200 8105 	bhi.w	800582e <_scanf_float+0x28e>
 8005624:	2501      	movs	r5, #1
 8005626:	4628      	mov	r0, r5
 8005628:	b007      	add	sp, #28
 800562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005632:	2a0d      	cmp	r2, #13
 8005634:	d8e6      	bhi.n	8005604 <_scanf_float+0x64>
 8005636:	a101      	add	r1, pc, #4	; (adr r1, 800563c <_scanf_float+0x9c>)
 8005638:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800563c:	0800577b 	.word	0x0800577b
 8005640:	08005605 	.word	0x08005605
 8005644:	08005605 	.word	0x08005605
 8005648:	08005605 	.word	0x08005605
 800564c:	080057db 	.word	0x080057db
 8005650:	080057b3 	.word	0x080057b3
 8005654:	08005605 	.word	0x08005605
 8005658:	08005605 	.word	0x08005605
 800565c:	08005789 	.word	0x08005789
 8005660:	08005605 	.word	0x08005605
 8005664:	08005605 	.word	0x08005605
 8005668:	08005605 	.word	0x08005605
 800566c:	08005605 	.word	0x08005605
 8005670:	08005741 	.word	0x08005741
 8005674:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005678:	e7db      	b.n	8005632 <_scanf_float+0x92>
 800567a:	290e      	cmp	r1, #14
 800567c:	d8c2      	bhi.n	8005604 <_scanf_float+0x64>
 800567e:	a001      	add	r0, pc, #4	; (adr r0, 8005684 <_scanf_float+0xe4>)
 8005680:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005684:	08005733 	.word	0x08005733
 8005688:	08005605 	.word	0x08005605
 800568c:	08005733 	.word	0x08005733
 8005690:	080057c7 	.word	0x080057c7
 8005694:	08005605 	.word	0x08005605
 8005698:	080056e1 	.word	0x080056e1
 800569c:	0800571d 	.word	0x0800571d
 80056a0:	0800571d 	.word	0x0800571d
 80056a4:	0800571d 	.word	0x0800571d
 80056a8:	0800571d 	.word	0x0800571d
 80056ac:	0800571d 	.word	0x0800571d
 80056b0:	0800571d 	.word	0x0800571d
 80056b4:	0800571d 	.word	0x0800571d
 80056b8:	0800571d 	.word	0x0800571d
 80056bc:	0800571d 	.word	0x0800571d
 80056c0:	2b6e      	cmp	r3, #110	; 0x6e
 80056c2:	d809      	bhi.n	80056d8 <_scanf_float+0x138>
 80056c4:	2b60      	cmp	r3, #96	; 0x60
 80056c6:	d8b2      	bhi.n	800562e <_scanf_float+0x8e>
 80056c8:	2b54      	cmp	r3, #84	; 0x54
 80056ca:	d077      	beq.n	80057bc <_scanf_float+0x21c>
 80056cc:	2b59      	cmp	r3, #89	; 0x59
 80056ce:	d199      	bne.n	8005604 <_scanf_float+0x64>
 80056d0:	2d07      	cmp	r5, #7
 80056d2:	d197      	bne.n	8005604 <_scanf_float+0x64>
 80056d4:	2508      	movs	r5, #8
 80056d6:	e029      	b.n	800572c <_scanf_float+0x18c>
 80056d8:	2b74      	cmp	r3, #116	; 0x74
 80056da:	d06f      	beq.n	80057bc <_scanf_float+0x21c>
 80056dc:	2b79      	cmp	r3, #121	; 0x79
 80056de:	e7f6      	b.n	80056ce <_scanf_float+0x12e>
 80056e0:	6821      	ldr	r1, [r4, #0]
 80056e2:	05c8      	lsls	r0, r1, #23
 80056e4:	d51a      	bpl.n	800571c <_scanf_float+0x17c>
 80056e6:	9b02      	ldr	r3, [sp, #8]
 80056e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80056ec:	6021      	str	r1, [r4, #0]
 80056ee:	f109 0901 	add.w	r9, r9, #1
 80056f2:	b11b      	cbz	r3, 80056fc <_scanf_float+0x15c>
 80056f4:	3b01      	subs	r3, #1
 80056f6:	3201      	adds	r2, #1
 80056f8:	9302      	str	r3, [sp, #8]
 80056fa:	60a2      	str	r2, [r4, #8]
 80056fc:	68a3      	ldr	r3, [r4, #8]
 80056fe:	3b01      	subs	r3, #1
 8005700:	60a3      	str	r3, [r4, #8]
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	3301      	adds	r3, #1
 8005706:	6123      	str	r3, [r4, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3b01      	subs	r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	f340 8084 	ble.w	800581c <_scanf_float+0x27c>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	e766      	b.n	80055ea <_scanf_float+0x4a>
 800571c:	eb1a 0f05 	cmn.w	sl, r5
 8005720:	f47f af70 	bne.w	8005604 <_scanf_float+0x64>
 8005724:	6822      	ldr	r2, [r4, #0]
 8005726:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800572a:	6022      	str	r2, [r4, #0]
 800572c:	f806 3b01 	strb.w	r3, [r6], #1
 8005730:	e7e4      	b.n	80056fc <_scanf_float+0x15c>
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	0610      	lsls	r0, r2, #24
 8005736:	f57f af65 	bpl.w	8005604 <_scanf_float+0x64>
 800573a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800573e:	e7f4      	b.n	800572a <_scanf_float+0x18a>
 8005740:	f1ba 0f00 	cmp.w	sl, #0
 8005744:	d10e      	bne.n	8005764 <_scanf_float+0x1c4>
 8005746:	f1b9 0f00 	cmp.w	r9, #0
 800574a:	d10e      	bne.n	800576a <_scanf_float+0x1ca>
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005752:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005756:	d108      	bne.n	800576a <_scanf_float+0x1ca>
 8005758:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800575c:	f04f 0a01 	mov.w	sl, #1
 8005760:	6022      	str	r2, [r4, #0]
 8005762:	e7e3      	b.n	800572c <_scanf_float+0x18c>
 8005764:	f1ba 0f02 	cmp.w	sl, #2
 8005768:	d055      	beq.n	8005816 <_scanf_float+0x276>
 800576a:	2d01      	cmp	r5, #1
 800576c:	d002      	beq.n	8005774 <_scanf_float+0x1d4>
 800576e:	2d04      	cmp	r5, #4
 8005770:	f47f af48 	bne.w	8005604 <_scanf_float+0x64>
 8005774:	3501      	adds	r5, #1
 8005776:	b2ed      	uxtb	r5, r5
 8005778:	e7d8      	b.n	800572c <_scanf_float+0x18c>
 800577a:	f1ba 0f01 	cmp.w	sl, #1
 800577e:	f47f af41 	bne.w	8005604 <_scanf_float+0x64>
 8005782:	f04f 0a02 	mov.w	sl, #2
 8005786:	e7d1      	b.n	800572c <_scanf_float+0x18c>
 8005788:	b97d      	cbnz	r5, 80057aa <_scanf_float+0x20a>
 800578a:	f1b9 0f00 	cmp.w	r9, #0
 800578e:	f47f af3c 	bne.w	800560a <_scanf_float+0x6a>
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005798:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800579c:	f47f af39 	bne.w	8005612 <_scanf_float+0x72>
 80057a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057a4:	2501      	movs	r5, #1
 80057a6:	6022      	str	r2, [r4, #0]
 80057a8:	e7c0      	b.n	800572c <_scanf_float+0x18c>
 80057aa:	2d03      	cmp	r5, #3
 80057ac:	d0e2      	beq.n	8005774 <_scanf_float+0x1d4>
 80057ae:	2d05      	cmp	r5, #5
 80057b0:	e7de      	b.n	8005770 <_scanf_float+0x1d0>
 80057b2:	2d02      	cmp	r5, #2
 80057b4:	f47f af26 	bne.w	8005604 <_scanf_float+0x64>
 80057b8:	2503      	movs	r5, #3
 80057ba:	e7b7      	b.n	800572c <_scanf_float+0x18c>
 80057bc:	2d06      	cmp	r5, #6
 80057be:	f47f af21 	bne.w	8005604 <_scanf_float+0x64>
 80057c2:	2507      	movs	r5, #7
 80057c4:	e7b2      	b.n	800572c <_scanf_float+0x18c>
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	0591      	lsls	r1, r2, #22
 80057ca:	f57f af1b 	bpl.w	8005604 <_scanf_float+0x64>
 80057ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80057d2:	6022      	str	r2, [r4, #0]
 80057d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80057d8:	e7a8      	b.n	800572c <_scanf_float+0x18c>
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80057e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80057e4:	d006      	beq.n	80057f4 <_scanf_float+0x254>
 80057e6:	0550      	lsls	r0, r2, #21
 80057e8:	f57f af0c 	bpl.w	8005604 <_scanf_float+0x64>
 80057ec:	f1b9 0f00 	cmp.w	r9, #0
 80057f0:	f43f af0f 	beq.w	8005612 <_scanf_float+0x72>
 80057f4:	0591      	lsls	r1, r2, #22
 80057f6:	bf58      	it	pl
 80057f8:	9901      	ldrpl	r1, [sp, #4]
 80057fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057fe:	bf58      	it	pl
 8005800:	eba9 0101 	subpl.w	r1, r9, r1
 8005804:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005808:	f04f 0900 	mov.w	r9, #0
 800580c:	bf58      	it	pl
 800580e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005812:	6022      	str	r2, [r4, #0]
 8005814:	e78a      	b.n	800572c <_scanf_float+0x18c>
 8005816:	f04f 0a03 	mov.w	sl, #3
 800581a:	e787      	b.n	800572c <_scanf_float+0x18c>
 800581c:	4639      	mov	r1, r7
 800581e:	4640      	mov	r0, r8
 8005820:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005824:	4798      	blx	r3
 8005826:	2800      	cmp	r0, #0
 8005828:	f43f aedf 	beq.w	80055ea <_scanf_float+0x4a>
 800582c:	e6ea      	b.n	8005604 <_scanf_float+0x64>
 800582e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005832:	463a      	mov	r2, r7
 8005834:	4640      	mov	r0, r8
 8005836:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800583a:	4798      	blx	r3
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	3b01      	subs	r3, #1
 8005840:	6123      	str	r3, [r4, #16]
 8005842:	e6ec      	b.n	800561e <_scanf_float+0x7e>
 8005844:	1e6b      	subs	r3, r5, #1
 8005846:	2b06      	cmp	r3, #6
 8005848:	d825      	bhi.n	8005896 <_scanf_float+0x2f6>
 800584a:	2d02      	cmp	r5, #2
 800584c:	d836      	bhi.n	80058bc <_scanf_float+0x31c>
 800584e:	455e      	cmp	r6, fp
 8005850:	f67f aee8 	bls.w	8005624 <_scanf_float+0x84>
 8005854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005858:	463a      	mov	r2, r7
 800585a:	4640      	mov	r0, r8
 800585c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005860:	4798      	blx	r3
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	3b01      	subs	r3, #1
 8005866:	6123      	str	r3, [r4, #16]
 8005868:	e7f1      	b.n	800584e <_scanf_float+0x2ae>
 800586a:	9802      	ldr	r0, [sp, #8]
 800586c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005870:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005874:	463a      	mov	r2, r7
 8005876:	9002      	str	r0, [sp, #8]
 8005878:	4640      	mov	r0, r8
 800587a:	4798      	blx	r3
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	3b01      	subs	r3, #1
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005886:	fa5f fa8a 	uxtb.w	sl, sl
 800588a:	f1ba 0f02 	cmp.w	sl, #2
 800588e:	d1ec      	bne.n	800586a <_scanf_float+0x2ca>
 8005890:	3d03      	subs	r5, #3
 8005892:	b2ed      	uxtb	r5, r5
 8005894:	1b76      	subs	r6, r6, r5
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	05da      	lsls	r2, r3, #23
 800589a:	d52f      	bpl.n	80058fc <_scanf_float+0x35c>
 800589c:	055b      	lsls	r3, r3, #21
 800589e:	d510      	bpl.n	80058c2 <_scanf_float+0x322>
 80058a0:	455e      	cmp	r6, fp
 80058a2:	f67f aebf 	bls.w	8005624 <_scanf_float+0x84>
 80058a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058aa:	463a      	mov	r2, r7
 80058ac:	4640      	mov	r0, r8
 80058ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058b2:	4798      	blx	r3
 80058b4:	6923      	ldr	r3, [r4, #16]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	6123      	str	r3, [r4, #16]
 80058ba:	e7f1      	b.n	80058a0 <_scanf_float+0x300>
 80058bc:	46aa      	mov	sl, r5
 80058be:	9602      	str	r6, [sp, #8]
 80058c0:	e7df      	b.n	8005882 <_scanf_float+0x2e2>
 80058c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	2965      	cmp	r1, #101	; 0x65
 80058ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80058ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	d00c      	beq.n	80058f0 <_scanf_float+0x350>
 80058d6:	2945      	cmp	r1, #69	; 0x45
 80058d8:	d00a      	beq.n	80058f0 <_scanf_float+0x350>
 80058da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058de:	463a      	mov	r2, r7
 80058e0:	4640      	mov	r0, r8
 80058e2:	4798      	blx	r3
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	1eb5      	subs	r5, r6, #2
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	463a      	mov	r2, r7
 80058f2:	4640      	mov	r0, r8
 80058f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058f8:	4798      	blx	r3
 80058fa:	462e      	mov	r6, r5
 80058fc:	6825      	ldr	r5, [r4, #0]
 80058fe:	f015 0510 	ands.w	r5, r5, #16
 8005902:	d155      	bne.n	80059b0 <_scanf_float+0x410>
 8005904:	7035      	strb	r5, [r6, #0]
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800590c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005910:	d11b      	bne.n	800594a <_scanf_float+0x3aa>
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	454b      	cmp	r3, r9
 8005916:	eba3 0209 	sub.w	r2, r3, r9
 800591a:	d123      	bne.n	8005964 <_scanf_float+0x3c4>
 800591c:	2200      	movs	r2, #0
 800591e:	4659      	mov	r1, fp
 8005920:	4640      	mov	r0, r8
 8005922:	f000 fe79 	bl	8006618 <_strtod_r>
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	9b03      	ldr	r3, [sp, #12]
 800592a:	f012 0f02 	tst.w	r2, #2
 800592e:	4606      	mov	r6, r0
 8005930:	460f      	mov	r7, r1
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	d021      	beq.n	800597a <_scanf_float+0x3da>
 8005936:	1d1a      	adds	r2, r3, #4
 8005938:	9903      	ldr	r1, [sp, #12]
 800593a:	600a      	str	r2, [r1, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	e9c3 6700 	strd	r6, r7, [r3]
 8005942:	68e3      	ldr	r3, [r4, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60e3      	str	r3, [r4, #12]
 8005948:	e66d      	b.n	8005626 <_scanf_float+0x86>
 800594a:	9b04      	ldr	r3, [sp, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0e5      	beq.n	800591c <_scanf_float+0x37c>
 8005950:	9905      	ldr	r1, [sp, #20]
 8005952:	230a      	movs	r3, #10
 8005954:	462a      	mov	r2, r5
 8005956:	4640      	mov	r0, r8
 8005958:	3101      	adds	r1, #1
 800595a:	f000 fedf 	bl	800671c <_strtol_r>
 800595e:	9b04      	ldr	r3, [sp, #16]
 8005960:	9e05      	ldr	r6, [sp, #20]
 8005962:	1ac2      	subs	r2, r0, r3
 8005964:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005968:	429e      	cmp	r6, r3
 800596a:	bf28      	it	cs
 800596c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005970:	4630      	mov	r0, r6
 8005972:	4910      	ldr	r1, [pc, #64]	; (80059b4 <_scanf_float+0x414>)
 8005974:	f000 f826 	bl	80059c4 <siprintf>
 8005978:	e7d0      	b.n	800591c <_scanf_float+0x37c>
 800597a:	f012 0f04 	tst.w	r2, #4
 800597e:	f103 0204 	add.w	r2, r3, #4
 8005982:	d1d9      	bne.n	8005938 <_scanf_float+0x398>
 8005984:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005988:	f8cc 2000 	str.w	r2, [ip]
 800598c:	f8d3 8000 	ldr.w	r8, [r3]
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	f7fb f83a 	bl	8000a0c <__aeabi_dcmpun>
 8005998:	b128      	cbz	r0, 80059a6 <_scanf_float+0x406>
 800599a:	4807      	ldr	r0, [pc, #28]	; (80059b8 <_scanf_float+0x418>)
 800599c:	f000 f80e 	bl	80059bc <nanf>
 80059a0:	f8c8 0000 	str.w	r0, [r8]
 80059a4:	e7cd      	b.n	8005942 <_scanf_float+0x3a2>
 80059a6:	4630      	mov	r0, r6
 80059a8:	4639      	mov	r1, r7
 80059aa:	f7fb f88d 	bl	8000ac8 <__aeabi_d2f>
 80059ae:	e7f7      	b.n	80059a0 <_scanf_float+0x400>
 80059b0:	2500      	movs	r5, #0
 80059b2:	e638      	b.n	8005626 <_scanf_float+0x86>
 80059b4:	08009674 	.word	0x08009674
 80059b8:	08009a80 	.word	0x08009a80

080059bc <nanf>:
 80059bc:	4800      	ldr	r0, [pc, #0]	; (80059c0 <nanf+0x4>)
 80059be:	4770      	bx	lr
 80059c0:	7fc00000 	.word	0x7fc00000

080059c4 <siprintf>:
 80059c4:	b40e      	push	{r1, r2, r3}
 80059c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059ca:	b500      	push	{lr}
 80059cc:	b09c      	sub	sp, #112	; 0x70
 80059ce:	ab1d      	add	r3, sp, #116	; 0x74
 80059d0:	9002      	str	r0, [sp, #8]
 80059d2:	9006      	str	r0, [sp, #24]
 80059d4:	9107      	str	r1, [sp, #28]
 80059d6:	9104      	str	r1, [sp, #16]
 80059d8:	4808      	ldr	r0, [pc, #32]	; (80059fc <siprintf+0x38>)
 80059da:	4909      	ldr	r1, [pc, #36]	; (8005a00 <siprintf+0x3c>)
 80059dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e0:	9105      	str	r1, [sp, #20]
 80059e2:	6800      	ldr	r0, [r0, #0]
 80059e4:	a902      	add	r1, sp, #8
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	f002 fed8 	bl	800879c <_svfiprintf_r>
 80059ec:	2200      	movs	r2, #0
 80059ee:	9b02      	ldr	r3, [sp, #8]
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	b01c      	add	sp, #112	; 0x70
 80059f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059f8:	b003      	add	sp, #12
 80059fa:	4770      	bx	lr
 80059fc:	2000000c 	.word	0x2000000c
 8005a00:	ffff0208 	.word	0xffff0208

08005a04 <sulp>:
 8005a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a08:	460f      	mov	r7, r1
 8005a0a:	4690      	mov	r8, r2
 8005a0c:	f002 fc32 	bl	8008274 <__ulp>
 8005a10:	4604      	mov	r4, r0
 8005a12:	460d      	mov	r5, r1
 8005a14:	f1b8 0f00 	cmp.w	r8, #0
 8005a18:	d011      	beq.n	8005a3e <sulp+0x3a>
 8005a1a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dd0b      	ble.n	8005a3e <sulp+0x3a>
 8005a26:	2400      	movs	r4, #0
 8005a28:	051b      	lsls	r3, r3, #20
 8005a2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a32:	4622      	mov	r2, r4
 8005a34:	462b      	mov	r3, r5
 8005a36:	f7fa fd4f 	bl	80004d8 <__aeabi_dmul>
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	460d      	mov	r5, r1
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4629      	mov	r1, r5
 8005a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005a48 <_strtod_l>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	469b      	mov	fp, r3
 8005a4e:	2300      	movs	r3, #0
 8005a50:	b09f      	sub	sp, #124	; 0x7c
 8005a52:	931a      	str	r3, [sp, #104]	; 0x68
 8005a54:	4b9e      	ldr	r3, [pc, #632]	; (8005cd0 <_strtod_l+0x288>)
 8005a56:	4682      	mov	sl, r0
 8005a58:	681f      	ldr	r7, [r3, #0]
 8005a5a:	460e      	mov	r6, r1
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	9215      	str	r2, [sp, #84]	; 0x54
 8005a60:	f7fa fb76 	bl	8000150 <strlen>
 8005a64:	f04f 0800 	mov.w	r8, #0
 8005a68:	4604      	mov	r4, r0
 8005a6a:	f04f 0900 	mov.w	r9, #0
 8005a6e:	9619      	str	r6, [sp, #100]	; 0x64
 8005a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a72:	781a      	ldrb	r2, [r3, #0]
 8005a74:	2a2b      	cmp	r2, #43	; 0x2b
 8005a76:	d04c      	beq.n	8005b12 <_strtod_l+0xca>
 8005a78:	d83a      	bhi.n	8005af0 <_strtod_l+0xa8>
 8005a7a:	2a0d      	cmp	r2, #13
 8005a7c:	d833      	bhi.n	8005ae6 <_strtod_l+0x9e>
 8005a7e:	2a08      	cmp	r2, #8
 8005a80:	d833      	bhi.n	8005aea <_strtod_l+0xa2>
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	d03d      	beq.n	8005b02 <_strtod_l+0xba>
 8005a86:	2300      	movs	r3, #0
 8005a88:	930a      	str	r3, [sp, #40]	; 0x28
 8005a8a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005a8c:	782b      	ldrb	r3, [r5, #0]
 8005a8e:	2b30      	cmp	r3, #48	; 0x30
 8005a90:	f040 80aa 	bne.w	8005be8 <_strtod_l+0x1a0>
 8005a94:	786b      	ldrb	r3, [r5, #1]
 8005a96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a9a:	2b58      	cmp	r3, #88	; 0x58
 8005a9c:	d166      	bne.n	8005b6c <_strtod_l+0x124>
 8005a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa0:	4650      	mov	r0, sl
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	ab1a      	add	r3, sp, #104	; 0x68
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	4a8a      	ldr	r2, [pc, #552]	; (8005cd4 <_strtod_l+0x28c>)
 8005aaa:	f8cd b008 	str.w	fp, [sp, #8]
 8005aae:	ab1b      	add	r3, sp, #108	; 0x6c
 8005ab0:	a919      	add	r1, sp, #100	; 0x64
 8005ab2:	f001 fd37 	bl	8007524 <__gethex>
 8005ab6:	f010 0607 	ands.w	r6, r0, #7
 8005aba:	4604      	mov	r4, r0
 8005abc:	d005      	beq.n	8005aca <_strtod_l+0x82>
 8005abe:	2e06      	cmp	r6, #6
 8005ac0:	d129      	bne.n	8005b16 <_strtod_l+0xce>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	9519      	str	r5, [sp, #100]	; 0x64
 8005ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8005aca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 858a 	bne.w	80065e6 <_strtod_l+0xb9e>
 8005ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad4:	b1d3      	cbz	r3, 8005b0c <_strtod_l+0xc4>
 8005ad6:	4642      	mov	r2, r8
 8005ad8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005adc:	4610      	mov	r0, r2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	b01f      	add	sp, #124	; 0x7c
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae6:	2a20      	cmp	r2, #32
 8005ae8:	d1cd      	bne.n	8005a86 <_strtod_l+0x3e>
 8005aea:	3301      	adds	r3, #1
 8005aec:	9319      	str	r3, [sp, #100]	; 0x64
 8005aee:	e7bf      	b.n	8005a70 <_strtod_l+0x28>
 8005af0:	2a2d      	cmp	r2, #45	; 0x2d
 8005af2:	d1c8      	bne.n	8005a86 <_strtod_l+0x3e>
 8005af4:	2201      	movs	r2, #1
 8005af6:	920a      	str	r2, [sp, #40]	; 0x28
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	9219      	str	r2, [sp, #100]	; 0x64
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1c3      	bne.n	8005a8a <_strtod_l+0x42>
 8005b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b04:	9619      	str	r6, [sp, #100]	; 0x64
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f040 856b 	bne.w	80065e2 <_strtod_l+0xb9a>
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	e7e4      	b.n	8005adc <_strtod_l+0x94>
 8005b12:	2200      	movs	r2, #0
 8005b14:	e7ef      	b.n	8005af6 <_strtod_l+0xae>
 8005b16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005b18:	b13a      	cbz	r2, 8005b2a <_strtod_l+0xe2>
 8005b1a:	2135      	movs	r1, #53	; 0x35
 8005b1c:	a81c      	add	r0, sp, #112	; 0x70
 8005b1e:	f002 fcad 	bl	800847c <__copybits>
 8005b22:	4650      	mov	r0, sl
 8005b24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b26:	f002 f875 	bl	8007c14 <_Bfree>
 8005b2a:	3e01      	subs	r6, #1
 8005b2c:	2e04      	cmp	r6, #4
 8005b2e:	d806      	bhi.n	8005b3e <_strtod_l+0xf6>
 8005b30:	e8df f006 	tbb	[pc, r6]
 8005b34:	1714030a 	.word	0x1714030a
 8005b38:	0a          	.byte	0x0a
 8005b39:	00          	.byte	0x00
 8005b3a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005b3e:	0721      	lsls	r1, r4, #28
 8005b40:	d5c3      	bpl.n	8005aca <_strtod_l+0x82>
 8005b42:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005b46:	e7c0      	b.n	8005aca <_strtod_l+0x82>
 8005b48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005b4a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005b4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b56:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005b5a:	e7f0      	b.n	8005b3e <_strtod_l+0xf6>
 8005b5c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005cd8 <_strtod_l+0x290>
 8005b60:	e7ed      	b.n	8005b3e <_strtod_l+0xf6>
 8005b62:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005b66:	f04f 38ff 	mov.w	r8, #4294967295
 8005b6a:	e7e8      	b.n	8005b3e <_strtod_l+0xf6>
 8005b6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	9219      	str	r2, [sp, #100]	; 0x64
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	2b30      	cmp	r3, #48	; 0x30
 8005b76:	d0f9      	beq.n	8005b6c <_strtod_l+0x124>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0a6      	beq.n	8005aca <_strtod_l+0x82>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	9307      	str	r3, [sp, #28]
 8005b80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b82:	220a      	movs	r2, #10
 8005b84:	9308      	str	r3, [sp, #32]
 8005b86:	2300      	movs	r3, #0
 8005b88:	469b      	mov	fp, r3
 8005b8a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005b8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005b90:	7805      	ldrb	r5, [r0, #0]
 8005b92:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005b96:	b2d9      	uxtb	r1, r3
 8005b98:	2909      	cmp	r1, #9
 8005b9a:	d927      	bls.n	8005bec <_strtod_l+0x1a4>
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	f002 ff12 	bl	80089c8 <strncmp>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d033      	beq.n	8005c10 <_strtod_l+0x1c8>
 8005ba8:	2000      	movs	r0, #0
 8005baa:	462a      	mov	r2, r5
 8005bac:	465c      	mov	r4, fp
 8005bae:	4603      	mov	r3, r0
 8005bb0:	9004      	str	r0, [sp, #16]
 8005bb2:	2a65      	cmp	r2, #101	; 0x65
 8005bb4:	d001      	beq.n	8005bba <_strtod_l+0x172>
 8005bb6:	2a45      	cmp	r2, #69	; 0x45
 8005bb8:	d114      	bne.n	8005be4 <_strtod_l+0x19c>
 8005bba:	b91c      	cbnz	r4, 8005bc4 <_strtod_l+0x17c>
 8005bbc:	9a07      	ldr	r2, [sp, #28]
 8005bbe:	4302      	orrs	r2, r0
 8005bc0:	d09f      	beq.n	8005b02 <_strtod_l+0xba>
 8005bc2:	2400      	movs	r4, #0
 8005bc4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005bc6:	1c72      	adds	r2, r6, #1
 8005bc8:	9219      	str	r2, [sp, #100]	; 0x64
 8005bca:	7872      	ldrb	r2, [r6, #1]
 8005bcc:	2a2b      	cmp	r2, #43	; 0x2b
 8005bce:	d079      	beq.n	8005cc4 <_strtod_l+0x27c>
 8005bd0:	2a2d      	cmp	r2, #45	; 0x2d
 8005bd2:	f000 8083 	beq.w	8005cdc <_strtod_l+0x294>
 8005bd6:	2700      	movs	r7, #0
 8005bd8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005bdc:	2909      	cmp	r1, #9
 8005bde:	f240 8083 	bls.w	8005ce8 <_strtod_l+0x2a0>
 8005be2:	9619      	str	r6, [sp, #100]	; 0x64
 8005be4:	2500      	movs	r5, #0
 8005be6:	e09f      	b.n	8005d28 <_strtod_l+0x2e0>
 8005be8:	2300      	movs	r3, #0
 8005bea:	e7c8      	b.n	8005b7e <_strtod_l+0x136>
 8005bec:	f1bb 0f08 	cmp.w	fp, #8
 8005bf0:	bfd5      	itete	le
 8005bf2:	9906      	ldrle	r1, [sp, #24]
 8005bf4:	9905      	ldrgt	r1, [sp, #20]
 8005bf6:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bfa:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005bfe:	f100 0001 	add.w	r0, r0, #1
 8005c02:	bfd4      	ite	le
 8005c04:	9306      	strle	r3, [sp, #24]
 8005c06:	9305      	strgt	r3, [sp, #20]
 8005c08:	f10b 0b01 	add.w	fp, fp, #1
 8005c0c:	9019      	str	r0, [sp, #100]	; 0x64
 8005c0e:	e7be      	b.n	8005b8e <_strtod_l+0x146>
 8005c10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c12:	191a      	adds	r2, r3, r4
 8005c14:	9219      	str	r2, [sp, #100]	; 0x64
 8005c16:	5d1a      	ldrb	r2, [r3, r4]
 8005c18:	f1bb 0f00 	cmp.w	fp, #0
 8005c1c:	d036      	beq.n	8005c8c <_strtod_l+0x244>
 8005c1e:	465c      	mov	r4, fp
 8005c20:	9004      	str	r0, [sp, #16]
 8005c22:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c26:	2b09      	cmp	r3, #9
 8005c28:	d912      	bls.n	8005c50 <_strtod_l+0x208>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e7c1      	b.n	8005bb2 <_strtod_l+0x16a>
 8005c2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c30:	3001      	adds	r0, #1
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	9219      	str	r2, [sp, #100]	; 0x64
 8005c36:	785a      	ldrb	r2, [r3, #1]
 8005c38:	2a30      	cmp	r2, #48	; 0x30
 8005c3a:	d0f8      	beq.n	8005c2e <_strtod_l+0x1e6>
 8005c3c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	f200 84d5 	bhi.w	80065f0 <_strtod_l+0xba8>
 8005c46:	9004      	str	r0, [sp, #16]
 8005c48:	2000      	movs	r0, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c4e:	9308      	str	r3, [sp, #32]
 8005c50:	3a30      	subs	r2, #48	; 0x30
 8005c52:	f100 0301 	add.w	r3, r0, #1
 8005c56:	d013      	beq.n	8005c80 <_strtod_l+0x238>
 8005c58:	9904      	ldr	r1, [sp, #16]
 8005c5a:	1905      	adds	r5, r0, r4
 8005c5c:	4419      	add	r1, r3
 8005c5e:	9104      	str	r1, [sp, #16]
 8005c60:	4623      	mov	r3, r4
 8005c62:	210a      	movs	r1, #10
 8005c64:	42ab      	cmp	r3, r5
 8005c66:	d113      	bne.n	8005c90 <_strtod_l+0x248>
 8005c68:	1823      	adds	r3, r4, r0
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	f104 0401 	add.w	r4, r4, #1
 8005c70:	4404      	add	r4, r0
 8005c72:	dc1b      	bgt.n	8005cac <_strtod_l+0x264>
 8005c74:	230a      	movs	r3, #10
 8005c76:	9906      	ldr	r1, [sp, #24]
 8005c78:	fb03 2301 	mla	r3, r3, r1, r2
 8005c7c:	9306      	str	r3, [sp, #24]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c82:	4618      	mov	r0, r3
 8005c84:	1c51      	adds	r1, r2, #1
 8005c86:	9119      	str	r1, [sp, #100]	; 0x64
 8005c88:	7852      	ldrb	r2, [r2, #1]
 8005c8a:	e7ca      	b.n	8005c22 <_strtod_l+0x1da>
 8005c8c:	4658      	mov	r0, fp
 8005c8e:	e7d3      	b.n	8005c38 <_strtod_l+0x1f0>
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	dc04      	bgt.n	8005c9e <_strtod_l+0x256>
 8005c94:	9f06      	ldr	r7, [sp, #24]
 8005c96:	434f      	muls	r7, r1
 8005c98:	9706      	str	r7, [sp, #24]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	e7e2      	b.n	8005c64 <_strtod_l+0x21c>
 8005c9e:	1c5f      	adds	r7, r3, #1
 8005ca0:	2f10      	cmp	r7, #16
 8005ca2:	bfde      	ittt	le
 8005ca4:	9f05      	ldrle	r7, [sp, #20]
 8005ca6:	434f      	mulle	r7, r1
 8005ca8:	9705      	strle	r7, [sp, #20]
 8005caa:	e7f6      	b.n	8005c9a <_strtod_l+0x252>
 8005cac:	2c10      	cmp	r4, #16
 8005cae:	bfdf      	itttt	le
 8005cb0:	230a      	movle	r3, #10
 8005cb2:	9905      	ldrle	r1, [sp, #20]
 8005cb4:	fb03 2301 	mlale	r3, r3, r1, r2
 8005cb8:	9305      	strle	r3, [sp, #20]
 8005cba:	e7e0      	b.n	8005c7e <_strtod_l+0x236>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e77b      	b.n	8005bbc <_strtod_l+0x174>
 8005cc4:	2700      	movs	r7, #0
 8005cc6:	1cb2      	adds	r2, r6, #2
 8005cc8:	9219      	str	r2, [sp, #100]	; 0x64
 8005cca:	78b2      	ldrb	r2, [r6, #2]
 8005ccc:	e784      	b.n	8005bd8 <_strtod_l+0x190>
 8005cce:	bf00      	nop
 8005cd0:	080098c8 	.word	0x080098c8
 8005cd4:	0800967c 	.word	0x0800967c
 8005cd8:	7ff00000 	.word	0x7ff00000
 8005cdc:	2701      	movs	r7, #1
 8005cde:	e7f2      	b.n	8005cc6 <_strtod_l+0x27e>
 8005ce0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ce2:	1c51      	adds	r1, r2, #1
 8005ce4:	9119      	str	r1, [sp, #100]	; 0x64
 8005ce6:	7852      	ldrb	r2, [r2, #1]
 8005ce8:	2a30      	cmp	r2, #48	; 0x30
 8005cea:	d0f9      	beq.n	8005ce0 <_strtod_l+0x298>
 8005cec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005cf0:	2908      	cmp	r1, #8
 8005cf2:	f63f af77 	bhi.w	8005be4 <_strtod_l+0x19c>
 8005cf6:	f04f 0e0a 	mov.w	lr, #10
 8005cfa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005cfe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d00:	9209      	str	r2, [sp, #36]	; 0x24
 8005d02:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d04:	1c51      	adds	r1, r2, #1
 8005d06:	9119      	str	r1, [sp, #100]	; 0x64
 8005d08:	7852      	ldrb	r2, [r2, #1]
 8005d0a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005d0e:	2d09      	cmp	r5, #9
 8005d10:	d935      	bls.n	8005d7e <_strtod_l+0x336>
 8005d12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d14:	1b49      	subs	r1, r1, r5
 8005d16:	2908      	cmp	r1, #8
 8005d18:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005d1c:	dc02      	bgt.n	8005d24 <_strtod_l+0x2dc>
 8005d1e:	4565      	cmp	r5, ip
 8005d20:	bfa8      	it	ge
 8005d22:	4665      	movge	r5, ip
 8005d24:	b107      	cbz	r7, 8005d28 <_strtod_l+0x2e0>
 8005d26:	426d      	negs	r5, r5
 8005d28:	2c00      	cmp	r4, #0
 8005d2a:	d14c      	bne.n	8005dc6 <_strtod_l+0x37e>
 8005d2c:	9907      	ldr	r1, [sp, #28]
 8005d2e:	4301      	orrs	r1, r0
 8005d30:	f47f aecb 	bne.w	8005aca <_strtod_l+0x82>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f47f aee4 	bne.w	8005b02 <_strtod_l+0xba>
 8005d3a:	2a69      	cmp	r2, #105	; 0x69
 8005d3c:	d026      	beq.n	8005d8c <_strtod_l+0x344>
 8005d3e:	dc23      	bgt.n	8005d88 <_strtod_l+0x340>
 8005d40:	2a49      	cmp	r2, #73	; 0x49
 8005d42:	d023      	beq.n	8005d8c <_strtod_l+0x344>
 8005d44:	2a4e      	cmp	r2, #78	; 0x4e
 8005d46:	f47f aedc 	bne.w	8005b02 <_strtod_l+0xba>
 8005d4a:	499d      	ldr	r1, [pc, #628]	; (8005fc0 <_strtod_l+0x578>)
 8005d4c:	a819      	add	r0, sp, #100	; 0x64
 8005d4e:	f001 fe37 	bl	80079c0 <__match>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	f43f aed5 	beq.w	8005b02 <_strtod_l+0xba>
 8005d58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b28      	cmp	r3, #40	; 0x28
 8005d5e:	d12c      	bne.n	8005dba <_strtod_l+0x372>
 8005d60:	4998      	ldr	r1, [pc, #608]	; (8005fc4 <_strtod_l+0x57c>)
 8005d62:	aa1c      	add	r2, sp, #112	; 0x70
 8005d64:	a819      	add	r0, sp, #100	; 0x64
 8005d66:	f001 fe3f 	bl	80079e8 <__hexnan>
 8005d6a:	2805      	cmp	r0, #5
 8005d6c:	d125      	bne.n	8005dba <_strtod_l+0x372>
 8005d6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d70:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005d74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005d78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005d7c:	e6a5      	b.n	8005aca <_strtod_l+0x82>
 8005d7e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005d82:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005d86:	e7bc      	b.n	8005d02 <_strtod_l+0x2ba>
 8005d88:	2a6e      	cmp	r2, #110	; 0x6e
 8005d8a:	e7dc      	b.n	8005d46 <_strtod_l+0x2fe>
 8005d8c:	498e      	ldr	r1, [pc, #568]	; (8005fc8 <_strtod_l+0x580>)
 8005d8e:	a819      	add	r0, sp, #100	; 0x64
 8005d90:	f001 fe16 	bl	80079c0 <__match>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	f43f aeb4 	beq.w	8005b02 <_strtod_l+0xba>
 8005d9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d9c:	498b      	ldr	r1, [pc, #556]	; (8005fcc <_strtod_l+0x584>)
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	a819      	add	r0, sp, #100	; 0x64
 8005da2:	9319      	str	r3, [sp, #100]	; 0x64
 8005da4:	f001 fe0c 	bl	80079c0 <__match>
 8005da8:	b910      	cbnz	r0, 8005db0 <_strtod_l+0x368>
 8005daa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dac:	3301      	adds	r3, #1
 8005dae:	9319      	str	r3, [sp, #100]	; 0x64
 8005db0:	f04f 0800 	mov.w	r8, #0
 8005db4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005fd0 <_strtod_l+0x588>
 8005db8:	e687      	b.n	8005aca <_strtod_l+0x82>
 8005dba:	4886      	ldr	r0, [pc, #536]	; (8005fd4 <_strtod_l+0x58c>)
 8005dbc:	f002 fdee 	bl	800899c <nan>
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	4689      	mov	r9, r1
 8005dc4:	e681      	b.n	8005aca <_strtod_l+0x82>
 8005dc6:	9b04      	ldr	r3, [sp, #16]
 8005dc8:	f1bb 0f00 	cmp.w	fp, #0
 8005dcc:	bf08      	it	eq
 8005dce:	46a3      	moveq	fp, r4
 8005dd0:	1aeb      	subs	r3, r5, r3
 8005dd2:	2c10      	cmp	r4, #16
 8005dd4:	9806      	ldr	r0, [sp, #24]
 8005dd6:	4626      	mov	r6, r4
 8005dd8:	9307      	str	r3, [sp, #28]
 8005dda:	bfa8      	it	ge
 8005ddc:	2610      	movge	r6, #16
 8005dde:	f7fa fb01 	bl	80003e4 <__aeabi_ui2d>
 8005de2:	2c09      	cmp	r4, #9
 8005de4:	4680      	mov	r8, r0
 8005de6:	4689      	mov	r9, r1
 8005de8:	dd13      	ble.n	8005e12 <_strtod_l+0x3ca>
 8005dea:	4b7b      	ldr	r3, [pc, #492]	; (8005fd8 <_strtod_l+0x590>)
 8005dec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005df0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005df4:	f7fa fb70 	bl	80004d8 <__aeabi_dmul>
 8005df8:	4680      	mov	r8, r0
 8005dfa:	9805      	ldr	r0, [sp, #20]
 8005dfc:	4689      	mov	r9, r1
 8005dfe:	f7fa faf1 	bl	80003e4 <__aeabi_ui2d>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4640      	mov	r0, r8
 8005e08:	4649      	mov	r1, r9
 8005e0a:	f7fa f9af 	bl	800016c <__adddf3>
 8005e0e:	4680      	mov	r8, r0
 8005e10:	4689      	mov	r9, r1
 8005e12:	2c0f      	cmp	r4, #15
 8005e14:	dc36      	bgt.n	8005e84 <_strtod_l+0x43c>
 8005e16:	9b07      	ldr	r3, [sp, #28]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f43f ae56 	beq.w	8005aca <_strtod_l+0x82>
 8005e1e:	dd22      	ble.n	8005e66 <_strtod_l+0x41e>
 8005e20:	2b16      	cmp	r3, #22
 8005e22:	dc09      	bgt.n	8005e38 <_strtod_l+0x3f0>
 8005e24:	496c      	ldr	r1, [pc, #432]	; (8005fd8 <_strtod_l+0x590>)
 8005e26:	4642      	mov	r2, r8
 8005e28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e32:	f7fa fb51 	bl	80004d8 <__aeabi_dmul>
 8005e36:	e7c3      	b.n	8005dc0 <_strtod_l+0x378>
 8005e38:	9a07      	ldr	r2, [sp, #28]
 8005e3a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	db20      	blt.n	8005e84 <_strtod_l+0x43c>
 8005e42:	4d65      	ldr	r5, [pc, #404]	; (8005fd8 <_strtod_l+0x590>)
 8005e44:	f1c4 040f 	rsb	r4, r4, #15
 8005e48:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e52:	464b      	mov	r3, r9
 8005e54:	f7fa fb40 	bl	80004d8 <__aeabi_dmul>
 8005e58:	9b07      	ldr	r3, [sp, #28]
 8005e5a:	1b1c      	subs	r4, r3, r4
 8005e5c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005e60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e64:	e7e5      	b.n	8005e32 <_strtod_l+0x3ea>
 8005e66:	9b07      	ldr	r3, [sp, #28]
 8005e68:	3316      	adds	r3, #22
 8005e6a:	db0b      	blt.n	8005e84 <_strtod_l+0x43c>
 8005e6c:	9b04      	ldr	r3, [sp, #16]
 8005e6e:	4640      	mov	r0, r8
 8005e70:	1b5d      	subs	r5, r3, r5
 8005e72:	4b59      	ldr	r3, [pc, #356]	; (8005fd8 <_strtod_l+0x590>)
 8005e74:	4649      	mov	r1, r9
 8005e76:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005e7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e7e:	f7fa fc55 	bl	800072c <__aeabi_ddiv>
 8005e82:	e79d      	b.n	8005dc0 <_strtod_l+0x378>
 8005e84:	9b07      	ldr	r3, [sp, #28]
 8005e86:	1ba6      	subs	r6, r4, r6
 8005e88:	441e      	add	r6, r3
 8005e8a:	2e00      	cmp	r6, #0
 8005e8c:	dd74      	ble.n	8005f78 <_strtod_l+0x530>
 8005e8e:	f016 030f 	ands.w	r3, r6, #15
 8005e92:	d00a      	beq.n	8005eaa <_strtod_l+0x462>
 8005e94:	4950      	ldr	r1, [pc, #320]	; (8005fd8 <_strtod_l+0x590>)
 8005e96:	4642      	mov	r2, r8
 8005e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	f7fa fb19 	bl	80004d8 <__aeabi_dmul>
 8005ea6:	4680      	mov	r8, r0
 8005ea8:	4689      	mov	r9, r1
 8005eaa:	f036 060f 	bics.w	r6, r6, #15
 8005eae:	d052      	beq.n	8005f56 <_strtod_l+0x50e>
 8005eb0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005eb4:	dd27      	ble.n	8005f06 <_strtod_l+0x4be>
 8005eb6:	f04f 0b00 	mov.w	fp, #0
 8005eba:	f8cd b010 	str.w	fp, [sp, #16]
 8005ebe:	f8cd b020 	str.w	fp, [sp, #32]
 8005ec2:	f8cd b018 	str.w	fp, [sp, #24]
 8005ec6:	2322      	movs	r3, #34	; 0x22
 8005ec8:	f04f 0800 	mov.w	r8, #0
 8005ecc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005fd0 <_strtod_l+0x588>
 8005ed0:	f8ca 3000 	str.w	r3, [sl]
 8005ed4:	9b08      	ldr	r3, [sp, #32]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f43f adf7 	beq.w	8005aca <_strtod_l+0x82>
 8005edc:	4650      	mov	r0, sl
 8005ede:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ee0:	f001 fe98 	bl	8007c14 <_Bfree>
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	9906      	ldr	r1, [sp, #24]
 8005ee8:	f001 fe94 	bl	8007c14 <_Bfree>
 8005eec:	4650      	mov	r0, sl
 8005eee:	9904      	ldr	r1, [sp, #16]
 8005ef0:	f001 fe90 	bl	8007c14 <_Bfree>
 8005ef4:	4650      	mov	r0, sl
 8005ef6:	9908      	ldr	r1, [sp, #32]
 8005ef8:	f001 fe8c 	bl	8007c14 <_Bfree>
 8005efc:	4659      	mov	r1, fp
 8005efe:	4650      	mov	r0, sl
 8005f00:	f001 fe88 	bl	8007c14 <_Bfree>
 8005f04:	e5e1      	b.n	8005aca <_strtod_l+0x82>
 8005f06:	4b35      	ldr	r3, [pc, #212]	; (8005fdc <_strtod_l+0x594>)
 8005f08:	4640      	mov	r0, r8
 8005f0a:	9305      	str	r3, [sp, #20]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4649      	mov	r1, r9
 8005f10:	461f      	mov	r7, r3
 8005f12:	1136      	asrs	r6, r6, #4
 8005f14:	2e01      	cmp	r6, #1
 8005f16:	dc21      	bgt.n	8005f5c <_strtod_l+0x514>
 8005f18:	b10b      	cbz	r3, 8005f1e <_strtod_l+0x4d6>
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	4689      	mov	r9, r1
 8005f1e:	4b2f      	ldr	r3, [pc, #188]	; (8005fdc <_strtod_l+0x594>)
 8005f20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005f24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005f28:	4642      	mov	r2, r8
 8005f2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f2e:	464b      	mov	r3, r9
 8005f30:	f7fa fad2 	bl	80004d8 <__aeabi_dmul>
 8005f34:	4b26      	ldr	r3, [pc, #152]	; (8005fd0 <_strtod_l+0x588>)
 8005f36:	460a      	mov	r2, r1
 8005f38:	400b      	ands	r3, r1
 8005f3a:	4929      	ldr	r1, [pc, #164]	; (8005fe0 <_strtod_l+0x598>)
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	428b      	cmp	r3, r1
 8005f40:	d8b9      	bhi.n	8005eb6 <_strtod_l+0x46e>
 8005f42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f46:	428b      	cmp	r3, r1
 8005f48:	bf86      	itte	hi
 8005f4a:	f04f 38ff 	movhi.w	r8, #4294967295
 8005f4e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005fe4 <_strtod_l+0x59c>
 8005f52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005f56:	2300      	movs	r3, #0
 8005f58:	9305      	str	r3, [sp, #20]
 8005f5a:	e07f      	b.n	800605c <_strtod_l+0x614>
 8005f5c:	07f2      	lsls	r2, r6, #31
 8005f5e:	d505      	bpl.n	8005f6c <_strtod_l+0x524>
 8005f60:	9b05      	ldr	r3, [sp, #20]
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f7fa fab7 	bl	80004d8 <__aeabi_dmul>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	9a05      	ldr	r2, [sp, #20]
 8005f6e:	3701      	adds	r7, #1
 8005f70:	3208      	adds	r2, #8
 8005f72:	1076      	asrs	r6, r6, #1
 8005f74:	9205      	str	r2, [sp, #20]
 8005f76:	e7cd      	b.n	8005f14 <_strtod_l+0x4cc>
 8005f78:	d0ed      	beq.n	8005f56 <_strtod_l+0x50e>
 8005f7a:	4276      	negs	r6, r6
 8005f7c:	f016 020f 	ands.w	r2, r6, #15
 8005f80:	d00a      	beq.n	8005f98 <_strtod_l+0x550>
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <_strtod_l+0x590>)
 8005f84:	4640      	mov	r0, r8
 8005f86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f7fa fbcc 	bl	800072c <__aeabi_ddiv>
 8005f94:	4680      	mov	r8, r0
 8005f96:	4689      	mov	r9, r1
 8005f98:	1136      	asrs	r6, r6, #4
 8005f9a:	d0dc      	beq.n	8005f56 <_strtod_l+0x50e>
 8005f9c:	2e1f      	cmp	r6, #31
 8005f9e:	dd23      	ble.n	8005fe8 <_strtod_l+0x5a0>
 8005fa0:	f04f 0b00 	mov.w	fp, #0
 8005fa4:	f8cd b010 	str.w	fp, [sp, #16]
 8005fa8:	f8cd b020 	str.w	fp, [sp, #32]
 8005fac:	f8cd b018 	str.w	fp, [sp, #24]
 8005fb0:	2322      	movs	r3, #34	; 0x22
 8005fb2:	f04f 0800 	mov.w	r8, #0
 8005fb6:	f04f 0900 	mov.w	r9, #0
 8005fba:	f8ca 3000 	str.w	r3, [sl]
 8005fbe:	e789      	b.n	8005ed4 <_strtod_l+0x48c>
 8005fc0:	0800964d 	.word	0x0800964d
 8005fc4:	08009690 	.word	0x08009690
 8005fc8:	08009645 	.word	0x08009645
 8005fcc:	080097d4 	.word	0x080097d4
 8005fd0:	7ff00000 	.word	0x7ff00000
 8005fd4:	08009a80 	.word	0x08009a80
 8005fd8:	08009960 	.word	0x08009960
 8005fdc:	08009938 	.word	0x08009938
 8005fe0:	7ca00000 	.word	0x7ca00000
 8005fe4:	7fefffff 	.word	0x7fefffff
 8005fe8:	f016 0310 	ands.w	r3, r6, #16
 8005fec:	bf18      	it	ne
 8005fee:	236a      	movne	r3, #106	; 0x6a
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	9305      	str	r3, [sp, #20]
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	4fb0      	ldr	r7, [pc, #704]	; (80062bc <_strtod_l+0x874>)
 8005ffa:	07f2      	lsls	r2, r6, #31
 8005ffc:	d504      	bpl.n	8006008 <_strtod_l+0x5c0>
 8005ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006002:	f7fa fa69 	bl	80004d8 <__aeabi_dmul>
 8006006:	2301      	movs	r3, #1
 8006008:	1076      	asrs	r6, r6, #1
 800600a:	f107 0708 	add.w	r7, r7, #8
 800600e:	d1f4      	bne.n	8005ffa <_strtod_l+0x5b2>
 8006010:	b10b      	cbz	r3, 8006016 <_strtod_l+0x5ce>
 8006012:	4680      	mov	r8, r0
 8006014:	4689      	mov	r9, r1
 8006016:	9b05      	ldr	r3, [sp, #20]
 8006018:	b1c3      	cbz	r3, 800604c <_strtod_l+0x604>
 800601a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800601e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006022:	2b00      	cmp	r3, #0
 8006024:	4649      	mov	r1, r9
 8006026:	dd11      	ble.n	800604c <_strtod_l+0x604>
 8006028:	2b1f      	cmp	r3, #31
 800602a:	f340 8127 	ble.w	800627c <_strtod_l+0x834>
 800602e:	2b34      	cmp	r3, #52	; 0x34
 8006030:	bfd8      	it	le
 8006032:	f04f 33ff 	movle.w	r3, #4294967295
 8006036:	f04f 0800 	mov.w	r8, #0
 800603a:	bfcf      	iteee	gt
 800603c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006040:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006044:	fa03 f202 	lslle.w	r2, r3, r2
 8006048:	ea02 0901 	andle.w	r9, r2, r1
 800604c:	2200      	movs	r2, #0
 800604e:	2300      	movs	r3, #0
 8006050:	4640      	mov	r0, r8
 8006052:	4649      	mov	r1, r9
 8006054:	f7fa fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8006058:	2800      	cmp	r0, #0
 800605a:	d1a1      	bne.n	8005fa0 <_strtod_l+0x558>
 800605c:	9b06      	ldr	r3, [sp, #24]
 800605e:	465a      	mov	r2, fp
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4650      	mov	r0, sl
 8006064:	4623      	mov	r3, r4
 8006066:	9908      	ldr	r1, [sp, #32]
 8006068:	f001 fe3c 	bl	8007ce4 <__s2b>
 800606c:	9008      	str	r0, [sp, #32]
 800606e:	2800      	cmp	r0, #0
 8006070:	f43f af21 	beq.w	8005eb6 <_strtod_l+0x46e>
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	f04f 0b00 	mov.w	fp, #0
 800607a:	1b5d      	subs	r5, r3, r5
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	f8cd b010 	str.w	fp, [sp, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfb4      	ite	lt
 8006086:	462b      	movlt	r3, r5
 8006088:	2300      	movge	r3, #0
 800608a:	930e      	str	r3, [sp, #56]	; 0x38
 800608c:	9b07      	ldr	r3, [sp, #28]
 800608e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006092:	9314      	str	r3, [sp, #80]	; 0x50
 8006094:	9b08      	ldr	r3, [sp, #32]
 8006096:	4650      	mov	r0, sl
 8006098:	6859      	ldr	r1, [r3, #4]
 800609a:	f001 fd7b 	bl	8007b94 <_Balloc>
 800609e:	9006      	str	r0, [sp, #24]
 80060a0:	2800      	cmp	r0, #0
 80060a2:	f43f af10 	beq.w	8005ec6 <_strtod_l+0x47e>
 80060a6:	9b08      	ldr	r3, [sp, #32]
 80060a8:	300c      	adds	r0, #12
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	f103 010c 	add.w	r1, r3, #12
 80060b0:	3202      	adds	r2, #2
 80060b2:	0092      	lsls	r2, r2, #2
 80060b4:	f001 fd60 	bl	8007b78 <memcpy>
 80060b8:	ab1c      	add	r3, sp, #112	; 0x70
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	ab1b      	add	r3, sp, #108	; 0x6c
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	4650      	mov	r0, sl
 80060c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80060ca:	f002 f94d 	bl	8008368 <__d2b>
 80060ce:	901a      	str	r0, [sp, #104]	; 0x68
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f43f aef8 	beq.w	8005ec6 <_strtod_l+0x47e>
 80060d6:	2101      	movs	r1, #1
 80060d8:	4650      	mov	r0, sl
 80060da:	f001 fe9b 	bl	8007e14 <__i2b>
 80060de:	4603      	mov	r3, r0
 80060e0:	9004      	str	r0, [sp, #16]
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f43f aeef 	beq.w	8005ec6 <_strtod_l+0x47e>
 80060e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80060ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80060ec:	2d00      	cmp	r5, #0
 80060ee:	bfab      	itete	ge
 80060f0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80060f2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80060f4:	18ee      	addge	r6, r5, r3
 80060f6:	1b5c      	sublt	r4, r3, r5
 80060f8:	9b05      	ldr	r3, [sp, #20]
 80060fa:	bfa8      	it	ge
 80060fc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80060fe:	eba5 0503 	sub.w	r5, r5, r3
 8006102:	4415      	add	r5, r2
 8006104:	4b6e      	ldr	r3, [pc, #440]	; (80062c0 <_strtod_l+0x878>)
 8006106:	f105 35ff 	add.w	r5, r5, #4294967295
 800610a:	bfb8      	it	lt
 800610c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800610e:	429d      	cmp	r5, r3
 8006110:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006114:	f280 80c4 	bge.w	80062a0 <_strtod_l+0x858>
 8006118:	1b5b      	subs	r3, r3, r5
 800611a:	2b1f      	cmp	r3, #31
 800611c:	f04f 0701 	mov.w	r7, #1
 8006120:	eba2 0203 	sub.w	r2, r2, r3
 8006124:	f300 80b1 	bgt.w	800628a <_strtod_l+0x842>
 8006128:	2500      	movs	r5, #0
 800612a:	fa07 f303 	lsl.w	r3, r7, r3
 800612e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006130:	18b7      	adds	r7, r6, r2
 8006132:	9b05      	ldr	r3, [sp, #20]
 8006134:	42be      	cmp	r6, r7
 8006136:	4414      	add	r4, r2
 8006138:	441c      	add	r4, r3
 800613a:	4633      	mov	r3, r6
 800613c:	bfa8      	it	ge
 800613e:	463b      	movge	r3, r7
 8006140:	42a3      	cmp	r3, r4
 8006142:	bfa8      	it	ge
 8006144:	4623      	movge	r3, r4
 8006146:	2b00      	cmp	r3, #0
 8006148:	bfc2      	ittt	gt
 800614a:	1aff      	subgt	r7, r7, r3
 800614c:	1ae4      	subgt	r4, r4, r3
 800614e:	1af6      	subgt	r6, r6, r3
 8006150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006152:	2b00      	cmp	r3, #0
 8006154:	dd17      	ble.n	8006186 <_strtod_l+0x73e>
 8006156:	461a      	mov	r2, r3
 8006158:	4650      	mov	r0, sl
 800615a:	9904      	ldr	r1, [sp, #16]
 800615c:	f001 ff18 	bl	8007f90 <__pow5mult>
 8006160:	9004      	str	r0, [sp, #16]
 8006162:	2800      	cmp	r0, #0
 8006164:	f43f aeaf 	beq.w	8005ec6 <_strtod_l+0x47e>
 8006168:	4601      	mov	r1, r0
 800616a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800616c:	4650      	mov	r0, sl
 800616e:	f001 fe67 	bl	8007e40 <__multiply>
 8006172:	9009      	str	r0, [sp, #36]	; 0x24
 8006174:	2800      	cmp	r0, #0
 8006176:	f43f aea6 	beq.w	8005ec6 <_strtod_l+0x47e>
 800617a:	4650      	mov	r0, sl
 800617c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800617e:	f001 fd49 	bl	8007c14 <_Bfree>
 8006182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006184:	931a      	str	r3, [sp, #104]	; 0x68
 8006186:	2f00      	cmp	r7, #0
 8006188:	f300 808e 	bgt.w	80062a8 <_strtod_l+0x860>
 800618c:	9b07      	ldr	r3, [sp, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	dd08      	ble.n	80061a4 <_strtod_l+0x75c>
 8006192:	4650      	mov	r0, sl
 8006194:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006196:	9906      	ldr	r1, [sp, #24]
 8006198:	f001 fefa 	bl	8007f90 <__pow5mult>
 800619c:	9006      	str	r0, [sp, #24]
 800619e:	2800      	cmp	r0, #0
 80061a0:	f43f ae91 	beq.w	8005ec6 <_strtod_l+0x47e>
 80061a4:	2c00      	cmp	r4, #0
 80061a6:	dd08      	ble.n	80061ba <_strtod_l+0x772>
 80061a8:	4622      	mov	r2, r4
 80061aa:	4650      	mov	r0, sl
 80061ac:	9906      	ldr	r1, [sp, #24]
 80061ae:	f001 ff49 	bl	8008044 <__lshift>
 80061b2:	9006      	str	r0, [sp, #24]
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f43f ae86 	beq.w	8005ec6 <_strtod_l+0x47e>
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	dd08      	ble.n	80061d0 <_strtod_l+0x788>
 80061be:	4632      	mov	r2, r6
 80061c0:	4650      	mov	r0, sl
 80061c2:	9904      	ldr	r1, [sp, #16]
 80061c4:	f001 ff3e 	bl	8008044 <__lshift>
 80061c8:	9004      	str	r0, [sp, #16]
 80061ca:	2800      	cmp	r0, #0
 80061cc:	f43f ae7b 	beq.w	8005ec6 <_strtod_l+0x47e>
 80061d0:	4650      	mov	r0, sl
 80061d2:	9a06      	ldr	r2, [sp, #24]
 80061d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061d6:	f001 ffc1 	bl	800815c <__mdiff>
 80061da:	4683      	mov	fp, r0
 80061dc:	2800      	cmp	r0, #0
 80061de:	f43f ae72 	beq.w	8005ec6 <_strtod_l+0x47e>
 80061e2:	2400      	movs	r4, #0
 80061e4:	68c3      	ldr	r3, [r0, #12]
 80061e6:	9904      	ldr	r1, [sp, #16]
 80061e8:	60c4      	str	r4, [r0, #12]
 80061ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ec:	f001 ff9a 	bl	8008124 <__mcmp>
 80061f0:	42a0      	cmp	r0, r4
 80061f2:	da6b      	bge.n	80062cc <_strtod_l+0x884>
 80061f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061f6:	ea53 0308 	orrs.w	r3, r3, r8
 80061fa:	f040 8091 	bne.w	8006320 <_strtod_l+0x8d8>
 80061fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 808c 	bne.w	8006320 <_strtod_l+0x8d8>
 8006208:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800620c:	0d1b      	lsrs	r3, r3, #20
 800620e:	051b      	lsls	r3, r3, #20
 8006210:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006214:	f240 8084 	bls.w	8006320 <_strtod_l+0x8d8>
 8006218:	f8db 3014 	ldr.w	r3, [fp, #20]
 800621c:	b91b      	cbnz	r3, 8006226 <_strtod_l+0x7de>
 800621e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006222:	2b01      	cmp	r3, #1
 8006224:	dd7c      	ble.n	8006320 <_strtod_l+0x8d8>
 8006226:	4659      	mov	r1, fp
 8006228:	2201      	movs	r2, #1
 800622a:	4650      	mov	r0, sl
 800622c:	f001 ff0a 	bl	8008044 <__lshift>
 8006230:	9904      	ldr	r1, [sp, #16]
 8006232:	4683      	mov	fp, r0
 8006234:	f001 ff76 	bl	8008124 <__mcmp>
 8006238:	2800      	cmp	r0, #0
 800623a:	dd71      	ble.n	8006320 <_strtod_l+0x8d8>
 800623c:	9905      	ldr	r1, [sp, #20]
 800623e:	464b      	mov	r3, r9
 8006240:	4a20      	ldr	r2, [pc, #128]	; (80062c4 <_strtod_l+0x87c>)
 8006242:	2900      	cmp	r1, #0
 8006244:	f000 808c 	beq.w	8006360 <_strtod_l+0x918>
 8006248:	ea02 0109 	and.w	r1, r2, r9
 800624c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006250:	f300 8086 	bgt.w	8006360 <_strtod_l+0x918>
 8006254:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006258:	f77f aeaa 	ble.w	8005fb0 <_strtod_l+0x568>
 800625c:	4640      	mov	r0, r8
 800625e:	4649      	mov	r1, r9
 8006260:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <_strtod_l+0x880>)
 8006262:	2200      	movs	r2, #0
 8006264:	f7fa f938 	bl	80004d8 <__aeabi_dmul>
 8006268:	460b      	mov	r3, r1
 800626a:	4303      	orrs	r3, r0
 800626c:	bf08      	it	eq
 800626e:	2322      	moveq	r3, #34	; 0x22
 8006270:	4680      	mov	r8, r0
 8006272:	4689      	mov	r9, r1
 8006274:	bf08      	it	eq
 8006276:	f8ca 3000 	streq.w	r3, [sl]
 800627a:	e62f      	b.n	8005edc <_strtod_l+0x494>
 800627c:	f04f 32ff 	mov.w	r2, #4294967295
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	ea03 0808 	and.w	r8, r3, r8
 8006288:	e6e0      	b.n	800604c <_strtod_l+0x604>
 800628a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800628e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006292:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006296:	35e2      	adds	r5, #226	; 0xe2
 8006298:	fa07 f505 	lsl.w	r5, r7, r5
 800629c:	970f      	str	r7, [sp, #60]	; 0x3c
 800629e:	e747      	b.n	8006130 <_strtod_l+0x6e8>
 80062a0:	2301      	movs	r3, #1
 80062a2:	2500      	movs	r5, #0
 80062a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80062a6:	e743      	b.n	8006130 <_strtod_l+0x6e8>
 80062a8:	463a      	mov	r2, r7
 80062aa:	4650      	mov	r0, sl
 80062ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062ae:	f001 fec9 	bl	8008044 <__lshift>
 80062b2:	901a      	str	r0, [sp, #104]	; 0x68
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f47f af69 	bne.w	800618c <_strtod_l+0x744>
 80062ba:	e604      	b.n	8005ec6 <_strtod_l+0x47e>
 80062bc:	080096a8 	.word	0x080096a8
 80062c0:	fffffc02 	.word	0xfffffc02
 80062c4:	7ff00000 	.word	0x7ff00000
 80062c8:	39500000 	.word	0x39500000
 80062cc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80062d0:	d165      	bne.n	800639e <_strtod_l+0x956>
 80062d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062d8:	b35a      	cbz	r2, 8006332 <_strtod_l+0x8ea>
 80062da:	4a99      	ldr	r2, [pc, #612]	; (8006540 <_strtod_l+0xaf8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d12b      	bne.n	8006338 <_strtod_l+0x8f0>
 80062e0:	9b05      	ldr	r3, [sp, #20]
 80062e2:	4641      	mov	r1, r8
 80062e4:	b303      	cbz	r3, 8006328 <_strtod_l+0x8e0>
 80062e6:	464a      	mov	r2, r9
 80062e8:	4b96      	ldr	r3, [pc, #600]	; (8006544 <_strtod_l+0xafc>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	d81b      	bhi.n	800632e <_strtod_l+0x8e6>
 80062f6:	0d1b      	lsrs	r3, r3, #20
 80062f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	4299      	cmp	r1, r3
 8006302:	d119      	bne.n	8006338 <_strtod_l+0x8f0>
 8006304:	4b90      	ldr	r3, [pc, #576]	; (8006548 <_strtod_l+0xb00>)
 8006306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006308:	429a      	cmp	r2, r3
 800630a:	d102      	bne.n	8006312 <_strtod_l+0x8ca>
 800630c:	3101      	adds	r1, #1
 800630e:	f43f adda 	beq.w	8005ec6 <_strtod_l+0x47e>
 8006312:	f04f 0800 	mov.w	r8, #0
 8006316:	4b8b      	ldr	r3, [pc, #556]	; (8006544 <_strtod_l+0xafc>)
 8006318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800631a:	401a      	ands	r2, r3
 800631c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006320:	9b05      	ldr	r3, [sp, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d19a      	bne.n	800625c <_strtod_l+0x814>
 8006326:	e5d9      	b.n	8005edc <_strtod_l+0x494>
 8006328:	f04f 33ff 	mov.w	r3, #4294967295
 800632c:	e7e8      	b.n	8006300 <_strtod_l+0x8b8>
 800632e:	4613      	mov	r3, r2
 8006330:	e7e6      	b.n	8006300 <_strtod_l+0x8b8>
 8006332:	ea53 0308 	orrs.w	r3, r3, r8
 8006336:	d081      	beq.n	800623c <_strtod_l+0x7f4>
 8006338:	b1e5      	cbz	r5, 8006374 <_strtod_l+0x92c>
 800633a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633c:	421d      	tst	r5, r3
 800633e:	d0ef      	beq.n	8006320 <_strtod_l+0x8d8>
 8006340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006342:	4640      	mov	r0, r8
 8006344:	4649      	mov	r1, r9
 8006346:	9a05      	ldr	r2, [sp, #20]
 8006348:	b1c3      	cbz	r3, 800637c <_strtod_l+0x934>
 800634a:	f7ff fb5b 	bl	8005a04 <sulp>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006356:	f7f9 ff09 	bl	800016c <__adddf3>
 800635a:	4680      	mov	r8, r0
 800635c:	4689      	mov	r9, r1
 800635e:	e7df      	b.n	8006320 <_strtod_l+0x8d8>
 8006360:	4013      	ands	r3, r2
 8006362:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006366:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800636a:	f04f 38ff 	mov.w	r8, #4294967295
 800636e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006372:	e7d5      	b.n	8006320 <_strtod_l+0x8d8>
 8006374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006376:	ea13 0f08 	tst.w	r3, r8
 800637a:	e7e0      	b.n	800633e <_strtod_l+0x8f6>
 800637c:	f7ff fb42 	bl	8005a04 <sulp>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006388:	f7f9 feee 	bl	8000168 <__aeabi_dsub>
 800638c:	2200      	movs	r2, #0
 800638e:	2300      	movs	r3, #0
 8006390:	4680      	mov	r8, r0
 8006392:	4689      	mov	r9, r1
 8006394:	f7fa fb08 	bl	80009a8 <__aeabi_dcmpeq>
 8006398:	2800      	cmp	r0, #0
 800639a:	d0c1      	beq.n	8006320 <_strtod_l+0x8d8>
 800639c:	e608      	b.n	8005fb0 <_strtod_l+0x568>
 800639e:	4658      	mov	r0, fp
 80063a0:	9904      	ldr	r1, [sp, #16]
 80063a2:	f002 f83d 	bl	8008420 <__ratio>
 80063a6:	2200      	movs	r2, #0
 80063a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063ac:	4606      	mov	r6, r0
 80063ae:	460f      	mov	r7, r1
 80063b0:	f7fa fb0e 	bl	80009d0 <__aeabi_dcmple>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d070      	beq.n	800649a <_strtod_l+0xa52>
 80063b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d042      	beq.n	8006444 <_strtod_l+0x9fc>
 80063be:	2600      	movs	r6, #0
 80063c0:	4f62      	ldr	r7, [pc, #392]	; (800654c <_strtod_l+0xb04>)
 80063c2:	4d62      	ldr	r5, [pc, #392]	; (800654c <_strtod_l+0xb04>)
 80063c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ca:	0d1b      	lsrs	r3, r3, #20
 80063cc:	051b      	lsls	r3, r3, #20
 80063ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80063d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063d2:	4b5f      	ldr	r3, [pc, #380]	; (8006550 <_strtod_l+0xb08>)
 80063d4:	429a      	cmp	r2, r3
 80063d6:	f040 80c3 	bne.w	8006560 <_strtod_l+0xb18>
 80063da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063dc:	4640      	mov	r0, r8
 80063de:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80063e2:	4649      	mov	r1, r9
 80063e4:	f001 ff46 	bl	8008274 <__ulp>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4630      	mov	r0, r6
 80063ee:	4639      	mov	r1, r7
 80063f0:	f7fa f872 	bl	80004d8 <__aeabi_dmul>
 80063f4:	4642      	mov	r2, r8
 80063f6:	464b      	mov	r3, r9
 80063f8:	f7f9 feb8 	bl	800016c <__adddf3>
 80063fc:	460b      	mov	r3, r1
 80063fe:	4951      	ldr	r1, [pc, #324]	; (8006544 <_strtod_l+0xafc>)
 8006400:	4a54      	ldr	r2, [pc, #336]	; (8006554 <_strtod_l+0xb0c>)
 8006402:	4019      	ands	r1, r3
 8006404:	4291      	cmp	r1, r2
 8006406:	4680      	mov	r8, r0
 8006408:	d95d      	bls.n	80064c6 <_strtod_l+0xa7e>
 800640a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800640c:	4b4e      	ldr	r3, [pc, #312]	; (8006548 <_strtod_l+0xb00>)
 800640e:	429a      	cmp	r2, r3
 8006410:	d103      	bne.n	800641a <_strtod_l+0x9d2>
 8006412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006414:	3301      	adds	r3, #1
 8006416:	f43f ad56 	beq.w	8005ec6 <_strtod_l+0x47e>
 800641a:	f04f 38ff 	mov.w	r8, #4294967295
 800641e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006548 <_strtod_l+0xb00>
 8006422:	4650      	mov	r0, sl
 8006424:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006426:	f001 fbf5 	bl	8007c14 <_Bfree>
 800642a:	4650      	mov	r0, sl
 800642c:	9906      	ldr	r1, [sp, #24]
 800642e:	f001 fbf1 	bl	8007c14 <_Bfree>
 8006432:	4650      	mov	r0, sl
 8006434:	9904      	ldr	r1, [sp, #16]
 8006436:	f001 fbed 	bl	8007c14 <_Bfree>
 800643a:	4659      	mov	r1, fp
 800643c:	4650      	mov	r0, sl
 800643e:	f001 fbe9 	bl	8007c14 <_Bfree>
 8006442:	e627      	b.n	8006094 <_strtod_l+0x64c>
 8006444:	f1b8 0f00 	cmp.w	r8, #0
 8006448:	d119      	bne.n	800647e <_strtod_l+0xa36>
 800644a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006450:	b9e3      	cbnz	r3, 800648c <_strtod_l+0xa44>
 8006452:	2200      	movs	r2, #0
 8006454:	4630      	mov	r0, r6
 8006456:	4639      	mov	r1, r7
 8006458:	4b3c      	ldr	r3, [pc, #240]	; (800654c <_strtod_l+0xb04>)
 800645a:	f7fa faaf 	bl	80009bc <__aeabi_dcmplt>
 800645e:	b9c8      	cbnz	r0, 8006494 <_strtod_l+0xa4c>
 8006460:	2200      	movs	r2, #0
 8006462:	4630      	mov	r0, r6
 8006464:	4639      	mov	r1, r7
 8006466:	4b3c      	ldr	r3, [pc, #240]	; (8006558 <_strtod_l+0xb10>)
 8006468:	f7fa f836 	bl	80004d8 <__aeabi_dmul>
 800646c:	4604      	mov	r4, r0
 800646e:	460d      	mov	r5, r1
 8006470:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006474:	9416      	str	r4, [sp, #88]	; 0x58
 8006476:	9317      	str	r3, [sp, #92]	; 0x5c
 8006478:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800647c:	e7a2      	b.n	80063c4 <_strtod_l+0x97c>
 800647e:	f1b8 0f01 	cmp.w	r8, #1
 8006482:	d103      	bne.n	800648c <_strtod_l+0xa44>
 8006484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	f43f ad92 	beq.w	8005fb0 <_strtod_l+0x568>
 800648c:	2600      	movs	r6, #0
 800648e:	2400      	movs	r4, #0
 8006490:	4f32      	ldr	r7, [pc, #200]	; (800655c <_strtod_l+0xb14>)
 8006492:	e796      	b.n	80063c2 <_strtod_l+0x97a>
 8006494:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006496:	4d30      	ldr	r5, [pc, #192]	; (8006558 <_strtod_l+0xb10>)
 8006498:	e7ea      	b.n	8006470 <_strtod_l+0xa28>
 800649a:	4b2f      	ldr	r3, [pc, #188]	; (8006558 <_strtod_l+0xb10>)
 800649c:	2200      	movs	r2, #0
 800649e:	4630      	mov	r0, r6
 80064a0:	4639      	mov	r1, r7
 80064a2:	f7fa f819 	bl	80004d8 <__aeabi_dmul>
 80064a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064a8:	4604      	mov	r4, r0
 80064aa:	460d      	mov	r5, r1
 80064ac:	b933      	cbnz	r3, 80064bc <_strtod_l+0xa74>
 80064ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064b2:	9010      	str	r0, [sp, #64]	; 0x40
 80064b4:	9311      	str	r3, [sp, #68]	; 0x44
 80064b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064ba:	e783      	b.n	80063c4 <_strtod_l+0x97c>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80064c4:	e7f7      	b.n	80064b6 <_strtod_l+0xa6e>
 80064c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80064ca:	9b05      	ldr	r3, [sp, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1a8      	bne.n	8006422 <_strtod_l+0x9da>
 80064d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064d6:	0d1b      	lsrs	r3, r3, #20
 80064d8:	051b      	lsls	r3, r3, #20
 80064da:	429a      	cmp	r2, r3
 80064dc:	d1a1      	bne.n	8006422 <_strtod_l+0x9da>
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7fa fb41 	bl	8000b68 <__aeabi_d2lz>
 80064e6:	f7f9 ffc9 	bl	800047c <__aeabi_l2d>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4620      	mov	r0, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7f9 fe39 	bl	8000168 <__aeabi_dsub>
 80064f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064fc:	ea43 0308 	orr.w	r3, r3, r8
 8006500:	4313      	orrs	r3, r2
 8006502:	4604      	mov	r4, r0
 8006504:	460d      	mov	r5, r1
 8006506:	d066      	beq.n	80065d6 <_strtod_l+0xb8e>
 8006508:	a309      	add	r3, pc, #36	; (adr r3, 8006530 <_strtod_l+0xae8>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f7fa fa55 	bl	80009bc <__aeabi_dcmplt>
 8006512:	2800      	cmp	r0, #0
 8006514:	f47f ace2 	bne.w	8005edc <_strtod_l+0x494>
 8006518:	a307      	add	r3, pc, #28	; (adr r3, 8006538 <_strtod_l+0xaf0>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	4620      	mov	r0, r4
 8006520:	4629      	mov	r1, r5
 8006522:	f7fa fa69 	bl	80009f8 <__aeabi_dcmpgt>
 8006526:	2800      	cmp	r0, #0
 8006528:	f43f af7b 	beq.w	8006422 <_strtod_l+0x9da>
 800652c:	e4d6      	b.n	8005edc <_strtod_l+0x494>
 800652e:	bf00      	nop
 8006530:	94a03595 	.word	0x94a03595
 8006534:	3fdfffff 	.word	0x3fdfffff
 8006538:	35afe535 	.word	0x35afe535
 800653c:	3fe00000 	.word	0x3fe00000
 8006540:	000fffff 	.word	0x000fffff
 8006544:	7ff00000 	.word	0x7ff00000
 8006548:	7fefffff 	.word	0x7fefffff
 800654c:	3ff00000 	.word	0x3ff00000
 8006550:	7fe00000 	.word	0x7fe00000
 8006554:	7c9fffff 	.word	0x7c9fffff
 8006558:	3fe00000 	.word	0x3fe00000
 800655c:	bff00000 	.word	0xbff00000
 8006560:	9b05      	ldr	r3, [sp, #20]
 8006562:	b313      	cbz	r3, 80065aa <_strtod_l+0xb62>
 8006564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006566:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800656a:	d81e      	bhi.n	80065aa <_strtod_l+0xb62>
 800656c:	a326      	add	r3, pc, #152	; (adr r3, 8006608 <_strtod_l+0xbc0>)
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	4620      	mov	r0, r4
 8006574:	4629      	mov	r1, r5
 8006576:	f7fa fa2b 	bl	80009d0 <__aeabi_dcmple>
 800657a:	b190      	cbz	r0, 80065a2 <_strtod_l+0xb5a>
 800657c:	4629      	mov	r1, r5
 800657e:	4620      	mov	r0, r4
 8006580:	f7fa fa82 	bl	8000a88 <__aeabi_d2uiz>
 8006584:	2801      	cmp	r0, #1
 8006586:	bf38      	it	cc
 8006588:	2001      	movcc	r0, #1
 800658a:	f7f9 ff2b 	bl	80003e4 <__aeabi_ui2d>
 800658e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006590:	4604      	mov	r4, r0
 8006592:	460d      	mov	r5, r1
 8006594:	b9d3      	cbnz	r3, 80065cc <_strtod_l+0xb84>
 8006596:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800659a:	9012      	str	r0, [sp, #72]	; 0x48
 800659c:	9313      	str	r3, [sp, #76]	; 0x4c
 800659e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80065a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065a4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80065a8:	1a9f      	subs	r7, r3, r2
 80065aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ae:	f001 fe61 	bl	8008274 <__ulp>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4630      	mov	r0, r6
 80065b8:	4639      	mov	r1, r7
 80065ba:	f7f9 ff8d 	bl	80004d8 <__aeabi_dmul>
 80065be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065c2:	f7f9 fdd3 	bl	800016c <__adddf3>
 80065c6:	4680      	mov	r8, r0
 80065c8:	4689      	mov	r9, r1
 80065ca:	e77e      	b.n	80064ca <_strtod_l+0xa82>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80065d4:	e7e3      	b.n	800659e <_strtod_l+0xb56>
 80065d6:	a30e      	add	r3, pc, #56	; (adr r3, 8006610 <_strtod_l+0xbc8>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f7fa f9ee 	bl	80009bc <__aeabi_dcmplt>
 80065e0:	e7a1      	b.n	8006526 <_strtod_l+0xade>
 80065e2:	2300      	movs	r3, #0
 80065e4:	930a      	str	r3, [sp, #40]	; 0x28
 80065e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	f7ff ba71 	b.w	8005ad2 <_strtod_l+0x8a>
 80065f0:	2a65      	cmp	r2, #101	; 0x65
 80065f2:	f43f ab63 	beq.w	8005cbc <_strtod_l+0x274>
 80065f6:	2a45      	cmp	r2, #69	; 0x45
 80065f8:	f43f ab60 	beq.w	8005cbc <_strtod_l+0x274>
 80065fc:	2301      	movs	r3, #1
 80065fe:	f7ff bb95 	b.w	8005d2c <_strtod_l+0x2e4>
 8006602:	bf00      	nop
 8006604:	f3af 8000 	nop.w
 8006608:	ffc00000 	.word	0xffc00000
 800660c:	41dfffff 	.word	0x41dfffff
 8006610:	94a03595 	.word	0x94a03595
 8006614:	3fcfffff 	.word	0x3fcfffff

08006618 <_strtod_r>:
 8006618:	4b01      	ldr	r3, [pc, #4]	; (8006620 <_strtod_r+0x8>)
 800661a:	f7ff ba15 	b.w	8005a48 <_strtod_l>
 800661e:	bf00      	nop
 8006620:	20000074 	.word	0x20000074

08006624 <_strtol_l.constprop.0>:
 8006624:	2b01      	cmp	r3, #1
 8006626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800662a:	4680      	mov	r8, r0
 800662c:	d001      	beq.n	8006632 <_strtol_l.constprop.0+0xe>
 800662e:	2b24      	cmp	r3, #36	; 0x24
 8006630:	d906      	bls.n	8006640 <_strtol_l.constprop.0+0x1c>
 8006632:	f7fe fb23 	bl	8004c7c <__errno>
 8006636:	2316      	movs	r3, #22
 8006638:	6003      	str	r3, [r0, #0]
 800663a:	2000      	movs	r0, #0
 800663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006640:	460d      	mov	r5, r1
 8006642:	4f35      	ldr	r7, [pc, #212]	; (8006718 <_strtol_l.constprop.0+0xf4>)
 8006644:	4628      	mov	r0, r5
 8006646:	f815 4b01 	ldrb.w	r4, [r5], #1
 800664a:	5de6      	ldrb	r6, [r4, r7]
 800664c:	f016 0608 	ands.w	r6, r6, #8
 8006650:	d1f8      	bne.n	8006644 <_strtol_l.constprop.0+0x20>
 8006652:	2c2d      	cmp	r4, #45	; 0x2d
 8006654:	d12f      	bne.n	80066b6 <_strtol_l.constprop.0+0x92>
 8006656:	2601      	movs	r6, #1
 8006658:	782c      	ldrb	r4, [r5, #0]
 800665a:	1c85      	adds	r5, r0, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d057      	beq.n	8006710 <_strtol_l.constprop.0+0xec>
 8006660:	2b10      	cmp	r3, #16
 8006662:	d109      	bne.n	8006678 <_strtol_l.constprop.0+0x54>
 8006664:	2c30      	cmp	r4, #48	; 0x30
 8006666:	d107      	bne.n	8006678 <_strtol_l.constprop.0+0x54>
 8006668:	7828      	ldrb	r0, [r5, #0]
 800666a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800666e:	2858      	cmp	r0, #88	; 0x58
 8006670:	d149      	bne.n	8006706 <_strtol_l.constprop.0+0xe2>
 8006672:	2310      	movs	r3, #16
 8006674:	786c      	ldrb	r4, [r5, #1]
 8006676:	3502      	adds	r5, #2
 8006678:	2700      	movs	r7, #0
 800667a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800667e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006682:	fbbe f9f3 	udiv	r9, lr, r3
 8006686:	4638      	mov	r0, r7
 8006688:	fb03 ea19 	mls	sl, r3, r9, lr
 800668c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006690:	f1bc 0f09 	cmp.w	ip, #9
 8006694:	d814      	bhi.n	80066c0 <_strtol_l.constprop.0+0x9c>
 8006696:	4664      	mov	r4, ip
 8006698:	42a3      	cmp	r3, r4
 800669a:	dd22      	ble.n	80066e2 <_strtol_l.constprop.0+0xbe>
 800669c:	2f00      	cmp	r7, #0
 800669e:	db1d      	blt.n	80066dc <_strtol_l.constprop.0+0xb8>
 80066a0:	4581      	cmp	r9, r0
 80066a2:	d31b      	bcc.n	80066dc <_strtol_l.constprop.0+0xb8>
 80066a4:	d101      	bne.n	80066aa <_strtol_l.constprop.0+0x86>
 80066a6:	45a2      	cmp	sl, r4
 80066a8:	db18      	blt.n	80066dc <_strtol_l.constprop.0+0xb8>
 80066aa:	2701      	movs	r7, #1
 80066ac:	fb00 4003 	mla	r0, r0, r3, r4
 80066b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066b4:	e7ea      	b.n	800668c <_strtol_l.constprop.0+0x68>
 80066b6:	2c2b      	cmp	r4, #43	; 0x2b
 80066b8:	bf04      	itt	eq
 80066ba:	782c      	ldrbeq	r4, [r5, #0]
 80066bc:	1c85      	addeq	r5, r0, #2
 80066be:	e7cd      	b.n	800665c <_strtol_l.constprop.0+0x38>
 80066c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80066c4:	f1bc 0f19 	cmp.w	ip, #25
 80066c8:	d801      	bhi.n	80066ce <_strtol_l.constprop.0+0xaa>
 80066ca:	3c37      	subs	r4, #55	; 0x37
 80066cc:	e7e4      	b.n	8006698 <_strtol_l.constprop.0+0x74>
 80066ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80066d2:	f1bc 0f19 	cmp.w	ip, #25
 80066d6:	d804      	bhi.n	80066e2 <_strtol_l.constprop.0+0xbe>
 80066d8:	3c57      	subs	r4, #87	; 0x57
 80066da:	e7dd      	b.n	8006698 <_strtol_l.constprop.0+0x74>
 80066dc:	f04f 37ff 	mov.w	r7, #4294967295
 80066e0:	e7e6      	b.n	80066b0 <_strtol_l.constprop.0+0x8c>
 80066e2:	2f00      	cmp	r7, #0
 80066e4:	da07      	bge.n	80066f6 <_strtol_l.constprop.0+0xd2>
 80066e6:	2322      	movs	r3, #34	; 0x22
 80066e8:	4670      	mov	r0, lr
 80066ea:	f8c8 3000 	str.w	r3, [r8]
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	d0a4      	beq.n	800663c <_strtol_l.constprop.0+0x18>
 80066f2:	1e69      	subs	r1, r5, #1
 80066f4:	e005      	b.n	8006702 <_strtol_l.constprop.0+0xde>
 80066f6:	b106      	cbz	r6, 80066fa <_strtol_l.constprop.0+0xd6>
 80066f8:	4240      	negs	r0, r0
 80066fa:	2a00      	cmp	r2, #0
 80066fc:	d09e      	beq.n	800663c <_strtol_l.constprop.0+0x18>
 80066fe:	2f00      	cmp	r7, #0
 8006700:	d1f7      	bne.n	80066f2 <_strtol_l.constprop.0+0xce>
 8006702:	6011      	str	r1, [r2, #0]
 8006704:	e79a      	b.n	800663c <_strtol_l.constprop.0+0x18>
 8006706:	2430      	movs	r4, #48	; 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1b5      	bne.n	8006678 <_strtol_l.constprop.0+0x54>
 800670c:	2308      	movs	r3, #8
 800670e:	e7b3      	b.n	8006678 <_strtol_l.constprop.0+0x54>
 8006710:	2c30      	cmp	r4, #48	; 0x30
 8006712:	d0a9      	beq.n	8006668 <_strtol_l.constprop.0+0x44>
 8006714:	230a      	movs	r3, #10
 8006716:	e7af      	b.n	8006678 <_strtol_l.constprop.0+0x54>
 8006718:	080096d1 	.word	0x080096d1

0800671c <_strtol_r>:
 800671c:	f7ff bf82 	b.w	8006624 <_strtol_l.constprop.0>

08006720 <_vsiprintf_r>:
 8006720:	b500      	push	{lr}
 8006722:	b09b      	sub	sp, #108	; 0x6c
 8006724:	9100      	str	r1, [sp, #0]
 8006726:	9104      	str	r1, [sp, #16]
 8006728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800672c:	9105      	str	r1, [sp, #20]
 800672e:	9102      	str	r1, [sp, #8]
 8006730:	4905      	ldr	r1, [pc, #20]	; (8006748 <_vsiprintf_r+0x28>)
 8006732:	9103      	str	r1, [sp, #12]
 8006734:	4669      	mov	r1, sp
 8006736:	f002 f831 	bl	800879c <_svfiprintf_r>
 800673a:	2200      	movs	r2, #0
 800673c:	9b00      	ldr	r3, [sp, #0]
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	b01b      	add	sp, #108	; 0x6c
 8006742:	f85d fb04 	ldr.w	pc, [sp], #4
 8006746:	bf00      	nop
 8006748:	ffff0208 	.word	0xffff0208

0800674c <vsiprintf>:
 800674c:	4613      	mov	r3, r2
 800674e:	460a      	mov	r2, r1
 8006750:	4601      	mov	r1, r0
 8006752:	4802      	ldr	r0, [pc, #8]	; (800675c <vsiprintf+0x10>)
 8006754:	6800      	ldr	r0, [r0, #0]
 8006756:	f7ff bfe3 	b.w	8006720 <_vsiprintf_r>
 800675a:	bf00      	nop
 800675c:	2000000c 	.word	0x2000000c

08006760 <quorem>:
 8006760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	6903      	ldr	r3, [r0, #16]
 8006766:	690c      	ldr	r4, [r1, #16]
 8006768:	4607      	mov	r7, r0
 800676a:	42a3      	cmp	r3, r4
 800676c:	f2c0 8082 	blt.w	8006874 <quorem+0x114>
 8006770:	3c01      	subs	r4, #1
 8006772:	f100 0514 	add.w	r5, r0, #20
 8006776:	f101 0814 	add.w	r8, r1, #20
 800677a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006788:	3301      	adds	r3, #1
 800678a:	429a      	cmp	r2, r3
 800678c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006798:	d331      	bcc.n	80067fe <quorem+0x9e>
 800679a:	f04f 0e00 	mov.w	lr, #0
 800679e:	4640      	mov	r0, r8
 80067a0:	46ac      	mov	ip, r5
 80067a2:	46f2      	mov	sl, lr
 80067a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80067a8:	b293      	uxth	r3, r2
 80067aa:	fb06 e303 	mla	r3, r6, r3, lr
 80067ae:	0c12      	lsrs	r2, r2, #16
 80067b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	fb06 e202 	mla	r2, r6, r2, lr
 80067ba:	ebaa 0303 	sub.w	r3, sl, r3
 80067be:	f8dc a000 	ldr.w	sl, [ip]
 80067c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067c6:	fa1f fa8a 	uxth.w	sl, sl
 80067ca:	4453      	add	r3, sl
 80067cc:	f8dc a000 	ldr.w	sl, [ip]
 80067d0:	b292      	uxth	r2, r2
 80067d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067e0:	4581      	cmp	r9, r0
 80067e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067e6:	f84c 3b04 	str.w	r3, [ip], #4
 80067ea:	d2db      	bcs.n	80067a4 <quorem+0x44>
 80067ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80067f0:	b92b      	cbnz	r3, 80067fe <quorem+0x9e>
 80067f2:	9b01      	ldr	r3, [sp, #4]
 80067f4:	3b04      	subs	r3, #4
 80067f6:	429d      	cmp	r5, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	d32f      	bcc.n	800685c <quorem+0xfc>
 80067fc:	613c      	str	r4, [r7, #16]
 80067fe:	4638      	mov	r0, r7
 8006800:	f001 fc90 	bl	8008124 <__mcmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	db25      	blt.n	8006854 <quorem+0xf4>
 8006808:	4628      	mov	r0, r5
 800680a:	f04f 0c00 	mov.w	ip, #0
 800680e:	3601      	adds	r6, #1
 8006810:	f858 1b04 	ldr.w	r1, [r8], #4
 8006814:	f8d0 e000 	ldr.w	lr, [r0]
 8006818:	b28b      	uxth	r3, r1
 800681a:	ebac 0303 	sub.w	r3, ip, r3
 800681e:	fa1f f28e 	uxth.w	r2, lr
 8006822:	4413      	add	r3, r2
 8006824:	0c0a      	lsrs	r2, r1, #16
 8006826:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800682a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006834:	45c1      	cmp	r9, r8
 8006836:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800683a:	f840 3b04 	str.w	r3, [r0], #4
 800683e:	d2e7      	bcs.n	8006810 <quorem+0xb0>
 8006840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006844:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006848:	b922      	cbnz	r2, 8006854 <quorem+0xf4>
 800684a:	3b04      	subs	r3, #4
 800684c:	429d      	cmp	r5, r3
 800684e:	461a      	mov	r2, r3
 8006850:	d30a      	bcc.n	8006868 <quorem+0x108>
 8006852:	613c      	str	r4, [r7, #16]
 8006854:	4630      	mov	r0, r6
 8006856:	b003      	add	sp, #12
 8006858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	3b04      	subs	r3, #4
 8006860:	2a00      	cmp	r2, #0
 8006862:	d1cb      	bne.n	80067fc <quorem+0x9c>
 8006864:	3c01      	subs	r4, #1
 8006866:	e7c6      	b.n	80067f6 <quorem+0x96>
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	3b04      	subs	r3, #4
 800686c:	2a00      	cmp	r2, #0
 800686e:	d1f0      	bne.n	8006852 <quorem+0xf2>
 8006870:	3c01      	subs	r4, #1
 8006872:	e7eb      	b.n	800684c <quorem+0xec>
 8006874:	2000      	movs	r0, #0
 8006876:	e7ee      	b.n	8006856 <quorem+0xf6>

08006878 <_dtoa_r>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	461f      	mov	r7, r3
 8006880:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006882:	b099      	sub	sp, #100	; 0x64
 8006884:	4605      	mov	r5, r0
 8006886:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800688a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800688e:	b974      	cbnz	r4, 80068ae <_dtoa_r+0x36>
 8006890:	2010      	movs	r0, #16
 8006892:	f001 f949 	bl	8007b28 <malloc>
 8006896:	4602      	mov	r2, r0
 8006898:	6268      	str	r0, [r5, #36]	; 0x24
 800689a:	b920      	cbnz	r0, 80068a6 <_dtoa_r+0x2e>
 800689c:	21ea      	movs	r1, #234	; 0xea
 800689e:	4ba8      	ldr	r3, [pc, #672]	; (8006b40 <_dtoa_r+0x2c8>)
 80068a0:	48a8      	ldr	r0, [pc, #672]	; (8006b44 <_dtoa_r+0x2cc>)
 80068a2:	f002 f8b3 	bl	8008a0c <__assert_func>
 80068a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068aa:	6004      	str	r4, [r0, #0]
 80068ac:	60c4      	str	r4, [r0, #12]
 80068ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068b0:	6819      	ldr	r1, [r3, #0]
 80068b2:	b151      	cbz	r1, 80068ca <_dtoa_r+0x52>
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	2301      	movs	r3, #1
 80068b8:	4093      	lsls	r3, r2
 80068ba:	604a      	str	r2, [r1, #4]
 80068bc:	608b      	str	r3, [r1, #8]
 80068be:	4628      	mov	r0, r5
 80068c0:	f001 f9a8 	bl	8007c14 <_Bfree>
 80068c4:	2200      	movs	r2, #0
 80068c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	1e3b      	subs	r3, r7, #0
 80068cc:	bfaf      	iteee	ge
 80068ce:	2300      	movge	r3, #0
 80068d0:	2201      	movlt	r2, #1
 80068d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068d6:	9305      	strlt	r3, [sp, #20]
 80068d8:	bfa8      	it	ge
 80068da:	f8c8 3000 	strge.w	r3, [r8]
 80068de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068e2:	4b99      	ldr	r3, [pc, #612]	; (8006b48 <_dtoa_r+0x2d0>)
 80068e4:	bfb8      	it	lt
 80068e6:	f8c8 2000 	strlt.w	r2, [r8]
 80068ea:	ea33 0309 	bics.w	r3, r3, r9
 80068ee:	d119      	bne.n	8006924 <_dtoa_r+0xac>
 80068f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80068f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068fc:	4333      	orrs	r3, r6
 80068fe:	f000 857f 	beq.w	8007400 <_dtoa_r+0xb88>
 8006902:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006904:	b953      	cbnz	r3, 800691c <_dtoa_r+0xa4>
 8006906:	4b91      	ldr	r3, [pc, #580]	; (8006b4c <_dtoa_r+0x2d4>)
 8006908:	e022      	b.n	8006950 <_dtoa_r+0xd8>
 800690a:	4b91      	ldr	r3, [pc, #580]	; (8006b50 <_dtoa_r+0x2d8>)
 800690c:	9303      	str	r3, [sp, #12]
 800690e:	3308      	adds	r3, #8
 8006910:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	9803      	ldr	r0, [sp, #12]
 8006916:	b019      	add	sp, #100	; 0x64
 8006918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691c:	4b8b      	ldr	r3, [pc, #556]	; (8006b4c <_dtoa_r+0x2d4>)
 800691e:	9303      	str	r3, [sp, #12]
 8006920:	3303      	adds	r3, #3
 8006922:	e7f5      	b.n	8006910 <_dtoa_r+0x98>
 8006924:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006928:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800692c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006930:	2200      	movs	r2, #0
 8006932:	2300      	movs	r3, #0
 8006934:	f7fa f838 	bl	80009a8 <__aeabi_dcmpeq>
 8006938:	4680      	mov	r8, r0
 800693a:	b158      	cbz	r0, 8006954 <_dtoa_r+0xdc>
 800693c:	2301      	movs	r3, #1
 800693e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8558 	beq.w	80073fa <_dtoa_r+0xb82>
 800694a:	4882      	ldr	r0, [pc, #520]	; (8006b54 <_dtoa_r+0x2dc>)
 800694c:	6018      	str	r0, [r3, #0]
 800694e:	1e43      	subs	r3, r0, #1
 8006950:	9303      	str	r3, [sp, #12]
 8006952:	e7df      	b.n	8006914 <_dtoa_r+0x9c>
 8006954:	ab16      	add	r3, sp, #88	; 0x58
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	ab17      	add	r3, sp, #92	; 0x5c
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	4628      	mov	r0, r5
 800695e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006962:	f001 fd01 	bl	8008368 <__d2b>
 8006966:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800696a:	4683      	mov	fp, r0
 800696c:	2c00      	cmp	r4, #0
 800696e:	d07f      	beq.n	8006a70 <_dtoa_r+0x1f8>
 8006970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006976:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800697a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800697e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006982:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006986:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800698a:	2200      	movs	r2, #0
 800698c:	4b72      	ldr	r3, [pc, #456]	; (8006b58 <_dtoa_r+0x2e0>)
 800698e:	f7f9 fbeb 	bl	8000168 <__aeabi_dsub>
 8006992:	a365      	add	r3, pc, #404	; (adr r3, 8006b28 <_dtoa_r+0x2b0>)
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	f7f9 fd9e 	bl	80004d8 <__aeabi_dmul>
 800699c:	a364      	add	r3, pc, #400	; (adr r3, 8006b30 <_dtoa_r+0x2b8>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 fbe3 	bl	800016c <__adddf3>
 80069a6:	4606      	mov	r6, r0
 80069a8:	4620      	mov	r0, r4
 80069aa:	460f      	mov	r7, r1
 80069ac:	f7f9 fd2a 	bl	8000404 <__aeabi_i2d>
 80069b0:	a361      	add	r3, pc, #388	; (adr r3, 8006b38 <_dtoa_r+0x2c0>)
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	f7f9 fd8f 	bl	80004d8 <__aeabi_dmul>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4630      	mov	r0, r6
 80069c0:	4639      	mov	r1, r7
 80069c2:	f7f9 fbd3 	bl	800016c <__adddf3>
 80069c6:	4606      	mov	r6, r0
 80069c8:	460f      	mov	r7, r1
 80069ca:	f7fa f835 	bl	8000a38 <__aeabi_d2iz>
 80069ce:	2200      	movs	r2, #0
 80069d0:	4682      	mov	sl, r0
 80069d2:	2300      	movs	r3, #0
 80069d4:	4630      	mov	r0, r6
 80069d6:	4639      	mov	r1, r7
 80069d8:	f7f9 fff0 	bl	80009bc <__aeabi_dcmplt>
 80069dc:	b148      	cbz	r0, 80069f2 <_dtoa_r+0x17a>
 80069de:	4650      	mov	r0, sl
 80069e0:	f7f9 fd10 	bl	8000404 <__aeabi_i2d>
 80069e4:	4632      	mov	r2, r6
 80069e6:	463b      	mov	r3, r7
 80069e8:	f7f9 ffde 	bl	80009a8 <__aeabi_dcmpeq>
 80069ec:	b908      	cbnz	r0, 80069f2 <_dtoa_r+0x17a>
 80069ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069f2:	f1ba 0f16 	cmp.w	sl, #22
 80069f6:	d858      	bhi.n	8006aaa <_dtoa_r+0x232>
 80069f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069fc:	4b57      	ldr	r3, [pc, #348]	; (8006b5c <_dtoa_r+0x2e4>)
 80069fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7f9 ffd9 	bl	80009bc <__aeabi_dcmplt>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d04f      	beq.n	8006aae <_dtoa_r+0x236>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a18:	1b1c      	subs	r4, r3, r4
 8006a1a:	1e63      	subs	r3, r4, #1
 8006a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1e:	bf49      	itett	mi
 8006a20:	f1c4 0301 	rsbmi	r3, r4, #1
 8006a24:	2300      	movpl	r3, #0
 8006a26:	9306      	strmi	r3, [sp, #24]
 8006a28:	2300      	movmi	r3, #0
 8006a2a:	bf54      	ite	pl
 8006a2c:	9306      	strpl	r3, [sp, #24]
 8006a2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006a30:	f1ba 0f00 	cmp.w	sl, #0
 8006a34:	db3d      	blt.n	8006ab2 <_dtoa_r+0x23a>
 8006a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a38:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006a3c:	4453      	add	r3, sl
 8006a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a40:	2300      	movs	r3, #0
 8006a42:	930a      	str	r3, [sp, #40]	; 0x28
 8006a44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a46:	2b09      	cmp	r3, #9
 8006a48:	f200 808c 	bhi.w	8006b64 <_dtoa_r+0x2ec>
 8006a4c:	2b05      	cmp	r3, #5
 8006a4e:	bfc4      	itt	gt
 8006a50:	3b04      	subgt	r3, #4
 8006a52:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a56:	bfc8      	it	gt
 8006a58:	2400      	movgt	r4, #0
 8006a5a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a5e:	bfd8      	it	le
 8006a60:	2401      	movle	r4, #1
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	f200 808a 	bhi.w	8006b7c <_dtoa_r+0x304>
 8006a68:	e8df f003 	tbb	[pc, r3]
 8006a6c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006a70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a74:	441c      	add	r4, r3
 8006a76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	bfc3      	ittte	gt
 8006a7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a82:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a86:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a8a:	f1c3 0320 	rsble	r3, r3, #32
 8006a8e:	bfc6      	itte	gt
 8006a90:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a94:	4318      	orrgt	r0, r3
 8006a96:	fa06 f003 	lslle.w	r0, r6, r3
 8006a9a:	f7f9 fca3 	bl	80003e4 <__aeabi_ui2d>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006aa4:	3c01      	subs	r4, #1
 8006aa6:	9313      	str	r3, [sp, #76]	; 0x4c
 8006aa8:	e76f      	b.n	800698a <_dtoa_r+0x112>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e7b2      	b.n	8006a14 <_dtoa_r+0x19c>
 8006aae:	900f      	str	r0, [sp, #60]	; 0x3c
 8006ab0:	e7b1      	b.n	8006a16 <_dtoa_r+0x19e>
 8006ab2:	9b06      	ldr	r3, [sp, #24]
 8006ab4:	eba3 030a 	sub.w	r3, r3, sl
 8006ab8:	9306      	str	r3, [sp, #24]
 8006aba:	f1ca 0300 	rsb	r3, sl, #0
 8006abe:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ac4:	e7be      	b.n	8006a44 <_dtoa_r+0x1cc>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dc58      	bgt.n	8006b82 <_dtoa_r+0x30a>
 8006ad0:	f04f 0901 	mov.w	r9, #1
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ada:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006ade:	2200      	movs	r2, #0
 8006ae0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006ae2:	6042      	str	r2, [r0, #4]
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	f102 0614 	add.w	r6, r2, #20
 8006aea:	429e      	cmp	r6, r3
 8006aec:	6841      	ldr	r1, [r0, #4]
 8006aee:	d94e      	bls.n	8006b8e <_dtoa_r+0x316>
 8006af0:	4628      	mov	r0, r5
 8006af2:	f001 f84f 	bl	8007b94 <_Balloc>
 8006af6:	9003      	str	r0, [sp, #12]
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d14c      	bne.n	8006b96 <_dtoa_r+0x31e>
 8006afc:	4602      	mov	r2, r0
 8006afe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b02:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <_dtoa_r+0x2e8>)
 8006b04:	e6cc      	b.n	80068a0 <_dtoa_r+0x28>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e7de      	b.n	8006ac8 <_dtoa_r+0x250>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b10:	eb0a 0903 	add.w	r9, sl, r3
 8006b14:	f109 0301 	add.w	r3, r9, #1
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	9308      	str	r3, [sp, #32]
 8006b1c:	bfb8      	it	lt
 8006b1e:	2301      	movlt	r3, #1
 8006b20:	e7dd      	b.n	8006ade <_dtoa_r+0x266>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e7f2      	b.n	8006b0c <_dtoa_r+0x294>
 8006b26:	bf00      	nop
 8006b28:	636f4361 	.word	0x636f4361
 8006b2c:	3fd287a7 	.word	0x3fd287a7
 8006b30:	8b60c8b3 	.word	0x8b60c8b3
 8006b34:	3fc68a28 	.word	0x3fc68a28
 8006b38:	509f79fb 	.word	0x509f79fb
 8006b3c:	3fd34413 	.word	0x3fd34413
 8006b40:	080097de 	.word	0x080097de
 8006b44:	080097f5 	.word	0x080097f5
 8006b48:	7ff00000 	.word	0x7ff00000
 8006b4c:	080097da 	.word	0x080097da
 8006b50:	080097d1 	.word	0x080097d1
 8006b54:	08009651 	.word	0x08009651
 8006b58:	3ff80000 	.word	0x3ff80000
 8006b5c:	08009960 	.word	0x08009960
 8006b60:	08009850 	.word	0x08009850
 8006b64:	2401      	movs	r4, #1
 8006b66:	2300      	movs	r3, #0
 8006b68:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b6a:	9322      	str	r3, [sp, #136]	; 0x88
 8006b6c:	f04f 39ff 	mov.w	r9, #4294967295
 8006b70:	2200      	movs	r2, #0
 8006b72:	2312      	movs	r3, #18
 8006b74:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b78:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b7a:	e7b0      	b.n	8006ade <_dtoa_r+0x266>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b80:	e7f4      	b.n	8006b6c <_dtoa_r+0x2f4>
 8006b82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006b86:	464b      	mov	r3, r9
 8006b88:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b8c:	e7a7      	b.n	8006ade <_dtoa_r+0x266>
 8006b8e:	3101      	adds	r1, #1
 8006b90:	6041      	str	r1, [r0, #4]
 8006b92:	0052      	lsls	r2, r2, #1
 8006b94:	e7a7      	b.n	8006ae6 <_dtoa_r+0x26e>
 8006b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b98:	9a03      	ldr	r2, [sp, #12]
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	9b08      	ldr	r3, [sp, #32]
 8006b9e:	2b0e      	cmp	r3, #14
 8006ba0:	f200 80a8 	bhi.w	8006cf4 <_dtoa_r+0x47c>
 8006ba4:	2c00      	cmp	r4, #0
 8006ba6:	f000 80a5 	beq.w	8006cf4 <_dtoa_r+0x47c>
 8006baa:	f1ba 0f00 	cmp.w	sl, #0
 8006bae:	dd34      	ble.n	8006c1a <_dtoa_r+0x3a2>
 8006bb0:	4a9a      	ldr	r2, [pc, #616]	; (8006e1c <_dtoa_r+0x5a4>)
 8006bb2:	f00a 030f 	and.w	r3, sl, #15
 8006bb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006bbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006bc6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006bca:	d016      	beq.n	8006bfa <_dtoa_r+0x382>
 8006bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bd0:	4b93      	ldr	r3, [pc, #588]	; (8006e20 <_dtoa_r+0x5a8>)
 8006bd2:	2703      	movs	r7, #3
 8006bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bd8:	f7f9 fda8 	bl	800072c <__aeabi_ddiv>
 8006bdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006be0:	f004 040f 	and.w	r4, r4, #15
 8006be4:	4e8e      	ldr	r6, [pc, #568]	; (8006e20 <_dtoa_r+0x5a8>)
 8006be6:	b954      	cbnz	r4, 8006bfe <_dtoa_r+0x386>
 8006be8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bf0:	f7f9 fd9c 	bl	800072c <__aeabi_ddiv>
 8006bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bf8:	e029      	b.n	8006c4e <_dtoa_r+0x3d6>
 8006bfa:	2702      	movs	r7, #2
 8006bfc:	e7f2      	b.n	8006be4 <_dtoa_r+0x36c>
 8006bfe:	07e1      	lsls	r1, r4, #31
 8006c00:	d508      	bpl.n	8006c14 <_dtoa_r+0x39c>
 8006c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c0a:	f7f9 fc65 	bl	80004d8 <__aeabi_dmul>
 8006c0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c12:	3701      	adds	r7, #1
 8006c14:	1064      	asrs	r4, r4, #1
 8006c16:	3608      	adds	r6, #8
 8006c18:	e7e5      	b.n	8006be6 <_dtoa_r+0x36e>
 8006c1a:	f000 80a5 	beq.w	8006d68 <_dtoa_r+0x4f0>
 8006c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c22:	f1ca 0400 	rsb	r4, sl, #0
 8006c26:	4b7d      	ldr	r3, [pc, #500]	; (8006e1c <_dtoa_r+0x5a4>)
 8006c28:	f004 020f 	and.w	r2, r4, #15
 8006c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	f7f9 fc50 	bl	80004d8 <__aeabi_dmul>
 8006c38:	2702      	movs	r7, #2
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c40:	4e77      	ldr	r6, [pc, #476]	; (8006e20 <_dtoa_r+0x5a8>)
 8006c42:	1124      	asrs	r4, r4, #4
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	f040 8084 	bne.w	8006d52 <_dtoa_r+0x4da>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1d2      	bne.n	8006bf4 <_dtoa_r+0x37c>
 8006c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 808b 	beq.w	8006d6c <_dtoa_r+0x4f4>
 8006c56:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c62:	2200      	movs	r2, #0
 8006c64:	4b6f      	ldr	r3, [pc, #444]	; (8006e24 <_dtoa_r+0x5ac>)
 8006c66:	f7f9 fea9 	bl	80009bc <__aeabi_dcmplt>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d07e      	beq.n	8006d6c <_dtoa_r+0x4f4>
 8006c6e:	9b08      	ldr	r3, [sp, #32]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d07b      	beq.n	8006d6c <_dtoa_r+0x4f4>
 8006c74:	f1b9 0f00 	cmp.w	r9, #0
 8006c78:	dd38      	ble.n	8006cec <_dtoa_r+0x474>
 8006c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c7e:	2200      	movs	r2, #0
 8006c80:	4b69      	ldr	r3, [pc, #420]	; (8006e28 <_dtoa_r+0x5b0>)
 8006c82:	f7f9 fc29 	bl	80004d8 <__aeabi_dmul>
 8006c86:	464c      	mov	r4, r9
 8006c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c8c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006c90:	3701      	adds	r7, #1
 8006c92:	4638      	mov	r0, r7
 8006c94:	f7f9 fbb6 	bl	8000404 <__aeabi_i2d>
 8006c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c9c:	f7f9 fc1c 	bl	80004d8 <__aeabi_dmul>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4b62      	ldr	r3, [pc, #392]	; (8006e2c <_dtoa_r+0x5b4>)
 8006ca4:	f7f9 fa62 	bl	800016c <__adddf3>
 8006ca8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006cac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cb0:	9611      	str	r6, [sp, #68]	; 0x44
 8006cb2:	2c00      	cmp	r4, #0
 8006cb4:	d15d      	bne.n	8006d72 <_dtoa_r+0x4fa>
 8006cb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4b5c      	ldr	r3, [pc, #368]	; (8006e30 <_dtoa_r+0x5b8>)
 8006cbe:	f7f9 fa53 	bl	8000168 <__aeabi_dsub>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cca:	4633      	mov	r3, r6
 8006ccc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cce:	f7f9 fe93 	bl	80009f8 <__aeabi_dcmpgt>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	f040 829c 	bne.w	8007210 <_dtoa_r+0x998>
 8006cd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cde:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006ce2:	f7f9 fe6b 	bl	80009bc <__aeabi_dcmplt>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f040 8290 	bne.w	800720c <_dtoa_r+0x994>
 8006cec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006cf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f2c0 8152 	blt.w	8006fa0 <_dtoa_r+0x728>
 8006cfc:	f1ba 0f0e 	cmp.w	sl, #14
 8006d00:	f300 814e 	bgt.w	8006fa0 <_dtoa_r+0x728>
 8006d04:	4b45      	ldr	r3, [pc, #276]	; (8006e1c <_dtoa_r+0x5a4>)
 8006d06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d0e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f280 80db 	bge.w	8006ed0 <_dtoa_r+0x658>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f300 80d7 	bgt.w	8006ed0 <_dtoa_r+0x658>
 8006d22:	f040 8272 	bne.w	800720a <_dtoa_r+0x992>
 8006d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4b40      	ldr	r3, [pc, #256]	; (8006e30 <_dtoa_r+0x5b8>)
 8006d2e:	f7f9 fbd3 	bl	80004d8 <__aeabi_dmul>
 8006d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d36:	f7f9 fe55 	bl	80009e4 <__aeabi_dcmpge>
 8006d3a:	9c08      	ldr	r4, [sp, #32]
 8006d3c:	4626      	mov	r6, r4
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f040 8248 	bne.w	80071d4 <_dtoa_r+0x95c>
 8006d44:	2331      	movs	r3, #49	; 0x31
 8006d46:	9f03      	ldr	r7, [sp, #12]
 8006d48:	f10a 0a01 	add.w	sl, sl, #1
 8006d4c:	f807 3b01 	strb.w	r3, [r7], #1
 8006d50:	e244      	b.n	80071dc <_dtoa_r+0x964>
 8006d52:	07e2      	lsls	r2, r4, #31
 8006d54:	d505      	bpl.n	8006d62 <_dtoa_r+0x4ea>
 8006d56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d5a:	f7f9 fbbd 	bl	80004d8 <__aeabi_dmul>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	3701      	adds	r7, #1
 8006d62:	1064      	asrs	r4, r4, #1
 8006d64:	3608      	adds	r6, #8
 8006d66:	e76d      	b.n	8006c44 <_dtoa_r+0x3cc>
 8006d68:	2702      	movs	r7, #2
 8006d6a:	e770      	b.n	8006c4e <_dtoa_r+0x3d6>
 8006d6c:	46d0      	mov	r8, sl
 8006d6e:	9c08      	ldr	r4, [sp, #32]
 8006d70:	e78f      	b.n	8006c92 <_dtoa_r+0x41a>
 8006d72:	9903      	ldr	r1, [sp, #12]
 8006d74:	4b29      	ldr	r3, [pc, #164]	; (8006e1c <_dtoa_r+0x5a4>)
 8006d76:	4421      	add	r1, r4
 8006d78:	9112      	str	r1, [sp, #72]	; 0x48
 8006d7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	d055      	beq.n	8006e38 <_dtoa_r+0x5c0>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	4929      	ldr	r1, [pc, #164]	; (8006e34 <_dtoa_r+0x5bc>)
 8006d90:	f7f9 fccc 	bl	800072c <__aeabi_ddiv>
 8006d94:	463b      	mov	r3, r7
 8006d96:	4632      	mov	r2, r6
 8006d98:	f7f9 f9e6 	bl	8000168 <__aeabi_dsub>
 8006d9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006da0:	9f03      	ldr	r7, [sp, #12]
 8006da2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da6:	f7f9 fe47 	bl	8000a38 <__aeabi_d2iz>
 8006daa:	4604      	mov	r4, r0
 8006dac:	f7f9 fb2a 	bl	8000404 <__aeabi_i2d>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db8:	f7f9 f9d6 	bl	8000168 <__aeabi_dsub>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	3430      	adds	r4, #48	; 0x30
 8006dc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dca:	f807 4b01 	strb.w	r4, [r7], #1
 8006dce:	f7f9 fdf5 	bl	80009bc <__aeabi_dcmplt>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d174      	bne.n	8006ec0 <_dtoa_r+0x648>
 8006dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dda:	2000      	movs	r0, #0
 8006ddc:	4911      	ldr	r1, [pc, #68]	; (8006e24 <_dtoa_r+0x5ac>)
 8006dde:	f7f9 f9c3 	bl	8000168 <__aeabi_dsub>
 8006de2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006de6:	f7f9 fde9 	bl	80009bc <__aeabi_dcmplt>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	f040 80b7 	bne.w	8006f5e <_dtoa_r+0x6e6>
 8006df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006df2:	429f      	cmp	r7, r3
 8006df4:	f43f af7a 	beq.w	8006cec <_dtoa_r+0x474>
 8006df8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <_dtoa_r+0x5b0>)
 8006e00:	f7f9 fb6a 	bl	80004d8 <__aeabi_dmul>
 8006e04:	2200      	movs	r2, #0
 8006e06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e0e:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <_dtoa_r+0x5b0>)
 8006e10:	f7f9 fb62 	bl	80004d8 <__aeabi_dmul>
 8006e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e18:	e7c3      	b.n	8006da2 <_dtoa_r+0x52a>
 8006e1a:	bf00      	nop
 8006e1c:	08009960 	.word	0x08009960
 8006e20:	08009938 	.word	0x08009938
 8006e24:	3ff00000 	.word	0x3ff00000
 8006e28:	40240000 	.word	0x40240000
 8006e2c:	401c0000 	.word	0x401c0000
 8006e30:	40140000 	.word	0x40140000
 8006e34:	3fe00000 	.word	0x3fe00000
 8006e38:	4630      	mov	r0, r6
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	f7f9 fb4c 	bl	80004d8 <__aeabi_dmul>
 8006e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e42:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e46:	9c03      	ldr	r4, [sp, #12]
 8006e48:	9314      	str	r3, [sp, #80]	; 0x50
 8006e4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e4e:	f7f9 fdf3 	bl	8000a38 <__aeabi_d2iz>
 8006e52:	9015      	str	r0, [sp, #84]	; 0x54
 8006e54:	f7f9 fad6 	bl	8000404 <__aeabi_i2d>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e60:	f7f9 f982 	bl	8000168 <__aeabi_dsub>
 8006e64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e66:	4606      	mov	r6, r0
 8006e68:	3330      	adds	r3, #48	; 0x30
 8006e6a:	f804 3b01 	strb.w	r3, [r4], #1
 8006e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e70:	460f      	mov	r7, r1
 8006e72:	429c      	cmp	r4, r3
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	d124      	bne.n	8006ec4 <_dtoa_r+0x64c>
 8006e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e7e:	4bb0      	ldr	r3, [pc, #704]	; (8007140 <_dtoa_r+0x8c8>)
 8006e80:	f7f9 f974 	bl	800016c <__adddf3>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 fdb4 	bl	80009f8 <__aeabi_dcmpgt>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d163      	bne.n	8006f5c <_dtoa_r+0x6e4>
 8006e94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e98:	2000      	movs	r0, #0
 8006e9a:	49a9      	ldr	r1, [pc, #676]	; (8007140 <_dtoa_r+0x8c8>)
 8006e9c:	f7f9 f964 	bl	8000168 <__aeabi_dsub>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	4639      	mov	r1, r7
 8006ea8:	f7f9 fd88 	bl	80009bc <__aeabi_dcmplt>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	f43f af1d 	beq.w	8006cec <_dtoa_r+0x474>
 8006eb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006eb4:	1e7b      	subs	r3, r7, #1
 8006eb6:	9314      	str	r3, [sp, #80]	; 0x50
 8006eb8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006ebc:	2b30      	cmp	r3, #48	; 0x30
 8006ebe:	d0f8      	beq.n	8006eb2 <_dtoa_r+0x63a>
 8006ec0:	46c2      	mov	sl, r8
 8006ec2:	e03b      	b.n	8006f3c <_dtoa_r+0x6c4>
 8006ec4:	4b9f      	ldr	r3, [pc, #636]	; (8007144 <_dtoa_r+0x8cc>)
 8006ec6:	f7f9 fb07 	bl	80004d8 <__aeabi_dmul>
 8006eca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ece:	e7bc      	b.n	8006e4a <_dtoa_r+0x5d2>
 8006ed0:	9f03      	ldr	r7, [sp, #12]
 8006ed2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ed6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	f7f9 fc25 	bl	800072c <__aeabi_ddiv>
 8006ee2:	f7f9 fda9 	bl	8000a38 <__aeabi_d2iz>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	f7f9 fa8c 	bl	8000404 <__aeabi_i2d>
 8006eec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ef0:	f7f9 faf2 	bl	80004d8 <__aeabi_dmul>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4649      	mov	r1, r9
 8006efc:	f7f9 f934 	bl	8000168 <__aeabi_dsub>
 8006f00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006f04:	f807 6b01 	strb.w	r6, [r7], #1
 8006f08:	9e03      	ldr	r6, [sp, #12]
 8006f0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006f0e:	1bbe      	subs	r6, r7, r6
 8006f10:	45b4      	cmp	ip, r6
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	d136      	bne.n	8006f86 <_dtoa_r+0x70e>
 8006f18:	f7f9 f928 	bl	800016c <__adddf3>
 8006f1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f20:	4680      	mov	r8, r0
 8006f22:	4689      	mov	r9, r1
 8006f24:	f7f9 fd68 	bl	80009f8 <__aeabi_dcmpgt>
 8006f28:	bb58      	cbnz	r0, 8006f82 <_dtoa_r+0x70a>
 8006f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f2e:	4640      	mov	r0, r8
 8006f30:	4649      	mov	r1, r9
 8006f32:	f7f9 fd39 	bl	80009a8 <__aeabi_dcmpeq>
 8006f36:	b108      	cbz	r0, 8006f3c <_dtoa_r+0x6c4>
 8006f38:	07e1      	lsls	r1, r4, #31
 8006f3a:	d422      	bmi.n	8006f82 <_dtoa_r+0x70a>
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	4659      	mov	r1, fp
 8006f40:	f000 fe68 	bl	8007c14 <_Bfree>
 8006f44:	2300      	movs	r3, #0
 8006f46:	703b      	strb	r3, [r7, #0]
 8006f48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f4a:	f10a 0001 	add.w	r0, sl, #1
 8006f4e:	6018      	str	r0, [r3, #0]
 8006f50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f43f acde 	beq.w	8006914 <_dtoa_r+0x9c>
 8006f58:	601f      	str	r7, [r3, #0]
 8006f5a:	e4db      	b.n	8006914 <_dtoa_r+0x9c>
 8006f5c:	4627      	mov	r7, r4
 8006f5e:	463b      	mov	r3, r7
 8006f60:	461f      	mov	r7, r3
 8006f62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f66:	2a39      	cmp	r2, #57	; 0x39
 8006f68:	d107      	bne.n	8006f7a <_dtoa_r+0x702>
 8006f6a:	9a03      	ldr	r2, [sp, #12]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d1f7      	bne.n	8006f60 <_dtoa_r+0x6e8>
 8006f70:	2230      	movs	r2, #48	; 0x30
 8006f72:	9903      	ldr	r1, [sp, #12]
 8006f74:	f108 0801 	add.w	r8, r8, #1
 8006f78:	700a      	strb	r2, [r1, #0]
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	3201      	adds	r2, #1
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	e79e      	b.n	8006ec0 <_dtoa_r+0x648>
 8006f82:	46d0      	mov	r8, sl
 8006f84:	e7eb      	b.n	8006f5e <_dtoa_r+0x6e6>
 8006f86:	2200      	movs	r2, #0
 8006f88:	4b6e      	ldr	r3, [pc, #440]	; (8007144 <_dtoa_r+0x8cc>)
 8006f8a:	f7f9 faa5 	bl	80004d8 <__aeabi_dmul>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2300      	movs	r3, #0
 8006f92:	4680      	mov	r8, r0
 8006f94:	4689      	mov	r9, r1
 8006f96:	f7f9 fd07 	bl	80009a8 <__aeabi_dcmpeq>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d09b      	beq.n	8006ed6 <_dtoa_r+0x65e>
 8006f9e:	e7cd      	b.n	8006f3c <_dtoa_r+0x6c4>
 8006fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	f000 80d0 	beq.w	8007148 <_dtoa_r+0x8d0>
 8006fa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006faa:	2a01      	cmp	r2, #1
 8006fac:	f300 80ae 	bgt.w	800710c <_dtoa_r+0x894>
 8006fb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	f000 80a6 	beq.w	8007104 <_dtoa_r+0x88c>
 8006fb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006fbe:	9f06      	ldr	r7, [sp, #24]
 8006fc0:	9a06      	ldr	r2, [sp, #24]
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	441a      	add	r2, r3
 8006fc6:	9206      	str	r2, [sp, #24]
 8006fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fca:	4628      	mov	r0, r5
 8006fcc:	441a      	add	r2, r3
 8006fce:	9209      	str	r2, [sp, #36]	; 0x24
 8006fd0:	f000 ff20 	bl	8007e14 <__i2b>
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	2f00      	cmp	r7, #0
 8006fd8:	dd0c      	ble.n	8006ff4 <_dtoa_r+0x77c>
 8006fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dd09      	ble.n	8006ff4 <_dtoa_r+0x77c>
 8006fe0:	42bb      	cmp	r3, r7
 8006fe2:	bfa8      	it	ge
 8006fe4:	463b      	movge	r3, r7
 8006fe6:	9a06      	ldr	r2, [sp, #24]
 8006fe8:	1aff      	subs	r7, r7, r3
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	9206      	str	r2, [sp, #24]
 8006fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff6:	b1f3      	cbz	r3, 8007036 <_dtoa_r+0x7be>
 8006ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 80a8 	beq.w	8007150 <_dtoa_r+0x8d8>
 8007000:	2c00      	cmp	r4, #0
 8007002:	dd10      	ble.n	8007026 <_dtoa_r+0x7ae>
 8007004:	4631      	mov	r1, r6
 8007006:	4622      	mov	r2, r4
 8007008:	4628      	mov	r0, r5
 800700a:	f000 ffc1 	bl	8007f90 <__pow5mult>
 800700e:	465a      	mov	r2, fp
 8007010:	4601      	mov	r1, r0
 8007012:	4606      	mov	r6, r0
 8007014:	4628      	mov	r0, r5
 8007016:	f000 ff13 	bl	8007e40 <__multiply>
 800701a:	4680      	mov	r8, r0
 800701c:	4659      	mov	r1, fp
 800701e:	4628      	mov	r0, r5
 8007020:	f000 fdf8 	bl	8007c14 <_Bfree>
 8007024:	46c3      	mov	fp, r8
 8007026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007028:	1b1a      	subs	r2, r3, r4
 800702a:	d004      	beq.n	8007036 <_dtoa_r+0x7be>
 800702c:	4659      	mov	r1, fp
 800702e:	4628      	mov	r0, r5
 8007030:	f000 ffae 	bl	8007f90 <__pow5mult>
 8007034:	4683      	mov	fp, r0
 8007036:	2101      	movs	r1, #1
 8007038:	4628      	mov	r0, r5
 800703a:	f000 feeb 	bl	8007e14 <__i2b>
 800703e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007040:	4604      	mov	r4, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	f340 8086 	ble.w	8007154 <_dtoa_r+0x8dc>
 8007048:	461a      	mov	r2, r3
 800704a:	4601      	mov	r1, r0
 800704c:	4628      	mov	r0, r5
 800704e:	f000 ff9f 	bl	8007f90 <__pow5mult>
 8007052:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007054:	4604      	mov	r4, r0
 8007056:	2b01      	cmp	r3, #1
 8007058:	dd7f      	ble.n	800715a <_dtoa_r+0x8e2>
 800705a:	f04f 0800 	mov.w	r8, #0
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007064:	6918      	ldr	r0, [r3, #16]
 8007066:	f000 fe87 	bl	8007d78 <__hi0bits>
 800706a:	f1c0 0020 	rsb	r0, r0, #32
 800706e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007070:	4418      	add	r0, r3
 8007072:	f010 001f 	ands.w	r0, r0, #31
 8007076:	f000 8092 	beq.w	800719e <_dtoa_r+0x926>
 800707a:	f1c0 0320 	rsb	r3, r0, #32
 800707e:	2b04      	cmp	r3, #4
 8007080:	f340 808a 	ble.w	8007198 <_dtoa_r+0x920>
 8007084:	f1c0 001c 	rsb	r0, r0, #28
 8007088:	9b06      	ldr	r3, [sp, #24]
 800708a:	4407      	add	r7, r0
 800708c:	4403      	add	r3, r0
 800708e:	9306      	str	r3, [sp, #24]
 8007090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007092:	4403      	add	r3, r0
 8007094:	9309      	str	r3, [sp, #36]	; 0x24
 8007096:	9b06      	ldr	r3, [sp, #24]
 8007098:	2b00      	cmp	r3, #0
 800709a:	dd05      	ble.n	80070a8 <_dtoa_r+0x830>
 800709c:	4659      	mov	r1, fp
 800709e:	461a      	mov	r2, r3
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 ffcf 	bl	8008044 <__lshift>
 80070a6:	4683      	mov	fp, r0
 80070a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	dd05      	ble.n	80070ba <_dtoa_r+0x842>
 80070ae:	4621      	mov	r1, r4
 80070b0:	461a      	mov	r2, r3
 80070b2:	4628      	mov	r0, r5
 80070b4:	f000 ffc6 	bl	8008044 <__lshift>
 80070b8:	4604      	mov	r4, r0
 80070ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d070      	beq.n	80071a2 <_dtoa_r+0x92a>
 80070c0:	4621      	mov	r1, r4
 80070c2:	4658      	mov	r0, fp
 80070c4:	f001 f82e 	bl	8008124 <__mcmp>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	da6a      	bge.n	80071a2 <_dtoa_r+0x92a>
 80070cc:	2300      	movs	r3, #0
 80070ce:	4659      	mov	r1, fp
 80070d0:	220a      	movs	r2, #10
 80070d2:	4628      	mov	r0, r5
 80070d4:	f000 fdc0 	bl	8007c58 <__multadd>
 80070d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070da:	4683      	mov	fp, r0
 80070dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8194 	beq.w	800740e <_dtoa_r+0xb96>
 80070e6:	4631      	mov	r1, r6
 80070e8:	2300      	movs	r3, #0
 80070ea:	220a      	movs	r2, #10
 80070ec:	4628      	mov	r0, r5
 80070ee:	f000 fdb3 	bl	8007c58 <__multadd>
 80070f2:	f1b9 0f00 	cmp.w	r9, #0
 80070f6:	4606      	mov	r6, r0
 80070f8:	f300 8093 	bgt.w	8007222 <_dtoa_r+0x9aa>
 80070fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070fe:	2b02      	cmp	r3, #2
 8007100:	dc57      	bgt.n	80071b2 <_dtoa_r+0x93a>
 8007102:	e08e      	b.n	8007222 <_dtoa_r+0x9aa>
 8007104:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800710a:	e757      	b.n	8006fbc <_dtoa_r+0x744>
 800710c:	9b08      	ldr	r3, [sp, #32]
 800710e:	1e5c      	subs	r4, r3, #1
 8007110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007112:	42a3      	cmp	r3, r4
 8007114:	bfb7      	itett	lt
 8007116:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007118:	1b1c      	subge	r4, r3, r4
 800711a:	1ae2      	sublt	r2, r4, r3
 800711c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800711e:	bfbe      	ittt	lt
 8007120:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007122:	189b      	addlt	r3, r3, r2
 8007124:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007126:	9b08      	ldr	r3, [sp, #32]
 8007128:	bfb8      	it	lt
 800712a:	2400      	movlt	r4, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	bfbb      	ittet	lt
 8007130:	9b06      	ldrlt	r3, [sp, #24]
 8007132:	9a08      	ldrlt	r2, [sp, #32]
 8007134:	9f06      	ldrge	r7, [sp, #24]
 8007136:	1a9f      	sublt	r7, r3, r2
 8007138:	bfac      	ite	ge
 800713a:	9b08      	ldrge	r3, [sp, #32]
 800713c:	2300      	movlt	r3, #0
 800713e:	e73f      	b.n	8006fc0 <_dtoa_r+0x748>
 8007140:	3fe00000 	.word	0x3fe00000
 8007144:	40240000 	.word	0x40240000
 8007148:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800714a:	9f06      	ldr	r7, [sp, #24]
 800714c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800714e:	e742      	b.n	8006fd6 <_dtoa_r+0x75e>
 8007150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007152:	e76b      	b.n	800702c <_dtoa_r+0x7b4>
 8007154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007156:	2b01      	cmp	r3, #1
 8007158:	dc19      	bgt.n	800718e <_dtoa_r+0x916>
 800715a:	9b04      	ldr	r3, [sp, #16]
 800715c:	b9bb      	cbnz	r3, 800718e <_dtoa_r+0x916>
 800715e:	9b05      	ldr	r3, [sp, #20]
 8007160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007164:	b99b      	cbnz	r3, 800718e <_dtoa_r+0x916>
 8007166:	9b05      	ldr	r3, [sp, #20]
 8007168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800716c:	0d1b      	lsrs	r3, r3, #20
 800716e:	051b      	lsls	r3, r3, #20
 8007170:	b183      	cbz	r3, 8007194 <_dtoa_r+0x91c>
 8007172:	f04f 0801 	mov.w	r8, #1
 8007176:	9b06      	ldr	r3, [sp, #24]
 8007178:	3301      	adds	r3, #1
 800717a:	9306      	str	r3, [sp, #24]
 800717c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717e:	3301      	adds	r3, #1
 8007180:	9309      	str	r3, [sp, #36]	; 0x24
 8007182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007184:	2b00      	cmp	r3, #0
 8007186:	f47f af6a 	bne.w	800705e <_dtoa_r+0x7e6>
 800718a:	2001      	movs	r0, #1
 800718c:	e76f      	b.n	800706e <_dtoa_r+0x7f6>
 800718e:	f04f 0800 	mov.w	r8, #0
 8007192:	e7f6      	b.n	8007182 <_dtoa_r+0x90a>
 8007194:	4698      	mov	r8, r3
 8007196:	e7f4      	b.n	8007182 <_dtoa_r+0x90a>
 8007198:	f43f af7d 	beq.w	8007096 <_dtoa_r+0x81e>
 800719c:	4618      	mov	r0, r3
 800719e:	301c      	adds	r0, #28
 80071a0:	e772      	b.n	8007088 <_dtoa_r+0x810>
 80071a2:	9b08      	ldr	r3, [sp, #32]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	dc36      	bgt.n	8007216 <_dtoa_r+0x99e>
 80071a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	dd33      	ble.n	8007216 <_dtoa_r+0x99e>
 80071ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071b2:	f1b9 0f00 	cmp.w	r9, #0
 80071b6:	d10d      	bne.n	80071d4 <_dtoa_r+0x95c>
 80071b8:	4621      	mov	r1, r4
 80071ba:	464b      	mov	r3, r9
 80071bc:	2205      	movs	r2, #5
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 fd4a 	bl	8007c58 <__multadd>
 80071c4:	4601      	mov	r1, r0
 80071c6:	4604      	mov	r4, r0
 80071c8:	4658      	mov	r0, fp
 80071ca:	f000 ffab 	bl	8008124 <__mcmp>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f73f adb8 	bgt.w	8006d44 <_dtoa_r+0x4cc>
 80071d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071d6:	9f03      	ldr	r7, [sp, #12]
 80071d8:	ea6f 0a03 	mvn.w	sl, r3
 80071dc:	f04f 0800 	mov.w	r8, #0
 80071e0:	4621      	mov	r1, r4
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 fd16 	bl	8007c14 <_Bfree>
 80071e8:	2e00      	cmp	r6, #0
 80071ea:	f43f aea7 	beq.w	8006f3c <_dtoa_r+0x6c4>
 80071ee:	f1b8 0f00 	cmp.w	r8, #0
 80071f2:	d005      	beq.n	8007200 <_dtoa_r+0x988>
 80071f4:	45b0      	cmp	r8, r6
 80071f6:	d003      	beq.n	8007200 <_dtoa_r+0x988>
 80071f8:	4641      	mov	r1, r8
 80071fa:	4628      	mov	r0, r5
 80071fc:	f000 fd0a 	bl	8007c14 <_Bfree>
 8007200:	4631      	mov	r1, r6
 8007202:	4628      	mov	r0, r5
 8007204:	f000 fd06 	bl	8007c14 <_Bfree>
 8007208:	e698      	b.n	8006f3c <_dtoa_r+0x6c4>
 800720a:	2400      	movs	r4, #0
 800720c:	4626      	mov	r6, r4
 800720e:	e7e1      	b.n	80071d4 <_dtoa_r+0x95c>
 8007210:	46c2      	mov	sl, r8
 8007212:	4626      	mov	r6, r4
 8007214:	e596      	b.n	8006d44 <_dtoa_r+0x4cc>
 8007216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80fd 	beq.w	800741c <_dtoa_r+0xba4>
 8007222:	2f00      	cmp	r7, #0
 8007224:	dd05      	ble.n	8007232 <_dtoa_r+0x9ba>
 8007226:	4631      	mov	r1, r6
 8007228:	463a      	mov	r2, r7
 800722a:	4628      	mov	r0, r5
 800722c:	f000 ff0a 	bl	8008044 <__lshift>
 8007230:	4606      	mov	r6, r0
 8007232:	f1b8 0f00 	cmp.w	r8, #0
 8007236:	d05c      	beq.n	80072f2 <_dtoa_r+0xa7a>
 8007238:	4628      	mov	r0, r5
 800723a:	6871      	ldr	r1, [r6, #4]
 800723c:	f000 fcaa 	bl	8007b94 <_Balloc>
 8007240:	4607      	mov	r7, r0
 8007242:	b928      	cbnz	r0, 8007250 <_dtoa_r+0x9d8>
 8007244:	4602      	mov	r2, r0
 8007246:	f240 21ea 	movw	r1, #746	; 0x2ea
 800724a:	4b7f      	ldr	r3, [pc, #508]	; (8007448 <_dtoa_r+0xbd0>)
 800724c:	f7ff bb28 	b.w	80068a0 <_dtoa_r+0x28>
 8007250:	6932      	ldr	r2, [r6, #16]
 8007252:	f106 010c 	add.w	r1, r6, #12
 8007256:	3202      	adds	r2, #2
 8007258:	0092      	lsls	r2, r2, #2
 800725a:	300c      	adds	r0, #12
 800725c:	f000 fc8c 	bl	8007b78 <memcpy>
 8007260:	2201      	movs	r2, #1
 8007262:	4639      	mov	r1, r7
 8007264:	4628      	mov	r0, r5
 8007266:	f000 feed 	bl	8008044 <__lshift>
 800726a:	46b0      	mov	r8, r6
 800726c:	4606      	mov	r6, r0
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	9308      	str	r3, [sp, #32]
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	444b      	add	r3, r9
 8007278:	930a      	str	r3, [sp, #40]	; 0x28
 800727a:	9b04      	ldr	r3, [sp, #16]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	9309      	str	r3, [sp, #36]	; 0x24
 8007282:	9b08      	ldr	r3, [sp, #32]
 8007284:	4621      	mov	r1, r4
 8007286:	3b01      	subs	r3, #1
 8007288:	4658      	mov	r0, fp
 800728a:	9304      	str	r3, [sp, #16]
 800728c:	f7ff fa68 	bl	8006760 <quorem>
 8007290:	4603      	mov	r3, r0
 8007292:	4641      	mov	r1, r8
 8007294:	3330      	adds	r3, #48	; 0x30
 8007296:	9006      	str	r0, [sp, #24]
 8007298:	4658      	mov	r0, fp
 800729a:	930b      	str	r3, [sp, #44]	; 0x2c
 800729c:	f000 ff42 	bl	8008124 <__mcmp>
 80072a0:	4632      	mov	r2, r6
 80072a2:	4681      	mov	r9, r0
 80072a4:	4621      	mov	r1, r4
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 ff58 	bl	800815c <__mdiff>
 80072ac:	68c2      	ldr	r2, [r0, #12]
 80072ae:	4607      	mov	r7, r0
 80072b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b2:	bb02      	cbnz	r2, 80072f6 <_dtoa_r+0xa7e>
 80072b4:	4601      	mov	r1, r0
 80072b6:	4658      	mov	r0, fp
 80072b8:	f000 ff34 	bl	8008124 <__mcmp>
 80072bc:	4602      	mov	r2, r0
 80072be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072c0:	4639      	mov	r1, r7
 80072c2:	4628      	mov	r0, r5
 80072c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80072c8:	f000 fca4 	bl	8007c14 <_Bfree>
 80072cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072d0:	9f08      	ldr	r7, [sp, #32]
 80072d2:	ea43 0102 	orr.w	r1, r3, r2
 80072d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d8:	430b      	orrs	r3, r1
 80072da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072dc:	d10d      	bne.n	80072fa <_dtoa_r+0xa82>
 80072de:	2b39      	cmp	r3, #57	; 0x39
 80072e0:	d029      	beq.n	8007336 <_dtoa_r+0xabe>
 80072e2:	f1b9 0f00 	cmp.w	r9, #0
 80072e6:	dd01      	ble.n	80072ec <_dtoa_r+0xa74>
 80072e8:	9b06      	ldr	r3, [sp, #24]
 80072ea:	3331      	adds	r3, #49	; 0x31
 80072ec:	9a04      	ldr	r2, [sp, #16]
 80072ee:	7013      	strb	r3, [r2, #0]
 80072f0:	e776      	b.n	80071e0 <_dtoa_r+0x968>
 80072f2:	4630      	mov	r0, r6
 80072f4:	e7b9      	b.n	800726a <_dtoa_r+0x9f2>
 80072f6:	2201      	movs	r2, #1
 80072f8:	e7e2      	b.n	80072c0 <_dtoa_r+0xa48>
 80072fa:	f1b9 0f00 	cmp.w	r9, #0
 80072fe:	db06      	blt.n	800730e <_dtoa_r+0xa96>
 8007300:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007302:	ea41 0909 	orr.w	r9, r1, r9
 8007306:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007308:	ea59 0101 	orrs.w	r1, r9, r1
 800730c:	d120      	bne.n	8007350 <_dtoa_r+0xad8>
 800730e:	2a00      	cmp	r2, #0
 8007310:	ddec      	ble.n	80072ec <_dtoa_r+0xa74>
 8007312:	4659      	mov	r1, fp
 8007314:	2201      	movs	r2, #1
 8007316:	4628      	mov	r0, r5
 8007318:	9308      	str	r3, [sp, #32]
 800731a:	f000 fe93 	bl	8008044 <__lshift>
 800731e:	4621      	mov	r1, r4
 8007320:	4683      	mov	fp, r0
 8007322:	f000 feff 	bl	8008124 <__mcmp>
 8007326:	2800      	cmp	r0, #0
 8007328:	9b08      	ldr	r3, [sp, #32]
 800732a:	dc02      	bgt.n	8007332 <_dtoa_r+0xaba>
 800732c:	d1de      	bne.n	80072ec <_dtoa_r+0xa74>
 800732e:	07da      	lsls	r2, r3, #31
 8007330:	d5dc      	bpl.n	80072ec <_dtoa_r+0xa74>
 8007332:	2b39      	cmp	r3, #57	; 0x39
 8007334:	d1d8      	bne.n	80072e8 <_dtoa_r+0xa70>
 8007336:	2339      	movs	r3, #57	; 0x39
 8007338:	9a04      	ldr	r2, [sp, #16]
 800733a:	7013      	strb	r3, [r2, #0]
 800733c:	463b      	mov	r3, r7
 800733e:	461f      	mov	r7, r3
 8007340:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007344:	3b01      	subs	r3, #1
 8007346:	2a39      	cmp	r2, #57	; 0x39
 8007348:	d050      	beq.n	80073ec <_dtoa_r+0xb74>
 800734a:	3201      	adds	r2, #1
 800734c:	701a      	strb	r2, [r3, #0]
 800734e:	e747      	b.n	80071e0 <_dtoa_r+0x968>
 8007350:	2a00      	cmp	r2, #0
 8007352:	dd03      	ble.n	800735c <_dtoa_r+0xae4>
 8007354:	2b39      	cmp	r3, #57	; 0x39
 8007356:	d0ee      	beq.n	8007336 <_dtoa_r+0xabe>
 8007358:	3301      	adds	r3, #1
 800735a:	e7c7      	b.n	80072ec <_dtoa_r+0xa74>
 800735c:	9a08      	ldr	r2, [sp, #32]
 800735e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007360:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007364:	428a      	cmp	r2, r1
 8007366:	d02a      	beq.n	80073be <_dtoa_r+0xb46>
 8007368:	4659      	mov	r1, fp
 800736a:	2300      	movs	r3, #0
 800736c:	220a      	movs	r2, #10
 800736e:	4628      	mov	r0, r5
 8007370:	f000 fc72 	bl	8007c58 <__multadd>
 8007374:	45b0      	cmp	r8, r6
 8007376:	4683      	mov	fp, r0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	f04f 020a 	mov.w	r2, #10
 8007380:	4641      	mov	r1, r8
 8007382:	4628      	mov	r0, r5
 8007384:	d107      	bne.n	8007396 <_dtoa_r+0xb1e>
 8007386:	f000 fc67 	bl	8007c58 <__multadd>
 800738a:	4680      	mov	r8, r0
 800738c:	4606      	mov	r6, r0
 800738e:	9b08      	ldr	r3, [sp, #32]
 8007390:	3301      	adds	r3, #1
 8007392:	9308      	str	r3, [sp, #32]
 8007394:	e775      	b.n	8007282 <_dtoa_r+0xa0a>
 8007396:	f000 fc5f 	bl	8007c58 <__multadd>
 800739a:	4631      	mov	r1, r6
 800739c:	4680      	mov	r8, r0
 800739e:	2300      	movs	r3, #0
 80073a0:	220a      	movs	r2, #10
 80073a2:	4628      	mov	r0, r5
 80073a4:	f000 fc58 	bl	8007c58 <__multadd>
 80073a8:	4606      	mov	r6, r0
 80073aa:	e7f0      	b.n	800738e <_dtoa_r+0xb16>
 80073ac:	f1b9 0f00 	cmp.w	r9, #0
 80073b0:	bfcc      	ite	gt
 80073b2:	464f      	movgt	r7, r9
 80073b4:	2701      	movle	r7, #1
 80073b6:	f04f 0800 	mov.w	r8, #0
 80073ba:	9a03      	ldr	r2, [sp, #12]
 80073bc:	4417      	add	r7, r2
 80073be:	4659      	mov	r1, fp
 80073c0:	2201      	movs	r2, #1
 80073c2:	4628      	mov	r0, r5
 80073c4:	9308      	str	r3, [sp, #32]
 80073c6:	f000 fe3d 	bl	8008044 <__lshift>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4683      	mov	fp, r0
 80073ce:	f000 fea9 	bl	8008124 <__mcmp>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	dcb2      	bgt.n	800733c <_dtoa_r+0xac4>
 80073d6:	d102      	bne.n	80073de <_dtoa_r+0xb66>
 80073d8:	9b08      	ldr	r3, [sp, #32]
 80073da:	07db      	lsls	r3, r3, #31
 80073dc:	d4ae      	bmi.n	800733c <_dtoa_r+0xac4>
 80073de:	463b      	mov	r3, r7
 80073e0:	461f      	mov	r7, r3
 80073e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073e6:	2a30      	cmp	r2, #48	; 0x30
 80073e8:	d0fa      	beq.n	80073e0 <_dtoa_r+0xb68>
 80073ea:	e6f9      	b.n	80071e0 <_dtoa_r+0x968>
 80073ec:	9a03      	ldr	r2, [sp, #12]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d1a5      	bne.n	800733e <_dtoa_r+0xac6>
 80073f2:	2331      	movs	r3, #49	; 0x31
 80073f4:	f10a 0a01 	add.w	sl, sl, #1
 80073f8:	e779      	b.n	80072ee <_dtoa_r+0xa76>
 80073fa:	4b14      	ldr	r3, [pc, #80]	; (800744c <_dtoa_r+0xbd4>)
 80073fc:	f7ff baa8 	b.w	8006950 <_dtoa_r+0xd8>
 8007400:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007402:	2b00      	cmp	r3, #0
 8007404:	f47f aa81 	bne.w	800690a <_dtoa_r+0x92>
 8007408:	4b11      	ldr	r3, [pc, #68]	; (8007450 <_dtoa_r+0xbd8>)
 800740a:	f7ff baa1 	b.w	8006950 <_dtoa_r+0xd8>
 800740e:	f1b9 0f00 	cmp.w	r9, #0
 8007412:	dc03      	bgt.n	800741c <_dtoa_r+0xba4>
 8007414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007416:	2b02      	cmp	r3, #2
 8007418:	f73f aecb 	bgt.w	80071b2 <_dtoa_r+0x93a>
 800741c:	9f03      	ldr	r7, [sp, #12]
 800741e:	4621      	mov	r1, r4
 8007420:	4658      	mov	r0, fp
 8007422:	f7ff f99d 	bl	8006760 <quorem>
 8007426:	9a03      	ldr	r2, [sp, #12]
 8007428:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800742c:	f807 3b01 	strb.w	r3, [r7], #1
 8007430:	1aba      	subs	r2, r7, r2
 8007432:	4591      	cmp	r9, r2
 8007434:	ddba      	ble.n	80073ac <_dtoa_r+0xb34>
 8007436:	4659      	mov	r1, fp
 8007438:	2300      	movs	r3, #0
 800743a:	220a      	movs	r2, #10
 800743c:	4628      	mov	r0, r5
 800743e:	f000 fc0b 	bl	8007c58 <__multadd>
 8007442:	4683      	mov	fp, r0
 8007444:	e7eb      	b.n	800741e <_dtoa_r+0xba6>
 8007446:	bf00      	nop
 8007448:	08009850 	.word	0x08009850
 800744c:	08009650 	.word	0x08009650
 8007450:	080097d1 	.word	0x080097d1

08007454 <rshift>:
 8007454:	6903      	ldr	r3, [r0, #16]
 8007456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800745a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800745e:	f100 0414 	add.w	r4, r0, #20
 8007462:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007466:	dd46      	ble.n	80074f6 <rshift+0xa2>
 8007468:	f011 011f 	ands.w	r1, r1, #31
 800746c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007474:	d10c      	bne.n	8007490 <rshift+0x3c>
 8007476:	4629      	mov	r1, r5
 8007478:	f100 0710 	add.w	r7, r0, #16
 800747c:	42b1      	cmp	r1, r6
 800747e:	d335      	bcc.n	80074ec <rshift+0x98>
 8007480:	1a9b      	subs	r3, r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	1eea      	subs	r2, r5, #3
 8007486:	4296      	cmp	r6, r2
 8007488:	bf38      	it	cc
 800748a:	2300      	movcc	r3, #0
 800748c:	4423      	add	r3, r4
 800748e:	e015      	b.n	80074bc <rshift+0x68>
 8007490:	46a1      	mov	r9, r4
 8007492:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007496:	f1c1 0820 	rsb	r8, r1, #32
 800749a:	40cf      	lsrs	r7, r1
 800749c:	f105 0e04 	add.w	lr, r5, #4
 80074a0:	4576      	cmp	r6, lr
 80074a2:	46f4      	mov	ip, lr
 80074a4:	d816      	bhi.n	80074d4 <rshift+0x80>
 80074a6:	1a9a      	subs	r2, r3, r2
 80074a8:	0092      	lsls	r2, r2, #2
 80074aa:	3a04      	subs	r2, #4
 80074ac:	3501      	adds	r5, #1
 80074ae:	42ae      	cmp	r6, r5
 80074b0:	bf38      	it	cc
 80074b2:	2200      	movcc	r2, #0
 80074b4:	18a3      	adds	r3, r4, r2
 80074b6:	50a7      	str	r7, [r4, r2]
 80074b8:	b107      	cbz	r7, 80074bc <rshift+0x68>
 80074ba:	3304      	adds	r3, #4
 80074bc:	42a3      	cmp	r3, r4
 80074be:	eba3 0204 	sub.w	r2, r3, r4
 80074c2:	bf08      	it	eq
 80074c4:	2300      	moveq	r3, #0
 80074c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074ca:	6102      	str	r2, [r0, #16]
 80074cc:	bf08      	it	eq
 80074ce:	6143      	streq	r3, [r0, #20]
 80074d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d4:	f8dc c000 	ldr.w	ip, [ip]
 80074d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80074dc:	ea4c 0707 	orr.w	r7, ip, r7
 80074e0:	f849 7b04 	str.w	r7, [r9], #4
 80074e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074e8:	40cf      	lsrs	r7, r1
 80074ea:	e7d9      	b.n	80074a0 <rshift+0x4c>
 80074ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80074f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80074f4:	e7c2      	b.n	800747c <rshift+0x28>
 80074f6:	4623      	mov	r3, r4
 80074f8:	e7e0      	b.n	80074bc <rshift+0x68>

080074fa <__hexdig_fun>:
 80074fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80074fe:	2b09      	cmp	r3, #9
 8007500:	d802      	bhi.n	8007508 <__hexdig_fun+0xe>
 8007502:	3820      	subs	r0, #32
 8007504:	b2c0      	uxtb	r0, r0
 8007506:	4770      	bx	lr
 8007508:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800750c:	2b05      	cmp	r3, #5
 800750e:	d801      	bhi.n	8007514 <__hexdig_fun+0x1a>
 8007510:	3847      	subs	r0, #71	; 0x47
 8007512:	e7f7      	b.n	8007504 <__hexdig_fun+0xa>
 8007514:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007518:	2b05      	cmp	r3, #5
 800751a:	d801      	bhi.n	8007520 <__hexdig_fun+0x26>
 800751c:	3827      	subs	r0, #39	; 0x27
 800751e:	e7f1      	b.n	8007504 <__hexdig_fun+0xa>
 8007520:	2000      	movs	r0, #0
 8007522:	4770      	bx	lr

08007524 <__gethex>:
 8007524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	b08b      	sub	sp, #44	; 0x2c
 800752a:	9305      	str	r3, [sp, #20]
 800752c:	4bb2      	ldr	r3, [pc, #712]	; (80077f8 <__gethex+0x2d4>)
 800752e:	9002      	str	r0, [sp, #8]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	468b      	mov	fp, r1
 8007534:	4618      	mov	r0, r3
 8007536:	4690      	mov	r8, r2
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	f7f8 fe09 	bl	8000150 <strlen>
 800753e:	4682      	mov	sl, r0
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	f8db 2000 	ldr.w	r2, [fp]
 8007546:	4403      	add	r3, r0
 8007548:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800754c:	9306      	str	r3, [sp, #24]
 800754e:	1c93      	adds	r3, r2, #2
 8007550:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007554:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007558:	32fe      	adds	r2, #254	; 0xfe
 800755a:	18d1      	adds	r1, r2, r3
 800755c:	461f      	mov	r7, r3
 800755e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007562:	9101      	str	r1, [sp, #4]
 8007564:	2830      	cmp	r0, #48	; 0x30
 8007566:	d0f8      	beq.n	800755a <__gethex+0x36>
 8007568:	f7ff ffc7 	bl	80074fa <__hexdig_fun>
 800756c:	4604      	mov	r4, r0
 800756e:	2800      	cmp	r0, #0
 8007570:	d13a      	bne.n	80075e8 <__gethex+0xc4>
 8007572:	4652      	mov	r2, sl
 8007574:	4638      	mov	r0, r7
 8007576:	9903      	ldr	r1, [sp, #12]
 8007578:	f001 fa26 	bl	80089c8 <strncmp>
 800757c:	4605      	mov	r5, r0
 800757e:	2800      	cmp	r0, #0
 8007580:	d166      	bne.n	8007650 <__gethex+0x12c>
 8007582:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007586:	eb07 060a 	add.w	r6, r7, sl
 800758a:	f7ff ffb6 	bl	80074fa <__hexdig_fun>
 800758e:	2800      	cmp	r0, #0
 8007590:	d060      	beq.n	8007654 <__gethex+0x130>
 8007592:	4633      	mov	r3, r6
 8007594:	7818      	ldrb	r0, [r3, #0]
 8007596:	461f      	mov	r7, r3
 8007598:	2830      	cmp	r0, #48	; 0x30
 800759a:	f103 0301 	add.w	r3, r3, #1
 800759e:	d0f9      	beq.n	8007594 <__gethex+0x70>
 80075a0:	f7ff ffab 	bl	80074fa <__hexdig_fun>
 80075a4:	2301      	movs	r3, #1
 80075a6:	fab0 f480 	clz	r4, r0
 80075aa:	4635      	mov	r5, r6
 80075ac:	0964      	lsrs	r4, r4, #5
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	463a      	mov	r2, r7
 80075b2:	4616      	mov	r6, r2
 80075b4:	7830      	ldrb	r0, [r6, #0]
 80075b6:	3201      	adds	r2, #1
 80075b8:	f7ff ff9f 	bl	80074fa <__hexdig_fun>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d1f8      	bne.n	80075b2 <__gethex+0x8e>
 80075c0:	4652      	mov	r2, sl
 80075c2:	4630      	mov	r0, r6
 80075c4:	9903      	ldr	r1, [sp, #12]
 80075c6:	f001 f9ff 	bl	80089c8 <strncmp>
 80075ca:	b980      	cbnz	r0, 80075ee <__gethex+0xca>
 80075cc:	b94d      	cbnz	r5, 80075e2 <__gethex+0xbe>
 80075ce:	eb06 050a 	add.w	r5, r6, sl
 80075d2:	462a      	mov	r2, r5
 80075d4:	4616      	mov	r6, r2
 80075d6:	7830      	ldrb	r0, [r6, #0]
 80075d8:	3201      	adds	r2, #1
 80075da:	f7ff ff8e 	bl	80074fa <__hexdig_fun>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d1f8      	bne.n	80075d4 <__gethex+0xb0>
 80075e2:	1bad      	subs	r5, r5, r6
 80075e4:	00ad      	lsls	r5, r5, #2
 80075e6:	e004      	b.n	80075f2 <__gethex+0xce>
 80075e8:	2400      	movs	r4, #0
 80075ea:	4625      	mov	r5, r4
 80075ec:	e7e0      	b.n	80075b0 <__gethex+0x8c>
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	d1f7      	bne.n	80075e2 <__gethex+0xbe>
 80075f2:	7833      	ldrb	r3, [r6, #0]
 80075f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075f8:	2b50      	cmp	r3, #80	; 0x50
 80075fa:	d139      	bne.n	8007670 <__gethex+0x14c>
 80075fc:	7873      	ldrb	r3, [r6, #1]
 80075fe:	2b2b      	cmp	r3, #43	; 0x2b
 8007600:	d02a      	beq.n	8007658 <__gethex+0x134>
 8007602:	2b2d      	cmp	r3, #45	; 0x2d
 8007604:	d02c      	beq.n	8007660 <__gethex+0x13c>
 8007606:	f04f 0900 	mov.w	r9, #0
 800760a:	1c71      	adds	r1, r6, #1
 800760c:	7808      	ldrb	r0, [r1, #0]
 800760e:	f7ff ff74 	bl	80074fa <__hexdig_fun>
 8007612:	1e43      	subs	r3, r0, #1
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b18      	cmp	r3, #24
 8007618:	d82a      	bhi.n	8007670 <__gethex+0x14c>
 800761a:	f1a0 0210 	sub.w	r2, r0, #16
 800761e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007622:	f7ff ff6a 	bl	80074fa <__hexdig_fun>
 8007626:	1e43      	subs	r3, r0, #1
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b18      	cmp	r3, #24
 800762c:	d91b      	bls.n	8007666 <__gethex+0x142>
 800762e:	f1b9 0f00 	cmp.w	r9, #0
 8007632:	d000      	beq.n	8007636 <__gethex+0x112>
 8007634:	4252      	negs	r2, r2
 8007636:	4415      	add	r5, r2
 8007638:	f8cb 1000 	str.w	r1, [fp]
 800763c:	b1d4      	cbz	r4, 8007674 <__gethex+0x150>
 800763e:	9b01      	ldr	r3, [sp, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	bf14      	ite	ne
 8007644:	2700      	movne	r7, #0
 8007646:	2706      	moveq	r7, #6
 8007648:	4638      	mov	r0, r7
 800764a:	b00b      	add	sp, #44	; 0x2c
 800764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007650:	463e      	mov	r6, r7
 8007652:	4625      	mov	r5, r4
 8007654:	2401      	movs	r4, #1
 8007656:	e7cc      	b.n	80075f2 <__gethex+0xce>
 8007658:	f04f 0900 	mov.w	r9, #0
 800765c:	1cb1      	adds	r1, r6, #2
 800765e:	e7d5      	b.n	800760c <__gethex+0xe8>
 8007660:	f04f 0901 	mov.w	r9, #1
 8007664:	e7fa      	b.n	800765c <__gethex+0x138>
 8007666:	230a      	movs	r3, #10
 8007668:	fb03 0202 	mla	r2, r3, r2, r0
 800766c:	3a10      	subs	r2, #16
 800766e:	e7d6      	b.n	800761e <__gethex+0xfa>
 8007670:	4631      	mov	r1, r6
 8007672:	e7e1      	b.n	8007638 <__gethex+0x114>
 8007674:	4621      	mov	r1, r4
 8007676:	1bf3      	subs	r3, r6, r7
 8007678:	3b01      	subs	r3, #1
 800767a:	2b07      	cmp	r3, #7
 800767c:	dc0a      	bgt.n	8007694 <__gethex+0x170>
 800767e:	9802      	ldr	r0, [sp, #8]
 8007680:	f000 fa88 	bl	8007b94 <_Balloc>
 8007684:	4604      	mov	r4, r0
 8007686:	b940      	cbnz	r0, 800769a <__gethex+0x176>
 8007688:	4602      	mov	r2, r0
 800768a:	21de      	movs	r1, #222	; 0xde
 800768c:	4b5b      	ldr	r3, [pc, #364]	; (80077fc <__gethex+0x2d8>)
 800768e:	485c      	ldr	r0, [pc, #368]	; (8007800 <__gethex+0x2dc>)
 8007690:	f001 f9bc 	bl	8008a0c <__assert_func>
 8007694:	3101      	adds	r1, #1
 8007696:	105b      	asrs	r3, r3, #1
 8007698:	e7ef      	b.n	800767a <__gethex+0x156>
 800769a:	f04f 0b00 	mov.w	fp, #0
 800769e:	f100 0914 	add.w	r9, r0, #20
 80076a2:	f1ca 0301 	rsb	r3, sl, #1
 80076a6:	f8cd 9010 	str.w	r9, [sp, #16]
 80076aa:	f8cd b004 	str.w	fp, [sp, #4]
 80076ae:	9308      	str	r3, [sp, #32]
 80076b0:	42b7      	cmp	r7, r6
 80076b2:	d33f      	bcc.n	8007734 <__gethex+0x210>
 80076b4:	9f04      	ldr	r7, [sp, #16]
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	f847 3b04 	str.w	r3, [r7], #4
 80076bc:	eba7 0709 	sub.w	r7, r7, r9
 80076c0:	10bf      	asrs	r7, r7, #2
 80076c2:	6127      	str	r7, [r4, #16]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 fb57 	bl	8007d78 <__hi0bits>
 80076ca:	017f      	lsls	r7, r7, #5
 80076cc:	f8d8 6000 	ldr.w	r6, [r8]
 80076d0:	1a3f      	subs	r7, r7, r0
 80076d2:	42b7      	cmp	r7, r6
 80076d4:	dd62      	ble.n	800779c <__gethex+0x278>
 80076d6:	1bbf      	subs	r7, r7, r6
 80076d8:	4639      	mov	r1, r7
 80076da:	4620      	mov	r0, r4
 80076dc:	f000 fef1 	bl	80084c2 <__any_on>
 80076e0:	4682      	mov	sl, r0
 80076e2:	b1a8      	cbz	r0, 8007710 <__gethex+0x1ec>
 80076e4:	f04f 0a01 	mov.w	sl, #1
 80076e8:	1e7b      	subs	r3, r7, #1
 80076ea:	1159      	asrs	r1, r3, #5
 80076ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80076f0:	f003 021f 	and.w	r2, r3, #31
 80076f4:	fa0a f202 	lsl.w	r2, sl, r2
 80076f8:	420a      	tst	r2, r1
 80076fa:	d009      	beq.n	8007710 <__gethex+0x1ec>
 80076fc:	4553      	cmp	r3, sl
 80076fe:	dd05      	ble.n	800770c <__gethex+0x1e8>
 8007700:	4620      	mov	r0, r4
 8007702:	1eb9      	subs	r1, r7, #2
 8007704:	f000 fedd 	bl	80084c2 <__any_on>
 8007708:	2800      	cmp	r0, #0
 800770a:	d144      	bne.n	8007796 <__gethex+0x272>
 800770c:	f04f 0a02 	mov.w	sl, #2
 8007710:	4639      	mov	r1, r7
 8007712:	4620      	mov	r0, r4
 8007714:	f7ff fe9e 	bl	8007454 <rshift>
 8007718:	443d      	add	r5, r7
 800771a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800771e:	42ab      	cmp	r3, r5
 8007720:	da4a      	bge.n	80077b8 <__gethex+0x294>
 8007722:	4621      	mov	r1, r4
 8007724:	9802      	ldr	r0, [sp, #8]
 8007726:	f000 fa75 	bl	8007c14 <_Bfree>
 800772a:	2300      	movs	r3, #0
 800772c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800772e:	27a3      	movs	r7, #163	; 0xa3
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	e789      	b.n	8007648 <__gethex+0x124>
 8007734:	1e73      	subs	r3, r6, #1
 8007736:	9a06      	ldr	r2, [sp, #24]
 8007738:	9307      	str	r3, [sp, #28]
 800773a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800773e:	4293      	cmp	r3, r2
 8007740:	d019      	beq.n	8007776 <__gethex+0x252>
 8007742:	f1bb 0f20 	cmp.w	fp, #32
 8007746:	d107      	bne.n	8007758 <__gethex+0x234>
 8007748:	9b04      	ldr	r3, [sp, #16]
 800774a:	9a01      	ldr	r2, [sp, #4]
 800774c:	f843 2b04 	str.w	r2, [r3], #4
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	2300      	movs	r3, #0
 8007754:	469b      	mov	fp, r3
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800775c:	f7ff fecd 	bl	80074fa <__hexdig_fun>
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	f000 000f 	and.w	r0, r0, #15
 8007766:	fa00 f00b 	lsl.w	r0, r0, fp
 800776a:	4303      	orrs	r3, r0
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	f10b 0b04 	add.w	fp, fp, #4
 8007772:	9b07      	ldr	r3, [sp, #28]
 8007774:	e00d      	b.n	8007792 <__gethex+0x26e>
 8007776:	9a08      	ldr	r2, [sp, #32]
 8007778:	1e73      	subs	r3, r6, #1
 800777a:	4413      	add	r3, r2
 800777c:	42bb      	cmp	r3, r7
 800777e:	d3e0      	bcc.n	8007742 <__gethex+0x21e>
 8007780:	4618      	mov	r0, r3
 8007782:	4652      	mov	r2, sl
 8007784:	9903      	ldr	r1, [sp, #12]
 8007786:	9309      	str	r3, [sp, #36]	; 0x24
 8007788:	f001 f91e 	bl	80089c8 <strncmp>
 800778c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778e:	2800      	cmp	r0, #0
 8007790:	d1d7      	bne.n	8007742 <__gethex+0x21e>
 8007792:	461e      	mov	r6, r3
 8007794:	e78c      	b.n	80076b0 <__gethex+0x18c>
 8007796:	f04f 0a03 	mov.w	sl, #3
 800779a:	e7b9      	b.n	8007710 <__gethex+0x1ec>
 800779c:	da09      	bge.n	80077b2 <__gethex+0x28e>
 800779e:	1bf7      	subs	r7, r6, r7
 80077a0:	4621      	mov	r1, r4
 80077a2:	463a      	mov	r2, r7
 80077a4:	9802      	ldr	r0, [sp, #8]
 80077a6:	f000 fc4d 	bl	8008044 <__lshift>
 80077aa:	4604      	mov	r4, r0
 80077ac:	1bed      	subs	r5, r5, r7
 80077ae:	f100 0914 	add.w	r9, r0, #20
 80077b2:	f04f 0a00 	mov.w	sl, #0
 80077b6:	e7b0      	b.n	800771a <__gethex+0x1f6>
 80077b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80077bc:	42a8      	cmp	r0, r5
 80077be:	dd72      	ble.n	80078a6 <__gethex+0x382>
 80077c0:	1b45      	subs	r5, r0, r5
 80077c2:	42ae      	cmp	r6, r5
 80077c4:	dc35      	bgt.n	8007832 <__gethex+0x30e>
 80077c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d029      	beq.n	8007822 <__gethex+0x2fe>
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d02b      	beq.n	800782a <__gethex+0x306>
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d11c      	bne.n	8007810 <__gethex+0x2ec>
 80077d6:	42ae      	cmp	r6, r5
 80077d8:	d11a      	bne.n	8007810 <__gethex+0x2ec>
 80077da:	2e01      	cmp	r6, #1
 80077dc:	d112      	bne.n	8007804 <__gethex+0x2e0>
 80077de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077e2:	9a05      	ldr	r2, [sp, #20]
 80077e4:	2762      	movs	r7, #98	; 0x62
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	2301      	movs	r3, #1
 80077ea:	6123      	str	r3, [r4, #16]
 80077ec:	f8c9 3000 	str.w	r3, [r9]
 80077f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077f2:	601c      	str	r4, [r3, #0]
 80077f4:	e728      	b.n	8007648 <__gethex+0x124>
 80077f6:	bf00      	nop
 80077f8:	080098c8 	.word	0x080098c8
 80077fc:	08009850 	.word	0x08009850
 8007800:	08009861 	.word	0x08009861
 8007804:	4620      	mov	r0, r4
 8007806:	1e71      	subs	r1, r6, #1
 8007808:	f000 fe5b 	bl	80084c2 <__any_on>
 800780c:	2800      	cmp	r0, #0
 800780e:	d1e6      	bne.n	80077de <__gethex+0x2ba>
 8007810:	4621      	mov	r1, r4
 8007812:	9802      	ldr	r0, [sp, #8]
 8007814:	f000 f9fe 	bl	8007c14 <_Bfree>
 8007818:	2300      	movs	r3, #0
 800781a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800781c:	2750      	movs	r7, #80	; 0x50
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	e712      	b.n	8007648 <__gethex+0x124>
 8007822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1f3      	bne.n	8007810 <__gethex+0x2ec>
 8007828:	e7d9      	b.n	80077de <__gethex+0x2ba>
 800782a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1d6      	bne.n	80077de <__gethex+0x2ba>
 8007830:	e7ee      	b.n	8007810 <__gethex+0x2ec>
 8007832:	1e6f      	subs	r7, r5, #1
 8007834:	f1ba 0f00 	cmp.w	sl, #0
 8007838:	d132      	bne.n	80078a0 <__gethex+0x37c>
 800783a:	b127      	cbz	r7, 8007846 <__gethex+0x322>
 800783c:	4639      	mov	r1, r7
 800783e:	4620      	mov	r0, r4
 8007840:	f000 fe3f 	bl	80084c2 <__any_on>
 8007844:	4682      	mov	sl, r0
 8007846:	2101      	movs	r1, #1
 8007848:	117b      	asrs	r3, r7, #5
 800784a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800784e:	f007 071f 	and.w	r7, r7, #31
 8007852:	fa01 f707 	lsl.w	r7, r1, r7
 8007856:	421f      	tst	r7, r3
 8007858:	f04f 0702 	mov.w	r7, #2
 800785c:	4629      	mov	r1, r5
 800785e:	4620      	mov	r0, r4
 8007860:	bf18      	it	ne
 8007862:	f04a 0a02 	orrne.w	sl, sl, #2
 8007866:	1b76      	subs	r6, r6, r5
 8007868:	f7ff fdf4 	bl	8007454 <rshift>
 800786c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007870:	f1ba 0f00 	cmp.w	sl, #0
 8007874:	d048      	beq.n	8007908 <__gethex+0x3e4>
 8007876:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d015      	beq.n	80078aa <__gethex+0x386>
 800787e:	2b03      	cmp	r3, #3
 8007880:	d017      	beq.n	80078b2 <__gethex+0x38e>
 8007882:	2b01      	cmp	r3, #1
 8007884:	d109      	bne.n	800789a <__gethex+0x376>
 8007886:	f01a 0f02 	tst.w	sl, #2
 800788a:	d006      	beq.n	800789a <__gethex+0x376>
 800788c:	f8d9 0000 	ldr.w	r0, [r9]
 8007890:	ea4a 0a00 	orr.w	sl, sl, r0
 8007894:	f01a 0f01 	tst.w	sl, #1
 8007898:	d10e      	bne.n	80078b8 <__gethex+0x394>
 800789a:	f047 0710 	orr.w	r7, r7, #16
 800789e:	e033      	b.n	8007908 <__gethex+0x3e4>
 80078a0:	f04f 0a01 	mov.w	sl, #1
 80078a4:	e7cf      	b.n	8007846 <__gethex+0x322>
 80078a6:	2701      	movs	r7, #1
 80078a8:	e7e2      	b.n	8007870 <__gethex+0x34c>
 80078aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ac:	f1c3 0301 	rsb	r3, r3, #1
 80078b0:	9315      	str	r3, [sp, #84]	; 0x54
 80078b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0f0      	beq.n	800789a <__gethex+0x376>
 80078b8:	f04f 0c00 	mov.w	ip, #0
 80078bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80078c0:	f104 0314 	add.w	r3, r4, #20
 80078c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80078c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80078d6:	d01c      	beq.n	8007912 <__gethex+0x3ee>
 80078d8:	3201      	adds	r2, #1
 80078da:	6002      	str	r2, [r0, #0]
 80078dc:	2f02      	cmp	r7, #2
 80078de:	f104 0314 	add.w	r3, r4, #20
 80078e2:	d13d      	bne.n	8007960 <__gethex+0x43c>
 80078e4:	f8d8 2000 	ldr.w	r2, [r8]
 80078e8:	3a01      	subs	r2, #1
 80078ea:	42b2      	cmp	r2, r6
 80078ec:	d10a      	bne.n	8007904 <__gethex+0x3e0>
 80078ee:	2201      	movs	r2, #1
 80078f0:	1171      	asrs	r1, r6, #5
 80078f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078f6:	f006 061f 	and.w	r6, r6, #31
 80078fa:	fa02 f606 	lsl.w	r6, r2, r6
 80078fe:	421e      	tst	r6, r3
 8007900:	bf18      	it	ne
 8007902:	4617      	movne	r7, r2
 8007904:	f047 0720 	orr.w	r7, r7, #32
 8007908:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800790a:	601c      	str	r4, [r3, #0]
 800790c:	9b05      	ldr	r3, [sp, #20]
 800790e:	601d      	str	r5, [r3, #0]
 8007910:	e69a      	b.n	8007648 <__gethex+0x124>
 8007912:	4299      	cmp	r1, r3
 8007914:	f843 cc04 	str.w	ip, [r3, #-4]
 8007918:	d8d8      	bhi.n	80078cc <__gethex+0x3a8>
 800791a:	68a3      	ldr	r3, [r4, #8]
 800791c:	459b      	cmp	fp, r3
 800791e:	db17      	blt.n	8007950 <__gethex+0x42c>
 8007920:	6861      	ldr	r1, [r4, #4]
 8007922:	9802      	ldr	r0, [sp, #8]
 8007924:	3101      	adds	r1, #1
 8007926:	f000 f935 	bl	8007b94 <_Balloc>
 800792a:	4681      	mov	r9, r0
 800792c:	b918      	cbnz	r0, 8007936 <__gethex+0x412>
 800792e:	4602      	mov	r2, r0
 8007930:	2184      	movs	r1, #132	; 0x84
 8007932:	4b19      	ldr	r3, [pc, #100]	; (8007998 <__gethex+0x474>)
 8007934:	e6ab      	b.n	800768e <__gethex+0x16a>
 8007936:	6922      	ldr	r2, [r4, #16]
 8007938:	f104 010c 	add.w	r1, r4, #12
 800793c:	3202      	adds	r2, #2
 800793e:	0092      	lsls	r2, r2, #2
 8007940:	300c      	adds	r0, #12
 8007942:	f000 f919 	bl	8007b78 <memcpy>
 8007946:	4621      	mov	r1, r4
 8007948:	9802      	ldr	r0, [sp, #8]
 800794a:	f000 f963 	bl	8007c14 <_Bfree>
 800794e:	464c      	mov	r4, r9
 8007950:	6923      	ldr	r3, [r4, #16]
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	6122      	str	r2, [r4, #16]
 8007956:	2201      	movs	r2, #1
 8007958:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800795c:	615a      	str	r2, [r3, #20]
 800795e:	e7bd      	b.n	80078dc <__gethex+0x3b8>
 8007960:	6922      	ldr	r2, [r4, #16]
 8007962:	455a      	cmp	r2, fp
 8007964:	dd0b      	ble.n	800797e <__gethex+0x45a>
 8007966:	2101      	movs	r1, #1
 8007968:	4620      	mov	r0, r4
 800796a:	f7ff fd73 	bl	8007454 <rshift>
 800796e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007972:	3501      	adds	r5, #1
 8007974:	42ab      	cmp	r3, r5
 8007976:	f6ff aed4 	blt.w	8007722 <__gethex+0x1fe>
 800797a:	2701      	movs	r7, #1
 800797c:	e7c2      	b.n	8007904 <__gethex+0x3e0>
 800797e:	f016 061f 	ands.w	r6, r6, #31
 8007982:	d0fa      	beq.n	800797a <__gethex+0x456>
 8007984:	4453      	add	r3, sl
 8007986:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800798a:	f000 f9f5 	bl	8007d78 <__hi0bits>
 800798e:	f1c6 0620 	rsb	r6, r6, #32
 8007992:	42b0      	cmp	r0, r6
 8007994:	dbe7      	blt.n	8007966 <__gethex+0x442>
 8007996:	e7f0      	b.n	800797a <__gethex+0x456>
 8007998:	08009850 	.word	0x08009850

0800799c <L_shift>:
 800799c:	f1c2 0208 	rsb	r2, r2, #8
 80079a0:	0092      	lsls	r2, r2, #2
 80079a2:	b570      	push	{r4, r5, r6, lr}
 80079a4:	f1c2 0620 	rsb	r6, r2, #32
 80079a8:	6843      	ldr	r3, [r0, #4]
 80079aa:	6804      	ldr	r4, [r0, #0]
 80079ac:	fa03 f506 	lsl.w	r5, r3, r6
 80079b0:	432c      	orrs	r4, r5
 80079b2:	40d3      	lsrs	r3, r2
 80079b4:	6004      	str	r4, [r0, #0]
 80079b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80079ba:	4288      	cmp	r0, r1
 80079bc:	d3f4      	bcc.n	80079a8 <L_shift+0xc>
 80079be:	bd70      	pop	{r4, r5, r6, pc}

080079c0 <__match>:
 80079c0:	b530      	push	{r4, r5, lr}
 80079c2:	6803      	ldr	r3, [r0, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ca:	b914      	cbnz	r4, 80079d2 <__match+0x12>
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	2001      	movs	r0, #1
 80079d0:	bd30      	pop	{r4, r5, pc}
 80079d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80079da:	2d19      	cmp	r5, #25
 80079dc:	bf98      	it	ls
 80079de:	3220      	addls	r2, #32
 80079e0:	42a2      	cmp	r2, r4
 80079e2:	d0f0      	beq.n	80079c6 <__match+0x6>
 80079e4:	2000      	movs	r0, #0
 80079e6:	e7f3      	b.n	80079d0 <__match+0x10>

080079e8 <__hexnan>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	2500      	movs	r5, #0
 80079ee:	680b      	ldr	r3, [r1, #0]
 80079f0:	4682      	mov	sl, r0
 80079f2:	115e      	asrs	r6, r3, #5
 80079f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079f8:	f013 031f 	ands.w	r3, r3, #31
 80079fc:	bf18      	it	ne
 80079fe:	3604      	addne	r6, #4
 8007a00:	1f37      	subs	r7, r6, #4
 8007a02:	46b9      	mov	r9, r7
 8007a04:	463c      	mov	r4, r7
 8007a06:	46ab      	mov	fp, r5
 8007a08:	b087      	sub	sp, #28
 8007a0a:	4690      	mov	r8, r2
 8007a0c:	6802      	ldr	r2, [r0, #0]
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a14:	9502      	str	r5, [sp, #8]
 8007a16:	7851      	ldrb	r1, [r2, #1]
 8007a18:	1c53      	adds	r3, r2, #1
 8007a1a:	9303      	str	r3, [sp, #12]
 8007a1c:	b341      	cbz	r1, 8007a70 <__hexnan+0x88>
 8007a1e:	4608      	mov	r0, r1
 8007a20:	9205      	str	r2, [sp, #20]
 8007a22:	9104      	str	r1, [sp, #16]
 8007a24:	f7ff fd69 	bl	80074fa <__hexdig_fun>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d14f      	bne.n	8007acc <__hexnan+0xe4>
 8007a2c:	9904      	ldr	r1, [sp, #16]
 8007a2e:	9a05      	ldr	r2, [sp, #20]
 8007a30:	2920      	cmp	r1, #32
 8007a32:	d818      	bhi.n	8007a66 <__hexnan+0x7e>
 8007a34:	9b02      	ldr	r3, [sp, #8]
 8007a36:	459b      	cmp	fp, r3
 8007a38:	dd13      	ble.n	8007a62 <__hexnan+0x7a>
 8007a3a:	454c      	cmp	r4, r9
 8007a3c:	d206      	bcs.n	8007a4c <__hexnan+0x64>
 8007a3e:	2d07      	cmp	r5, #7
 8007a40:	dc04      	bgt.n	8007a4c <__hexnan+0x64>
 8007a42:	462a      	mov	r2, r5
 8007a44:	4649      	mov	r1, r9
 8007a46:	4620      	mov	r0, r4
 8007a48:	f7ff ffa8 	bl	800799c <L_shift>
 8007a4c:	4544      	cmp	r4, r8
 8007a4e:	d950      	bls.n	8007af2 <__hexnan+0x10a>
 8007a50:	2300      	movs	r3, #0
 8007a52:	f1a4 0904 	sub.w	r9, r4, #4
 8007a56:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a5a:	461d      	mov	r5, r3
 8007a5c:	464c      	mov	r4, r9
 8007a5e:	f8cd b008 	str.w	fp, [sp, #8]
 8007a62:	9a03      	ldr	r2, [sp, #12]
 8007a64:	e7d7      	b.n	8007a16 <__hexnan+0x2e>
 8007a66:	2929      	cmp	r1, #41	; 0x29
 8007a68:	d156      	bne.n	8007b18 <__hexnan+0x130>
 8007a6a:	3202      	adds	r2, #2
 8007a6c:	f8ca 2000 	str.w	r2, [sl]
 8007a70:	f1bb 0f00 	cmp.w	fp, #0
 8007a74:	d050      	beq.n	8007b18 <__hexnan+0x130>
 8007a76:	454c      	cmp	r4, r9
 8007a78:	d206      	bcs.n	8007a88 <__hexnan+0xa0>
 8007a7a:	2d07      	cmp	r5, #7
 8007a7c:	dc04      	bgt.n	8007a88 <__hexnan+0xa0>
 8007a7e:	462a      	mov	r2, r5
 8007a80:	4649      	mov	r1, r9
 8007a82:	4620      	mov	r0, r4
 8007a84:	f7ff ff8a 	bl	800799c <L_shift>
 8007a88:	4544      	cmp	r4, r8
 8007a8a:	d934      	bls.n	8007af6 <__hexnan+0x10e>
 8007a8c:	4623      	mov	r3, r4
 8007a8e:	f1a8 0204 	sub.w	r2, r8, #4
 8007a92:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a96:	429f      	cmp	r7, r3
 8007a98:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a9c:	d2f9      	bcs.n	8007a92 <__hexnan+0xaa>
 8007a9e:	1b3b      	subs	r3, r7, r4
 8007aa0:	f023 0303 	bic.w	r3, r3, #3
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	3401      	adds	r4, #1
 8007aa8:	3e03      	subs	r6, #3
 8007aaa:	42b4      	cmp	r4, r6
 8007aac:	bf88      	it	hi
 8007aae:	2304      	movhi	r3, #4
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	4443      	add	r3, r8
 8007ab4:	f843 2b04 	str.w	r2, [r3], #4
 8007ab8:	429f      	cmp	r7, r3
 8007aba:	d2fb      	bcs.n	8007ab4 <__hexnan+0xcc>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	b91b      	cbnz	r3, 8007ac8 <__hexnan+0xe0>
 8007ac0:	4547      	cmp	r7, r8
 8007ac2:	d127      	bne.n	8007b14 <__hexnan+0x12c>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	2005      	movs	r0, #5
 8007aca:	e026      	b.n	8007b1a <__hexnan+0x132>
 8007acc:	3501      	adds	r5, #1
 8007ace:	2d08      	cmp	r5, #8
 8007ad0:	f10b 0b01 	add.w	fp, fp, #1
 8007ad4:	dd06      	ble.n	8007ae4 <__hexnan+0xfc>
 8007ad6:	4544      	cmp	r4, r8
 8007ad8:	d9c3      	bls.n	8007a62 <__hexnan+0x7a>
 8007ada:	2300      	movs	r3, #0
 8007adc:	2501      	movs	r5, #1
 8007ade:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ae2:	3c04      	subs	r4, #4
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	f000 000f 	and.w	r0, r0, #15
 8007aea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007aee:	6022      	str	r2, [r4, #0]
 8007af0:	e7b7      	b.n	8007a62 <__hexnan+0x7a>
 8007af2:	2508      	movs	r5, #8
 8007af4:	e7b5      	b.n	8007a62 <__hexnan+0x7a>
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0df      	beq.n	8007abc <__hexnan+0xd4>
 8007afc:	f04f 32ff 	mov.w	r2, #4294967295
 8007b00:	f1c3 0320 	rsb	r3, r3, #32
 8007b04:	fa22 f303 	lsr.w	r3, r2, r3
 8007b08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b0c:	401a      	ands	r2, r3
 8007b0e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007b12:	e7d3      	b.n	8007abc <__hexnan+0xd4>
 8007b14:	3f04      	subs	r7, #4
 8007b16:	e7d1      	b.n	8007abc <__hexnan+0xd4>
 8007b18:	2004      	movs	r0, #4
 8007b1a:	b007      	add	sp, #28
 8007b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b20 <_localeconv_r>:
 8007b20:	4800      	ldr	r0, [pc, #0]	; (8007b24 <_localeconv_r+0x4>)
 8007b22:	4770      	bx	lr
 8007b24:	20000164 	.word	0x20000164

08007b28 <malloc>:
 8007b28:	4b02      	ldr	r3, [pc, #8]	; (8007b34 <malloc+0xc>)
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	f000 bd65 	b.w	80085fc <_malloc_r>
 8007b32:	bf00      	nop
 8007b34:	2000000c 	.word	0x2000000c

08007b38 <__ascii_mbtowc>:
 8007b38:	b082      	sub	sp, #8
 8007b3a:	b901      	cbnz	r1, 8007b3e <__ascii_mbtowc+0x6>
 8007b3c:	a901      	add	r1, sp, #4
 8007b3e:	b142      	cbz	r2, 8007b52 <__ascii_mbtowc+0x1a>
 8007b40:	b14b      	cbz	r3, 8007b56 <__ascii_mbtowc+0x1e>
 8007b42:	7813      	ldrb	r3, [r2, #0]
 8007b44:	600b      	str	r3, [r1, #0]
 8007b46:	7812      	ldrb	r2, [r2, #0]
 8007b48:	1e10      	subs	r0, r2, #0
 8007b4a:	bf18      	it	ne
 8007b4c:	2001      	movne	r0, #1
 8007b4e:	b002      	add	sp, #8
 8007b50:	4770      	bx	lr
 8007b52:	4610      	mov	r0, r2
 8007b54:	e7fb      	b.n	8007b4e <__ascii_mbtowc+0x16>
 8007b56:	f06f 0001 	mvn.w	r0, #1
 8007b5a:	e7f8      	b.n	8007b4e <__ascii_mbtowc+0x16>

08007b5c <memchr>:
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	b2c9      	uxtb	r1, r1
 8007b62:	4402      	add	r2, r0
 8007b64:	4293      	cmp	r3, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	d101      	bne.n	8007b6e <memchr+0x12>
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e003      	b.n	8007b76 <memchr+0x1a>
 8007b6e:	7804      	ldrb	r4, [r0, #0]
 8007b70:	3301      	adds	r3, #1
 8007b72:	428c      	cmp	r4, r1
 8007b74:	d1f6      	bne.n	8007b64 <memchr+0x8>
 8007b76:	bd10      	pop	{r4, pc}

08007b78 <memcpy>:
 8007b78:	440a      	add	r2, r1
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b80:	d100      	bne.n	8007b84 <memcpy+0xc>
 8007b82:	4770      	bx	lr
 8007b84:	b510      	push	{r4, lr}
 8007b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8a:	4291      	cmp	r1, r2
 8007b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b90:	d1f9      	bne.n	8007b86 <memcpy+0xe>
 8007b92:	bd10      	pop	{r4, pc}

08007b94 <_Balloc>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b98:	4604      	mov	r4, r0
 8007b9a:	460d      	mov	r5, r1
 8007b9c:	b976      	cbnz	r6, 8007bbc <_Balloc+0x28>
 8007b9e:	2010      	movs	r0, #16
 8007ba0:	f7ff ffc2 	bl	8007b28 <malloc>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6260      	str	r0, [r4, #36]	; 0x24
 8007ba8:	b920      	cbnz	r0, 8007bb4 <_Balloc+0x20>
 8007baa:	2166      	movs	r1, #102	; 0x66
 8007bac:	4b17      	ldr	r3, [pc, #92]	; (8007c0c <_Balloc+0x78>)
 8007bae:	4818      	ldr	r0, [pc, #96]	; (8007c10 <_Balloc+0x7c>)
 8007bb0:	f000 ff2c 	bl	8008a0c <__assert_func>
 8007bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bb8:	6006      	str	r6, [r0, #0]
 8007bba:	60c6      	str	r6, [r0, #12]
 8007bbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007bbe:	68f3      	ldr	r3, [r6, #12]
 8007bc0:	b183      	cbz	r3, 8007be4 <_Balloc+0x50>
 8007bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bca:	b9b8      	cbnz	r0, 8007bfc <_Balloc+0x68>
 8007bcc:	2101      	movs	r1, #1
 8007bce:	fa01 f605 	lsl.w	r6, r1, r5
 8007bd2:	1d72      	adds	r2, r6, #5
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	f000 fc94 	bl	8008504 <_calloc_r>
 8007bdc:	b160      	cbz	r0, 8007bf8 <_Balloc+0x64>
 8007bde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007be2:	e00e      	b.n	8007c02 <_Balloc+0x6e>
 8007be4:	2221      	movs	r2, #33	; 0x21
 8007be6:	2104      	movs	r1, #4
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 fc8b 	bl	8008504 <_calloc_r>
 8007bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf0:	60f0      	str	r0, [r6, #12]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e4      	bne.n	8007bc2 <_Balloc+0x2e>
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	6802      	ldr	r2, [r0, #0]
 8007bfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c02:	2300      	movs	r3, #0
 8007c04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c08:	e7f7      	b.n	8007bfa <_Balloc+0x66>
 8007c0a:	bf00      	nop
 8007c0c:	080097de 	.word	0x080097de
 8007c10:	080098dc 	.word	0x080098dc

08007c14 <_Bfree>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c18:	4605      	mov	r5, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	b976      	cbnz	r6, 8007c3c <_Bfree+0x28>
 8007c1e:	2010      	movs	r0, #16
 8007c20:	f7ff ff82 	bl	8007b28 <malloc>
 8007c24:	4602      	mov	r2, r0
 8007c26:	6268      	str	r0, [r5, #36]	; 0x24
 8007c28:	b920      	cbnz	r0, 8007c34 <_Bfree+0x20>
 8007c2a:	218a      	movs	r1, #138	; 0x8a
 8007c2c:	4b08      	ldr	r3, [pc, #32]	; (8007c50 <_Bfree+0x3c>)
 8007c2e:	4809      	ldr	r0, [pc, #36]	; (8007c54 <_Bfree+0x40>)
 8007c30:	f000 feec 	bl	8008a0c <__assert_func>
 8007c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c38:	6006      	str	r6, [r0, #0]
 8007c3a:	60c6      	str	r6, [r0, #12]
 8007c3c:	b13c      	cbz	r4, 8007c4e <_Bfree+0x3a>
 8007c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c40:	6862      	ldr	r2, [r4, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c48:	6021      	str	r1, [r4, #0]
 8007c4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	080097de 	.word	0x080097de
 8007c54:	080098dc 	.word	0x080098dc

08007c58 <__multadd>:
 8007c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	461e      	mov	r6, r3
 8007c62:	2000      	movs	r0, #0
 8007c64:	690d      	ldr	r5, [r1, #16]
 8007c66:	f101 0c14 	add.w	ip, r1, #20
 8007c6a:	f8dc 3000 	ldr.w	r3, [ip]
 8007c6e:	3001      	adds	r0, #1
 8007c70:	b299      	uxth	r1, r3
 8007c72:	fb02 6101 	mla	r1, r2, r1, r6
 8007c76:	0c1e      	lsrs	r6, r3, #16
 8007c78:	0c0b      	lsrs	r3, r1, #16
 8007c7a:	fb02 3306 	mla	r3, r2, r6, r3
 8007c7e:	b289      	uxth	r1, r1
 8007c80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c84:	4285      	cmp	r5, r0
 8007c86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c8e:	dcec      	bgt.n	8007c6a <__multadd+0x12>
 8007c90:	b30e      	cbz	r6, 8007cd6 <__multadd+0x7e>
 8007c92:	68a3      	ldr	r3, [r4, #8]
 8007c94:	42ab      	cmp	r3, r5
 8007c96:	dc19      	bgt.n	8007ccc <__multadd+0x74>
 8007c98:	6861      	ldr	r1, [r4, #4]
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	3101      	adds	r1, #1
 8007c9e:	f7ff ff79 	bl	8007b94 <_Balloc>
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	b928      	cbnz	r0, 8007cb2 <__multadd+0x5a>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	21b5      	movs	r1, #181	; 0xb5
 8007caa:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <__multadd+0x84>)
 8007cac:	480c      	ldr	r0, [pc, #48]	; (8007ce0 <__multadd+0x88>)
 8007cae:	f000 fead 	bl	8008a0c <__assert_func>
 8007cb2:	6922      	ldr	r2, [r4, #16]
 8007cb4:	f104 010c 	add.w	r1, r4, #12
 8007cb8:	3202      	adds	r2, #2
 8007cba:	0092      	lsls	r2, r2, #2
 8007cbc:	300c      	adds	r0, #12
 8007cbe:	f7ff ff5b 	bl	8007b78 <memcpy>
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7ff ffa5 	bl	8007c14 <_Bfree>
 8007cca:	4644      	mov	r4, r8
 8007ccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cd0:	3501      	adds	r5, #1
 8007cd2:	615e      	str	r6, [r3, #20]
 8007cd4:	6125      	str	r5, [r4, #16]
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cdc:	08009850 	.word	0x08009850
 8007ce0:	080098dc 	.word	0x080098dc

08007ce4 <__s2b>:
 8007ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce8:	4615      	mov	r5, r2
 8007cea:	2209      	movs	r2, #9
 8007cec:	461f      	mov	r7, r3
 8007cee:	3308      	adds	r3, #8
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	db09      	blt.n	8007d14 <__s2b+0x30>
 8007d00:	4630      	mov	r0, r6
 8007d02:	f7ff ff47 	bl	8007b94 <_Balloc>
 8007d06:	b940      	cbnz	r0, 8007d1a <__s2b+0x36>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	21ce      	movs	r1, #206	; 0xce
 8007d0c:	4b18      	ldr	r3, [pc, #96]	; (8007d70 <__s2b+0x8c>)
 8007d0e:	4819      	ldr	r0, [pc, #100]	; (8007d74 <__s2b+0x90>)
 8007d10:	f000 fe7c 	bl	8008a0c <__assert_func>
 8007d14:	0052      	lsls	r2, r2, #1
 8007d16:	3101      	adds	r1, #1
 8007d18:	e7f0      	b.n	8007cfc <__s2b+0x18>
 8007d1a:	9b08      	ldr	r3, [sp, #32]
 8007d1c:	2d09      	cmp	r5, #9
 8007d1e:	6143      	str	r3, [r0, #20]
 8007d20:	f04f 0301 	mov.w	r3, #1
 8007d24:	6103      	str	r3, [r0, #16]
 8007d26:	dd16      	ble.n	8007d56 <__s2b+0x72>
 8007d28:	f104 0909 	add.w	r9, r4, #9
 8007d2c:	46c8      	mov	r8, r9
 8007d2e:	442c      	add	r4, r5
 8007d30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d34:	4601      	mov	r1, r0
 8007d36:	220a      	movs	r2, #10
 8007d38:	4630      	mov	r0, r6
 8007d3a:	3b30      	subs	r3, #48	; 0x30
 8007d3c:	f7ff ff8c 	bl	8007c58 <__multadd>
 8007d40:	45a0      	cmp	r8, r4
 8007d42:	d1f5      	bne.n	8007d30 <__s2b+0x4c>
 8007d44:	f1a5 0408 	sub.w	r4, r5, #8
 8007d48:	444c      	add	r4, r9
 8007d4a:	1b2d      	subs	r5, r5, r4
 8007d4c:	1963      	adds	r3, r4, r5
 8007d4e:	42bb      	cmp	r3, r7
 8007d50:	db04      	blt.n	8007d5c <__s2b+0x78>
 8007d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d56:	2509      	movs	r5, #9
 8007d58:	340a      	adds	r4, #10
 8007d5a:	e7f6      	b.n	8007d4a <__s2b+0x66>
 8007d5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d60:	4601      	mov	r1, r0
 8007d62:	220a      	movs	r2, #10
 8007d64:	4630      	mov	r0, r6
 8007d66:	3b30      	subs	r3, #48	; 0x30
 8007d68:	f7ff ff76 	bl	8007c58 <__multadd>
 8007d6c:	e7ee      	b.n	8007d4c <__s2b+0x68>
 8007d6e:	bf00      	nop
 8007d70:	08009850 	.word	0x08009850
 8007d74:	080098dc 	.word	0x080098dc

08007d78 <__hi0bits>:
 8007d78:	0c02      	lsrs	r2, r0, #16
 8007d7a:	0412      	lsls	r2, r2, #16
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	b9ca      	cbnz	r2, 8007db4 <__hi0bits+0x3c>
 8007d80:	0403      	lsls	r3, r0, #16
 8007d82:	2010      	movs	r0, #16
 8007d84:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d88:	bf04      	itt	eq
 8007d8a:	021b      	lsleq	r3, r3, #8
 8007d8c:	3008      	addeq	r0, #8
 8007d8e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d92:	bf04      	itt	eq
 8007d94:	011b      	lsleq	r3, r3, #4
 8007d96:	3004      	addeq	r0, #4
 8007d98:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d9c:	bf04      	itt	eq
 8007d9e:	009b      	lsleq	r3, r3, #2
 8007da0:	3002      	addeq	r0, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	db05      	blt.n	8007db2 <__hi0bits+0x3a>
 8007da6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007daa:	f100 0001 	add.w	r0, r0, #1
 8007dae:	bf08      	it	eq
 8007db0:	2020      	moveq	r0, #32
 8007db2:	4770      	bx	lr
 8007db4:	2000      	movs	r0, #0
 8007db6:	e7e5      	b.n	8007d84 <__hi0bits+0xc>

08007db8 <__lo0bits>:
 8007db8:	6803      	ldr	r3, [r0, #0]
 8007dba:	4602      	mov	r2, r0
 8007dbc:	f013 0007 	ands.w	r0, r3, #7
 8007dc0:	d00b      	beq.n	8007dda <__lo0bits+0x22>
 8007dc2:	07d9      	lsls	r1, r3, #31
 8007dc4:	d421      	bmi.n	8007e0a <__lo0bits+0x52>
 8007dc6:	0798      	lsls	r0, r3, #30
 8007dc8:	bf49      	itett	mi
 8007dca:	085b      	lsrmi	r3, r3, #1
 8007dcc:	089b      	lsrpl	r3, r3, #2
 8007dce:	2001      	movmi	r0, #1
 8007dd0:	6013      	strmi	r3, [r2, #0]
 8007dd2:	bf5c      	itt	pl
 8007dd4:	2002      	movpl	r0, #2
 8007dd6:	6013      	strpl	r3, [r2, #0]
 8007dd8:	4770      	bx	lr
 8007dda:	b299      	uxth	r1, r3
 8007ddc:	b909      	cbnz	r1, 8007de2 <__lo0bits+0x2a>
 8007dde:	2010      	movs	r0, #16
 8007de0:	0c1b      	lsrs	r3, r3, #16
 8007de2:	b2d9      	uxtb	r1, r3
 8007de4:	b909      	cbnz	r1, 8007dea <__lo0bits+0x32>
 8007de6:	3008      	adds	r0, #8
 8007de8:	0a1b      	lsrs	r3, r3, #8
 8007dea:	0719      	lsls	r1, r3, #28
 8007dec:	bf04      	itt	eq
 8007dee:	091b      	lsreq	r3, r3, #4
 8007df0:	3004      	addeq	r0, #4
 8007df2:	0799      	lsls	r1, r3, #30
 8007df4:	bf04      	itt	eq
 8007df6:	089b      	lsreq	r3, r3, #2
 8007df8:	3002      	addeq	r0, #2
 8007dfa:	07d9      	lsls	r1, r3, #31
 8007dfc:	d403      	bmi.n	8007e06 <__lo0bits+0x4e>
 8007dfe:	085b      	lsrs	r3, r3, #1
 8007e00:	f100 0001 	add.w	r0, r0, #1
 8007e04:	d003      	beq.n	8007e0e <__lo0bits+0x56>
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	4770      	bx	lr
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	4770      	bx	lr
 8007e0e:	2020      	movs	r0, #32
 8007e10:	4770      	bx	lr
	...

08007e14 <__i2b>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	460c      	mov	r4, r1
 8007e18:	2101      	movs	r1, #1
 8007e1a:	f7ff febb 	bl	8007b94 <_Balloc>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	b928      	cbnz	r0, 8007e2e <__i2b+0x1a>
 8007e22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e26:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <__i2b+0x24>)
 8007e28:	4804      	ldr	r0, [pc, #16]	; (8007e3c <__i2b+0x28>)
 8007e2a:	f000 fdef 	bl	8008a0c <__assert_func>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	6144      	str	r4, [r0, #20]
 8007e32:	6103      	str	r3, [r0, #16]
 8007e34:	bd10      	pop	{r4, pc}
 8007e36:	bf00      	nop
 8007e38:	08009850 	.word	0x08009850
 8007e3c:	080098dc 	.word	0x080098dc

08007e40 <__multiply>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4691      	mov	r9, r2
 8007e46:	690a      	ldr	r2, [r1, #16]
 8007e48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	bfbe      	ittt	lt
 8007e52:	460b      	movlt	r3, r1
 8007e54:	464c      	movlt	r4, r9
 8007e56:	4699      	movlt	r9, r3
 8007e58:	6927      	ldr	r7, [r4, #16]
 8007e5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	6861      	ldr	r1, [r4, #4]
 8007e62:	eb07 060a 	add.w	r6, r7, sl
 8007e66:	42b3      	cmp	r3, r6
 8007e68:	b085      	sub	sp, #20
 8007e6a:	bfb8      	it	lt
 8007e6c:	3101      	addlt	r1, #1
 8007e6e:	f7ff fe91 	bl	8007b94 <_Balloc>
 8007e72:	b930      	cbnz	r0, 8007e82 <__multiply+0x42>
 8007e74:	4602      	mov	r2, r0
 8007e76:	f240 115d 	movw	r1, #349	; 0x15d
 8007e7a:	4b43      	ldr	r3, [pc, #268]	; (8007f88 <__multiply+0x148>)
 8007e7c:	4843      	ldr	r0, [pc, #268]	; (8007f8c <__multiply+0x14c>)
 8007e7e:	f000 fdc5 	bl	8008a0c <__assert_func>
 8007e82:	f100 0514 	add.w	r5, r0, #20
 8007e86:	462b      	mov	r3, r5
 8007e88:	2200      	movs	r2, #0
 8007e8a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e8e:	4543      	cmp	r3, r8
 8007e90:	d321      	bcc.n	8007ed6 <__multiply+0x96>
 8007e92:	f104 0314 	add.w	r3, r4, #20
 8007e96:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e9a:	f109 0314 	add.w	r3, r9, #20
 8007e9e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ea2:	9202      	str	r2, [sp, #8]
 8007ea4:	1b3a      	subs	r2, r7, r4
 8007ea6:	3a15      	subs	r2, #21
 8007ea8:	f022 0203 	bic.w	r2, r2, #3
 8007eac:	3204      	adds	r2, #4
 8007eae:	f104 0115 	add.w	r1, r4, #21
 8007eb2:	428f      	cmp	r7, r1
 8007eb4:	bf38      	it	cc
 8007eb6:	2204      	movcc	r2, #4
 8007eb8:	9201      	str	r2, [sp, #4]
 8007eba:	9a02      	ldr	r2, [sp, #8]
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d80c      	bhi.n	8007edc <__multiply+0x9c>
 8007ec2:	2e00      	cmp	r6, #0
 8007ec4:	dd03      	ble.n	8007ece <__multiply+0x8e>
 8007ec6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d059      	beq.n	8007f82 <__multiply+0x142>
 8007ece:	6106      	str	r6, [r0, #16]
 8007ed0:	b005      	add	sp, #20
 8007ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed6:	f843 2b04 	str.w	r2, [r3], #4
 8007eda:	e7d8      	b.n	8007e8e <__multiply+0x4e>
 8007edc:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ee0:	f1ba 0f00 	cmp.w	sl, #0
 8007ee4:	d023      	beq.n	8007f2e <__multiply+0xee>
 8007ee6:	46a9      	mov	r9, r5
 8007ee8:	f04f 0c00 	mov.w	ip, #0
 8007eec:	f104 0e14 	add.w	lr, r4, #20
 8007ef0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ef4:	f8d9 1000 	ldr.w	r1, [r9]
 8007ef8:	fa1f fb82 	uxth.w	fp, r2
 8007efc:	b289      	uxth	r1, r1
 8007efe:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f02:	4461      	add	r1, ip
 8007f04:	f8d9 c000 	ldr.w	ip, [r9]
 8007f08:	0c12      	lsrs	r2, r2, #16
 8007f0a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007f0e:	fb0a c202 	mla	r2, sl, r2, ip
 8007f12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f16:	b289      	uxth	r1, r1
 8007f18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f1c:	4577      	cmp	r7, lr
 8007f1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f22:	f849 1b04 	str.w	r1, [r9], #4
 8007f26:	d8e3      	bhi.n	8007ef0 <__multiply+0xb0>
 8007f28:	9a01      	ldr	r2, [sp, #4]
 8007f2a:	f845 c002 	str.w	ip, [r5, r2]
 8007f2e:	9a03      	ldr	r2, [sp, #12]
 8007f30:	3304      	adds	r3, #4
 8007f32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f36:	f1b9 0f00 	cmp.w	r9, #0
 8007f3a:	d020      	beq.n	8007f7e <__multiply+0x13e>
 8007f3c:	46ae      	mov	lr, r5
 8007f3e:	f04f 0a00 	mov.w	sl, #0
 8007f42:	6829      	ldr	r1, [r5, #0]
 8007f44:	f104 0c14 	add.w	ip, r4, #20
 8007f48:	f8bc b000 	ldrh.w	fp, [ip]
 8007f4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f50:	b289      	uxth	r1, r1
 8007f52:	fb09 220b 	mla	r2, r9, fp, r2
 8007f56:	4492      	add	sl, r2
 8007f58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f5c:	f84e 1b04 	str.w	r1, [lr], #4
 8007f60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f64:	f8be 1000 	ldrh.w	r1, [lr]
 8007f68:	0c12      	lsrs	r2, r2, #16
 8007f6a:	fb09 1102 	mla	r1, r9, r2, r1
 8007f6e:	4567      	cmp	r7, ip
 8007f70:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f78:	d8e6      	bhi.n	8007f48 <__multiply+0x108>
 8007f7a:	9a01      	ldr	r2, [sp, #4]
 8007f7c:	50a9      	str	r1, [r5, r2]
 8007f7e:	3504      	adds	r5, #4
 8007f80:	e79b      	b.n	8007eba <__multiply+0x7a>
 8007f82:	3e01      	subs	r6, #1
 8007f84:	e79d      	b.n	8007ec2 <__multiply+0x82>
 8007f86:	bf00      	nop
 8007f88:	08009850 	.word	0x08009850
 8007f8c:	080098dc 	.word	0x080098dc

08007f90 <__pow5mult>:
 8007f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f94:	4615      	mov	r5, r2
 8007f96:	f012 0203 	ands.w	r2, r2, #3
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	d007      	beq.n	8007fb0 <__pow5mult+0x20>
 8007fa0:	4c25      	ldr	r4, [pc, #148]	; (8008038 <__pow5mult+0xa8>)
 8007fa2:	3a01      	subs	r2, #1
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007faa:	f7ff fe55 	bl	8007c58 <__multadd>
 8007fae:	4607      	mov	r7, r0
 8007fb0:	10ad      	asrs	r5, r5, #2
 8007fb2:	d03d      	beq.n	8008030 <__pow5mult+0xa0>
 8007fb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fb6:	b97c      	cbnz	r4, 8007fd8 <__pow5mult+0x48>
 8007fb8:	2010      	movs	r0, #16
 8007fba:	f7ff fdb5 	bl	8007b28 <malloc>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	6270      	str	r0, [r6, #36]	; 0x24
 8007fc2:	b928      	cbnz	r0, 8007fd0 <__pow5mult+0x40>
 8007fc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fc8:	4b1c      	ldr	r3, [pc, #112]	; (800803c <__pow5mult+0xac>)
 8007fca:	481d      	ldr	r0, [pc, #116]	; (8008040 <__pow5mult+0xb0>)
 8007fcc:	f000 fd1e 	bl	8008a0c <__assert_func>
 8007fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fd4:	6004      	str	r4, [r0, #0]
 8007fd6:	60c4      	str	r4, [r0, #12]
 8007fd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fe0:	b94c      	cbnz	r4, 8007ff6 <__pow5mult+0x66>
 8007fe2:	f240 2171 	movw	r1, #625	; 0x271
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f7ff ff14 	bl	8007e14 <__i2b>
 8007fec:	2300      	movs	r3, #0
 8007fee:	4604      	mov	r4, r0
 8007ff0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ff4:	6003      	str	r3, [r0, #0]
 8007ff6:	f04f 0900 	mov.w	r9, #0
 8007ffa:	07eb      	lsls	r3, r5, #31
 8007ffc:	d50a      	bpl.n	8008014 <__pow5mult+0x84>
 8007ffe:	4639      	mov	r1, r7
 8008000:	4622      	mov	r2, r4
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff ff1c 	bl	8007e40 <__multiply>
 8008008:	4680      	mov	r8, r0
 800800a:	4639      	mov	r1, r7
 800800c:	4630      	mov	r0, r6
 800800e:	f7ff fe01 	bl	8007c14 <_Bfree>
 8008012:	4647      	mov	r7, r8
 8008014:	106d      	asrs	r5, r5, #1
 8008016:	d00b      	beq.n	8008030 <__pow5mult+0xa0>
 8008018:	6820      	ldr	r0, [r4, #0]
 800801a:	b938      	cbnz	r0, 800802c <__pow5mult+0x9c>
 800801c:	4622      	mov	r2, r4
 800801e:	4621      	mov	r1, r4
 8008020:	4630      	mov	r0, r6
 8008022:	f7ff ff0d 	bl	8007e40 <__multiply>
 8008026:	6020      	str	r0, [r4, #0]
 8008028:	f8c0 9000 	str.w	r9, [r0]
 800802c:	4604      	mov	r4, r0
 800802e:	e7e4      	b.n	8007ffa <__pow5mult+0x6a>
 8008030:	4638      	mov	r0, r7
 8008032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008036:	bf00      	nop
 8008038:	08009a28 	.word	0x08009a28
 800803c:	080097de 	.word	0x080097de
 8008040:	080098dc 	.word	0x080098dc

08008044 <__lshift>:
 8008044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	460c      	mov	r4, r1
 800804a:	4607      	mov	r7, r0
 800804c:	4691      	mov	r9, r2
 800804e:	6923      	ldr	r3, [r4, #16]
 8008050:	6849      	ldr	r1, [r1, #4]
 8008052:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800805c:	f108 0601 	add.w	r6, r8, #1
 8008060:	42b3      	cmp	r3, r6
 8008062:	db0b      	blt.n	800807c <__lshift+0x38>
 8008064:	4638      	mov	r0, r7
 8008066:	f7ff fd95 	bl	8007b94 <_Balloc>
 800806a:	4605      	mov	r5, r0
 800806c:	b948      	cbnz	r0, 8008082 <__lshift+0x3e>
 800806e:	4602      	mov	r2, r0
 8008070:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008074:	4b29      	ldr	r3, [pc, #164]	; (800811c <__lshift+0xd8>)
 8008076:	482a      	ldr	r0, [pc, #168]	; (8008120 <__lshift+0xdc>)
 8008078:	f000 fcc8 	bl	8008a0c <__assert_func>
 800807c:	3101      	adds	r1, #1
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	e7ee      	b.n	8008060 <__lshift+0x1c>
 8008082:	2300      	movs	r3, #0
 8008084:	f100 0114 	add.w	r1, r0, #20
 8008088:	f100 0210 	add.w	r2, r0, #16
 800808c:	4618      	mov	r0, r3
 800808e:	4553      	cmp	r3, sl
 8008090:	db37      	blt.n	8008102 <__lshift+0xbe>
 8008092:	6920      	ldr	r0, [r4, #16]
 8008094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008098:	f104 0314 	add.w	r3, r4, #20
 800809c:	f019 091f 	ands.w	r9, r9, #31
 80080a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080a8:	d02f      	beq.n	800810a <__lshift+0xc6>
 80080aa:	468a      	mov	sl, r1
 80080ac:	f04f 0c00 	mov.w	ip, #0
 80080b0:	f1c9 0e20 	rsb	lr, r9, #32
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	fa02 f209 	lsl.w	r2, r2, r9
 80080ba:	ea42 020c 	orr.w	r2, r2, ip
 80080be:	f84a 2b04 	str.w	r2, [sl], #4
 80080c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c6:	4298      	cmp	r0, r3
 80080c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080cc:	d8f2      	bhi.n	80080b4 <__lshift+0x70>
 80080ce:	1b03      	subs	r3, r0, r4
 80080d0:	3b15      	subs	r3, #21
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	3304      	adds	r3, #4
 80080d8:	f104 0215 	add.w	r2, r4, #21
 80080dc:	4290      	cmp	r0, r2
 80080de:	bf38      	it	cc
 80080e0:	2304      	movcc	r3, #4
 80080e2:	f841 c003 	str.w	ip, [r1, r3]
 80080e6:	f1bc 0f00 	cmp.w	ip, #0
 80080ea:	d001      	beq.n	80080f0 <__lshift+0xac>
 80080ec:	f108 0602 	add.w	r6, r8, #2
 80080f0:	3e01      	subs	r6, #1
 80080f2:	4638      	mov	r0, r7
 80080f4:	4621      	mov	r1, r4
 80080f6:	612e      	str	r6, [r5, #16]
 80080f8:	f7ff fd8c 	bl	8007c14 <_Bfree>
 80080fc:	4628      	mov	r0, r5
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	f842 0f04 	str.w	r0, [r2, #4]!
 8008106:	3301      	adds	r3, #1
 8008108:	e7c1      	b.n	800808e <__lshift+0x4a>
 800810a:	3904      	subs	r1, #4
 800810c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008110:	4298      	cmp	r0, r3
 8008112:	f841 2f04 	str.w	r2, [r1, #4]!
 8008116:	d8f9      	bhi.n	800810c <__lshift+0xc8>
 8008118:	e7ea      	b.n	80080f0 <__lshift+0xac>
 800811a:	bf00      	nop
 800811c:	08009850 	.word	0x08009850
 8008120:	080098dc 	.word	0x080098dc

08008124 <__mcmp>:
 8008124:	4603      	mov	r3, r0
 8008126:	690a      	ldr	r2, [r1, #16]
 8008128:	6900      	ldr	r0, [r0, #16]
 800812a:	b530      	push	{r4, r5, lr}
 800812c:	1a80      	subs	r0, r0, r2
 800812e:	d10d      	bne.n	800814c <__mcmp+0x28>
 8008130:	3314      	adds	r3, #20
 8008132:	3114      	adds	r1, #20
 8008134:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800813c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008144:	4295      	cmp	r5, r2
 8008146:	d002      	beq.n	800814e <__mcmp+0x2a>
 8008148:	d304      	bcc.n	8008154 <__mcmp+0x30>
 800814a:	2001      	movs	r0, #1
 800814c:	bd30      	pop	{r4, r5, pc}
 800814e:	42a3      	cmp	r3, r4
 8008150:	d3f4      	bcc.n	800813c <__mcmp+0x18>
 8008152:	e7fb      	b.n	800814c <__mcmp+0x28>
 8008154:	f04f 30ff 	mov.w	r0, #4294967295
 8008158:	e7f8      	b.n	800814c <__mcmp+0x28>
	...

0800815c <__mdiff>:
 800815c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	460d      	mov	r5, r1
 8008162:	4607      	mov	r7, r0
 8008164:	4611      	mov	r1, r2
 8008166:	4628      	mov	r0, r5
 8008168:	4614      	mov	r4, r2
 800816a:	f7ff ffdb 	bl	8008124 <__mcmp>
 800816e:	1e06      	subs	r6, r0, #0
 8008170:	d111      	bne.n	8008196 <__mdiff+0x3a>
 8008172:	4631      	mov	r1, r6
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff fd0d 	bl	8007b94 <_Balloc>
 800817a:	4602      	mov	r2, r0
 800817c:	b928      	cbnz	r0, 800818a <__mdiff+0x2e>
 800817e:	f240 2132 	movw	r1, #562	; 0x232
 8008182:	4b3a      	ldr	r3, [pc, #232]	; (800826c <__mdiff+0x110>)
 8008184:	483a      	ldr	r0, [pc, #232]	; (8008270 <__mdiff+0x114>)
 8008186:	f000 fc41 	bl	8008a0c <__assert_func>
 800818a:	2301      	movs	r3, #1
 800818c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008190:	4610      	mov	r0, r2
 8008192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	bfa4      	itt	ge
 8008198:	4623      	movge	r3, r4
 800819a:	462c      	movge	r4, r5
 800819c:	4638      	mov	r0, r7
 800819e:	6861      	ldr	r1, [r4, #4]
 80081a0:	bfa6      	itte	ge
 80081a2:	461d      	movge	r5, r3
 80081a4:	2600      	movge	r6, #0
 80081a6:	2601      	movlt	r6, #1
 80081a8:	f7ff fcf4 	bl	8007b94 <_Balloc>
 80081ac:	4602      	mov	r2, r0
 80081ae:	b918      	cbnz	r0, 80081b8 <__mdiff+0x5c>
 80081b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081b4:	4b2d      	ldr	r3, [pc, #180]	; (800826c <__mdiff+0x110>)
 80081b6:	e7e5      	b.n	8008184 <__mdiff+0x28>
 80081b8:	f102 0814 	add.w	r8, r2, #20
 80081bc:	46c2      	mov	sl, r8
 80081be:	f04f 0c00 	mov.w	ip, #0
 80081c2:	6927      	ldr	r7, [r4, #16]
 80081c4:	60c6      	str	r6, [r0, #12]
 80081c6:	692e      	ldr	r6, [r5, #16]
 80081c8:	f104 0014 	add.w	r0, r4, #20
 80081cc:	f105 0914 	add.w	r9, r5, #20
 80081d0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80081d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081d8:	3410      	adds	r4, #16
 80081da:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80081de:	f859 3b04 	ldr.w	r3, [r9], #4
 80081e2:	fa1f f18b 	uxth.w	r1, fp
 80081e6:	448c      	add	ip, r1
 80081e8:	b299      	uxth	r1, r3
 80081ea:	0c1b      	lsrs	r3, r3, #16
 80081ec:	ebac 0101 	sub.w	r1, ip, r1
 80081f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081f4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80081f8:	b289      	uxth	r1, r1
 80081fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80081fe:	454e      	cmp	r6, r9
 8008200:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008204:	f84a 3b04 	str.w	r3, [sl], #4
 8008208:	d8e7      	bhi.n	80081da <__mdiff+0x7e>
 800820a:	1b73      	subs	r3, r6, r5
 800820c:	3b15      	subs	r3, #21
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	3515      	adds	r5, #21
 8008214:	3304      	adds	r3, #4
 8008216:	42ae      	cmp	r6, r5
 8008218:	bf38      	it	cc
 800821a:	2304      	movcc	r3, #4
 800821c:	4418      	add	r0, r3
 800821e:	4443      	add	r3, r8
 8008220:	461e      	mov	r6, r3
 8008222:	4605      	mov	r5, r0
 8008224:	4575      	cmp	r5, lr
 8008226:	d30e      	bcc.n	8008246 <__mdiff+0xea>
 8008228:	f10e 0103 	add.w	r1, lr, #3
 800822c:	1a09      	subs	r1, r1, r0
 800822e:	f021 0103 	bic.w	r1, r1, #3
 8008232:	3803      	subs	r0, #3
 8008234:	4586      	cmp	lr, r0
 8008236:	bf38      	it	cc
 8008238:	2100      	movcc	r1, #0
 800823a:	4419      	add	r1, r3
 800823c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008240:	b18b      	cbz	r3, 8008266 <__mdiff+0x10a>
 8008242:	6117      	str	r7, [r2, #16]
 8008244:	e7a4      	b.n	8008190 <__mdiff+0x34>
 8008246:	f855 8b04 	ldr.w	r8, [r5], #4
 800824a:	fa1f f188 	uxth.w	r1, r8
 800824e:	4461      	add	r1, ip
 8008250:	140c      	asrs	r4, r1, #16
 8008252:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008256:	b289      	uxth	r1, r1
 8008258:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800825c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008260:	f846 1b04 	str.w	r1, [r6], #4
 8008264:	e7de      	b.n	8008224 <__mdiff+0xc8>
 8008266:	3f01      	subs	r7, #1
 8008268:	e7e8      	b.n	800823c <__mdiff+0xe0>
 800826a:	bf00      	nop
 800826c:	08009850 	.word	0x08009850
 8008270:	080098dc 	.word	0x080098dc

08008274 <__ulp>:
 8008274:	4b11      	ldr	r3, [pc, #68]	; (80082bc <__ulp+0x48>)
 8008276:	400b      	ands	r3, r1
 8008278:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd02      	ble.n	8008286 <__ulp+0x12>
 8008280:	2000      	movs	r0, #0
 8008282:	4619      	mov	r1, r3
 8008284:	4770      	bx	lr
 8008286:	425b      	negs	r3, r3
 8008288:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800828c:	f04f 0000 	mov.w	r0, #0
 8008290:	f04f 0100 	mov.w	r1, #0
 8008294:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008298:	da04      	bge.n	80082a4 <__ulp+0x30>
 800829a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800829e:	fa43 f102 	asr.w	r1, r3, r2
 80082a2:	4770      	bx	lr
 80082a4:	f1a2 0314 	sub.w	r3, r2, #20
 80082a8:	2b1e      	cmp	r3, #30
 80082aa:	bfd6      	itet	le
 80082ac:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80082b0:	2301      	movgt	r3, #1
 80082b2:	fa22 f303 	lsrle.w	r3, r2, r3
 80082b6:	4618      	mov	r0, r3
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	7ff00000 	.word	0x7ff00000

080082c0 <__b2d>:
 80082c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c4:	6907      	ldr	r7, [r0, #16]
 80082c6:	f100 0914 	add.w	r9, r0, #20
 80082ca:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80082ce:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80082d2:	f1a7 0804 	sub.w	r8, r7, #4
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7ff fd4e 	bl	8007d78 <__hi0bits>
 80082dc:	f1c0 0320 	rsb	r3, r0, #32
 80082e0:	280a      	cmp	r0, #10
 80082e2:	600b      	str	r3, [r1, #0]
 80082e4:	491f      	ldr	r1, [pc, #124]	; (8008364 <__b2d+0xa4>)
 80082e6:	dc17      	bgt.n	8008318 <__b2d+0x58>
 80082e8:	45c1      	cmp	r9, r8
 80082ea:	bf28      	it	cs
 80082ec:	2200      	movcs	r2, #0
 80082ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80082f2:	fa26 f30c 	lsr.w	r3, r6, ip
 80082f6:	bf38      	it	cc
 80082f8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80082fc:	ea43 0501 	orr.w	r5, r3, r1
 8008300:	f100 0315 	add.w	r3, r0, #21
 8008304:	fa06 f303 	lsl.w	r3, r6, r3
 8008308:	fa22 f20c 	lsr.w	r2, r2, ip
 800830c:	ea43 0402 	orr.w	r4, r3, r2
 8008310:	4620      	mov	r0, r4
 8008312:	4629      	mov	r1, r5
 8008314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008318:	45c1      	cmp	r9, r8
 800831a:	bf2e      	itee	cs
 800831c:	2200      	movcs	r2, #0
 800831e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008322:	f1a7 0808 	subcc.w	r8, r7, #8
 8008326:	f1b0 030b 	subs.w	r3, r0, #11
 800832a:	d016      	beq.n	800835a <__b2d+0x9a>
 800832c:	f1c3 0720 	rsb	r7, r3, #32
 8008330:	fa22 f107 	lsr.w	r1, r2, r7
 8008334:	45c8      	cmp	r8, r9
 8008336:	fa06 f603 	lsl.w	r6, r6, r3
 800833a:	ea46 0601 	orr.w	r6, r6, r1
 800833e:	bf94      	ite	ls
 8008340:	2100      	movls	r1, #0
 8008342:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008346:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800834a:	fa02 f003 	lsl.w	r0, r2, r3
 800834e:	40f9      	lsrs	r1, r7
 8008350:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008354:	ea40 0401 	orr.w	r4, r0, r1
 8008358:	e7da      	b.n	8008310 <__b2d+0x50>
 800835a:	4614      	mov	r4, r2
 800835c:	ea46 0501 	orr.w	r5, r6, r1
 8008360:	e7d6      	b.n	8008310 <__b2d+0x50>
 8008362:	bf00      	nop
 8008364:	3ff00000 	.word	0x3ff00000

08008368 <__d2b>:
 8008368:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800836c:	2101      	movs	r1, #1
 800836e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008372:	4690      	mov	r8, r2
 8008374:	461d      	mov	r5, r3
 8008376:	f7ff fc0d 	bl	8007b94 <_Balloc>
 800837a:	4604      	mov	r4, r0
 800837c:	b930      	cbnz	r0, 800838c <__d2b+0x24>
 800837e:	4602      	mov	r2, r0
 8008380:	f240 310a 	movw	r1, #778	; 0x30a
 8008384:	4b24      	ldr	r3, [pc, #144]	; (8008418 <__d2b+0xb0>)
 8008386:	4825      	ldr	r0, [pc, #148]	; (800841c <__d2b+0xb4>)
 8008388:	f000 fb40 	bl	8008a0c <__assert_func>
 800838c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008390:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008394:	bb2d      	cbnz	r5, 80083e2 <__d2b+0x7a>
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	f1b8 0300 	subs.w	r3, r8, #0
 800839c:	d026      	beq.n	80083ec <__d2b+0x84>
 800839e:	4668      	mov	r0, sp
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	f7ff fd09 	bl	8007db8 <__lo0bits>
 80083a6:	9900      	ldr	r1, [sp, #0]
 80083a8:	b1f0      	cbz	r0, 80083e8 <__d2b+0x80>
 80083aa:	9a01      	ldr	r2, [sp, #4]
 80083ac:	f1c0 0320 	rsb	r3, r0, #32
 80083b0:	fa02 f303 	lsl.w	r3, r2, r3
 80083b4:	430b      	orrs	r3, r1
 80083b6:	40c2      	lsrs	r2, r0
 80083b8:	6163      	str	r3, [r4, #20]
 80083ba:	9201      	str	r2, [sp, #4]
 80083bc:	9b01      	ldr	r3, [sp, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	bf14      	ite	ne
 80083c2:	2102      	movne	r1, #2
 80083c4:	2101      	moveq	r1, #1
 80083c6:	61a3      	str	r3, [r4, #24]
 80083c8:	6121      	str	r1, [r4, #16]
 80083ca:	b1c5      	cbz	r5, 80083fe <__d2b+0x96>
 80083cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083d0:	4405      	add	r5, r0
 80083d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083d6:	603d      	str	r5, [r7, #0]
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	4620      	mov	r0, r4
 80083dc:	b002      	add	sp, #8
 80083de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e6:	e7d6      	b.n	8008396 <__d2b+0x2e>
 80083e8:	6161      	str	r1, [r4, #20]
 80083ea:	e7e7      	b.n	80083bc <__d2b+0x54>
 80083ec:	a801      	add	r0, sp, #4
 80083ee:	f7ff fce3 	bl	8007db8 <__lo0bits>
 80083f2:	2101      	movs	r1, #1
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	6121      	str	r1, [r4, #16]
 80083f8:	6163      	str	r3, [r4, #20]
 80083fa:	3020      	adds	r0, #32
 80083fc:	e7e5      	b.n	80083ca <__d2b+0x62>
 80083fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008402:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008406:	6038      	str	r0, [r7, #0]
 8008408:	6918      	ldr	r0, [r3, #16]
 800840a:	f7ff fcb5 	bl	8007d78 <__hi0bits>
 800840e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008412:	6031      	str	r1, [r6, #0]
 8008414:	e7e1      	b.n	80083da <__d2b+0x72>
 8008416:	bf00      	nop
 8008418:	08009850 	.word	0x08009850
 800841c:	080098dc 	.word	0x080098dc

08008420 <__ratio>:
 8008420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	4688      	mov	r8, r1
 8008426:	4669      	mov	r1, sp
 8008428:	4681      	mov	r9, r0
 800842a:	f7ff ff49 	bl	80082c0 <__b2d>
 800842e:	460f      	mov	r7, r1
 8008430:	4604      	mov	r4, r0
 8008432:	460d      	mov	r5, r1
 8008434:	4640      	mov	r0, r8
 8008436:	a901      	add	r1, sp, #4
 8008438:	f7ff ff42 	bl	80082c0 <__b2d>
 800843c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008440:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008444:	468b      	mov	fp, r1
 8008446:	eba3 0c02 	sub.w	ip, r3, r2
 800844a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800844e:	1a9b      	subs	r3, r3, r2
 8008450:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008454:	2b00      	cmp	r3, #0
 8008456:	bfd5      	itete	le
 8008458:	460a      	movle	r2, r1
 800845a:	462a      	movgt	r2, r5
 800845c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008460:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008464:	bfd8      	it	le
 8008466:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800846a:	465b      	mov	r3, fp
 800846c:	4602      	mov	r2, r0
 800846e:	4639      	mov	r1, r7
 8008470:	4620      	mov	r0, r4
 8008472:	f7f8 f95b 	bl	800072c <__aeabi_ddiv>
 8008476:	b003      	add	sp, #12
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800847c <__copybits>:
 800847c:	3901      	subs	r1, #1
 800847e:	b570      	push	{r4, r5, r6, lr}
 8008480:	1149      	asrs	r1, r1, #5
 8008482:	6914      	ldr	r4, [r2, #16]
 8008484:	3101      	adds	r1, #1
 8008486:	f102 0314 	add.w	r3, r2, #20
 800848a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800848e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008492:	1f05      	subs	r5, r0, #4
 8008494:	42a3      	cmp	r3, r4
 8008496:	d30c      	bcc.n	80084b2 <__copybits+0x36>
 8008498:	1aa3      	subs	r3, r4, r2
 800849a:	3b11      	subs	r3, #17
 800849c:	f023 0303 	bic.w	r3, r3, #3
 80084a0:	3211      	adds	r2, #17
 80084a2:	42a2      	cmp	r2, r4
 80084a4:	bf88      	it	hi
 80084a6:	2300      	movhi	r3, #0
 80084a8:	4418      	add	r0, r3
 80084aa:	2300      	movs	r3, #0
 80084ac:	4288      	cmp	r0, r1
 80084ae:	d305      	bcc.n	80084bc <__copybits+0x40>
 80084b0:	bd70      	pop	{r4, r5, r6, pc}
 80084b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80084b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80084ba:	e7eb      	b.n	8008494 <__copybits+0x18>
 80084bc:	f840 3b04 	str.w	r3, [r0], #4
 80084c0:	e7f4      	b.n	80084ac <__copybits+0x30>

080084c2 <__any_on>:
 80084c2:	f100 0214 	add.w	r2, r0, #20
 80084c6:	6900      	ldr	r0, [r0, #16]
 80084c8:	114b      	asrs	r3, r1, #5
 80084ca:	4298      	cmp	r0, r3
 80084cc:	b510      	push	{r4, lr}
 80084ce:	db11      	blt.n	80084f4 <__any_on+0x32>
 80084d0:	dd0a      	ble.n	80084e8 <__any_on+0x26>
 80084d2:	f011 011f 	ands.w	r1, r1, #31
 80084d6:	d007      	beq.n	80084e8 <__any_on+0x26>
 80084d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084dc:	fa24 f001 	lsr.w	r0, r4, r1
 80084e0:	fa00 f101 	lsl.w	r1, r0, r1
 80084e4:	428c      	cmp	r4, r1
 80084e6:	d10b      	bne.n	8008500 <__any_on+0x3e>
 80084e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d803      	bhi.n	80084f8 <__any_on+0x36>
 80084f0:	2000      	movs	r0, #0
 80084f2:	bd10      	pop	{r4, pc}
 80084f4:	4603      	mov	r3, r0
 80084f6:	e7f7      	b.n	80084e8 <__any_on+0x26>
 80084f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084fc:	2900      	cmp	r1, #0
 80084fe:	d0f5      	beq.n	80084ec <__any_on+0x2a>
 8008500:	2001      	movs	r0, #1
 8008502:	e7f6      	b.n	80084f2 <__any_on+0x30>

08008504 <_calloc_r>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	fba1 5402 	umull	r5, r4, r1, r2
 800850a:	b934      	cbnz	r4, 800851a <_calloc_r+0x16>
 800850c:	4629      	mov	r1, r5
 800850e:	f000 f875 	bl	80085fc <_malloc_r>
 8008512:	4606      	mov	r6, r0
 8008514:	b928      	cbnz	r0, 8008522 <_calloc_r+0x1e>
 8008516:	4630      	mov	r0, r6
 8008518:	bd70      	pop	{r4, r5, r6, pc}
 800851a:	220c      	movs	r2, #12
 800851c:	2600      	movs	r6, #0
 800851e:	6002      	str	r2, [r0, #0]
 8008520:	e7f9      	b.n	8008516 <_calloc_r+0x12>
 8008522:	462a      	mov	r2, r5
 8008524:	4621      	mov	r1, r4
 8008526:	f7fc fbd3 	bl	8004cd0 <memset>
 800852a:	e7f4      	b.n	8008516 <_calloc_r+0x12>

0800852c <_free_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4605      	mov	r5, r0
 8008530:	2900      	cmp	r1, #0
 8008532:	d040      	beq.n	80085b6 <_free_r+0x8a>
 8008534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008538:	1f0c      	subs	r4, r1, #4
 800853a:	2b00      	cmp	r3, #0
 800853c:	bfb8      	it	lt
 800853e:	18e4      	addlt	r4, r4, r3
 8008540:	f000 faae 	bl	8008aa0 <__malloc_lock>
 8008544:	4a1c      	ldr	r2, [pc, #112]	; (80085b8 <_free_r+0x8c>)
 8008546:	6813      	ldr	r3, [r2, #0]
 8008548:	b933      	cbnz	r3, 8008558 <_free_r+0x2c>
 800854a:	6063      	str	r3, [r4, #4]
 800854c:	6014      	str	r4, [r2, #0]
 800854e:	4628      	mov	r0, r5
 8008550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008554:	f000 baaa 	b.w	8008aac <__malloc_unlock>
 8008558:	42a3      	cmp	r3, r4
 800855a:	d908      	bls.n	800856e <_free_r+0x42>
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	1821      	adds	r1, r4, r0
 8008560:	428b      	cmp	r3, r1
 8008562:	bf01      	itttt	eq
 8008564:	6819      	ldreq	r1, [r3, #0]
 8008566:	685b      	ldreq	r3, [r3, #4]
 8008568:	1809      	addeq	r1, r1, r0
 800856a:	6021      	streq	r1, [r4, #0]
 800856c:	e7ed      	b.n	800854a <_free_r+0x1e>
 800856e:	461a      	mov	r2, r3
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	b10b      	cbz	r3, 8008578 <_free_r+0x4c>
 8008574:	42a3      	cmp	r3, r4
 8008576:	d9fa      	bls.n	800856e <_free_r+0x42>
 8008578:	6811      	ldr	r1, [r2, #0]
 800857a:	1850      	adds	r0, r2, r1
 800857c:	42a0      	cmp	r0, r4
 800857e:	d10b      	bne.n	8008598 <_free_r+0x6c>
 8008580:	6820      	ldr	r0, [r4, #0]
 8008582:	4401      	add	r1, r0
 8008584:	1850      	adds	r0, r2, r1
 8008586:	4283      	cmp	r3, r0
 8008588:	6011      	str	r1, [r2, #0]
 800858a:	d1e0      	bne.n	800854e <_free_r+0x22>
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4401      	add	r1, r0
 8008592:	6011      	str	r1, [r2, #0]
 8008594:	6053      	str	r3, [r2, #4]
 8008596:	e7da      	b.n	800854e <_free_r+0x22>
 8008598:	d902      	bls.n	80085a0 <_free_r+0x74>
 800859a:	230c      	movs	r3, #12
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	e7d6      	b.n	800854e <_free_r+0x22>
 80085a0:	6820      	ldr	r0, [r4, #0]
 80085a2:	1821      	adds	r1, r4, r0
 80085a4:	428b      	cmp	r3, r1
 80085a6:	bf01      	itttt	eq
 80085a8:	6819      	ldreq	r1, [r3, #0]
 80085aa:	685b      	ldreq	r3, [r3, #4]
 80085ac:	1809      	addeq	r1, r1, r0
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	6054      	str	r4, [r2, #4]
 80085b4:	e7cb      	b.n	800854e <_free_r+0x22>
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	20000390 	.word	0x20000390

080085bc <sbrk_aligned>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	4e0e      	ldr	r6, [pc, #56]	; (80085f8 <sbrk_aligned+0x3c>)
 80085c0:	460c      	mov	r4, r1
 80085c2:	6831      	ldr	r1, [r6, #0]
 80085c4:	4605      	mov	r5, r0
 80085c6:	b911      	cbnz	r1, 80085ce <sbrk_aligned+0x12>
 80085c8:	f000 f9ee 	bl	80089a8 <_sbrk_r>
 80085cc:	6030      	str	r0, [r6, #0]
 80085ce:	4621      	mov	r1, r4
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 f9e9 	bl	80089a8 <_sbrk_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d00a      	beq.n	80085f0 <sbrk_aligned+0x34>
 80085da:	1cc4      	adds	r4, r0, #3
 80085dc:	f024 0403 	bic.w	r4, r4, #3
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d007      	beq.n	80085f4 <sbrk_aligned+0x38>
 80085e4:	1a21      	subs	r1, r4, r0
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 f9de 	bl	80089a8 <_sbrk_r>
 80085ec:	3001      	adds	r0, #1
 80085ee:	d101      	bne.n	80085f4 <sbrk_aligned+0x38>
 80085f0:	f04f 34ff 	mov.w	r4, #4294967295
 80085f4:	4620      	mov	r0, r4
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	20000394 	.word	0x20000394

080085fc <_malloc_r>:
 80085fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	1ccd      	adds	r5, r1, #3
 8008602:	f025 0503 	bic.w	r5, r5, #3
 8008606:	3508      	adds	r5, #8
 8008608:	2d0c      	cmp	r5, #12
 800860a:	bf38      	it	cc
 800860c:	250c      	movcc	r5, #12
 800860e:	2d00      	cmp	r5, #0
 8008610:	4607      	mov	r7, r0
 8008612:	db01      	blt.n	8008618 <_malloc_r+0x1c>
 8008614:	42a9      	cmp	r1, r5
 8008616:	d905      	bls.n	8008624 <_malloc_r+0x28>
 8008618:	230c      	movs	r3, #12
 800861a:	2600      	movs	r6, #0
 800861c:	603b      	str	r3, [r7, #0]
 800861e:	4630      	mov	r0, r6
 8008620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008624:	4e2e      	ldr	r6, [pc, #184]	; (80086e0 <_malloc_r+0xe4>)
 8008626:	f000 fa3b 	bl	8008aa0 <__malloc_lock>
 800862a:	6833      	ldr	r3, [r6, #0]
 800862c:	461c      	mov	r4, r3
 800862e:	bb34      	cbnz	r4, 800867e <_malloc_r+0x82>
 8008630:	4629      	mov	r1, r5
 8008632:	4638      	mov	r0, r7
 8008634:	f7ff ffc2 	bl	80085bc <sbrk_aligned>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	4604      	mov	r4, r0
 800863c:	d14d      	bne.n	80086da <_malloc_r+0xde>
 800863e:	6834      	ldr	r4, [r6, #0]
 8008640:	4626      	mov	r6, r4
 8008642:	2e00      	cmp	r6, #0
 8008644:	d140      	bne.n	80086c8 <_malloc_r+0xcc>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	4631      	mov	r1, r6
 800864a:	4638      	mov	r0, r7
 800864c:	eb04 0803 	add.w	r8, r4, r3
 8008650:	f000 f9aa 	bl	80089a8 <_sbrk_r>
 8008654:	4580      	cmp	r8, r0
 8008656:	d13a      	bne.n	80086ce <_malloc_r+0xd2>
 8008658:	6821      	ldr	r1, [r4, #0]
 800865a:	3503      	adds	r5, #3
 800865c:	1a6d      	subs	r5, r5, r1
 800865e:	f025 0503 	bic.w	r5, r5, #3
 8008662:	3508      	adds	r5, #8
 8008664:	2d0c      	cmp	r5, #12
 8008666:	bf38      	it	cc
 8008668:	250c      	movcc	r5, #12
 800866a:	4638      	mov	r0, r7
 800866c:	4629      	mov	r1, r5
 800866e:	f7ff ffa5 	bl	80085bc <sbrk_aligned>
 8008672:	3001      	adds	r0, #1
 8008674:	d02b      	beq.n	80086ce <_malloc_r+0xd2>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	442b      	add	r3, r5
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	e00e      	b.n	800869c <_malloc_r+0xa0>
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	1b52      	subs	r2, r2, r5
 8008682:	d41e      	bmi.n	80086c2 <_malloc_r+0xc6>
 8008684:	2a0b      	cmp	r2, #11
 8008686:	d916      	bls.n	80086b6 <_malloc_r+0xba>
 8008688:	1961      	adds	r1, r4, r5
 800868a:	42a3      	cmp	r3, r4
 800868c:	6025      	str	r5, [r4, #0]
 800868e:	bf18      	it	ne
 8008690:	6059      	strne	r1, [r3, #4]
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	bf08      	it	eq
 8008696:	6031      	streq	r1, [r6, #0]
 8008698:	5162      	str	r2, [r4, r5]
 800869a:	604b      	str	r3, [r1, #4]
 800869c:	4638      	mov	r0, r7
 800869e:	f104 060b 	add.w	r6, r4, #11
 80086a2:	f000 fa03 	bl	8008aac <__malloc_unlock>
 80086a6:	f026 0607 	bic.w	r6, r6, #7
 80086aa:	1d23      	adds	r3, r4, #4
 80086ac:	1af2      	subs	r2, r6, r3
 80086ae:	d0b6      	beq.n	800861e <_malloc_r+0x22>
 80086b0:	1b9b      	subs	r3, r3, r6
 80086b2:	50a3      	str	r3, [r4, r2]
 80086b4:	e7b3      	b.n	800861e <_malloc_r+0x22>
 80086b6:	6862      	ldr	r2, [r4, #4]
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	bf0c      	ite	eq
 80086bc:	6032      	streq	r2, [r6, #0]
 80086be:	605a      	strne	r2, [r3, #4]
 80086c0:	e7ec      	b.n	800869c <_malloc_r+0xa0>
 80086c2:	4623      	mov	r3, r4
 80086c4:	6864      	ldr	r4, [r4, #4]
 80086c6:	e7b2      	b.n	800862e <_malloc_r+0x32>
 80086c8:	4634      	mov	r4, r6
 80086ca:	6876      	ldr	r6, [r6, #4]
 80086cc:	e7b9      	b.n	8008642 <_malloc_r+0x46>
 80086ce:	230c      	movs	r3, #12
 80086d0:	4638      	mov	r0, r7
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	f000 f9ea 	bl	8008aac <__malloc_unlock>
 80086d8:	e7a1      	b.n	800861e <_malloc_r+0x22>
 80086da:	6025      	str	r5, [r4, #0]
 80086dc:	e7de      	b.n	800869c <_malloc_r+0xa0>
 80086de:	bf00      	nop
 80086e0:	20000390 	.word	0x20000390

080086e4 <__ssputs_r>:
 80086e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e8:	688e      	ldr	r6, [r1, #8]
 80086ea:	4682      	mov	sl, r0
 80086ec:	429e      	cmp	r6, r3
 80086ee:	460c      	mov	r4, r1
 80086f0:	4690      	mov	r8, r2
 80086f2:	461f      	mov	r7, r3
 80086f4:	d838      	bhi.n	8008768 <__ssputs_r+0x84>
 80086f6:	898a      	ldrh	r2, [r1, #12]
 80086f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086fc:	d032      	beq.n	8008764 <__ssputs_r+0x80>
 80086fe:	6825      	ldr	r5, [r4, #0]
 8008700:	6909      	ldr	r1, [r1, #16]
 8008702:	3301      	adds	r3, #1
 8008704:	eba5 0901 	sub.w	r9, r5, r1
 8008708:	6965      	ldr	r5, [r4, #20]
 800870a:	444b      	add	r3, r9
 800870c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008714:	106d      	asrs	r5, r5, #1
 8008716:	429d      	cmp	r5, r3
 8008718:	bf38      	it	cc
 800871a:	461d      	movcc	r5, r3
 800871c:	0553      	lsls	r3, r2, #21
 800871e:	d531      	bpl.n	8008784 <__ssputs_r+0xa0>
 8008720:	4629      	mov	r1, r5
 8008722:	f7ff ff6b 	bl	80085fc <_malloc_r>
 8008726:	4606      	mov	r6, r0
 8008728:	b950      	cbnz	r0, 8008740 <__ssputs_r+0x5c>
 800872a:	230c      	movs	r3, #12
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	f8ca 3000 	str.w	r3, [sl]
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008740:	464a      	mov	r2, r9
 8008742:	6921      	ldr	r1, [r4, #16]
 8008744:	f7ff fa18 	bl	8007b78 <memcpy>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800874e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	6126      	str	r6, [r4, #16]
 8008756:	444e      	add	r6, r9
 8008758:	6026      	str	r6, [r4, #0]
 800875a:	463e      	mov	r6, r7
 800875c:	6165      	str	r5, [r4, #20]
 800875e:	eba5 0509 	sub.w	r5, r5, r9
 8008762:	60a5      	str	r5, [r4, #8]
 8008764:	42be      	cmp	r6, r7
 8008766:	d900      	bls.n	800876a <__ssputs_r+0x86>
 8008768:	463e      	mov	r6, r7
 800876a:	4632      	mov	r2, r6
 800876c:	4641      	mov	r1, r8
 800876e:	6820      	ldr	r0, [r4, #0]
 8008770:	f000 f97c 	bl	8008a6c <memmove>
 8008774:	68a3      	ldr	r3, [r4, #8]
 8008776:	2000      	movs	r0, #0
 8008778:	1b9b      	subs	r3, r3, r6
 800877a:	60a3      	str	r3, [r4, #8]
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	4433      	add	r3, r6
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	e7db      	b.n	800873c <__ssputs_r+0x58>
 8008784:	462a      	mov	r2, r5
 8008786:	f000 f997 	bl	8008ab8 <_realloc_r>
 800878a:	4606      	mov	r6, r0
 800878c:	2800      	cmp	r0, #0
 800878e:	d1e1      	bne.n	8008754 <__ssputs_r+0x70>
 8008790:	4650      	mov	r0, sl
 8008792:	6921      	ldr	r1, [r4, #16]
 8008794:	f7ff feca 	bl	800852c <_free_r>
 8008798:	e7c7      	b.n	800872a <__ssputs_r+0x46>
	...

0800879c <_svfiprintf_r>:
 800879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a0:	4698      	mov	r8, r3
 80087a2:	898b      	ldrh	r3, [r1, #12]
 80087a4:	4607      	mov	r7, r0
 80087a6:	061b      	lsls	r3, r3, #24
 80087a8:	460d      	mov	r5, r1
 80087aa:	4614      	mov	r4, r2
 80087ac:	b09d      	sub	sp, #116	; 0x74
 80087ae:	d50e      	bpl.n	80087ce <_svfiprintf_r+0x32>
 80087b0:	690b      	ldr	r3, [r1, #16]
 80087b2:	b963      	cbnz	r3, 80087ce <_svfiprintf_r+0x32>
 80087b4:	2140      	movs	r1, #64	; 0x40
 80087b6:	f7ff ff21 	bl	80085fc <_malloc_r>
 80087ba:	6028      	str	r0, [r5, #0]
 80087bc:	6128      	str	r0, [r5, #16]
 80087be:	b920      	cbnz	r0, 80087ca <_svfiprintf_r+0x2e>
 80087c0:	230c      	movs	r3, #12
 80087c2:	603b      	str	r3, [r7, #0]
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
 80087c8:	e0d1      	b.n	800896e <_svfiprintf_r+0x1d2>
 80087ca:	2340      	movs	r3, #64	; 0x40
 80087cc:	616b      	str	r3, [r5, #20]
 80087ce:	2300      	movs	r3, #0
 80087d0:	9309      	str	r3, [sp, #36]	; 0x24
 80087d2:	2320      	movs	r3, #32
 80087d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087d8:	2330      	movs	r3, #48	; 0x30
 80087da:	f04f 0901 	mov.w	r9, #1
 80087de:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008988 <_svfiprintf_r+0x1ec>
 80087e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ea:	4623      	mov	r3, r4
 80087ec:	469a      	mov	sl, r3
 80087ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f2:	b10a      	cbz	r2, 80087f8 <_svfiprintf_r+0x5c>
 80087f4:	2a25      	cmp	r2, #37	; 0x25
 80087f6:	d1f9      	bne.n	80087ec <_svfiprintf_r+0x50>
 80087f8:	ebba 0b04 	subs.w	fp, sl, r4
 80087fc:	d00b      	beq.n	8008816 <_svfiprintf_r+0x7a>
 80087fe:	465b      	mov	r3, fp
 8008800:	4622      	mov	r2, r4
 8008802:	4629      	mov	r1, r5
 8008804:	4638      	mov	r0, r7
 8008806:	f7ff ff6d 	bl	80086e4 <__ssputs_r>
 800880a:	3001      	adds	r0, #1
 800880c:	f000 80aa 	beq.w	8008964 <_svfiprintf_r+0x1c8>
 8008810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008812:	445a      	add	r2, fp
 8008814:	9209      	str	r2, [sp, #36]	; 0x24
 8008816:	f89a 3000 	ldrb.w	r3, [sl]
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 80a2 	beq.w	8008964 <_svfiprintf_r+0x1c8>
 8008820:	2300      	movs	r3, #0
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800882a:	f10a 0a01 	add.w	sl, sl, #1
 800882e:	9304      	str	r3, [sp, #16]
 8008830:	9307      	str	r3, [sp, #28]
 8008832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008836:	931a      	str	r3, [sp, #104]	; 0x68
 8008838:	4654      	mov	r4, sl
 800883a:	2205      	movs	r2, #5
 800883c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008840:	4851      	ldr	r0, [pc, #324]	; (8008988 <_svfiprintf_r+0x1ec>)
 8008842:	f7ff f98b 	bl	8007b5c <memchr>
 8008846:	9a04      	ldr	r2, [sp, #16]
 8008848:	b9d8      	cbnz	r0, 8008882 <_svfiprintf_r+0xe6>
 800884a:	06d0      	lsls	r0, r2, #27
 800884c:	bf44      	itt	mi
 800884e:	2320      	movmi	r3, #32
 8008850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008854:	0711      	lsls	r1, r2, #28
 8008856:	bf44      	itt	mi
 8008858:	232b      	movmi	r3, #43	; 0x2b
 800885a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800885e:	f89a 3000 	ldrb.w	r3, [sl]
 8008862:	2b2a      	cmp	r3, #42	; 0x2a
 8008864:	d015      	beq.n	8008892 <_svfiprintf_r+0xf6>
 8008866:	4654      	mov	r4, sl
 8008868:	2000      	movs	r0, #0
 800886a:	f04f 0c0a 	mov.w	ip, #10
 800886e:	9a07      	ldr	r2, [sp, #28]
 8008870:	4621      	mov	r1, r4
 8008872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008876:	3b30      	subs	r3, #48	; 0x30
 8008878:	2b09      	cmp	r3, #9
 800887a:	d94e      	bls.n	800891a <_svfiprintf_r+0x17e>
 800887c:	b1b0      	cbz	r0, 80088ac <_svfiprintf_r+0x110>
 800887e:	9207      	str	r2, [sp, #28]
 8008880:	e014      	b.n	80088ac <_svfiprintf_r+0x110>
 8008882:	eba0 0308 	sub.w	r3, r0, r8
 8008886:	fa09 f303 	lsl.w	r3, r9, r3
 800888a:	4313      	orrs	r3, r2
 800888c:	46a2      	mov	sl, r4
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	e7d2      	b.n	8008838 <_svfiprintf_r+0x9c>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	1d19      	adds	r1, r3, #4
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	9103      	str	r1, [sp, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	bfbb      	ittet	lt
 800889e:	425b      	neglt	r3, r3
 80088a0:	f042 0202 	orrlt.w	r2, r2, #2
 80088a4:	9307      	strge	r3, [sp, #28]
 80088a6:	9307      	strlt	r3, [sp, #28]
 80088a8:	bfb8      	it	lt
 80088aa:	9204      	strlt	r2, [sp, #16]
 80088ac:	7823      	ldrb	r3, [r4, #0]
 80088ae:	2b2e      	cmp	r3, #46	; 0x2e
 80088b0:	d10c      	bne.n	80088cc <_svfiprintf_r+0x130>
 80088b2:	7863      	ldrb	r3, [r4, #1]
 80088b4:	2b2a      	cmp	r3, #42	; 0x2a
 80088b6:	d135      	bne.n	8008924 <_svfiprintf_r+0x188>
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	3402      	adds	r4, #2
 80088bc:	1d1a      	adds	r2, r3, #4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	9203      	str	r2, [sp, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	bfb8      	it	lt
 80088c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ca:	9305      	str	r3, [sp, #20]
 80088cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800898c <_svfiprintf_r+0x1f0>
 80088d0:	2203      	movs	r2, #3
 80088d2:	4650      	mov	r0, sl
 80088d4:	7821      	ldrb	r1, [r4, #0]
 80088d6:	f7ff f941 	bl	8007b5c <memchr>
 80088da:	b140      	cbz	r0, 80088ee <_svfiprintf_r+0x152>
 80088dc:	2340      	movs	r3, #64	; 0x40
 80088de:	eba0 000a 	sub.w	r0, r0, sl
 80088e2:	fa03 f000 	lsl.w	r0, r3, r0
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	3401      	adds	r4, #1
 80088ea:	4303      	orrs	r3, r0
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f2:	2206      	movs	r2, #6
 80088f4:	4826      	ldr	r0, [pc, #152]	; (8008990 <_svfiprintf_r+0x1f4>)
 80088f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088fa:	f7ff f92f 	bl	8007b5c <memchr>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d038      	beq.n	8008974 <_svfiprintf_r+0x1d8>
 8008902:	4b24      	ldr	r3, [pc, #144]	; (8008994 <_svfiprintf_r+0x1f8>)
 8008904:	bb1b      	cbnz	r3, 800894e <_svfiprintf_r+0x1b2>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	3307      	adds	r3, #7
 800890a:	f023 0307 	bic.w	r3, r3, #7
 800890e:	3308      	adds	r3, #8
 8008910:	9303      	str	r3, [sp, #12]
 8008912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008914:	4433      	add	r3, r6
 8008916:	9309      	str	r3, [sp, #36]	; 0x24
 8008918:	e767      	b.n	80087ea <_svfiprintf_r+0x4e>
 800891a:	460c      	mov	r4, r1
 800891c:	2001      	movs	r0, #1
 800891e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008922:	e7a5      	b.n	8008870 <_svfiprintf_r+0xd4>
 8008924:	2300      	movs	r3, #0
 8008926:	f04f 0c0a 	mov.w	ip, #10
 800892a:	4619      	mov	r1, r3
 800892c:	3401      	adds	r4, #1
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	4620      	mov	r0, r4
 8008932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008936:	3a30      	subs	r2, #48	; 0x30
 8008938:	2a09      	cmp	r2, #9
 800893a:	d903      	bls.n	8008944 <_svfiprintf_r+0x1a8>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0c5      	beq.n	80088cc <_svfiprintf_r+0x130>
 8008940:	9105      	str	r1, [sp, #20]
 8008942:	e7c3      	b.n	80088cc <_svfiprintf_r+0x130>
 8008944:	4604      	mov	r4, r0
 8008946:	2301      	movs	r3, #1
 8008948:	fb0c 2101 	mla	r1, ip, r1, r2
 800894c:	e7f0      	b.n	8008930 <_svfiprintf_r+0x194>
 800894e:	ab03      	add	r3, sp, #12
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	462a      	mov	r2, r5
 8008954:	4638      	mov	r0, r7
 8008956:	4b10      	ldr	r3, [pc, #64]	; (8008998 <_svfiprintf_r+0x1fc>)
 8008958:	a904      	add	r1, sp, #16
 800895a:	f7fc fa5f 	bl	8004e1c <_printf_float>
 800895e:	1c42      	adds	r2, r0, #1
 8008960:	4606      	mov	r6, r0
 8008962:	d1d6      	bne.n	8008912 <_svfiprintf_r+0x176>
 8008964:	89ab      	ldrh	r3, [r5, #12]
 8008966:	065b      	lsls	r3, r3, #25
 8008968:	f53f af2c 	bmi.w	80087c4 <_svfiprintf_r+0x28>
 800896c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800896e:	b01d      	add	sp, #116	; 0x74
 8008970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008974:	ab03      	add	r3, sp, #12
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	462a      	mov	r2, r5
 800897a:	4638      	mov	r0, r7
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <_svfiprintf_r+0x1fc>)
 800897e:	a904      	add	r1, sp, #16
 8008980:	f7fc fce8 	bl	8005354 <_printf_i>
 8008984:	e7eb      	b.n	800895e <_svfiprintf_r+0x1c2>
 8008986:	bf00      	nop
 8008988:	08009a34 	.word	0x08009a34
 800898c:	08009a3a 	.word	0x08009a3a
 8008990:	08009a3e 	.word	0x08009a3e
 8008994:	08004e1d 	.word	0x08004e1d
 8008998:	080086e5 	.word	0x080086e5

0800899c <nan>:
 800899c:	2000      	movs	r0, #0
 800899e:	4901      	ldr	r1, [pc, #4]	; (80089a4 <nan+0x8>)
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	7ff80000 	.word	0x7ff80000

080089a8 <_sbrk_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	2300      	movs	r3, #0
 80089ac:	4d05      	ldr	r5, [pc, #20]	; (80089c4 <_sbrk_r+0x1c>)
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f8 fda2 	bl	80014fc <_sbrk>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_sbrk_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_sbrk_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	20000398 	.word	0x20000398

080089c8 <strncmp>:
 80089c8:	4603      	mov	r3, r0
 80089ca:	b510      	push	{r4, lr}
 80089cc:	b172      	cbz	r2, 80089ec <strncmp+0x24>
 80089ce:	3901      	subs	r1, #1
 80089d0:	1884      	adds	r4, r0, r2
 80089d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80089da:	4290      	cmp	r0, r2
 80089dc:	d101      	bne.n	80089e2 <strncmp+0x1a>
 80089de:	42a3      	cmp	r3, r4
 80089e0:	d101      	bne.n	80089e6 <strncmp+0x1e>
 80089e2:	1a80      	subs	r0, r0, r2
 80089e4:	bd10      	pop	{r4, pc}
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d1f3      	bne.n	80089d2 <strncmp+0xa>
 80089ea:	e7fa      	b.n	80089e2 <strncmp+0x1a>
 80089ec:	4610      	mov	r0, r2
 80089ee:	e7f9      	b.n	80089e4 <strncmp+0x1c>

080089f0 <__ascii_wctomb>:
 80089f0:	4603      	mov	r3, r0
 80089f2:	4608      	mov	r0, r1
 80089f4:	b141      	cbz	r1, 8008a08 <__ascii_wctomb+0x18>
 80089f6:	2aff      	cmp	r2, #255	; 0xff
 80089f8:	d904      	bls.n	8008a04 <__ascii_wctomb+0x14>
 80089fa:	228a      	movs	r2, #138	; 0x8a
 80089fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	4770      	bx	lr
 8008a04:	2001      	movs	r0, #1
 8008a06:	700a      	strb	r2, [r1, #0]
 8008a08:	4770      	bx	lr
	...

08008a0c <__assert_func>:
 8008a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a0e:	4614      	mov	r4, r2
 8008a10:	461a      	mov	r2, r3
 8008a12:	4b09      	ldr	r3, [pc, #36]	; (8008a38 <__assert_func+0x2c>)
 8008a14:	4605      	mov	r5, r0
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68d8      	ldr	r0, [r3, #12]
 8008a1a:	b14c      	cbz	r4, 8008a30 <__assert_func+0x24>
 8008a1c:	4b07      	ldr	r3, [pc, #28]	; (8008a3c <__assert_func+0x30>)
 8008a1e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a22:	9100      	str	r1, [sp, #0]
 8008a24:	462b      	mov	r3, r5
 8008a26:	4906      	ldr	r1, [pc, #24]	; (8008a40 <__assert_func+0x34>)
 8008a28:	f000 f80e 	bl	8008a48 <fiprintf>
 8008a2c:	f000 fa8a 	bl	8008f44 <abort>
 8008a30:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <__assert_func+0x38>)
 8008a32:	461c      	mov	r4, r3
 8008a34:	e7f3      	b.n	8008a1e <__assert_func+0x12>
 8008a36:	bf00      	nop
 8008a38:	2000000c 	.word	0x2000000c
 8008a3c:	08009a45 	.word	0x08009a45
 8008a40:	08009a52 	.word	0x08009a52
 8008a44:	08009a80 	.word	0x08009a80

08008a48 <fiprintf>:
 8008a48:	b40e      	push	{r1, r2, r3}
 8008a4a:	b503      	push	{r0, r1, lr}
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	ab03      	add	r3, sp, #12
 8008a50:	4805      	ldr	r0, [pc, #20]	; (8008a68 <fiprintf+0x20>)
 8008a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a56:	6800      	ldr	r0, [r0, #0]
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	f000 f883 	bl	8008b64 <_vfiprintf_r>
 8008a5e:	b002      	add	sp, #8
 8008a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a64:	b003      	add	sp, #12
 8008a66:	4770      	bx	lr
 8008a68:	2000000c 	.word	0x2000000c

08008a6c <memmove>:
 8008a6c:	4288      	cmp	r0, r1
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	eb01 0402 	add.w	r4, r1, r2
 8008a74:	d902      	bls.n	8008a7c <memmove+0x10>
 8008a76:	4284      	cmp	r4, r0
 8008a78:	4623      	mov	r3, r4
 8008a7a:	d807      	bhi.n	8008a8c <memmove+0x20>
 8008a7c:	1e43      	subs	r3, r0, #1
 8008a7e:	42a1      	cmp	r1, r4
 8008a80:	d008      	beq.n	8008a94 <memmove+0x28>
 8008a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a8a:	e7f8      	b.n	8008a7e <memmove+0x12>
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	4402      	add	r2, r0
 8008a90:	428a      	cmp	r2, r1
 8008a92:	d100      	bne.n	8008a96 <memmove+0x2a>
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a9e:	e7f7      	b.n	8008a90 <memmove+0x24>

08008aa0 <__malloc_lock>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <__malloc_lock+0x8>)
 8008aa2:	f000 bc0b 	b.w	80092bc <__retarget_lock_acquire_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	2000039c 	.word	0x2000039c

08008aac <__malloc_unlock>:
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <__malloc_unlock+0x8>)
 8008aae:	f000 bc06 	b.w	80092be <__retarget_lock_release_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	2000039c 	.word	0x2000039c

08008ab8 <_realloc_r>:
 8008ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abc:	4680      	mov	r8, r0
 8008abe:	4614      	mov	r4, r2
 8008ac0:	460e      	mov	r6, r1
 8008ac2:	b921      	cbnz	r1, 8008ace <_realloc_r+0x16>
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aca:	f7ff bd97 	b.w	80085fc <_malloc_r>
 8008ace:	b92a      	cbnz	r2, 8008adc <_realloc_r+0x24>
 8008ad0:	f7ff fd2c 	bl	800852c <_free_r>
 8008ad4:	4625      	mov	r5, r4
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008adc:	f000 fc56 	bl	800938c <_malloc_usable_size_r>
 8008ae0:	4284      	cmp	r4, r0
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	d802      	bhi.n	8008aec <_realloc_r+0x34>
 8008ae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aea:	d812      	bhi.n	8008b12 <_realloc_r+0x5a>
 8008aec:	4621      	mov	r1, r4
 8008aee:	4640      	mov	r0, r8
 8008af0:	f7ff fd84 	bl	80085fc <_malloc_r>
 8008af4:	4605      	mov	r5, r0
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d0ed      	beq.n	8008ad6 <_realloc_r+0x1e>
 8008afa:	42bc      	cmp	r4, r7
 8008afc:	4622      	mov	r2, r4
 8008afe:	4631      	mov	r1, r6
 8008b00:	bf28      	it	cs
 8008b02:	463a      	movcs	r2, r7
 8008b04:	f7ff f838 	bl	8007b78 <memcpy>
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	f7ff fd0e 	bl	800852c <_free_r>
 8008b10:	e7e1      	b.n	8008ad6 <_realloc_r+0x1e>
 8008b12:	4635      	mov	r5, r6
 8008b14:	e7df      	b.n	8008ad6 <_realloc_r+0x1e>

08008b16 <__sfputc_r>:
 8008b16:	6893      	ldr	r3, [r2, #8]
 8008b18:	b410      	push	{r4}
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	6093      	str	r3, [r2, #8]
 8008b20:	da07      	bge.n	8008b32 <__sfputc_r+0x1c>
 8008b22:	6994      	ldr	r4, [r2, #24]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	db01      	blt.n	8008b2c <__sfputc_r+0x16>
 8008b28:	290a      	cmp	r1, #10
 8008b2a:	d102      	bne.n	8008b32 <__sfputc_r+0x1c>
 8008b2c:	bc10      	pop	{r4}
 8008b2e:	f000 b949 	b.w	8008dc4 <__swbuf_r>
 8008b32:	6813      	ldr	r3, [r2, #0]
 8008b34:	1c58      	adds	r0, r3, #1
 8008b36:	6010      	str	r0, [r2, #0]
 8008b38:	7019      	strb	r1, [r3, #0]
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	bc10      	pop	{r4}
 8008b3e:	4770      	bx	lr

08008b40 <__sfputs_r>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	4606      	mov	r6, r0
 8008b44:	460f      	mov	r7, r1
 8008b46:	4614      	mov	r4, r2
 8008b48:	18d5      	adds	r5, r2, r3
 8008b4a:	42ac      	cmp	r4, r5
 8008b4c:	d101      	bne.n	8008b52 <__sfputs_r+0x12>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e007      	b.n	8008b62 <__sfputs_r+0x22>
 8008b52:	463a      	mov	r2, r7
 8008b54:	4630      	mov	r0, r6
 8008b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b5a:	f7ff ffdc 	bl	8008b16 <__sfputc_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	d1f3      	bne.n	8008b4a <__sfputs_r+0xa>
 8008b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b64 <_vfiprintf_r>:
 8008b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	460d      	mov	r5, r1
 8008b6a:	4614      	mov	r4, r2
 8008b6c:	4698      	mov	r8, r3
 8008b6e:	4606      	mov	r6, r0
 8008b70:	b09d      	sub	sp, #116	; 0x74
 8008b72:	b118      	cbz	r0, 8008b7c <_vfiprintf_r+0x18>
 8008b74:	6983      	ldr	r3, [r0, #24]
 8008b76:	b90b      	cbnz	r3, 8008b7c <_vfiprintf_r+0x18>
 8008b78:	f000 fb02 	bl	8009180 <__sinit>
 8008b7c:	4b89      	ldr	r3, [pc, #548]	; (8008da4 <_vfiprintf_r+0x240>)
 8008b7e:	429d      	cmp	r5, r3
 8008b80:	d11b      	bne.n	8008bba <_vfiprintf_r+0x56>
 8008b82:	6875      	ldr	r5, [r6, #4]
 8008b84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b86:	07d9      	lsls	r1, r3, #31
 8008b88:	d405      	bmi.n	8008b96 <_vfiprintf_r+0x32>
 8008b8a:	89ab      	ldrh	r3, [r5, #12]
 8008b8c:	059a      	lsls	r2, r3, #22
 8008b8e:	d402      	bmi.n	8008b96 <_vfiprintf_r+0x32>
 8008b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b92:	f000 fb93 	bl	80092bc <__retarget_lock_acquire_recursive>
 8008b96:	89ab      	ldrh	r3, [r5, #12]
 8008b98:	071b      	lsls	r3, r3, #28
 8008b9a:	d501      	bpl.n	8008ba0 <_vfiprintf_r+0x3c>
 8008b9c:	692b      	ldr	r3, [r5, #16]
 8008b9e:	b9eb      	cbnz	r3, 8008bdc <_vfiprintf_r+0x78>
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f000 f960 	bl	8008e68 <__swsetup_r>
 8008ba8:	b1c0      	cbz	r0, 8008bdc <_vfiprintf_r+0x78>
 8008baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bac:	07dc      	lsls	r4, r3, #31
 8008bae:	d50e      	bpl.n	8008bce <_vfiprintf_r+0x6a>
 8008bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb4:	b01d      	add	sp, #116	; 0x74
 8008bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bba:	4b7b      	ldr	r3, [pc, #492]	; (8008da8 <_vfiprintf_r+0x244>)
 8008bbc:	429d      	cmp	r5, r3
 8008bbe:	d101      	bne.n	8008bc4 <_vfiprintf_r+0x60>
 8008bc0:	68b5      	ldr	r5, [r6, #8]
 8008bc2:	e7df      	b.n	8008b84 <_vfiprintf_r+0x20>
 8008bc4:	4b79      	ldr	r3, [pc, #484]	; (8008dac <_vfiprintf_r+0x248>)
 8008bc6:	429d      	cmp	r5, r3
 8008bc8:	bf08      	it	eq
 8008bca:	68f5      	ldreq	r5, [r6, #12]
 8008bcc:	e7da      	b.n	8008b84 <_vfiprintf_r+0x20>
 8008bce:	89ab      	ldrh	r3, [r5, #12]
 8008bd0:	0598      	lsls	r0, r3, #22
 8008bd2:	d4ed      	bmi.n	8008bb0 <_vfiprintf_r+0x4c>
 8008bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bd6:	f000 fb72 	bl	80092be <__retarget_lock_release_recursive>
 8008bda:	e7e9      	b.n	8008bb0 <_vfiprintf_r+0x4c>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	9309      	str	r3, [sp, #36]	; 0x24
 8008be0:	2320      	movs	r3, #32
 8008be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008be6:	2330      	movs	r3, #48	; 0x30
 8008be8:	f04f 0901 	mov.w	r9, #1
 8008bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008db0 <_vfiprintf_r+0x24c>
 8008bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bf8:	4623      	mov	r3, r4
 8008bfa:	469a      	mov	sl, r3
 8008bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c00:	b10a      	cbz	r2, 8008c06 <_vfiprintf_r+0xa2>
 8008c02:	2a25      	cmp	r2, #37	; 0x25
 8008c04:	d1f9      	bne.n	8008bfa <_vfiprintf_r+0x96>
 8008c06:	ebba 0b04 	subs.w	fp, sl, r4
 8008c0a:	d00b      	beq.n	8008c24 <_vfiprintf_r+0xc0>
 8008c0c:	465b      	mov	r3, fp
 8008c0e:	4622      	mov	r2, r4
 8008c10:	4629      	mov	r1, r5
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff ff94 	bl	8008b40 <__sfputs_r>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	f000 80aa 	beq.w	8008d72 <_vfiprintf_r+0x20e>
 8008c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c20:	445a      	add	r2, fp
 8008c22:	9209      	str	r2, [sp, #36]	; 0x24
 8008c24:	f89a 3000 	ldrb.w	r3, [sl]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 80a2 	beq.w	8008d72 <_vfiprintf_r+0x20e>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f04f 32ff 	mov.w	r2, #4294967295
 8008c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c38:	f10a 0a01 	add.w	sl, sl, #1
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	9307      	str	r3, [sp, #28]
 8008c40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c44:	931a      	str	r3, [sp, #104]	; 0x68
 8008c46:	4654      	mov	r4, sl
 8008c48:	2205      	movs	r2, #5
 8008c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4e:	4858      	ldr	r0, [pc, #352]	; (8008db0 <_vfiprintf_r+0x24c>)
 8008c50:	f7fe ff84 	bl	8007b5c <memchr>
 8008c54:	9a04      	ldr	r2, [sp, #16]
 8008c56:	b9d8      	cbnz	r0, 8008c90 <_vfiprintf_r+0x12c>
 8008c58:	06d1      	lsls	r1, r2, #27
 8008c5a:	bf44      	itt	mi
 8008c5c:	2320      	movmi	r3, #32
 8008c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c62:	0713      	lsls	r3, r2, #28
 8008c64:	bf44      	itt	mi
 8008c66:	232b      	movmi	r3, #43	; 0x2b
 8008c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c70:	2b2a      	cmp	r3, #42	; 0x2a
 8008c72:	d015      	beq.n	8008ca0 <_vfiprintf_r+0x13c>
 8008c74:	4654      	mov	r4, sl
 8008c76:	2000      	movs	r0, #0
 8008c78:	f04f 0c0a 	mov.w	ip, #10
 8008c7c:	9a07      	ldr	r2, [sp, #28]
 8008c7e:	4621      	mov	r1, r4
 8008c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c84:	3b30      	subs	r3, #48	; 0x30
 8008c86:	2b09      	cmp	r3, #9
 8008c88:	d94e      	bls.n	8008d28 <_vfiprintf_r+0x1c4>
 8008c8a:	b1b0      	cbz	r0, 8008cba <_vfiprintf_r+0x156>
 8008c8c:	9207      	str	r2, [sp, #28]
 8008c8e:	e014      	b.n	8008cba <_vfiprintf_r+0x156>
 8008c90:	eba0 0308 	sub.w	r3, r0, r8
 8008c94:	fa09 f303 	lsl.w	r3, r9, r3
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	46a2      	mov	sl, r4
 8008c9c:	9304      	str	r3, [sp, #16]
 8008c9e:	e7d2      	b.n	8008c46 <_vfiprintf_r+0xe2>
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	1d19      	adds	r1, r3, #4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	9103      	str	r1, [sp, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	bfbb      	ittet	lt
 8008cac:	425b      	neglt	r3, r3
 8008cae:	f042 0202 	orrlt.w	r2, r2, #2
 8008cb2:	9307      	strge	r3, [sp, #28]
 8008cb4:	9307      	strlt	r3, [sp, #28]
 8008cb6:	bfb8      	it	lt
 8008cb8:	9204      	strlt	r2, [sp, #16]
 8008cba:	7823      	ldrb	r3, [r4, #0]
 8008cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8008cbe:	d10c      	bne.n	8008cda <_vfiprintf_r+0x176>
 8008cc0:	7863      	ldrb	r3, [r4, #1]
 8008cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc4:	d135      	bne.n	8008d32 <_vfiprintf_r+0x1ce>
 8008cc6:	9b03      	ldr	r3, [sp, #12]
 8008cc8:	3402      	adds	r4, #2
 8008cca:	1d1a      	adds	r2, r3, #4
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	9203      	str	r2, [sp, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bfb8      	it	lt
 8008cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cd8:	9305      	str	r3, [sp, #20]
 8008cda:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008db4 <_vfiprintf_r+0x250>
 8008cde:	2203      	movs	r2, #3
 8008ce0:	4650      	mov	r0, sl
 8008ce2:	7821      	ldrb	r1, [r4, #0]
 8008ce4:	f7fe ff3a 	bl	8007b5c <memchr>
 8008ce8:	b140      	cbz	r0, 8008cfc <_vfiprintf_r+0x198>
 8008cea:	2340      	movs	r3, #64	; 0x40
 8008cec:	eba0 000a 	sub.w	r0, r0, sl
 8008cf0:	fa03 f000 	lsl.w	r0, r3, r0
 8008cf4:	9b04      	ldr	r3, [sp, #16]
 8008cf6:	3401      	adds	r4, #1
 8008cf8:	4303      	orrs	r3, r0
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d00:	2206      	movs	r2, #6
 8008d02:	482d      	ldr	r0, [pc, #180]	; (8008db8 <_vfiprintf_r+0x254>)
 8008d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d08:	f7fe ff28 	bl	8007b5c <memchr>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	d03f      	beq.n	8008d90 <_vfiprintf_r+0x22c>
 8008d10:	4b2a      	ldr	r3, [pc, #168]	; (8008dbc <_vfiprintf_r+0x258>)
 8008d12:	bb1b      	cbnz	r3, 8008d5c <_vfiprintf_r+0x1f8>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	3307      	adds	r3, #7
 8008d18:	f023 0307 	bic.w	r3, r3, #7
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d22:	443b      	add	r3, r7
 8008d24:	9309      	str	r3, [sp, #36]	; 0x24
 8008d26:	e767      	b.n	8008bf8 <_vfiprintf_r+0x94>
 8008d28:	460c      	mov	r4, r1
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d30:	e7a5      	b.n	8008c7e <_vfiprintf_r+0x11a>
 8008d32:	2300      	movs	r3, #0
 8008d34:	f04f 0c0a 	mov.w	ip, #10
 8008d38:	4619      	mov	r1, r3
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d44:	3a30      	subs	r2, #48	; 0x30
 8008d46:	2a09      	cmp	r2, #9
 8008d48:	d903      	bls.n	8008d52 <_vfiprintf_r+0x1ee>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0c5      	beq.n	8008cda <_vfiprintf_r+0x176>
 8008d4e:	9105      	str	r1, [sp, #20]
 8008d50:	e7c3      	b.n	8008cda <_vfiprintf_r+0x176>
 8008d52:	4604      	mov	r4, r0
 8008d54:	2301      	movs	r3, #1
 8008d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d5a:	e7f0      	b.n	8008d3e <_vfiprintf_r+0x1da>
 8008d5c:	ab03      	add	r3, sp, #12
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	462a      	mov	r2, r5
 8008d62:	4630      	mov	r0, r6
 8008d64:	4b16      	ldr	r3, [pc, #88]	; (8008dc0 <_vfiprintf_r+0x25c>)
 8008d66:	a904      	add	r1, sp, #16
 8008d68:	f7fc f858 	bl	8004e1c <_printf_float>
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	1c78      	adds	r0, r7, #1
 8008d70:	d1d6      	bne.n	8008d20 <_vfiprintf_r+0x1bc>
 8008d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d74:	07d9      	lsls	r1, r3, #31
 8008d76:	d405      	bmi.n	8008d84 <_vfiprintf_r+0x220>
 8008d78:	89ab      	ldrh	r3, [r5, #12]
 8008d7a:	059a      	lsls	r2, r3, #22
 8008d7c:	d402      	bmi.n	8008d84 <_vfiprintf_r+0x220>
 8008d7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d80:	f000 fa9d 	bl	80092be <__retarget_lock_release_recursive>
 8008d84:	89ab      	ldrh	r3, [r5, #12]
 8008d86:	065b      	lsls	r3, r3, #25
 8008d88:	f53f af12 	bmi.w	8008bb0 <_vfiprintf_r+0x4c>
 8008d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d8e:	e711      	b.n	8008bb4 <_vfiprintf_r+0x50>
 8008d90:	ab03      	add	r3, sp, #12
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	462a      	mov	r2, r5
 8008d96:	4630      	mov	r0, r6
 8008d98:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <_vfiprintf_r+0x25c>)
 8008d9a:	a904      	add	r1, sp, #16
 8008d9c:	f7fc fada 	bl	8005354 <_printf_i>
 8008da0:	e7e4      	b.n	8008d6c <_vfiprintf_r+0x208>
 8008da2:	bf00      	nop
 8008da4:	08009aa4 	.word	0x08009aa4
 8008da8:	08009ac4 	.word	0x08009ac4
 8008dac:	08009a84 	.word	0x08009a84
 8008db0:	08009a34 	.word	0x08009a34
 8008db4:	08009a3a 	.word	0x08009a3a
 8008db8:	08009a3e 	.word	0x08009a3e
 8008dbc:	08004e1d 	.word	0x08004e1d
 8008dc0:	08008b41 	.word	0x08008b41

08008dc4 <__swbuf_r>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	460e      	mov	r6, r1
 8008dc8:	4614      	mov	r4, r2
 8008dca:	4605      	mov	r5, r0
 8008dcc:	b118      	cbz	r0, 8008dd6 <__swbuf_r+0x12>
 8008dce:	6983      	ldr	r3, [r0, #24]
 8008dd0:	b90b      	cbnz	r3, 8008dd6 <__swbuf_r+0x12>
 8008dd2:	f000 f9d5 	bl	8009180 <__sinit>
 8008dd6:	4b21      	ldr	r3, [pc, #132]	; (8008e5c <__swbuf_r+0x98>)
 8008dd8:	429c      	cmp	r4, r3
 8008dda:	d12b      	bne.n	8008e34 <__swbuf_r+0x70>
 8008ddc:	686c      	ldr	r4, [r5, #4]
 8008dde:	69a3      	ldr	r3, [r4, #24]
 8008de0:	60a3      	str	r3, [r4, #8]
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	071a      	lsls	r2, r3, #28
 8008de6:	d52f      	bpl.n	8008e48 <__swbuf_r+0x84>
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	b36b      	cbz	r3, 8008e48 <__swbuf_r+0x84>
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	6820      	ldr	r0, [r4, #0]
 8008df0:	b2f6      	uxtb	r6, r6
 8008df2:	1ac0      	subs	r0, r0, r3
 8008df4:	6963      	ldr	r3, [r4, #20]
 8008df6:	4637      	mov	r7, r6
 8008df8:	4283      	cmp	r3, r0
 8008dfa:	dc04      	bgt.n	8008e06 <__swbuf_r+0x42>
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 f92a 	bl	8009058 <_fflush_r>
 8008e04:	bb30      	cbnz	r0, 8008e54 <__swbuf_r+0x90>
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	3001      	adds	r0, #1
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	60a3      	str	r3, [r4, #8]
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	1c5a      	adds	r2, r3, #1
 8008e12:	6022      	str	r2, [r4, #0]
 8008e14:	701e      	strb	r6, [r3, #0]
 8008e16:	6963      	ldr	r3, [r4, #20]
 8008e18:	4283      	cmp	r3, r0
 8008e1a:	d004      	beq.n	8008e26 <__swbuf_r+0x62>
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	07db      	lsls	r3, r3, #31
 8008e20:	d506      	bpl.n	8008e30 <__swbuf_r+0x6c>
 8008e22:	2e0a      	cmp	r6, #10
 8008e24:	d104      	bne.n	8008e30 <__swbuf_r+0x6c>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 f915 	bl	8009058 <_fflush_r>
 8008e2e:	b988      	cbnz	r0, 8008e54 <__swbuf_r+0x90>
 8008e30:	4638      	mov	r0, r7
 8008e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e34:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <__swbuf_r+0x9c>)
 8008e36:	429c      	cmp	r4, r3
 8008e38:	d101      	bne.n	8008e3e <__swbuf_r+0x7a>
 8008e3a:	68ac      	ldr	r4, [r5, #8]
 8008e3c:	e7cf      	b.n	8008dde <__swbuf_r+0x1a>
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <__swbuf_r+0xa0>)
 8008e40:	429c      	cmp	r4, r3
 8008e42:	bf08      	it	eq
 8008e44:	68ec      	ldreq	r4, [r5, #12]
 8008e46:	e7ca      	b.n	8008dde <__swbuf_r+0x1a>
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f000 f80c 	bl	8008e68 <__swsetup_r>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d0cb      	beq.n	8008dec <__swbuf_r+0x28>
 8008e54:	f04f 37ff 	mov.w	r7, #4294967295
 8008e58:	e7ea      	b.n	8008e30 <__swbuf_r+0x6c>
 8008e5a:	bf00      	nop
 8008e5c:	08009aa4 	.word	0x08009aa4
 8008e60:	08009ac4 	.word	0x08009ac4
 8008e64:	08009a84 	.word	0x08009a84

08008e68 <__swsetup_r>:
 8008e68:	4b32      	ldr	r3, [pc, #200]	; (8008f34 <__swsetup_r+0xcc>)
 8008e6a:	b570      	push	{r4, r5, r6, lr}
 8008e6c:	681d      	ldr	r5, [r3, #0]
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460c      	mov	r4, r1
 8008e72:	b125      	cbz	r5, 8008e7e <__swsetup_r+0x16>
 8008e74:	69ab      	ldr	r3, [r5, #24]
 8008e76:	b913      	cbnz	r3, 8008e7e <__swsetup_r+0x16>
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f000 f981 	bl	8009180 <__sinit>
 8008e7e:	4b2e      	ldr	r3, [pc, #184]	; (8008f38 <__swsetup_r+0xd0>)
 8008e80:	429c      	cmp	r4, r3
 8008e82:	d10f      	bne.n	8008ea4 <__swsetup_r+0x3c>
 8008e84:	686c      	ldr	r4, [r5, #4]
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e8c:	0719      	lsls	r1, r3, #28
 8008e8e:	d42c      	bmi.n	8008eea <__swsetup_r+0x82>
 8008e90:	06dd      	lsls	r5, r3, #27
 8008e92:	d411      	bmi.n	8008eb8 <__swsetup_r+0x50>
 8008e94:	2309      	movs	r3, #9
 8008e96:	6033      	str	r3, [r6, #0]
 8008e98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	e03e      	b.n	8008f22 <__swsetup_r+0xba>
 8008ea4:	4b25      	ldr	r3, [pc, #148]	; (8008f3c <__swsetup_r+0xd4>)
 8008ea6:	429c      	cmp	r4, r3
 8008ea8:	d101      	bne.n	8008eae <__swsetup_r+0x46>
 8008eaa:	68ac      	ldr	r4, [r5, #8]
 8008eac:	e7eb      	b.n	8008e86 <__swsetup_r+0x1e>
 8008eae:	4b24      	ldr	r3, [pc, #144]	; (8008f40 <__swsetup_r+0xd8>)
 8008eb0:	429c      	cmp	r4, r3
 8008eb2:	bf08      	it	eq
 8008eb4:	68ec      	ldreq	r4, [r5, #12]
 8008eb6:	e7e6      	b.n	8008e86 <__swsetup_r+0x1e>
 8008eb8:	0758      	lsls	r0, r3, #29
 8008eba:	d512      	bpl.n	8008ee2 <__swsetup_r+0x7a>
 8008ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ebe:	b141      	cbz	r1, 8008ed2 <__swsetup_r+0x6a>
 8008ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec4:	4299      	cmp	r1, r3
 8008ec6:	d002      	beq.n	8008ece <__swsetup_r+0x66>
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff fb2f 	bl	800852c <_free_r>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ed8:	81a3      	strh	r3, [r4, #12]
 8008eda:	2300      	movs	r3, #0
 8008edc:	6063      	str	r3, [r4, #4]
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	f043 0308 	orr.w	r3, r3, #8
 8008ee8:	81a3      	strh	r3, [r4, #12]
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	b94b      	cbnz	r3, 8008f02 <__swsetup_r+0x9a>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ef8:	d003      	beq.n	8008f02 <__swsetup_r+0x9a>
 8008efa:	4621      	mov	r1, r4
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 fa05 	bl	800930c <__smakebuf_r>
 8008f02:	89a0      	ldrh	r0, [r4, #12]
 8008f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f08:	f010 0301 	ands.w	r3, r0, #1
 8008f0c:	d00a      	beq.n	8008f24 <__swsetup_r+0xbc>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60a3      	str	r3, [r4, #8]
 8008f12:	6963      	ldr	r3, [r4, #20]
 8008f14:	425b      	negs	r3, r3
 8008f16:	61a3      	str	r3, [r4, #24]
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	b943      	cbnz	r3, 8008f2e <__swsetup_r+0xc6>
 8008f1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f20:	d1ba      	bne.n	8008e98 <__swsetup_r+0x30>
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	0781      	lsls	r1, r0, #30
 8008f26:	bf58      	it	pl
 8008f28:	6963      	ldrpl	r3, [r4, #20]
 8008f2a:	60a3      	str	r3, [r4, #8]
 8008f2c:	e7f4      	b.n	8008f18 <__swsetup_r+0xb0>
 8008f2e:	2000      	movs	r0, #0
 8008f30:	e7f7      	b.n	8008f22 <__swsetup_r+0xba>
 8008f32:	bf00      	nop
 8008f34:	2000000c 	.word	0x2000000c
 8008f38:	08009aa4 	.word	0x08009aa4
 8008f3c:	08009ac4 	.word	0x08009ac4
 8008f40:	08009a84 	.word	0x08009a84

08008f44 <abort>:
 8008f44:	2006      	movs	r0, #6
 8008f46:	b508      	push	{r3, lr}
 8008f48:	f000 fa50 	bl	80093ec <raise>
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	f7f8 fa62 	bl	8001416 <_exit>
	...

08008f54 <__sflush_r>:
 8008f54:	898a      	ldrh	r2, [r1, #12]
 8008f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f58:	4605      	mov	r5, r0
 8008f5a:	0710      	lsls	r0, r2, #28
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	d457      	bmi.n	8009010 <__sflush_r+0xbc>
 8008f60:	684b      	ldr	r3, [r1, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	dc04      	bgt.n	8008f70 <__sflush_r+0x1c>
 8008f66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dc01      	bgt.n	8008f70 <__sflush_r+0x1c>
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f72:	2e00      	cmp	r6, #0
 8008f74:	d0fa      	beq.n	8008f6c <__sflush_r+0x18>
 8008f76:	2300      	movs	r3, #0
 8008f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f7c:	682f      	ldr	r7, [r5, #0]
 8008f7e:	602b      	str	r3, [r5, #0]
 8008f80:	d032      	beq.n	8008fe8 <__sflush_r+0x94>
 8008f82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	075a      	lsls	r2, r3, #29
 8008f88:	d505      	bpl.n	8008f96 <__sflush_r+0x42>
 8008f8a:	6863      	ldr	r3, [r4, #4]
 8008f8c:	1ac0      	subs	r0, r0, r3
 8008f8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f90:	b10b      	cbz	r3, 8008f96 <__sflush_r+0x42>
 8008f92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f94:	1ac0      	subs	r0, r0, r3
 8008f96:	2300      	movs	r3, #0
 8008f98:	4602      	mov	r2, r0
 8008f9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	6a21      	ldr	r1, [r4, #32]
 8008fa0:	47b0      	blx	r6
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	d106      	bne.n	8008fb6 <__sflush_r+0x62>
 8008fa8:	6829      	ldr	r1, [r5, #0]
 8008faa:	291d      	cmp	r1, #29
 8008fac:	d82c      	bhi.n	8009008 <__sflush_r+0xb4>
 8008fae:	4a29      	ldr	r2, [pc, #164]	; (8009054 <__sflush_r+0x100>)
 8008fb0:	40ca      	lsrs	r2, r1
 8008fb2:	07d6      	lsls	r6, r2, #31
 8008fb4:	d528      	bpl.n	8009008 <__sflush_r+0xb4>
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	6062      	str	r2, [r4, #4]
 8008fba:	6922      	ldr	r2, [r4, #16]
 8008fbc:	04d9      	lsls	r1, r3, #19
 8008fbe:	6022      	str	r2, [r4, #0]
 8008fc0:	d504      	bpl.n	8008fcc <__sflush_r+0x78>
 8008fc2:	1c42      	adds	r2, r0, #1
 8008fc4:	d101      	bne.n	8008fca <__sflush_r+0x76>
 8008fc6:	682b      	ldr	r3, [r5, #0]
 8008fc8:	b903      	cbnz	r3, 8008fcc <__sflush_r+0x78>
 8008fca:	6560      	str	r0, [r4, #84]	; 0x54
 8008fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fce:	602f      	str	r7, [r5, #0]
 8008fd0:	2900      	cmp	r1, #0
 8008fd2:	d0cb      	beq.n	8008f6c <__sflush_r+0x18>
 8008fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fd8:	4299      	cmp	r1, r3
 8008fda:	d002      	beq.n	8008fe2 <__sflush_r+0x8e>
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f7ff faa5 	bl	800852c <_free_r>
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	6360      	str	r0, [r4, #52]	; 0x34
 8008fe6:	e7c2      	b.n	8008f6e <__sflush_r+0x1a>
 8008fe8:	6a21      	ldr	r1, [r4, #32]
 8008fea:	2301      	movs	r3, #1
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b0      	blx	r6
 8008ff0:	1c41      	adds	r1, r0, #1
 8008ff2:	d1c7      	bne.n	8008f84 <__sflush_r+0x30>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0c4      	beq.n	8008f84 <__sflush_r+0x30>
 8008ffa:	2b1d      	cmp	r3, #29
 8008ffc:	d001      	beq.n	8009002 <__sflush_r+0xae>
 8008ffe:	2b16      	cmp	r3, #22
 8009000:	d101      	bne.n	8009006 <__sflush_r+0xb2>
 8009002:	602f      	str	r7, [r5, #0]
 8009004:	e7b2      	b.n	8008f6c <__sflush_r+0x18>
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800900c:	81a3      	strh	r3, [r4, #12]
 800900e:	e7ae      	b.n	8008f6e <__sflush_r+0x1a>
 8009010:	690f      	ldr	r7, [r1, #16]
 8009012:	2f00      	cmp	r7, #0
 8009014:	d0aa      	beq.n	8008f6c <__sflush_r+0x18>
 8009016:	0793      	lsls	r3, r2, #30
 8009018:	bf18      	it	ne
 800901a:	2300      	movne	r3, #0
 800901c:	680e      	ldr	r6, [r1, #0]
 800901e:	bf08      	it	eq
 8009020:	694b      	ldreq	r3, [r1, #20]
 8009022:	1bf6      	subs	r6, r6, r7
 8009024:	600f      	str	r7, [r1, #0]
 8009026:	608b      	str	r3, [r1, #8]
 8009028:	2e00      	cmp	r6, #0
 800902a:	dd9f      	ble.n	8008f6c <__sflush_r+0x18>
 800902c:	4633      	mov	r3, r6
 800902e:	463a      	mov	r2, r7
 8009030:	4628      	mov	r0, r5
 8009032:	6a21      	ldr	r1, [r4, #32]
 8009034:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009038:	47e0      	blx	ip
 800903a:	2800      	cmp	r0, #0
 800903c:	dc06      	bgt.n	800904c <__sflush_r+0xf8>
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	e790      	b.n	8008f6e <__sflush_r+0x1a>
 800904c:	4407      	add	r7, r0
 800904e:	1a36      	subs	r6, r6, r0
 8009050:	e7ea      	b.n	8009028 <__sflush_r+0xd4>
 8009052:	bf00      	nop
 8009054:	20400001 	.word	0x20400001

08009058 <_fflush_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	690b      	ldr	r3, [r1, #16]
 800905c:	4605      	mov	r5, r0
 800905e:	460c      	mov	r4, r1
 8009060:	b913      	cbnz	r3, 8009068 <_fflush_r+0x10>
 8009062:	2500      	movs	r5, #0
 8009064:	4628      	mov	r0, r5
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	b118      	cbz	r0, 8009072 <_fflush_r+0x1a>
 800906a:	6983      	ldr	r3, [r0, #24]
 800906c:	b90b      	cbnz	r3, 8009072 <_fflush_r+0x1a>
 800906e:	f000 f887 	bl	8009180 <__sinit>
 8009072:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <_fflush_r+0x6c>)
 8009074:	429c      	cmp	r4, r3
 8009076:	d11b      	bne.n	80090b0 <_fflush_r+0x58>
 8009078:	686c      	ldr	r4, [r5, #4]
 800907a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0ef      	beq.n	8009062 <_fflush_r+0xa>
 8009082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009084:	07d0      	lsls	r0, r2, #31
 8009086:	d404      	bmi.n	8009092 <_fflush_r+0x3a>
 8009088:	0599      	lsls	r1, r3, #22
 800908a:	d402      	bmi.n	8009092 <_fflush_r+0x3a>
 800908c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800908e:	f000 f915 	bl	80092bc <__retarget_lock_acquire_recursive>
 8009092:	4628      	mov	r0, r5
 8009094:	4621      	mov	r1, r4
 8009096:	f7ff ff5d 	bl	8008f54 <__sflush_r>
 800909a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800909c:	4605      	mov	r5, r0
 800909e:	07da      	lsls	r2, r3, #31
 80090a0:	d4e0      	bmi.n	8009064 <_fflush_r+0xc>
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	059b      	lsls	r3, r3, #22
 80090a6:	d4dd      	bmi.n	8009064 <_fflush_r+0xc>
 80090a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090aa:	f000 f908 	bl	80092be <__retarget_lock_release_recursive>
 80090ae:	e7d9      	b.n	8009064 <_fflush_r+0xc>
 80090b0:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <_fflush_r+0x70>)
 80090b2:	429c      	cmp	r4, r3
 80090b4:	d101      	bne.n	80090ba <_fflush_r+0x62>
 80090b6:	68ac      	ldr	r4, [r5, #8]
 80090b8:	e7df      	b.n	800907a <_fflush_r+0x22>
 80090ba:	4b04      	ldr	r3, [pc, #16]	; (80090cc <_fflush_r+0x74>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	bf08      	it	eq
 80090c0:	68ec      	ldreq	r4, [r5, #12]
 80090c2:	e7da      	b.n	800907a <_fflush_r+0x22>
 80090c4:	08009aa4 	.word	0x08009aa4
 80090c8:	08009ac4 	.word	0x08009ac4
 80090cc:	08009a84 	.word	0x08009a84

080090d0 <std>:
 80090d0:	2300      	movs	r3, #0
 80090d2:	b510      	push	{r4, lr}
 80090d4:	4604      	mov	r4, r0
 80090d6:	e9c0 3300 	strd	r3, r3, [r0]
 80090da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090de:	6083      	str	r3, [r0, #8]
 80090e0:	8181      	strh	r1, [r0, #12]
 80090e2:	6643      	str	r3, [r0, #100]	; 0x64
 80090e4:	81c2      	strh	r2, [r0, #14]
 80090e6:	6183      	str	r3, [r0, #24]
 80090e8:	4619      	mov	r1, r3
 80090ea:	2208      	movs	r2, #8
 80090ec:	305c      	adds	r0, #92	; 0x5c
 80090ee:	f7fb fdef 	bl	8004cd0 <memset>
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <std+0x38>)
 80090f4:	6224      	str	r4, [r4, #32]
 80090f6:	6263      	str	r3, [r4, #36]	; 0x24
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <std+0x3c>)
 80090fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <std+0x40>)
 80090fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009100:	4b04      	ldr	r3, [pc, #16]	; (8009114 <std+0x44>)
 8009102:	6323      	str	r3, [r4, #48]	; 0x30
 8009104:	bd10      	pop	{r4, pc}
 8009106:	bf00      	nop
 8009108:	08009425 	.word	0x08009425
 800910c:	08009447 	.word	0x08009447
 8009110:	0800947f 	.word	0x0800947f
 8009114:	080094a3 	.word	0x080094a3

08009118 <_cleanup_r>:
 8009118:	4901      	ldr	r1, [pc, #4]	; (8009120 <_cleanup_r+0x8>)
 800911a:	f000 b8af 	b.w	800927c <_fwalk_reent>
 800911e:	bf00      	nop
 8009120:	08009059 	.word	0x08009059

08009124 <__sfmoreglue>:
 8009124:	2268      	movs	r2, #104	; 0x68
 8009126:	b570      	push	{r4, r5, r6, lr}
 8009128:	1e4d      	subs	r5, r1, #1
 800912a:	4355      	muls	r5, r2
 800912c:	460e      	mov	r6, r1
 800912e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009132:	f7ff fa63 	bl	80085fc <_malloc_r>
 8009136:	4604      	mov	r4, r0
 8009138:	b140      	cbz	r0, 800914c <__sfmoreglue+0x28>
 800913a:	2100      	movs	r1, #0
 800913c:	e9c0 1600 	strd	r1, r6, [r0]
 8009140:	300c      	adds	r0, #12
 8009142:	60a0      	str	r0, [r4, #8]
 8009144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009148:	f7fb fdc2 	bl	8004cd0 <memset>
 800914c:	4620      	mov	r0, r4
 800914e:	bd70      	pop	{r4, r5, r6, pc}

08009150 <__sfp_lock_acquire>:
 8009150:	4801      	ldr	r0, [pc, #4]	; (8009158 <__sfp_lock_acquire+0x8>)
 8009152:	f000 b8b3 	b.w	80092bc <__retarget_lock_acquire_recursive>
 8009156:	bf00      	nop
 8009158:	2000039d 	.word	0x2000039d

0800915c <__sfp_lock_release>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__sfp_lock_release+0x8>)
 800915e:	f000 b8ae 	b.w	80092be <__retarget_lock_release_recursive>
 8009162:	bf00      	nop
 8009164:	2000039d 	.word	0x2000039d

08009168 <__sinit_lock_acquire>:
 8009168:	4801      	ldr	r0, [pc, #4]	; (8009170 <__sinit_lock_acquire+0x8>)
 800916a:	f000 b8a7 	b.w	80092bc <__retarget_lock_acquire_recursive>
 800916e:	bf00      	nop
 8009170:	2000039e 	.word	0x2000039e

08009174 <__sinit_lock_release>:
 8009174:	4801      	ldr	r0, [pc, #4]	; (800917c <__sinit_lock_release+0x8>)
 8009176:	f000 b8a2 	b.w	80092be <__retarget_lock_release_recursive>
 800917a:	bf00      	nop
 800917c:	2000039e 	.word	0x2000039e

08009180 <__sinit>:
 8009180:	b510      	push	{r4, lr}
 8009182:	4604      	mov	r4, r0
 8009184:	f7ff fff0 	bl	8009168 <__sinit_lock_acquire>
 8009188:	69a3      	ldr	r3, [r4, #24]
 800918a:	b11b      	cbz	r3, 8009194 <__sinit+0x14>
 800918c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009190:	f7ff bff0 	b.w	8009174 <__sinit_lock_release>
 8009194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009198:	6523      	str	r3, [r4, #80]	; 0x50
 800919a:	4b13      	ldr	r3, [pc, #76]	; (80091e8 <__sinit+0x68>)
 800919c:	4a13      	ldr	r2, [pc, #76]	; (80091ec <__sinit+0x6c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	bf08      	it	eq
 80091a6:	2301      	moveq	r3, #1
 80091a8:	4620      	mov	r0, r4
 80091aa:	bf08      	it	eq
 80091ac:	61a3      	streq	r3, [r4, #24]
 80091ae:	f000 f81f 	bl	80091f0 <__sfp>
 80091b2:	6060      	str	r0, [r4, #4]
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 f81b 	bl	80091f0 <__sfp>
 80091ba:	60a0      	str	r0, [r4, #8]
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 f817 	bl	80091f0 <__sfp>
 80091c2:	2200      	movs	r2, #0
 80091c4:	2104      	movs	r1, #4
 80091c6:	60e0      	str	r0, [r4, #12]
 80091c8:	6860      	ldr	r0, [r4, #4]
 80091ca:	f7ff ff81 	bl	80090d0 <std>
 80091ce:	2201      	movs	r2, #1
 80091d0:	2109      	movs	r1, #9
 80091d2:	68a0      	ldr	r0, [r4, #8]
 80091d4:	f7ff ff7c 	bl	80090d0 <std>
 80091d8:	2202      	movs	r2, #2
 80091da:	2112      	movs	r1, #18
 80091dc:	68e0      	ldr	r0, [r4, #12]
 80091de:	f7ff ff77 	bl	80090d0 <std>
 80091e2:	2301      	movs	r3, #1
 80091e4:	61a3      	str	r3, [r4, #24]
 80091e6:	e7d1      	b.n	800918c <__sinit+0xc>
 80091e8:	0800963c 	.word	0x0800963c
 80091ec:	08009119 	.word	0x08009119

080091f0 <__sfp>:
 80091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f2:	4607      	mov	r7, r0
 80091f4:	f7ff ffac 	bl	8009150 <__sfp_lock_acquire>
 80091f8:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <__sfp+0x84>)
 80091fa:	681e      	ldr	r6, [r3, #0]
 80091fc:	69b3      	ldr	r3, [r6, #24]
 80091fe:	b913      	cbnz	r3, 8009206 <__sfp+0x16>
 8009200:	4630      	mov	r0, r6
 8009202:	f7ff ffbd 	bl	8009180 <__sinit>
 8009206:	3648      	adds	r6, #72	; 0x48
 8009208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800920c:	3b01      	subs	r3, #1
 800920e:	d503      	bpl.n	8009218 <__sfp+0x28>
 8009210:	6833      	ldr	r3, [r6, #0]
 8009212:	b30b      	cbz	r3, 8009258 <__sfp+0x68>
 8009214:	6836      	ldr	r6, [r6, #0]
 8009216:	e7f7      	b.n	8009208 <__sfp+0x18>
 8009218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800921c:	b9d5      	cbnz	r5, 8009254 <__sfp+0x64>
 800921e:	4b16      	ldr	r3, [pc, #88]	; (8009278 <__sfp+0x88>)
 8009220:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009224:	60e3      	str	r3, [r4, #12]
 8009226:	6665      	str	r5, [r4, #100]	; 0x64
 8009228:	f000 f847 	bl	80092ba <__retarget_lock_init_recursive>
 800922c:	f7ff ff96 	bl	800915c <__sfp_lock_release>
 8009230:	2208      	movs	r2, #8
 8009232:	4629      	mov	r1, r5
 8009234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800923c:	6025      	str	r5, [r4, #0]
 800923e:	61a5      	str	r5, [r4, #24]
 8009240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009244:	f7fb fd44 	bl	8004cd0 <memset>
 8009248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800924c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009250:	4620      	mov	r0, r4
 8009252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009254:	3468      	adds	r4, #104	; 0x68
 8009256:	e7d9      	b.n	800920c <__sfp+0x1c>
 8009258:	2104      	movs	r1, #4
 800925a:	4638      	mov	r0, r7
 800925c:	f7ff ff62 	bl	8009124 <__sfmoreglue>
 8009260:	4604      	mov	r4, r0
 8009262:	6030      	str	r0, [r6, #0]
 8009264:	2800      	cmp	r0, #0
 8009266:	d1d5      	bne.n	8009214 <__sfp+0x24>
 8009268:	f7ff ff78 	bl	800915c <__sfp_lock_release>
 800926c:	230c      	movs	r3, #12
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	e7ee      	b.n	8009250 <__sfp+0x60>
 8009272:	bf00      	nop
 8009274:	0800963c 	.word	0x0800963c
 8009278:	ffff0001 	.word	0xffff0001

0800927c <_fwalk_reent>:
 800927c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009280:	4606      	mov	r6, r0
 8009282:	4688      	mov	r8, r1
 8009284:	2700      	movs	r7, #0
 8009286:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800928a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800928e:	f1b9 0901 	subs.w	r9, r9, #1
 8009292:	d505      	bpl.n	80092a0 <_fwalk_reent+0x24>
 8009294:	6824      	ldr	r4, [r4, #0]
 8009296:	2c00      	cmp	r4, #0
 8009298:	d1f7      	bne.n	800928a <_fwalk_reent+0xe>
 800929a:	4638      	mov	r0, r7
 800929c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a0:	89ab      	ldrh	r3, [r5, #12]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d907      	bls.n	80092b6 <_fwalk_reent+0x3a>
 80092a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092aa:	3301      	adds	r3, #1
 80092ac:	d003      	beq.n	80092b6 <_fwalk_reent+0x3a>
 80092ae:	4629      	mov	r1, r5
 80092b0:	4630      	mov	r0, r6
 80092b2:	47c0      	blx	r8
 80092b4:	4307      	orrs	r7, r0
 80092b6:	3568      	adds	r5, #104	; 0x68
 80092b8:	e7e9      	b.n	800928e <_fwalk_reent+0x12>

080092ba <__retarget_lock_init_recursive>:
 80092ba:	4770      	bx	lr

080092bc <__retarget_lock_acquire_recursive>:
 80092bc:	4770      	bx	lr

080092be <__retarget_lock_release_recursive>:
 80092be:	4770      	bx	lr

080092c0 <__swhatbuf_r>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	460e      	mov	r6, r1
 80092c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c8:	4614      	mov	r4, r2
 80092ca:	2900      	cmp	r1, #0
 80092cc:	461d      	mov	r5, r3
 80092ce:	b096      	sub	sp, #88	; 0x58
 80092d0:	da08      	bge.n	80092e4 <__swhatbuf_r+0x24>
 80092d2:	2200      	movs	r2, #0
 80092d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092d8:	602a      	str	r2, [r5, #0]
 80092da:	061a      	lsls	r2, r3, #24
 80092dc:	d410      	bmi.n	8009300 <__swhatbuf_r+0x40>
 80092de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092e2:	e00e      	b.n	8009302 <__swhatbuf_r+0x42>
 80092e4:	466a      	mov	r2, sp
 80092e6:	f000 f903 	bl	80094f0 <_fstat_r>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	dbf1      	blt.n	80092d2 <__swhatbuf_r+0x12>
 80092ee:	9a01      	ldr	r2, [sp, #4]
 80092f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092f8:	425a      	negs	r2, r3
 80092fa:	415a      	adcs	r2, r3
 80092fc:	602a      	str	r2, [r5, #0]
 80092fe:	e7ee      	b.n	80092de <__swhatbuf_r+0x1e>
 8009300:	2340      	movs	r3, #64	; 0x40
 8009302:	2000      	movs	r0, #0
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	b016      	add	sp, #88	; 0x58
 8009308:	bd70      	pop	{r4, r5, r6, pc}
	...

0800930c <__smakebuf_r>:
 800930c:	898b      	ldrh	r3, [r1, #12]
 800930e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009310:	079d      	lsls	r5, r3, #30
 8009312:	4606      	mov	r6, r0
 8009314:	460c      	mov	r4, r1
 8009316:	d507      	bpl.n	8009328 <__smakebuf_r+0x1c>
 8009318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	6123      	str	r3, [r4, #16]
 8009320:	2301      	movs	r3, #1
 8009322:	6163      	str	r3, [r4, #20]
 8009324:	b002      	add	sp, #8
 8009326:	bd70      	pop	{r4, r5, r6, pc}
 8009328:	466a      	mov	r2, sp
 800932a:	ab01      	add	r3, sp, #4
 800932c:	f7ff ffc8 	bl	80092c0 <__swhatbuf_r>
 8009330:	9900      	ldr	r1, [sp, #0]
 8009332:	4605      	mov	r5, r0
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff f961 	bl	80085fc <_malloc_r>
 800933a:	b948      	cbnz	r0, 8009350 <__smakebuf_r+0x44>
 800933c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009340:	059a      	lsls	r2, r3, #22
 8009342:	d4ef      	bmi.n	8009324 <__smakebuf_r+0x18>
 8009344:	f023 0303 	bic.w	r3, r3, #3
 8009348:	f043 0302 	orr.w	r3, r3, #2
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	e7e3      	b.n	8009318 <__smakebuf_r+0xc>
 8009350:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <__smakebuf_r+0x7c>)
 8009352:	62b3      	str	r3, [r6, #40]	; 0x28
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	6020      	str	r0, [r4, #0]
 8009358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800935c:	81a3      	strh	r3, [r4, #12]
 800935e:	9b00      	ldr	r3, [sp, #0]
 8009360:	6120      	str	r0, [r4, #16]
 8009362:	6163      	str	r3, [r4, #20]
 8009364:	9b01      	ldr	r3, [sp, #4]
 8009366:	b15b      	cbz	r3, 8009380 <__smakebuf_r+0x74>
 8009368:	4630      	mov	r0, r6
 800936a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800936e:	f000 f8d1 	bl	8009514 <_isatty_r>
 8009372:	b128      	cbz	r0, 8009380 <__smakebuf_r+0x74>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	f023 0303 	bic.w	r3, r3, #3
 800937a:	f043 0301 	orr.w	r3, r3, #1
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	89a0      	ldrh	r0, [r4, #12]
 8009382:	4305      	orrs	r5, r0
 8009384:	81a5      	strh	r5, [r4, #12]
 8009386:	e7cd      	b.n	8009324 <__smakebuf_r+0x18>
 8009388:	08009119 	.word	0x08009119

0800938c <_malloc_usable_size_r>:
 800938c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009390:	1f18      	subs	r0, r3, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	bfbc      	itt	lt
 8009396:	580b      	ldrlt	r3, [r1, r0]
 8009398:	18c0      	addlt	r0, r0, r3
 800939a:	4770      	bx	lr

0800939c <_raise_r>:
 800939c:	291f      	cmp	r1, #31
 800939e:	b538      	push	{r3, r4, r5, lr}
 80093a0:	4604      	mov	r4, r0
 80093a2:	460d      	mov	r5, r1
 80093a4:	d904      	bls.n	80093b0 <_raise_r+0x14>
 80093a6:	2316      	movs	r3, #22
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	f04f 30ff 	mov.w	r0, #4294967295
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093b2:	b112      	cbz	r2, 80093ba <_raise_r+0x1e>
 80093b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093b8:	b94b      	cbnz	r3, 80093ce <_raise_r+0x32>
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 f830 	bl	8009420 <_getpid_r>
 80093c0:	462a      	mov	r2, r5
 80093c2:	4601      	mov	r1, r0
 80093c4:	4620      	mov	r0, r4
 80093c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ca:	f000 b817 	b.w	80093fc <_kill_r>
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d00a      	beq.n	80093e8 <_raise_r+0x4c>
 80093d2:	1c59      	adds	r1, r3, #1
 80093d4:	d103      	bne.n	80093de <_raise_r+0x42>
 80093d6:	2316      	movs	r3, #22
 80093d8:	6003      	str	r3, [r0, #0]
 80093da:	2001      	movs	r0, #1
 80093dc:	e7e7      	b.n	80093ae <_raise_r+0x12>
 80093de:	2400      	movs	r4, #0
 80093e0:	4628      	mov	r0, r5
 80093e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093e6:	4798      	blx	r3
 80093e8:	2000      	movs	r0, #0
 80093ea:	e7e0      	b.n	80093ae <_raise_r+0x12>

080093ec <raise>:
 80093ec:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <raise+0xc>)
 80093ee:	4601      	mov	r1, r0
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	f7ff bfd3 	b.w	800939c <_raise_r>
 80093f6:	bf00      	nop
 80093f8:	2000000c 	.word	0x2000000c

080093fc <_kill_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	2300      	movs	r3, #0
 8009400:	4d06      	ldr	r5, [pc, #24]	; (800941c <_kill_r+0x20>)
 8009402:	4604      	mov	r4, r0
 8009404:	4608      	mov	r0, r1
 8009406:	4611      	mov	r1, r2
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	f7f7 fff4 	bl	80013f6 <_kill>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d102      	bne.n	8009418 <_kill_r+0x1c>
 8009412:	682b      	ldr	r3, [r5, #0]
 8009414:	b103      	cbz	r3, 8009418 <_kill_r+0x1c>
 8009416:	6023      	str	r3, [r4, #0]
 8009418:	bd38      	pop	{r3, r4, r5, pc}
 800941a:	bf00      	nop
 800941c:	20000398 	.word	0x20000398

08009420 <_getpid_r>:
 8009420:	f7f7 bfe2 	b.w	80013e8 <_getpid>

08009424 <__sread>:
 8009424:	b510      	push	{r4, lr}
 8009426:	460c      	mov	r4, r1
 8009428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942c:	f000 f894 	bl	8009558 <_read_r>
 8009430:	2800      	cmp	r0, #0
 8009432:	bfab      	itete	ge
 8009434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009436:	89a3      	ldrhlt	r3, [r4, #12]
 8009438:	181b      	addge	r3, r3, r0
 800943a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800943e:	bfac      	ite	ge
 8009440:	6563      	strge	r3, [r4, #84]	; 0x54
 8009442:	81a3      	strhlt	r3, [r4, #12]
 8009444:	bd10      	pop	{r4, pc}

08009446 <__swrite>:
 8009446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944a:	461f      	mov	r7, r3
 800944c:	898b      	ldrh	r3, [r1, #12]
 800944e:	4605      	mov	r5, r0
 8009450:	05db      	lsls	r3, r3, #23
 8009452:	460c      	mov	r4, r1
 8009454:	4616      	mov	r6, r2
 8009456:	d505      	bpl.n	8009464 <__swrite+0x1e>
 8009458:	2302      	movs	r3, #2
 800945a:	2200      	movs	r2, #0
 800945c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009460:	f000 f868 	bl	8009534 <_lseek_r>
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	4632      	mov	r2, r6
 8009468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	4628      	mov	r0, r5
 8009470:	463b      	mov	r3, r7
 8009472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947a:	f000 b817 	b.w	80094ac <_write_r>

0800947e <__sseek>:
 800947e:	b510      	push	{r4, lr}
 8009480:	460c      	mov	r4, r1
 8009482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009486:	f000 f855 	bl	8009534 <_lseek_r>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	bf15      	itete	ne
 8009490:	6560      	strne	r0, [r4, #84]	; 0x54
 8009492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800949a:	81a3      	strheq	r3, [r4, #12]
 800949c:	bf18      	it	ne
 800949e:	81a3      	strhne	r3, [r4, #12]
 80094a0:	bd10      	pop	{r4, pc}

080094a2 <__sclose>:
 80094a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a6:	f000 b813 	b.w	80094d0 <_close_r>
	...

080094ac <_write_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	2200      	movs	r2, #0
 80094b6:	4d05      	ldr	r5, [pc, #20]	; (80094cc <_write_r+0x20>)
 80094b8:	602a      	str	r2, [r5, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f7f7 ffd2 	bl	8001464 <_write>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_write_r+0x1e>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_write_r+0x1e>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20000398 	.word	0x20000398

080094d0 <_close_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	2300      	movs	r3, #0
 80094d4:	4d05      	ldr	r5, [pc, #20]	; (80094ec <_close_r+0x1c>)
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7f7 ffde 	bl	800149c <_close>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_close_r+0x1a>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_close_r+0x1a>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	20000398 	.word	0x20000398

080094f0 <_fstat_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	2300      	movs	r3, #0
 80094f4:	4d06      	ldr	r5, [pc, #24]	; (8009510 <_fstat_r+0x20>)
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	4611      	mov	r1, r2
 80094fc:	602b      	str	r3, [r5, #0]
 80094fe:	f7f7 ffd8 	bl	80014b2 <_fstat>
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	d102      	bne.n	800950c <_fstat_r+0x1c>
 8009506:	682b      	ldr	r3, [r5, #0]
 8009508:	b103      	cbz	r3, 800950c <_fstat_r+0x1c>
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	bd38      	pop	{r3, r4, r5, pc}
 800950e:	bf00      	nop
 8009510:	20000398 	.word	0x20000398

08009514 <_isatty_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	2300      	movs	r3, #0
 8009518:	4d05      	ldr	r5, [pc, #20]	; (8009530 <_isatty_r+0x1c>)
 800951a:	4604      	mov	r4, r0
 800951c:	4608      	mov	r0, r1
 800951e:	602b      	str	r3, [r5, #0]
 8009520:	f7f7 ffd6 	bl	80014d0 <_isatty>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_isatty_r+0x1a>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_isatty_r+0x1a>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	20000398 	.word	0x20000398

08009534 <_lseek_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4604      	mov	r4, r0
 8009538:	4608      	mov	r0, r1
 800953a:	4611      	mov	r1, r2
 800953c:	2200      	movs	r2, #0
 800953e:	4d05      	ldr	r5, [pc, #20]	; (8009554 <_lseek_r+0x20>)
 8009540:	602a      	str	r2, [r5, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	f7f7 ffce 	bl	80014e4 <_lseek>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_lseek_r+0x1e>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_lseek_r+0x1e>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	20000398 	.word	0x20000398

08009558 <_read_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4604      	mov	r4, r0
 800955c:	4608      	mov	r0, r1
 800955e:	4611      	mov	r1, r2
 8009560:	2200      	movs	r2, #0
 8009562:	4d05      	ldr	r5, [pc, #20]	; (8009578 <_read_r+0x20>)
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f7 ff5f 	bl	800142a <_read>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_read_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_read_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	20000398 	.word	0x20000398

0800957c <_init>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr

08009588 <_fini>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr

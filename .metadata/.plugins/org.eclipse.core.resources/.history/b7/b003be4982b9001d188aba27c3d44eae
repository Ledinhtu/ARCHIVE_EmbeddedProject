/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include "dht.h"
#include "delay_timer.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t data_rx;
char buff[50];
DHT_HandleTypeDef DHT11;

void HW_init() {
	HAL_Delay(5000);
}

static void DHT_SetPinOut(DHT_HandleTypeDef* DHT)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
			__HAL_RCC_GPIOA_CLK_ENABLE();
			__HAL_RCC_GPIOB_CLK_ENABLE();
			__HAL_RCC_GPIOC_CLK_ENABLE();
			__HAL_RCC_GPIOD_CLK_ENABLE();
	HAL_GPIO_WritePin(DHT->Port, DHT->Pin, GPIO_PIN_SET);
	GPIO_InitStruct.Pin = DHT->Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
}

static void DHT_SetPinIn(DHT_HandleTypeDef* DHT)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Pin = DHT->Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
}

static GPIO_PinState DHT_ReadPin(DHT_HandleTypeDef* DHT)
{
	GPIO_PinState PinState;
	PinState =  HAL_GPIO_ReadPin(DHT->Port, DHT->Pin);
	return PinState;
}

static void DHT_WritePin(DHT_HandleTypeDef* DHT, GPIO_PinState PinState)
{
	HAL_GPIO_WritePin(DHT->Port, DHT->Pin, PinState);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

	if (data_rx == 'a') {
//		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
	} else if (data_rx == 'b') {
//		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
	}

	HAL_UART_Receive_IT(&huart1, &data_rx, 1);
}

static void DHT_DelayUs(DHT_HandleTypeDef* DHT, uint16_t Time)
{
	TIM_DelayUs(DHT->Timer, Time);
}


static dht_err_t DHT_AwaitPinState(DHT_HandleTypeDef* DHT, uint32_t timeout,
									GPIO_PinState expected_pin_state, uint32_t* duration)
{
	DHT_SetPinIn(DHT);
    for (uint32_t i = 0; i < timeout; i += 2)
    {
        // need to wait at least a single interval to prevent reading a jitter
    	DHT_DelayUs(DHT, 2);
        if (DHT_ReadPin(DHT) == expected_pin_state)
        {
        	if(duration)
        		*duration = i;
            return DHT_OK;
        }
    }

    return DHT_ERR_TIMEOUT;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  DHT_Init(&DHT11, &htim2, GPIOC, GPIO_PIN_13);
//  HW_init();
  int ret = 3;
  uint32_t duration;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
//	  time = HAL_GetTick();
//	  HAL_UART_Transmit(&huart1,(uint8_t* )str, strlen(str), 300 );
//	  time = HAL_GetTick() - time ;
//	  sprintf(buff, " Spend time: %ld \n", time);
//	  HAL_UART_Transmit(&huart1,(uint8_t* )buff, strlen(buff), 300 );
//	  HAL_UART_Receive_IT(&huart1, &data_rx, 1);
//	  nothing();
//	  HAL_Delay(1000);

	  ret = DHT_AwaitPinState(&DHT11, 5000000, GPIO_PIN_RESET, &duration);
	  if(ret) {
		  sprintf(buff, " Erorr Code: %d \n", ret);
//		  sprintf(buff, " Erorr Code: \n");

		  HAL_UART_Transmit(&huart1,(uint8_t* )buff, strlen(buff), 300 );
	  } else {
		  sprintf(buff, " Duration: %ld \n", duration);
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		  TIM_DelayMs(&htim2, 2000);
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	  }
//	  TIM_DelayMs(&htim2, 2000);

//	  DHT_SetPinOut(&DHT11);
//	  DHT_WritePin(&DHT11, GPIO_PIN_SET);
//	  DHT_SetPinIn(&DHT11);
//	  ret = DHT_ReadPin(&DHT11);
//	  sprintf(buff, " Pin State 1: %d \n", ret);
//	  HAL_UART_Transmit(&huart1,(uint8_t* )buff, strlen(buff), 300 );
//	  TIM_DelayMs(&htim2, 2000);
//
//	  DHT_SetPinOut(&DHT11);
//	  DHT_WritePin(&DHT11, GPIO_PIN_RESET);
//	  DHT_SetPinIn(&DHT11);
//	  ret = DHT_ReadPin(&DHT11);
//	  sprintf(buff, " Pin State 2: %d \n", ret);
//	  HAL_UART_Transmit(&huart1,(uint8_t* )buff, strlen(buff), 300 );
//	  TIM_DelayMs(&htim2, 2000);

//	  DHT_SetPinOut(&DHT11);
//	  DHT_WritePin(&DHT11, GPIO_PIN_SET); // off
//	  DHT_SetPinIn(&DHT11);
//	  TIM_DelayMs(&htim2, 2000);
//	  	  	  ret = DHT_ReadPin(&DHT11);
//	  	  	  sprintf(buff, " Pin State 1: %d \n", ret);
//	  	  HAL_UART_Transmit(&huart1,(uint8_t* )buff, strlen(buff), 300 );
//	  	TIM_DelayMs(&htim2, 5000);
//	  DHT_SetPinOut(&DHT11);
//	  DHT_WritePin(&DHT11, GPIO_PIN_RESET); // on
//
//	  TIM_DelayMs(&htim2, 2000);
//	  DHT_SetPinIn(&DHT11);
//	  	  ret = DHT_ReadPin(&DHT11);
//	  	  sprintf(buff, " Pin State 2: %d \n", ret);
//	  	HAL_UART_Transmit(&huart1,(uint8_t* )buff, strlen(buff), 300 );
//	  	TIM_DelayMs(&htim2, 5000);

//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	  Blink_LED(&DHT11);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

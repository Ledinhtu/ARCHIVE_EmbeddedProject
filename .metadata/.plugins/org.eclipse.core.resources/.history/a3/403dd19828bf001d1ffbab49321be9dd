/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

#include "dht.h"
#include "delay_timer.h"
#include "LiquidCrystal_I2C.h"
#include "uart_handle.h"
#include "dc_motor.h"

#include "handle.h"
#include "handle_task.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for mytTaskReadDHT */
osThreadId_t mytTaskReadDHTHandle;
const osThreadAttr_t mytTaskReadDHT_attributes = {
  .name = "mytTaskReadDHT",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow6,
};
/* Definitions for myTaskTxUart */
osThreadId_t myTaskTxUartHandle;
const osThreadAttr_t myTaskTxUart_attributes = {
  .name = "myTaskTxUart",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityLow4,
};
/* Definitions for myTaskHandleUart */
osThreadId_t myTaskHandleUartHandle;
const osThreadAttr_t myTaskHandleUart_attributes = {
  .name = "myTaskHandleUart",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow5,
};
/* Definitions for myTaskMotorControl */
osThreadId_t myTaskMotorControlHandle;
const osThreadAttr_t myTaskMotorControl_attributes = {
  .name = "myTaskMotorControl",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow7,
};
/* Definitions for motorQueue */
osMessageQueueId_t motorQueueHandle;
const osMessageQueueAttr_t motorQueue_attributes = {
  .name = "motorQueue"
};
/* Definitions for binReadDHTCplt */
osSemaphoreId_t binReadDHTCpltHandle;
const osSemaphoreAttr_t binReadDHTCplt_attributes = {
  .name = "binReadDHTCplt"
};
/* Definitions for binRxRequest */
osSemaphoreId_t binRxRequestHandle;
const osSemaphoreAttr_t binRxRequest_attributes = {
  .name = "binRxRequest"
};
/* USER CODE BEGIN PV */
DHT_HandleTypeDef DHT11;
LiquidCrystal_I2C LCD;
DC_Motor_HandleTypeDef MOTOR;

int8_t Temp_levels[NUMBER_LEVELS + 1];
uint8_t RHumi_levels[NUMBER_LEVELS + 1];

uint8_t Speed_Temp_mode[NUMBER_LEVELS] = {0};
uint8_t Speed_RHumi_mode[NUMBER_LEVELS] = {0};

MODE controll_mode = MANUAL_MODE;

volatile char Rx_data[RX_DATA_SIZE];



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
void StartDefaultTask(void *argument);
void StartTaskReadDHT(void *argument);
void StartTaskTxUart(void *argument);
void StartTaskHandleUart(void *argument);
void StartTaskMotorControl(void *argument);

/* USER CODE BEGIN PFP */
void TX_uart(UART_HandleTypeDef *lcd,const char* str, ...);
int __io_putchar(int ch);
void speed_control();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//uint8_t str[] = "hello FreeRTOS\n";
//float temp = 16;
uint8_t Rx_char;
uint8_t Rx_index = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

	if(huart->Instance == USART2){
		if (Rx_char == '\n') {
			Rx_data[Rx_index] = '\0';
			Rx_index = 0;

			osSemaphoreRelease(binRxRequestHandle);
		} else {
			Rx_data[Rx_index++] = Rx_char;
		}
		HAL_UART_Receive_IT(&huart2, &Rx_char, 1);
	}
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	Temp_levels[0] = DHT11_MIN_TEMPERATURE;
	Temp_levels[NUMBER_LEVELS] = DHT11_MAX_TEMPERATURE;
	RHumi_levels[0] = DHT11_MIN_RELATIVE_HUMIDITY;
	RHumi_levels[NUMBER_LEVELS] = DHT11_MAX_RELATIVE_HUMIDITY;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  HAL_UART_Receive_IT(&huart2, &Rx_char, 1);
//  HAL_UART_Receive_DMA(&huart2, (uint8_t *)Rx_data, RX_DATA_SIZE);

  DHT_Init(&DHT11, &htim2, DHT11_GPIO_Port, DHT11_Pin);
  lcd_init(&LCD, &hi2c1, LCD_ADDR_DEFAULT);
  DC_Motor_Init(&MOTOR, &htim3,TIM_CHANNEL_1, MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin);
  HAL_Delay(2000);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binReadDHTCplt */
  binReadDHTCpltHandle = osSemaphoreNew(1, 1, &binReadDHTCplt_attributes);

  /* creation of binRxRequest */
  binRxRequestHandle = osSemaphoreNew(1, 1, &binRxRequest_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of motorQueue */
  motorQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &motorQueue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of mytTaskReadDHT */
  mytTaskReadDHTHandle = osThreadNew(StartTaskReadDHT, NULL, &mytTaskReadDHT_attributes);

  /* creation of myTaskTxUart */
  myTaskTxUartHandle = osThreadNew(StartTaskTxUart, NULL, &myTaskTxUart_attributes);

  /* creation of myTaskHandleUart */
  myTaskHandleUartHandle = osThreadNew(StartTaskHandleUart, NULL, &myTaskHandleUart_attributes);

  /* creation of myTaskMotorControl */
  myTaskMotorControlHandle = osThreadNew(StartTaskMotorControl, NULL, &myTaskMotorControl_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 719;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : MOTOR_IN1_Pin MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

int __io_putchar(int ch){
	HAL_StatusTypeDef ret = 0;
	ret = HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0x10);
	if(ret != HAL_OK) {
		return -1;
	}
	return ch;
}

/*
 * @note Max length of data string is TX_ARRAY_SIZE
 */
void TX_uart(UART_HandleTypeDef *huart,const char* str, ...)
{
  char stringArray[TX_ARRAY_SIZE];

  va_list args;
  va_start(args, str);
  vsprintf(stringArray, str, args);
  va_end(args);

  HAL_UART_Transmit(huart, (uint8_t *)stringArray, strlen(stringArray), 100);
}


void speed_control() {
	switch (controll_mode) {
			case TEMPERATURE_MODE:
				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_SET);
				for (uint8_t i = 0; i < NUMBER_LEVELS; i++) {
	//				mul = DHT11.Temp;
					if (DHT11.Temp >= Temp_levels[i] && DHT11.Temp <= Temp_levels[i+1]){
	//					__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, 900);
	//					__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_Temp_mode[i]* MOTOR.Timer->Instance->ARR/100);

						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_Temp_mode[i]* MOTOR.Timer->Instance->ARR/100);
						break;
					}

				}
				break;
			case HUMIDITY_MODE:
				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_SET);
				for (uint8_t i = 0; i < NUMBER_LEVELS; ++i) {
					if (DHT11.Humi >= RHumi_levels[i] && DHT11.Humi <= RHumi_levels[i+1]){
						__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, Speed_RHumi_mode[i]* MOTOR.Timer->Instance->ARR/100);
						break;
					}
				}
				break;
			case MANUAL_MODE:
	//			__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, (int)MOTOR.setSpeed*MOTOR.Timer->Instance->ARR/100);
	//			__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, 900);

				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_SET);

				__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, (int)MOTOR.setSpeed*MOTOR.Timer->Instance->ARR/100);
				break;
			case MOTOR_STOP_MODE:
				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_RESET);
				break;
			default:
				HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_RESET);
				break;
		}
}

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
	__IO uint32_t ticks = osKernelGetTickCount();
  /* Infinite loop */
  for(;;)
  {
	  ticks += 1000;
//	  printf("%s", str);
	  osDelayUntil(ticks);
//    osDelay(1000);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTaskReadDHT */
/**
* @brief Function implementing the mytTaskReadDHT thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadDHT */
void StartTaskReadDHT(void *argument)
{
  /* USER CODE BEGIN StartTaskReadDHT */
	dht_err_t ret = DHT_OK;
	const uint16_t msg = SET_DHT_Q;
  /* Infinite loop */
  for(;;)
  {
	ret = DHT_ReadTempHum(&DHT11);
//	if (!ret) {
		osSemaphoreRelease(binReadDHTCpltHandle);
		osMessageQueuePut(motorQueueHandle, &msg, NULL, 0);
//	}
    osDelay(pdMS_TO_TICKS(2000));
  }
  /* USER CODE END StartTaskReadDHT */
}

/* USER CODE BEGIN Header_StartTaskTxUart */
/**
* @brief Function implementing the myTaskTxUart thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTxUart */
void StartTaskTxUart(void *argument)
{
  /* USER CODE BEGIN StartTaskTxUart */
  /* Infinite loop */

  for(;;)
  {
	osSemaphoreAcquire(binReadDHTCpltHandle, osWaitForever);
	if (DHT11.Error) { // erorr
		TX_uart(&huart2, "DHT_STT %d\n", DHT11.Error);

		lcd_set_cursor(&LCD, 0, 0);
		lcd_printf(&LCD, "RH: __.__%%");
		lcd_set_cursor(&LCD, 1, 0);
		lcd_printf(&LCD, "Temp: __.__%cC", (char)223);

	} else {
		TX_uart(&huart2, "DHT_STT %d\nRH %f\nTEMP %f\n", DHT11.Error, DHT11.Humi, DHT11.Temp);

		lcd_set_cursor(&LCD, 0, 0);
		lcd_printf(&LCD, "RH: %.2f%%", DHT11.Humi);
		lcd_set_cursor(&LCD, 1, 0);
		lcd_printf(&LCD, "Temp: %.2f%cC", DHT11.Temp, (char)223);

	}
//    osDelay(pdMS_TO_TICKS(200));
  }
  /* USER CODE END StartTaskTxUart */
}

/* USER CODE BEGIN Header_StartTaskHandleUart */
/**
* @brief Function implementing the myTaskHandleUart thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskHandleUart */
void StartTaskHandleUart(void *argument)
{
  /* USER CODE BEGIN StartTaskHandleUart */
	handle_err_t ret;
	uint16_t msg = SET_UART_Q;
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(binRxRequestHandle, osWaitForever);
#ifdef DEBUG
	  TX_uart(&huart2, Rx_data);
#endif

	  ret = Get_Arg((char*)Rx_data);

	  if(!ret) {
	  	ret = Handle_Request();
	  	osMessageQueuePut(motorQueueHandle, &msg, NULL, 0);
	  }
#ifdef DEBUG
	  TX_uart(&huart2, "End H\n");
#endif
//    osDelay(pdMS_TO_TICKS(1000));
  }
  /* USER CODE END StartTaskHandleUart */
}

/* USER CODE BEGIN Header_StartTaskMotorControl */
/**
* @brief Function implementing the myTaskMotorControl thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorControl */
void StartTaskMotorControl(void *argument)
{
  /* USER CODE BEGIN StartTaskMotorControl */
	uint16_t msg;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(motorQueueHandle, &msg, 0, osWaitForever);
//			TX_uart(&huart2, "Set mod %d", msg);

	  switch (msg) {
		case SET_UART_Q :
			TX_uart(&huart2, "Set mod UART\n");
			speed_control();
//			HAL_GPIO_WritePin(MOTOR.Port_IN1, MOTOR.Pin_IN1, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(MOTOR.Port_IN2, MOTOR.Pin_IN2, GPIO_PIN_SET);
//
//			__HAL_TIM_SetCompare(MOTOR.Timer,MOTOR.TIMChanel, 900);

			TX_uart(&huart2, "Set mod UART END\n");

			break;
		case SET_DHT_Q :
			TX_uart(&huart2, "Set DHT\n");
////			TX_uart(&huart2, "Set mod %d", msg);
			break;
		default:
			break;
	  }

//    osDelay(pdMS_TO_TICKS(1000));
  }
  /* USER CODE END StartTaskMotorControl */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM4 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

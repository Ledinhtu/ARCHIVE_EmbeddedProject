/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include "dht.h"
#include "delay_timer.h"
#include "LiquidCrystal_I2C.h"
#include "uart_handle.h"

#include "task.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum
{
	TEMPERATURE_MODE = 1,
	HUMIDITY_MODE,
	MANUAL_MODE
} MODE;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define NUMBER_LEVELS 4
#define GPIO_PORT_DHT11 GPIOC
#define GPIO_PIN_DHT11 GPIO_PIN_15
#define RX_DATA_SIZE 10

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* USER CODE BEGIN PV */
LiquidCrystal_I2C hlcd;
DHT_HandleTypeDef DHT11;

int8_t Temp_levels[NUMBER_LEVELS + 1];

uint8_t RHumi_levels[NUMBER_LEVELS + 1];

uint8_t Speed_Temp_mode[NUMBER_LEVELS] = {0};
uint8_t Speed_RHumi_mode[NUMBER_LEVELS] = {0};
uint8_t Speed_Manual_mode = 0;	// %

MODE controll_mode = MANUAL_MODE;

volatile char Rx_data[RX_DATA_SIZE];
uint8_t Rx_data_begin = 0;
uint8_t Rx_data_end = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
//void TASK_1();
//void TASK_2();
//void TASK_3();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t data_rx;
char buff[RX_DATA_SIZE];
int16_t ret = 0;

uint32_t time = 0;

void HW_init(int delay) {
	HAL_Delay(delay);
}


//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//
////	if (data_rx == 'a') {
////		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
////	} else if (data_rx == 'b') {
////		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
////	}
//
//	HAL_UART_Receive_IT(&huart2, &data_rx, 1);
//}

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
  HAL_GPIO_TogglePin (blink_led_GPIO_Port, blink_led_Pin);  // toggle PA0
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

//  HAL_UART_Receive_DMA(&huart2, (uint8_t *) Rx_data, RX_DATA_SIZE);
//  HAL_UART_Transmit(&huart2,(uint8_t* )Rx_data, strlen((char *)Rx_data), 30 );
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	Temp_levels[0] = DHT11_MIN_TEMPERATURE;
	Temp_levels[NUMBER_LEVELS] = DHT11_MAX_TEMPERATURE;

	RHumi_levels[0] = DHT11_MIN_RELATIVE_HUMIDITY;
	RHumi_levels[NUMBER_LEVELS] = DHT11_MAX_RELATIVE_HUMIDITY;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM2_Init();
  MX_I2C1_Init();
  MX_TIM3_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  DHT_Init(&DHT11, &htim2, GPIO_PORT_DHT11, GPIO_PIN_DHT11);
  lcd_init(&hlcd, &hi2c1, LCD_ADDR_DEFAULT);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)Rx_data, RX_DATA_SIZE);
  HW_init(2000);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  time = HAL_GetTick();
//	  ret = DHT_ReadTempHum(&DHT11);
//	  encoder_cnt = htim1.Instance->CNT;
//	  if(ret) {
//		  sprintf(buff, " Error Code: %d\n Encoder Count = %d\n", ret, encoder_cnt);
//		  HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), 300 );
//
//	  } else {
//		  sprintf(buff, "Read OK\n Temp: %f\n Humi: %f Time: %ld\n", DHT11.Temp, DHT11.Humi, HAL_GetTick() - time);
//		  HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), 300 );
//
//		  sprintf(buff, " Encoder Count = %d\n", encoder_cnt);
//		  		  HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), 300 );
//
//		  sprintf(buff, " Raw Data: %d %d %d %d %d\n", DHT11.raw_data[0], DHT11.raw_data[1], DHT11.raw_data[2], DHT11.raw_data[3], DHT11.raw_data[4]);
//		  HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), 300 );
//	  }
//
//	  lcd_set_cursor(&hlcd, 0, 0);//(char)223,
////	  lcd_printf(&hlcd, "RH=%d.%1d%c T=%d.%1d%C", DHT11.raw_data[0], DHT11.raw_data[1],  (char)223,DHT11.raw_data[2], DHT11.raw_data[3] );
//	  lcd_printf(&hlcd, "RH=%d%% T=%d%c%C", DHT11.raw_data[0], DHT11.raw_data[2], (char)223 );
//	  lcd_set_cursor(&hlcd, 1,4);
//	  lcd_printf(&hlcd, "%02d/%02d/%02d", 12, 12, 12);
//
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
////	  for(int i=0;i<1000;i=i+100)
////	    {
////	      __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,i);
////	      HAL_Delay(2000);
////	     }
//	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,999);
//	  TIM_DelayMs(&htim2, 2000);

//	  do {
//		  lcd_set_cursor(&hlcd, 0, 0);
//		  lcd_printf(&hlcd, "TEMPERATURE:%d%cC", 12, (char)223);
//		  lcd_set_cursor(&hlcd, 1, 0);
//		  lcd_printf(&hlcd, "R_HUMIDITY : %d%%", 95);
//		  HAL_Delay(2000);
//		  time = HAL_GetTick();
//		  lcd_clear_display(&hlcd);
//		  sprintf(buff, " TIME EXE: %ld\n", HAL_GetTick()-time);
//		  HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), 300 );
//
//		  uint32_t uart_time = HAL_GetTick();
//		  sprintf(buff, " As you can see above that when the control will\n");
//		  HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), 30 );
//		  sprintf(buff, " uart TIME EXE: %ld\n", HAL_GetTick()-uart_time);
//		  HAL_UART_Transmit(&huart2,(uint8_t* )buff, strlen(buff), 300 );
//		  HAL_Delay(1000);
//	  } while (0);

//	  do {
//		 int flag = 0;
//		 for (int8_t i = Rx_data_begin, cnt = 0; cnt < RX_DATA_SIZE; cnt ++, i++) {
//			if(Rx_data[i] == '\n') {
//				Rx_data_end = i;
//				flag = 1;	//
//				break;
//			}
//
//			if (i == RX_DATA_SIZE-1) {
//				i = -1;
//			}
//		}
//		if(flag) {
//			for (int8_t i = Rx_data_begin, cnt = 0, j = 0; cnt < RX_DATA_SIZE; cnt ++, i++, j++) {
//				buff[j] = Rx_data[i];
//				if(i == Rx_data_end) {
//					Rx_data[i] = 0;
//					buff[j+1] = '\0';
//					HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff),30);
//
//					if (i == RX_DATA_SIZE-1) {
//						Rx_data_begin = 0;
//					} else {
//						Rx_data_begin = Rx_data_end + 1;
//					}
//					break;
//				}
//
//				if (i == RX_DATA_SIZE-1) {
//					i = -1;
//				}
//			 }
//			flag = 0;
//		}
//
//	 } while (0);

//	  do{
//		  ret = Check_Commad((char *)Rx_data, &Rx_data_begin, &Rx_data_end, RX_DATA_SIZE);
//		  if (ret == HANDLE_OK) {
//			  Handle_Command((char *)Rx_data, &Rx_data_begin, &Rx_data_end, RX_DATA_SIZE);
//		  }
//
//	  } while(0);


//	 HAL_Delay (5000);
//	 HAL_UART_DMAStop(&huart2);
//	 HAL_GPIO_WritePin(blink_led_GPIO_Port, blink_led_Pin, GPIO_PIN_SET);
//	 HAL_Delay (1000);
//	 if(Rx_data[RX_DATA_SIZE-1]) {
//		 HAL_UART_Receive_DMA(&huart2, (uint8_t *) Rx_data, RX_DATA_SIZE);
//		 HAL_GPIO_WritePin(blink_led_GPIO_Port, blink_led_Pin, GPIO_PIN_RESET);
//	 } //





    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 719;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blink_led_GPIO_Port, blink_led_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : blink_led_Pin */
  GPIO_InitStruct.Pin = blink_led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(blink_led_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
